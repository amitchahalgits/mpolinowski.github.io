"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[8570],{867324:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>_,frontMatter:()=>l,metadata:()=>a,toc:()=>o});var i=t(785893),r=t(603905);const l={sidebar_position:4410,slug:"2023-04-19",title:"(Re) Introduction to Tensorflow Natural Language Processing",authors:"mpolinowski",tags:["Python","Machine Learning","Tensorflow","Keras"],description:"Using Tensorflow to classify Disaster Tweet."},s="(Re) Introduction to Tensorflow Natural Language Processing",a={id:"IoT-and-Machine-Learning/ML/2023-04-19-tensorflow-natural-language-processing/index",title:"(Re) Introduction to Tensorflow Natural Language Processing",description:"Using Tensorflow to classify Disaster Tweet.",source:"@site/docs/IoT-and-Machine-Learning/ML/2023-04-19-tensorflow-natural-language-processing/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2023-04-19-tensorflow-natural-language-processing",slug:"/IoT-and-Machine-Learning/ML/2023-04-19-tensorflow-natural-language-processing/2023-04-19",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-04-19-tensorflow-natural-language-processing/2023-04-19",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2023-04-19-tensorflow-natural-language-processing/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Tensorflow",permalink:"/docs/tags/tensorflow"},{label:"Keras",permalink:"/docs/tags/keras"}],version:"current",sidebarPosition:4410,frontMatter:{sidebar_position:4410,slug:"2023-04-19",title:"(Re) Introduction to Tensorflow Natural Language Processing",authors:"mpolinowski",tags:["Python","Machine Learning","Tensorflow","Keras"],description:"Using Tensorflow to classify Disaster Tweet."},sidebar:"tutorialSidebar",previous:{title:"Detection of Exoplanets using Transit Photometry",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-06-26-autogluon-transit-photometry-dataset/2023-06-26"},next:{title:"3D Image Classification",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-04-16-deep-3d-image-segmentation/2023-04-16"}},d={},o=[{value:"Abstract",id:"abstract",level:2},{value:"Dataset",id:"dataset",level:2},{value:"Exploration",id:"exploration",level:3},{value:"Train Test Split",id:"train-test-split",level:3},{value:"Tokenization and Embedding",id:"tokenization-and-embedding",level:3},{value:"Tokenization",id:"tokenization",level:4},{value:"Embedding",id:"embedding",level:4},{value:"Experiments",id:"experiments",level:2},{value:"Model 0: Naive Bayes tf-ids",id:"model-0-naive-bayes-tf-ids",level:3},{value:"Tokenization and Modelling Pipeline",id:"tokenization-and-modelling-pipeline",level:4},{value:"Evaluation",id:"evaluation",level:4},{value:"Predictions",id:"predictions",level:4},{value:"Model 0 Metrics",id:"model-0-metrics",level:4},{value:"Model 1: Simple Dense",id:"model-1-simple-dense",level:3},{value:"Model Building and Training",id:"model-building-and-training",level:4},{value:"Model Evaluation",id:"model-evaluation",level:4},{value:"Model 1 Metrics",id:"model-1-metrics",level:4},{value:"Visualize the Embedding",id:"visualize-the-embedding",level:4},{value:"Model 2: LSTM Long-term Short-term Memory RNN",id:"model-2-lstm-long-term-short-term-memory-rnn",level:3},{value:"Model Building and Training",id:"model-building-and-training-1",level:4},{value:"Model Evaluation",id:"model-evaluation-1",level:4},{value:"Model 2 Metrics",id:"model-2-metrics",level:4},{value:"Model 3: GRU Gated Recurrent Unit RNN",id:"model-3-gru-gated-recurrent-unit-rnn",level:3},{value:"Model Building and Training",id:"model-building-and-training-2",level:4},{value:"Model Evaluation",id:"model-evaluation-2",level:4},{value:"Model 3 Metrics",id:"model-3-metrics",level:4},{value:"Model 4: Bi-Directional RNN",id:"model-4-bi-directional-rnn",level:3},{value:"Model Building and Training",id:"model-building-and-training-3",level:4},{value:"Model Evaluation",id:"model-evaluation-3",level:4},{value:"Model 4 Metrics",id:"model-4-metrics",level:4},{value:"Model 5: Conv1D",id:"model-5-conv1d",level:3},{value:"Model Building and Training",id:"model-building-and-training-4",level:4},{value:"Model Evaluation",id:"model-evaluation-4",level:4},{value:"Model 5 Metrics",id:"model-5-metrics",level:4},{value:"Model 6: Transfer Learning Feature Extractor",id:"model-6-transfer-learning-feature-extractor",level:3},{value:"Model Building and Training",id:"model-building-and-training-5",level:4},{value:"Model Evaluation",id:"model-evaluation-5",level:4},{value:"Model 6 Metrics",id:"model-6-metrics",level:4},{value:"Model 6a (added Dense Layer)",id:"model-6a-added-dense-layer",level:3},{value:"Model Evaluation",id:"model-evaluation-6",level:4},{value:"Model 6a Metrics",id:"model-6a-metrics",level:4},{value:"Model 6b: Transfer Learning Feature Extractor (10% Dataset)",id:"model-6b-transfer-learning-feature-extractor-10-dataset",level:3},{value:"Dataset",id:"dataset-1",level:4},{value:"Model Building and Training",id:"model-building-and-training-6",level:4},{value:"Model Evaluation",id:"model-evaluation-7",level:4},{value:"Model 6b Metrics",id:"model-6b-metrics",level:4},{value:"Model 6c: USE Data Leakage Issue (10% Dataset)",id:"model-6c-use-data-leakage-issue-10-dataset",level:3},{value:"Data Leakage Issue",id:"data-leakage-issue",level:4},{value:"Training 10% Split",id:"training-10-split",level:5},{value:"Model Evaluation",id:"model-evaluation-8",level:4},{value:"Model 6c Metrics",id:"model-6c-metrics",level:4},{value:"Compare Experiments",id:"compare-experiments",level:2},{value:"Saving &amp; Loading Trained Model",id:"saving--loading-trained-model",level:2},{value:"HDF5 Format (Higher Compatibility to 3rd Parties)",id:"hdf5-format-higher-compatibility-to-3rd-parties",level:3},{value:"Saved Model Format (Tensorflow Default)",id:"saved-model-format-tensorflow-default",level:3},{value:"Best Model Evaluation",id:"best-model-evaluation",level:2},{value:"False Positives",id:"false-positives",level:4},{value:"False Negatives",id:"false-negatives",level:4},{value:"Test Dataset Predictions",id:"test-dataset-predictions",level:2},{value:"Speed/Score Tradeoff",id:"speedscore-tradeoff",level:2},{value:"Comparing the Performance of all Models",id:"comparing-the-performance-of-all-models",level:4}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.ah)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Victoria Harbour, Hongkong",src:t(476806).Z+"",width:"2385",height:"823"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#re-introduction-to-tensorflow-natural-language-processing",children:"(Re) Introduction to Tensorflow Natural Language Processing"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#abstract",children:"Abstract"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#dataset",children:"Dataset"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#exploration",children:"Exploration"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#train-test-split",children:"Train Test Split"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#tokenization-and-embedding",children:"Tokenization and Embedding"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#tokenization",children:"Tokenization"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#embedding",children:"Embedding"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#experiments",children:"Experiments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#model-0-naive-bayes-tf-ids",children:"Model 0: Naive Bayes tf-ids"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#tokenization-and-modelling-pipeline",children:"Tokenization and Modelling Pipeline"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#evaluation",children:"Evaluation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#predictions",children:"Predictions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-0-metrics",children:"Model 0 Metrics"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#model-1-simple-dense",children:"Model 1: Simple Dense"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-building-and-training",children:"Model Building and Training"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-evaluation",children:"Model Evaluation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-1-metrics",children:"Model 1 Metrics"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#visualize-the-embedding",children:"Visualize the Embedding"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#model-2-lstm-long-term-short-term-memory-rnn",children:"Model 2: LSTM Long-term Short-term Memory RNN"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-building-and-training-1",children:"Model Building and Training"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-evaluation-1",children:"Model Evaluation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-2-metrics",children:"Model 2 Metrics"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#model-3-gru-gated-recurrent-unit-rnn",children:"Model 3: GRU Gated Recurrent Unit RNN"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-building-and-training-2",children:"Model Building and Training"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-evaluation-2",children:"Model Evaluation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-3-metrics",children:"Model 3 Metrics"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#model-4-bi-directional-rnn",children:"Model 4: Bi-Directional RNN"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-building-and-training-3",children:"Model Building and Training"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-evaluation-3",children:"Model Evaluation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-4-metrics",children:"Model 4 Metrics"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#model-5-conv1d",children:"Model 5: Conv1D"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-building-and-training-4",children:"Model Building and Training"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-evaluation-4",children:"Model Evaluation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-5-metrics",children:"Model 5 Metrics"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#model-6-transfer-learning-feature-extractor",children:"Model 6: Transfer Learning Feature Extractor"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-building-and-training-5",children:"Model Building and Training"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-evaluation-5",children:"Model Evaluation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-6-metrics",children:"Model 6 Metrics"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#model-6a-added-dense-layer",children:"Model 6a (added Dense Layer)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-evaluation-6",children:"Model Evaluation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-6a-metrics",children:"Model 6a Metrics"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#model-6b-transfer-learning-feature-extractor-10-dataset",children:"Model 6b: Transfer Learning Feature Extractor (10% Dataset)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#dataset-1",children:"Dataset"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-building-and-training-6",children:"Model Building and Training"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-evaluation-7",children:"Model Evaluation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-6b-metrics",children:"Model 6b Metrics"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#model-6c-use-data-leakage-issue-10-dataset",children:"Model 6c: USE Data Leakage Issue (10% Dataset)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#data-leakage-issue",children:"Data Leakage Issue"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#training-10-split",children:"Training 10% Split"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-evaluation-8",children:"Model Evaluation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-6c-metrics",children:"Model 6c Metrics"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#compare-experiments",children:"Compare Experiments"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#saving--loading-trained-model",children:"Saving & Loading Trained Model"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#hdf5-format-higher-compatibility-to-3rd-parties",children:"HDF5 Format (Higher Compatibility to 3rd Parties)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#saved-model-format-tensorflow-default",children:"Saved Model Format (Tensorflow Default)"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#best-model-evaluation",children:"Best Model Evaluation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#false-positives",children:"False Positives"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#false-negatives",children:"False Negatives"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#test-dataset-predictions",children:"Test Dataset Predictions"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#speedscore-tradeoff",children:"Speed/Score Tradeoff"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#comparing-the-performance-of-all-models",children:"Comparing the Performance of all Models"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/mpolinowski/tf-nlp-2023",children:"Github Repository"})}),"\n",(0,i.jsx)(n.h1,{id:"re-introduction-to-tensorflow-natural-language-processing",children:"(Re) Introduction to Tensorflow Natural Language Processing"}),"\n",(0,i.jsx)(n.h2,{id:"abstract",children:"Abstract"}),"\n",(0,i.jsx)(n.p,{children:"Twitter has become an important communication channel in times of emergency.\nThe ubiquitousness of smartphones enables people to announce an emergency they\u2019re observing in real-time. Because of this, more agencies are interested in programatically monitoring Twitter (i.e. disaster relief organizations and news agencies)."}),"\n",(0,i.jsx)(n.p,{children:"But, it\u2019s not always clear whether a person\u2019s words are actually announcing a disaster. Here Machine Learning can help us segmenting large quantities of incoming messages. But what type Machine Learning is the best suited?"}),"\n",(0,i.jsx)(n.p,{children:"I am running a couple of experiments to show the performace of different solutions and their trade-off - how long does it take to get a prediction from a given algorithm? Is a higher accuracy worth the wait?"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"(Re) Introduction to Tensorflow Natural Language Processing",src:t(12253).Z+"",width:"1010",height:"701"})}),"\n",(0,i.jsx)(n.h2,{id:"dataset",children:"Dataset"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://storage.googleapis.com/ztm_tf_course/nlp_getting_started.zip",children:"https://www.kaggle.com/competitions/nlp-getting-started/data"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:".\n\u251c\u2500\u2500 data\n\u2502\xa0\xa0 \u251c\u2500\u2500 test.csv\n\u2502\xa0\xa0 \u2514\u2500\u2500 train.csv\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import datetime\nimport io\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport random\nimport time\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.pipeline import Pipeline\nimport tensorflow as tf\n# tf-hub bug https://stackoverflow.com/questions/69339917/importerror-cannot-import-name-dnn-logit-fn-builder-from-partially-initialize\nfrom tensorflow_estimator.python.estimator.canned.dnn import dnn_logit_fn_builder\nimport tensorflow_hub as hub\nfrom tensorflow.keras.layers import (\n    TextVectorization,\n    Embedding,\n    Input,\n    Dense,\n    GlobalAveragePooling1D,\n    GlobalMaxPool1D,\n    LSTM,\n    GRU,\n    Bidirectional,\n    Conv1D\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from helper_functions import (\n    create_tensorboard_callback,\n    plot_loss_curves,\n    compare_histories,\n    calculate_metrics,\n    time_to_prediction\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"SEED = 42\nLOG_DIR = 'tensorboad'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"exploration",children:"Exploration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"train_df = pd.read_csv('data/train.csv')\ntest_df = pd.read_csv('data/test.csv')\n\ntrain_df.head(5)\n# target 1 = disaster / 0 = not a disaster\n"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{}),(0,i.jsx)(n.th,{children:"id"}),(0,i.jsx)(n.th,{children:"keyword"}),(0,i.jsx)(n.th,{children:"location"}),(0,i.jsx)(n.th,{children:"text"}),(0,i.jsx)(n.th,{children:"target"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"NaN"}),(0,i.jsx)(n.td,{children:"NaN"}),(0,i.jsx)(n.td,{children:"Our Deeds are the Reason of this #earthquake M..."}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"4"}),(0,i.jsx)(n.td,{children:"NaN"}),(0,i.jsx)(n.td,{children:"NaN"}),(0,i.jsx)(n.td,{children:"Forest fire near La Ronge Sask. Canada"}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:"5"}),(0,i.jsx)(n.td,{children:"NaN"}),(0,i.jsx)(n.td,{children:"NaN"}),(0,i.jsx)(n.td,{children:"All residents asked to 'shelter in place' are ..."}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"6"}),(0,i.jsx)(n.td,{children:"NaN"}),(0,i.jsx)(n.td,{children:"NaN"}),(0,i.jsx)(n.td,{children:"13,000 people receive #wildfires evacuation or..."}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"4"}),(0,i.jsx)(n.td,{children:"7"}),(0,i.jsx)(n.td,{children:"NaN"}),(0,i.jsx)(n.td,{children:"NaN"}),(0,i.jsx)(n.td,{children:"Just got sent this photo from Ruby #Alaska as ..."}),(0,i.jsx)(n.td,{children:"1"})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# checking if the dataset is balanced\nprint(train_df.target.value_counts())\n# 0    4342\n# 1    3271\n\nprint(len(train_df), len(test_df))\n# 7613 3263\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"train_df_shuffle = train_df.sample(frac=1, random_state=SEED)\n\ntrain_df_shuffle.head(5)\n"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{}),(0,i.jsx)(n.th,{children:"id"}),(0,i.jsx)(n.th,{children:"keyword"}),(0,i.jsx)(n.th,{children:"location"}),(0,i.jsx)(n.th,{children:"text"}),(0,i.jsx)(n.th,{children:"target"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2644"}),(0,i.jsx)(n.td,{children:"3796"}),(0,i.jsx)(n.td,{children:"destruction"}),(0,i.jsx)(n.td,{children:"NaN"}),(0,i.jsx)(n.td,{children:"So you have a new weapon that can cause un-ima..."}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2227"}),(0,i.jsx)(n.td,{children:"3185"}),(0,i.jsx)(n.td,{children:"deluge"}),(0,i.jsx)(n.td,{children:"NaN"}),(0,i.jsx)(n.td,{children:"The f$&@ing things I do for #GISHWHES Just..."}),(0,i.jsx)(n.td,{children:"0"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"5448"}),(0,i.jsx)(n.td,{children:"7769"}),(0,i.jsx)(n.td,{children:"police"}),(0,i.jsx)(n.td,{children:"UK"}),(0,i.jsx)(n.td,{children:"DT @georgegalloway: RT @Galloway4Mayor: \x89\xdb\xcfThe..."}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"132"}),(0,i.jsx)(n.td,{children:"191"}),(0,i.jsx)(n.td,{children:"aftershock"}),(0,i.jsx)(n.td,{children:"NaN"}),(0,i.jsx)(n.td,{children:"Aftershock back to school kick off was great. ..."}),(0,i.jsx)(n.td,{children:"0"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"6845"}),(0,i.jsx)(n.td,{children:"9810"}),(0,i.jsx)(n.td,{children:"trauma"}),(0,i.jsx)(n.td,{children:"Montgomery County, MD"}),(0,i.jsx)(n.td,{children:"in response to trauma Children of Addicts deve..."}),(0,i.jsx)(n.td,{children:"0"})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'random_index = random.randint(0, len(train_df)-5)\n\nfor row in train_df_shuffle[[\'text\', \'target\']][random_index:random_index+5].itertuples():\n    _, text, target = row\n    print(f"Target: {target}","(disaster)" if target>0 else "(not a disaster)")\n    print(f"Text: {text}\\n")\n    print("---\\n")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Target: 1 (disaster)\nText: @WesleyLowery ?????? how are you going to survive this devastation?\n\n---\n\nTarget: 0 (not a disaster)\nText: Hollywood movie about trapped miners released in Chile http://t.co/xe0EE1Fzfh\n\n---\n\nTarget: 0 (not a disaster)\nText: #sing #tsunami Beginners #computer tutorial.: http://t.co/ukQYbhxMQI Everyone Wants To Learn To Build A Pc. Re http://t.co/iDWS2ZgYsa\n\n---\n\nTarget: 1 (disaster)\nText: #Reddit updates #content #policy promises to quarantine \x89\xdb\xf7extremely offensive\x89\xdb\xaa communities http://t.co/EHGtZhKAn4\n\n---\n\nTarget: 1 (disaster)\nText: Japan Marks 70th Anniversary of Hiroshima Atomic Bombing http://t.co/cQLM9jOJOP\n\n---\n"})}),"\n",(0,i.jsx)(n.h3,{id:"train-test-split",children:"Train Test Split"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"train_tweets, val_tweets, train_labels, val_labels = train_test_split(\n    train_df_shuffle['text'].to_numpy(),\n    train_df_shuffle['target'].to_numpy(),\n    test_size=0.1,\n    random_state=SEED)\n\nprint(len(train_tweets), len(val_tweets))\n# 6851 762\n"})}),"\n",(0,i.jsx)(n.h3,{id:"tokenization-and-embedding",children:"Tokenization and Embedding"}),"\n",(0,i.jsxs)(n.p,{children:["Machine learning models take vectors (arrays of numbers) as input. When working with text, the first thing you must do is come up with a strategy to convert strings to numbers (or to ",(0,i.jsx)(n.a,{href:"https://www.tensorflow.org/text/guide/word_embeddings",children:'"vectorize" the text'}),") before feeding it to the model."]}),"\n",(0,i.jsx)(n.h4,{id:"tokenization",children:"Tokenization"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://www.tensorflow.org/tutorials/keras/text_classification",children:"TextVectorization layer"})," is a Keras layer to standardize, tokenize, and vectorize the dataset."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# find average number of words in tweets\naverage_tokens_per_tweet=round(sum([len(i.split()) for i in train_tweets])/len(train_tweets))\nprint(average_tokens_per_tweet)\n# 15\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# create text vectorizer\nmax_features = 10000 # limit to most common words\nsequence_length = 15 # limit to average number of words in tweets\n\ntext_vectorizer = TextVectorization(\n    max_tokens=max_features, # set a value to only include most common words\n    standardize='lower_and_strip_punctuation',\n    split='whitespace',\n    ngrams=None, # set value to form common word groups\n    output_mode='int',\n    output_sequence_length=sequence_length, # set value to limit tweet size\n    pad_to_max_tokens=True # fluff tweets that are shorter than set max length\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# fit text vectorizer to training data\ntext_vectorizer.adapt(train_tweets)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# test fitted vectorizer\nsample_sentence1 = "Next I\'m buying Coca-Cola to put the cocaine back in"\nsample_sentence2 = "Hey guys, wanna feel old? I\'m 40. You\'re welcome."\nsample_sentence3 = "Beef chicken pork bacon chuck shortloin sirloin shank eu, bresaola voluptate in enim ea kielbasa laboris brisket laborum, jowl labore id porkchop elit ad commodo."\ntext_vectorizer([sample_sentence1,sample_sentence2,sample_sentence3])\n\n# <tf.Tensor: shape=(3, 15), dtype=int64, numpy=\n# array([[ 274,   32, 4046,    1,    5,  370,    2, 5962,   88,    4,    0,\n#            0,    0,    0,    0],\n#        [ 706,  576,  473,  214,  206,   32,  354,  172, 1569,    0,    0,\n#            0,    0,    0,    0],\n#        [   1, 4013,    1,    1,    1,    1,    1,    1, 3878,    1,    1,\n#            4,    1,    1,    1]])>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"random_tweet = random.choice(train_tweets)\nvector = text_vectorizer([random_tweet])\n\nprint(\n    f'Tweet: {random_tweet}\\\n    \\n\\nVector: {vector}'\n)\n\n# Tweet: Ignition Knock (Detonation) Sensor ACDelco GM Original Equipment 213-4678\n# Vector: [[ 888  885  580 1767    1 1671 1623 1863    1    1    1    0    0    0\n#      0]]\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# get unique vocabulary\nwords_in_vocab = text_vectorizer.get_vocabulary()\ntop_10_words = words_in_vocab[:10]\nbottom_10_words = words_in_vocab[-10:]\n\nprint(\n    len(words_in_vocab),\n    top_10_words,\n    bottom_10_words\n)\n# 10000\n# ['', '[UNK]', 'the', 'a', 'in', 'to', 'of', 'and', 'i', 'is']\n# ['painthey', 'painful', 'paine', 'paging', 'pageshi', 'pages', 'paeds', 'pads', 'padres', 'paddytomlinson1']\n\n# The [UNK] stands for unknown - meaning outside of the 10.000 tokens limit\n"})}),"\n",(0,i.jsx)(n.h4,{id:"embedding",children:"Embedding"}),"\n",(0,i.jsxs)(n.p,{children:["The now vectorize data can be used as the first layer of the classification model, feeding transformed strings into an ",(0,i.jsx)(n.a,{href:"https://www.tensorflow.org/text/guide/word_embeddings",children:"Embedding layer"}),". The Embedding layer takes the integer-encoded vocabulary and looks up the embedding vector for each word-index. These vectors are learned as the model trains. The vectors add a dimension to the output array."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# create embedding layer\nembedding = Embedding(\n    input_dim = max_features,\n    output_dim = 128,\n    input_length = sequence_length\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"random_tweet = random.choice(train_tweets)\nsample_embedd = embedding(text_vectorizer([random_tweet]))\n\nprint(\n    f'Tweet: {random_tweet}\\\n    \\n\\nEmbedding: {sample_embedd}, {sample_embedd.shape}'\n)\n\n# Tweet: @biggangVH1 looks like George was having a panic attack. LOL.    \n\n# Embedding: [[[-0.02811491 -0.02710991 -0.04273632 ...  0.01480064 -0.02413664\n#     0.02612327]\n#   [-0.013403   -0.04941868  0.03431542 ...  0.00432001 -0.03614474\n#     0.04559914]\n#   [ 0.00161045 -0.02501463  0.02461291 ... -0.02123032  0.02596099\n#    -0.02626952]\n#   ...\n#   [ 0.03742747  0.03854593 -0.02052871 ...  0.01287705 -0.04228047\n#    -0.02316147]\n#   [ 0.03742747  0.03854593 -0.02052871 ...  0.01287705 -0.04228047\n#    -0.02316147]\n#   [ 0.03742747  0.03854593 -0.02052871 ...  0.01287705 -0.04228047\n#    -0.02316147]]], (1, 15, 128)\n\n# the shape tells us the the layer received 1 input with the length of\n# 15 words (as set before and filled up with zeros if tweet is shorter)\n# and each of those words is now represented by a 128dim vector\n"})}),"\n",(0,i.jsx)(n.h2,{id:"experiments",children:"Experiments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Model 0: Naive Bayes (baseline)"}),"\n",(0,i.jsx)(n.li,{children:"Model 1: Feed-forward neural network (dense model)"}),"\n",(0,i.jsx)(n.li,{children:"Model 2: LSTM model (RNN)"}),"\n",(0,i.jsx)(n.li,{children:"Model 3: GRU model (RNN)"}),"\n",(0,i.jsx)(n.li,{children:"Model 4: Bidirectional-LSTM model (RNN)"}),"\n",(0,i.jsx)(n.li,{children:"Model 5: 1D-Convolutional Neural Network (CNN)"}),"\n",(0,i.jsx)(n.li,{children:"Model 6: TensorFlow Hub pre-trained NLP feature extractor"}),"\n",(0,i.jsx)(n.li,{children:"Model 6a: Model 6 with added complexity (add dense layer)"}),"\n",(0,i.jsx)(n.li,{children:"Model 6b: Model 6a with 10% training data"}),"\n",(0,i.jsx)(n.li,{children:"Model 6c: Model 6a with 10% training data (fixed sampling)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"model-0-naive-bayes-tf-ids",children:"Model 0: Naive Bayes tf-ids"}),"\n",(0,i.jsx)(n.h4,{id:"tokenization-and-modelling-pipeline",children:"Tokenization and Modelling Pipeline"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'model_0 = Pipeline([\n    ("tfidf", TfidfVectorizer()),\n    ("clf", MultinomialNB())\n])\n\n# fit to training data\nmodel_0.fit(train_tweets, train_labels)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"evaluation",children:"Evaluation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'baseline_score = model_0.score(val_tweets, val_labels)\nprint(f"Baseline accuracy: {baseline_score*100:.2f}%")\n# Baseline accuracy: 79.27%\n'})}),"\n",(0,i.jsx)(n.h4,{id:"predictions",children:"Predictions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"baseline_preds = model_0.predict(val_tweets)\n\nprint(val_tweets[:10])\nprint(baseline_preds[:10])\n# array([1, 1, 1, 0, 0, 1, 1, 1, 1, 0])\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"[1 1 1 0 0 1 1 1 1 0]"})}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["'DFR EP016 Monthly Meltdown - On Dnbheaven 2015.08.06 ",(0,i.jsx)(n.a,{href:"http://t.co/EjKRf8N8A8",children:"http://t.co/EjKRf8N8A8"})," #Drum and Bass #heavy #nasty ",(0,i.jsx)(n.a,{href:"http://t.co/SPHWE6wFI5",children:"http://t.co/SPHWE6wFI5"}),"'"]}),"\n",(0,i.jsxs)(n.li,{children:["'FedEx no longer to transport bioterror germs in wake of anthrax lab mishaps ",(0,i.jsx)(n.a,{href:"http://t.co/qZQc8WWwcN",children:"http://t.co/qZQc8WWwcN"})," via @usatoday'"]}),"\n",(0,i.jsxs)(n.li,{children:["'Gunmen kill four in El Salvador bus attack: Suspected Salvadoran gang members killed four people and wounded s... ",(0,i.jsx)(n.a,{href:"http://t.co/CNtwB6ScZj",children:"http://t.co/CNtwB6ScZj"}),"'"]}),"\n",(0,i.jsx)(n.li,{children:"'@camilacabello97 Internally and externally screaming'"}),"\n",(0,i.jsxs)(n.li,{children:["'Radiation emergency #preparedness starts with knowing to: get inside stay inside and stay tuned ",(0,i.jsx)(n.a,{href:"http://t.co/RFFPqBAz2F",children:"http://t.co/RFFPqBAz2F"})," via @CDCgov'"]}),"\n",(0,i.jsxs)(n.li,{children:["'Investigators rule catastrophic structural failure resulted in 2014 Virg.. Related Articles: ",(0,i.jsx)(n.a,{href:"http://t.co/Cy1LFeNyV8",children:"http://t.co/Cy1LFeNyV8"}),"'"]}),"\n",(0,i.jsxs)(n.li,{children:["'How the West was burned: Thousands of wildfires ablaze in #California alone ",(0,i.jsx)(n.a,{href:"http://t.co/iCSjGZ9tE1",children:"http://t.co/iCSjGZ9tE1"})," #climate #energy ",(0,i.jsx)(n.a,{href:"http://t.co/9FxmN0l0Bd",children:"http://t.co/9FxmN0l0Bd"}),"'"]}),"\n",(0,i.jsxs)(n.li,{children:["\"Map: Typhoon Soudelor's predicted path as it approaches Taiwan; expected to make landfall over southern China by S\\x89\xdb_ ",(0,i.jsx)(n.a,{href:"http://t.co/JDVSGVhlIs",children:"http://t.co/JDVSGVhlIs"}),'"']}),"\n",(0,i.jsxs)(n.li,{children:["'\\x89\xdb\xaa93 blasts accused Yeda Yakub dies in Karachi of heart attack ",(0,i.jsx)(n.a,{href:"http://t.co/mfKqyxd8XG",children:"http://t.co/mfKqyxd8XG"})," #Mumbai'"]}),"\n",(0,i.jsxs)(n.li,{children:["'My ears are bleeding  ",(0,i.jsx)(n.a,{href:"https://t.co/k5KnNwugwT",children:"https://t.co/k5KnNwugwT"}),"']"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"baseline_metrics = calculate_metrics(\n    y_true=val_labels,\n    y_pred=baseline_preds\n)\n\nprint(f\"Accuracy: {baseline_metrics['accuracy']}, Precision: {baseline_metrics['precision']}, Recall: {baseline_metrics['recall']}, F1-Score: {baseline_metrics['f1']}\")\n\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-0-metrics",children:"Model 0 Metrics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Accuracy: 79.26509186351706,"}),"\n",(0,i.jsx)(n.li,{children:"Precision: 0.8111390004213173,"}),"\n",(0,i.jsx)(n.li,{children:"Recall: 0.7926509186351706,"}),"\n",(0,i.jsx)(n.li,{children:"F1-Score: 0.7862189758049549"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"model-1-simple-dense",children:"Model 1: Simple Dense"}),"\n",(0,i.jsx)(n.h4,{id:"model-building-and-training",children:"Model Building and Training"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# build model\n## inputs are single 1-dimensional strings\ninputs = Input(shape=(1,), dtype=tf.string)\n## turn strings into numbers\nx = text_vectorizer(inputs)\n## create embedding from vectorized input\nx = embedding(x)\n## instead of returning a prediction for every token/word\n## condense all to a single prediction for entire input string\nx = GlobalAveragePooling1D()(x)\n## sigmoid activated output for binary classification\noutputs = Dense(1, activation='sigmoid')(x)\n\nmodel_1 = tf.keras.Model(inputs, outputs, name='model_1_dense')\nmodel_1.summary()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Model: "model_1_dense"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n input_3 (InputLayer)        [(None, 1)]               0         \n                                                                 \n text_vectorization (TextVec  (None, 15)               0         \n torization)                                                     \n                                                                 \n embedding (Embedding)       (None, 15, 128)           1280000   \n                                                                 \n global_average_pooling1d (G  (None, 128)              0         \n lobalAveragePooling1D)                                          \n                                                                 \n dense_2 (Dense)             (None, 1)                 129       \n                                                                 \n=================================================================\nTotal params: 1,280,129\nTrainable params: 1,280,129\nNon-trainable params: 0\n_________________________________________________________________\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# compile model\nmodel_1.compile(\n    loss='binary_crossentropy',\n    optimizer=tf.keras.optimizers.Adam(),\n    metrics=['accuracy']\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# there seems to be an issue with the tb callback\n# https://github.com/keras-team/keras/issues/15163\n# changed histogram_freq=0\n## create a callback to track experiments in TensorBoard\ndef create_tensorboard_callback_bugged(dir_name, experiment_name):\n    # log progress to log directory\n    log_dir = dir_name + "/" + experiment_name + "/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")\n    tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=0)\n    print(f"INFO :: Saving TensorBoard Log to: {log_dir}")\n    return tensorboard_callback\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# model training\nmodel_1_history = model_1.fit(\n    x=train_tweets,\n    y=train_labels,\n    epochs=5,\n    validation_data=(val_tweets, val_labels),\n    callbacks=[create_tensorboard_callback_bugged(\n        dir_name=LOG_DIR,\n        experiment_name='model_1_dense'\n    )]\n)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-evaluation",children:"Model Evaluation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_1.evaluate(val_tweets, val_labels)\n# loss: 0.4830 - accuracy: 0.7887\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'model_1_preds = model_1.predict(val_tweets)\nsample_prediction=model_1_preds[0]\nprint(f"Prediction: {sample_prediction}","(disaster)" if sample_prediction>0.5 else "(not a disaster)")\n# Prediction: [0.32197773] (not a disaster)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# convert model prediction probabilities to binary label format\nmodel_1_preds = tf.squeeze(tf.round(model_1_preds))\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_1_metrics = calculate_metrics(\n    y_true=val_labels,\n    y_pred=model_1_preds\n)\n\nprint(model_1_metrics)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-1-metrics",children:"Model 1 Metrics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Accuracy: 78.87139107611549"}),"\n",(0,i.jsx)(n.li,{children:"Precision: 0.7969619064252174"}),"\n",(0,i.jsx)(n.li,{children:"Recall: 0.7887139107611548"}),"\n",(0,i.jsx)(n.li,{children:"F1: 0.7847294282013199"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# the model performs worse than the baseline model\nnp.array(list(model_1_metrics.values())) > np.array(list(baseline_metrics.values()))\n# array([False, False, False, False])\n"})}),"\n",(0,i.jsx)(n.h4,{id:"visualize-the-embedding",children:"Visualize the Embedding"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# get vocab from text vectorizer layer\nwords_in_vocab = text_vectorizer.get_vocabulary()\ntop_10_words = words_in_vocab[:10]\nprint(top_10_words)\n# ['', '[UNK]', 'the', 'a', 'in', 'to', 'of', 'and', 'i', 'is']\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# get embedding weight matrix\nembed_weights = model_1.get_layer('embedding').get_weights()[0]\nprint(embed_weights.shape)\n# (10000, 128) same size as max_features - one weight for every word in vocabulary\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://www.tensorflow.org/tutorials/text/word2vec",children:"embeddeding weights"})," started as random numbers assigned to each token/word in our dataset. By fitting this embedding space to our dataset these weights can now be used to group the words in our dataset. Words that belong to the same class should also have similar vectors representing them."]}),"\n",(0,i.jsxs)(n.p,{children:["We can use the ",(0,i.jsx)(n.a,{href:"https://projector.tensorflow.org/",children:"Tensorflow Projector"})," to display our embedding space:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"out_v = io.open('embedding_weights/vectors_model1.tsv', 'w', encoding='utf-8')\nout_m = io.open('embedding_weights/metadata_model1.tsv', 'w', encoding='utf-8')\n\nfor index, word in enumerate(words_in_vocab):\n    if index == 0:\n        continue # skip padding\n    vec = embed_weights[index]\n    out_v.write('\\t'.join([str(x) for x in vec]) + '\\n')\n    out_m.write(word + '\\n')\n    \nout_v.close()\nout_m.close()\n\n# Upload both files to the [Tensorflow Projector](https://projector.tensorflow.org/)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"(Re) Introduction to Tensorflow Natural Language Processing",src:t(660045).Z+"",width:"866",height:"713"})}),"\n",(0,i.jsx)(n.p,{children:"The projection shows a clear separation between our two classes showing each word in our vocabulary as a member of one of two clusters."}),"\n",(0,i.jsx)(n.h3,{id:"model-2-lstm-long-term-short-term-memory-rnn",children:"Model 2: LSTM Long-term Short-term Memory RNN"}),"\n",(0,i.jsx)(n.h4,{id:"model-building-and-training-1",children:"Model Building and Training"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"inputs = Input(shape=(1,), dtype='string')\nx = text_vectorizer(inputs)\nx = embedding(x)\n# x = LSTM(64, return_sequences=True)(x)\nx = LSTM(64)(x)\nx = Dense(64, activation='relu')(x)\noutputs = Dense(1, activation='sigmoid')(x)\n\nmodel_2 = tf.keras.Model(inputs, outputs, name=\"model_2_LSTM\")\nmodel_2.summary()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Model: "model_2_LSTM"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n input_3 (InputLayer)        [(None, 1)]               0         \n                                                                 \n text_vectorization (TextVec  (None, 15)               0         \n torization)                                                     \n                                                                 \n embedding (Embedding)       (None, 15, 128)           1280000   \n                                                                 \n lstm_2 (LSTM)               (None, 64)                49408     \n                                                                 \n dense_3 (Dense)             (None, 64)                4160      \n                                                                 \n dense_4 (Dense)             (None, 1)                 65        \n                                                                 \n=================================================================\nTotal params: 1,333,633\nTrainable params: 1,333,633\nNon-trainable params: 0\n_________________________________________________________________\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_2.compile(\n    loss='binary_crossentropy',\n    optimizer=tf.keras.optimizers.Adam(),\n    metrics=['accuracy']\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_2_history = model_2.fit(\n    train_tweets,\n    train_labels,\n    epochs=5,\n    validation_data=(val_tweets, val_labels),\n    callbacks=[create_tensorboard_callback_bugged(\n        dir_name=LOG_DIR,\n        experiment_name='model_2_lstm'\n    )]\n)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-evaluation-1",children:"Model Evaluation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_2.evaluate(val_tweets, val_labels)\n# loss: 1.6905 - accuracy: 0.7743\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# make predictions\nmodel_2_preds = model_2.predict(val_tweets)\nsample_prediction=model_2_preds[0]\nprint(f"Prediction: {sample_prediction}","(disaster)" if sample_prediction>0.5 else "(not a disaster)")\n# Prediction: [0.04310093] (not a disaster)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# convert model prediction probabilities to binary label format\nmodel_2_preds = tf.squeeze(tf.round(model_2_preds))\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_2_metrics = calculate_metrics(\n    y_true=val_labels,\n    y_pred=model_2_preds\n)\n\nprint(model_2_metrics)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-2-metrics",children:"Model 2 Metrics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Accuracy: 76.77165354330708"}),"\n",(0,i.jsx)(n.li,{children:"Precision: 0.7674723453090632"}),"\n",(0,i.jsx)(n.li,{children:"Recall: 0.7677165354330708"}),"\n",(0,i.jsx)(n.li,{children:"F1: 0.7668863186407149"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# the model performs worse than the previous model\nnp.array(list(model_2_metrics.values())) > np.array(list(model_1_metrics.values()))\n# array([False, False, False, False])\n"})}),"\n",(0,i.jsx)(n.h3,{id:"model-3-gru-gated-recurrent-unit-rnn",children:"Model 3: GRU Gated Recurrent Unit RNN"}),"\n",(0,i.jsx)(n.h4,{id:"model-building-and-training-2",children:"Model Building and Training"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"inputs = Input(shape=(1,), dtype=tf.string)\nx = text_vectorizer(inputs)\nx = embedding(x)\n# x = GRU(64, return_sequences=True)(x)\nx = GRU(64)(x)\nx = Dense(64, activation='relu')(x)\noutputs = Dense(1, activation='sigmoid')(x)\n\nmodel_3 = tf.keras.Model(inputs, outputs, name=\"model_3_GRU\")\nmodel_3.summary()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Model: "model_3_GRU"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n input_4 (InputLayer)        [(None, 1)]               0         \n                                                                 \n text_vectorization (TextVec  (None, 15)               0         \n torization)                                                     \n                                                                 \n embedding (Embedding)       (None, 15, 128)           1280000   \n                                                                 \n gru (GRU)                   (None, 64)                37248     \n                                                                 \n dense_5 (Dense)             (None, 64)                4160      \n                                                                 \n dense_6 (Dense)             (None, 1)                 65        \n                                                                 \n=================================================================\nTotal params: 1,321,473\nTrainable params: 1,321,473\nNon-trainable params: 0\n_________________________________________________________________\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_3.compile(\n    loss='binary_crossentropy',\n    optimizer=tf.keras.optimizers.Adam(),\n    metrics=['accuracy']\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_3_history = model_3.fit(\n    train_tweets,\n    train_labels,\n    epochs=5,\n    validation_data=(val_tweets, val_labels),\n    callbacks=[create_tensorboard_callback_bugged(\n        dir_name=LOG_DIR,\n        experiment_name='model_3_gru'\n    )]\n)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-evaluation-2",children:"Model Evaluation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_3.evaluate(val_tweets, val_labels)\n# loss: 1.2467 - accuracy: 0.7703\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# make predictions\nmodel_3_preds = model_3.predict(val_tweets)\nsample_prediction=model_3_preds[0]\nprint(f"Prediction: {sample_prediction}","(disaster)" if sample_prediction>0.5 else "(not a disaster)")\n# Prediction: [0.00013416] (not a disaster)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# convert model prediction probabilities to binary label format\nmodel_3_preds = tf.squeeze(tf.round(model_3_preds))\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_3_metrics = calculate_metrics(\n    y_true=val_labels,\n    y_pred=model_3_preds\n)\n\nprint(model_3_metrics)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-3-metrics",children:"Model 3 Metrics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Accuracy: 76.9028871391076"}),"\n",(0,i.jsx)(n.li,{children:"Precision: 0.7768747910576218"}),"\n",(0,i.jsx)(n.li,{children:"Recall: 0.7690288713910761"}),"\n",(0,i.jsx)(n.li,{children:"F1: 0.7643954892702002"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# the model performs (sometimes) better than the lstm but still worse than the baseline model\nprint(np.array(list(model_3_metrics.values())) > np.array(list(model_2_metrics.values())))\n# array([ True,  True,  True, False])\nprint(np.array(list(model_3_metrics.values())) > np.array(list(baseline_metrics.values())))\n# array([False, False, False, False])\n"})}),"\n",(0,i.jsx)(n.h3,{id:"model-4-bi-directional-rnn",children:"Model 4: Bi-Directional RNN"}),"\n",(0,i.jsx)(n.h4,{id:"model-building-and-training-3",children:"Model Building and Training"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"inputs = Input(shape=(1,), dtype=tf.string)\nx = text_vectorizer(inputs)\nx = embedding(x)\nx = Bidirectional(LSTM(64, return_sequences=True))(x)\nx = Bidirectional(GRU(64))(x)\noutputs = Dense(1, activation='sigmoid')(x)\n\nmodel_4 = tf.keras.Model(inputs, outputs, name='model_4_bidirectional')\nmodel_4.summary()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Model: "model_4_bidirectional"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n input_6 (InputLayer)        [(None, 1)]               0         \n                                                                 \n text_vectorization (TextVec  (None, 15)               0         \n torization)                                                     \n                                                                 \n embedding (Embedding)       (None, 15, 128)           1280000   \n                                                                 \n bidirectional_2 (Bidirectio  (None, 15, 128)          98816     \n nal)                                                            \n                                                                 \n bidirectional_3 (Bidirectio  (None, 128)              74496     \n nal)                                                            \n                                                                 \n dense_8 (Dense)             (None, 1)                 129       \n                                                                 \n=================================================================\nTotal params: 1,453,441\nTrainable params: 1,453,441\nNon-trainable params: 0\n_________________________________________________________________\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_4.compile(\n    loss='binary_crossentropy',\n    optimizer=tf.keras.optimizers.Adam(),\n    metrics=['accuracy']\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_4_history = model_4.fit(\n    train_tweets,\n    train_labels,\n    epochs=5,\n    validation_data=(val_tweets, val_labels),\n    callbacks=[create_tensorboard_callback_bugged(\n        dir_name=LOG_DIR,\n        experiment_name='model_4_bidirectional'\n    )]\n)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-evaluation-3",children:"Model Evaluation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_4.evaluate(val_tweets, val_labels)\n# loss: 1.7367 - accuracy: 0.7756\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# make predictions\nmodel_4_preds = model_4.predict(val_tweets)\nsample_prediction=model_4_preds[0]\nprint(f"Prediction: {sample_prediction}","(disaster)" if sample_prediction>0.5 else "(not a disaster)")\n# Prediction: [0.00025736] (not a disaster)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# convert model prediction probabilities to binary label format\nmodel_4_preds = tf.squeeze(tf.round(model_4_preds))\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_4_metrics = calculate_metrics(\n    y_true=val_labels,\n    y_pred=model_4_preds\n)\n\nprint(model_4_metrics)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-4-metrics",children:"Model 4 Metrics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Accuracy: 77.55905511811024"}),"\n",(0,i.jsx)(n.li,{children:"Precision: 0.7777490986405654"}),"\n",(0,i.jsx)(n.li,{children:"Recall: 0.7755905511811023"}),"\n",(0,i.jsx)(n.li,{children:"F1: 0.7733619560087615"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# the model performs better than the gru but worse than the baseline model\nprint(np.array(list(model_4_metrics.values())) > np.array(list(model_3_metrics.values())))\n# [ True  True  True  True]\nprint(np.array(list(model_4_metrics.values())) > np.array(list(baseline_metrics.values())))\n# [False False False False]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"model-5-conv1d",children:"Model 5: Conv1D"}),"\n",(0,i.jsx)(n.h4,{id:"model-building-and-training-4",children:"Model Building and Training"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"inputs = Input(shape=(1,), dtype=tf.string)\nx = text_vectorizer(inputs)\nx = embedding(x)\nx = Conv1D(\n    filters=64,\n    kernel_size=5, # check 5 words at a time\n    activation='relu',\n    padding='valid',\n    strides=1\n)(x)\nx = GlobalMaxPool1D()(x)\noutputs = Dense(1, activation='sigmoid')(x)\n\nmodel_5 = tf.keras.Model(inputs, outputs, name='model_5_conv1d')\nmodel_5.summary()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Model: "model_5_conv1d"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n input_14 (InputLayer)       [(None, 1)]               0         \n                                                                 \n text_vectorization (TextVec  (None, 15)               0         \n torization)                                                     \n                                                                 \n embedding (Embedding)       (None, 15, 128)           1280000   \n                                                                 \n conv1d_6 (Conv1D)           (None, 11, 64)            41024     \n                                                                 \n global_max_pooling1d_5 (Glo  (None, 64)               0         \n balMaxPooling1D)                                                \n                                                                 \n dense_14 (Dense)            (None, 1)                 65        \n                                                                 \n=================================================================\nTotal params: 1,321,089\nTrainable params: 1,321,089\nNon-trainable params: 0\n_________________________________________________________________\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_5.compile(\n    loss='binary_crossentropy',\n    optimizer=tf.keras.optimizers.Adam(),\n    metrics=['accuracy']\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_5_history = model_5.fit(\n    train_tweets,\n    train_labels,\n    epochs=5,\n    validation_data=(val_tweets, val_labels),\n    callbacks=[create_tensorboard_callback_bugged(\n        dir_name=LOG_DIR,\n        experiment_name='model_5_conv1d'\n    )]\n)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-evaluation-4",children:"Model Evaluation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_5.evaluate(val_tweets, val_labels)\n# loss: 1.3018 - accuracy: 0.7454\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# make predictions\nmodel_5_preds = model_5.predict(val_tweets)\nsample_prediction=model_5_preds[0]\nprint(f"Prediction: {sample_prediction}","(disaster)" if sample_prediction>0.5 else "(not a disaster)")\n# Prediction: [0.05387583] (not a disaster)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# convert model prediction probabilities to binary label format\nmodel_5_preds = tf.squeeze(tf.round(model_5_preds))\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_5_metrics = calculate_metrics(\n    y_true=val_labels,\n    y_pred=model_5_preds\n)\n\nprint(model_5_metrics)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-5-metrics",children:"Model 5 Metrics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Accuracy: 74.67191601049869"}),"\n",(0,i.jsx)(n.li,{children:"Precision: 0.7465631385096111"}),"\n",(0,i.jsx)(n.li,{children:"Recall: 0.7467191601049868"}),"\n",(0,i.jsx)(n.li,{children:"F1: 0.7453858813570734"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# the model performs worse than the gru and worse than the baseline model\nprint(np.array(list(model_5_metrics.values())) > np.array(list(model_4_metrics.values())))\n# [False False False False]\nprint(np.array(list(model_5_metrics.values())) > np.array(list(baseline_metrics.values())))\n# [False False False False]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"model-6-transfer-learning-feature-extractor",children:"Model 6: Transfer Learning Feature Extractor"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"USE"})," Feature Extractor - ",(0,i.jsx)(n.a,{href:"https://arxiv.org/abs/1803.11175",children:"Universal Sentence Encoder"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# https://tfhub.dev/google/collections/universal-sentence-encoder/1\nembed = hub.load("https://tfhub.dev/google/universal-sentence-encoder/4")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# test the encoder\nsample_sentence1 = "Next I\'m buying Coca-Cola to put the cocaine back in"\nsample_sentence2 = "Hey guys, wanna feel old? I\'m 40. You\'re welcome."\nsample_sentence3 = "Beef chicken pork bacon chuck shortloin sirloin shank eu, bresaola voluptate in enim ea kielbasa laboris brisket laborum, jowl labore id porkchop elit ad commodo."\n\nembed_sample = embed([\n    sample_sentence1,\n    sample_sentence2,\n    sample_sentence3\n])\n\nprint(embed_sample)\n\n# the encoder turns each input into size-512 feature vectors\n# [[ 0.06844153 -0.0325974  -0.01901028 ... -0.03307429 -0.04625704\n#  -0.08149158]\n# [ 0.02810995 -0.06714624  0.02414106 ... -0.02519046  0.03197665\n#   0.02462349]\n# [ 0.03188843 -0.0167392  -0.03194157 ... -0.04541751 -0.05822486\n#  -0.07237621]], shape=(3, 512), dtype=float32)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"model-building-and-training-5",children:"Model Building and Training"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6 = tf.keras.models.Sequential(name='model_6_use')\n\nmodel_6.add(hub.KerasLayer(\n    'https://tfhub.dev/google/universal-sentence-encoder/4', \n    input_shape=[], # layer excepts string of variable length and returns a 512 feature vector\n    dtype=tf.string, \n    trainable=False,\n    name='sentence-encoder'\n))\n\nmodel_6.add(Dense(1, activation='sigmoid'))\n\nmodel_6.summary()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Model: "model_6_use"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n sentence-encoder (KerasLaye  (None, 512)              256797824 \n r)                                                              \n                                                                 \n dense_5 (Dense)             (None, 1)                 513       \n                                                                 \n=================================================================\nTotal params: 256,798,337\nTrainable params: 513\nNon-trainable params: 256,797,824\n_________________________________________________________________\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6.compile(\n    loss='binary_crossentropy',\n    optimizer=tf.keras.optimizers.Adam(),\n    metrics=['accuracy']\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6_history = model_6.fit(\n    train_tweets,\n    train_labels,\n    epochs=5,\n    validation_data=(val_tweets, val_labels),\n    callbacks=[create_tensorboard_callback_bugged(\n        dir_name=LOG_DIR,\n        experiment_name='model_6_use'\n    )]\n)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-evaluation-5",children:"Model Evaluation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6.evaluate(val_tweets, val_labels)\n# loss: 0.4982 - accuracy: 0.7887\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# make predictions\nmodel_6_preds = model_6.predict(val_tweets)\nsample_prediction=model_6_preds[0]\nprint(f"Prediction: {sample_prediction}","(disaster)" if sample_prediction>0.5 else "(not a disaster)")\n# Prediction: [0.36132362] (not a disaster)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# convert model prediction probabilities to binary label format\nmodel_6_preds = tf.squeeze(tf.round(model_6_preds))\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6_metrics = calculate_metrics(\n    y_true=val_labels,\n    y_pred=model_6_preds\n)\n\nprint(model_6_metrics)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-6-metrics",children:"Model 6 Metrics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Accuracy: 78.87139107611549"}),"\n",(0,i.jsx)(n.li,{children:"Precision: 0.7891485217486439"}),"\n",(0,i.jsx)(n.li,{children:"Recall: 0.7887139107611548"}),"\n",(0,i.jsx)(n.li,{children:"F1: 0.7876016937745534"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# the model performs better than the conv1d and gettin close to the baseline model\nprint(np.array(list(model_6_metrics.values())) > np.array(list(model_5_metrics.values())))\n# [ True  True  True  True]\nprint(np.array(list(model_6_metrics.values())) > np.array(list(baseline_metrics.values())))\n# [False False False  True]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"model-6a-added-dense-layer",children:"Model 6a (added Dense Layer)"}),"\n",(0,i.jsx)(n.p,{children:"The model get's close to the baseline model - I will try to add another Dense layer and see if this improves the performance."}),"\n",(0,i.jsx)(n.p,{children:"Otherwise the model is identical - only written for functional API (no reason, just for practise :) )"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"inputs = Input(shape=[], dtype=tf.string)\n\nx = hub.KerasLayer(\n    'https://tfhub.dev/google/universal-sentence-encoder/4', \n    trainable=False,\n    dtype=tf.string,\n    name='sentence-encoder'\n)(inputs)\n\nx = Dense(64, activation='relu')(x)\noutput = Dense(1, activation='sigmoid')(x)\n\nmodel_6a = tf.keras.models.Model(inputs, output, name='model_6_use')\nmodel_6a.summary()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Model: "model_6_use"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n input_6 (InputLayer)        [(None,)]                 0         \n                                                                 \n sentence-encoder (KerasLaye  (None, 512)              256797824 \n r)                                                              \n                                                                 \n dense_13 (Dense)            (None, 64)                32832     \n                                                                 \n dense_14 (Dense)            (None, 1)                 65        \n                                                                 \n=================================================================\nTotal params: 256,830,721\nTrainable params: 32,897\nNon-trainable params: 256,797,824\n_________________________________________________________________\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6a.compile(\n    loss='binary_crossentropy',\n    optimizer=tf.keras.optimizers.Adam(),\n    metrics=['accuracy']\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6a_history = model_6a.fit(\n    train_tweets,\n    train_labels,\n    epochs=5,\n    validation_data=(val_tweets, val_labels),\n    callbacks=[create_tensorboard_callback_bugged(\n        dir_name=LOG_DIR,\n        experiment_name='model_6a_use'\n    )]\n)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-evaluation-6",children:"Model Evaluation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6a.evaluate(val_tweets, val_labels)\n# loss: 0.4305 - accuracy: 0.8123\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# make predictions\nmodel_6a_preds = model_6a.predict(val_tweets)\nsample_prediction=model_6a_preds[0]\nprint(f"Prediction: {sample_prediction}","(disaster)" if sample_prediction>0.5 else "(not a disaster)")\n# Prediction: [0.15243901] (not a disaster)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# convert model prediction probabilities to binary label format\nmodel_6a_preds = tf.squeeze(tf.round(model_6a_preds))\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6a_metrics = calculate_metrics(\n    y_true=val_labels,\n    y_pred=model_6a_preds\n)\n\nprint(model_6a_metrics)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-6a-metrics",children:"Model 6a Metrics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Accuracy: 81.23359580052494"}),"\n",(0,i.jsx)(n.li,{children:"Precision: 0.8148798668657973"}),"\n",(0,i.jsx)(n.li,{children:"Recall: 0.8123359580052494"}),"\n",(0,i.jsx)(n.li,{children:"F1: 0.810686575717776"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# the model performs better than the conv1d AND better than the baseline model~!\nprint(np.array(list(model_6a_metrics.values())) > np.array(list(model_5_metrics.values())))\n# [ True  True  True  True]\nprint(np.array(list(model_6a_metrics.values())) > np.array(list(baseline_metrics.values())))\n# [ True  True  True  True]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"model-6b-transfer-learning-feature-extractor-10-dataset",children:"Model 6b: Transfer Learning Feature Extractor (10% Dataset)"}),"\n",(0,i.jsx)(n.h4,{id:"dataset-1",children:"Dataset"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# create data subset with 10% of the training data\ntrain_10_percent = train_df_shuffle[['text', 'target']].sample(frac=0.1, random_state=SEED)\nprint(len(train_df_shuffle), len(train_10_percent))\n# 7613 761\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"train_tweets_10_percent = train_10_percent['text'].to_list()\ntrain_labels_10_percent = train_10_percent['target'].to_list()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# check label distribution in randomized subset\ndist_full_dataset = train_df_shuffle['target'].value_counts()\ndist_10_percent_subset = train_10_percent['target'].value_counts()\n\nprint(\n    (dist_full_dataset[0]/dist_full_dataset[1]),\n    (dist_10_percent_subset[0]/dist_10_percent_subset[1])\n)\n\n# the full dataset has 33% more \"no-desaster\" tweets\n# in the subset the overhang is lower with 19%\n# 1.3274228064811984 1.1867816091954022\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-building-and-training-6",children:"Model Building and Training"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6b = tf.keras.models.Sequential(name='model_6b_use_10_percent')\n\nmodel_6b.add(hub.KerasLayer(\n    'https://tfhub.dev/google/universal-sentence-encoder/4', \n    input_shape=[], # layer excepts string of variable length and returns a 512 feature vector\n    dtype=tf.string, \n    trainable=False,\n    name='sentence-encoder'\n))\n\nmodel_6b.add(Dense(64, activation='relu'))\nmodel_6b.add(Dense(1, activation='sigmoid'))\n\nmodel_6b.summary()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Model: "model_6b_use_10_percent"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n sentence-encoder (KerasLaye  (None, 512)              256797824 \n r)                                                              \n                                                                 \n dense_10 (Dense)            (None, 64)                32832     \n                                                                 \n dense_11 (Dense)            (None, 1)                 65        \n                                                                 \n=================================================================\nTotal params: 256,830,721\nTrainable params: 32,897\nNon-trainable params: 256,797,824\n_________________________________________________________________\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6b.compile(\n    loss='binary_crossentropy',\n    optimizer=tf.keras.optimizers.Adam(),\n    metrics=['accuracy']\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6b_history = model_6b.fit(\n    train_tweets_10_percent,\n    train_labels_10_percent,\n    epochs=5,\n    validation_data=(val_tweets, val_labels),\n    callbacks=[create_tensorboard_callback_bugged(\n        dir_name=LOG_DIR,\n        experiment_name='model_6b_use'\n    )]\n)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-evaluation-7",children:"Model Evaluation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6b.evaluate(val_tweets, val_labels)\n# loss: 0.3375 - accuracy: 0.8675\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# make predictions\nmodel_6b_preds = model_6b.predict(val_tweets)\nsample_prediction=model_6b_preds[0]\nprint(f"Prediction: {sample_prediction}","(disaster)" if sample_prediction>0.5 else "(not a disaster)")\n# Prediction: [0.16887127] (not a disaster)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# convert model prediction probabilities to binary label format\nmodel_6b_preds = tf.squeeze(tf.round(model_6b_preds))\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6b_metrics = calculate_metrics(\n    y_true=val_labels,\n    y_pred=model_6b_preds\n)\n\nprint(model_6b_metrics)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-6b-metrics",children:"Model 6b Metrics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Accuracy: 86.74540682414698"}),"\n",(0,i.jsx)(n.li,{children:"Precision: 0.8695676801900293"}),"\n",(0,i.jsx)(n.li,{children:"Recall: 0.8674540682414699"}),"\n",(0,i.jsx)(n.li,{children:"F1: 0.8666326892977956"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# the model performs even better with only 10% AND better than the baseline model ?\nprint(np.array(list(model_6b_metrics.values())) > np.array(list(model_6_metrics.values())))\n# [ True  True  True  True]\nprint(np.array(list(model_6b_metrics.values())) > np.array(list(baseline_metrics.values())))\n# [ True  True  True  True]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"model-6c-use-data-leakage-issue-10-dataset",children:"Model 6c: USE Data Leakage Issue (10% Dataset)"}),"\n",(0,i.jsx)(n.h4,{id:"data-leakage-issue",children:"Data Leakage Issue"}),"\n",(0,i.jsxs)(n.p,{children:["Both the random 10% subset and the validation data was taken from the shuffled data ",(0,i.jsx)(n.code,{children:"train_df_shuffle"}),". This means that the new training dataset might contain a small amount of data entries that are also part of the validation set. Since we are now only working with 10% of the original dataset this data leakage can affect our training massively."]}),"\n",(0,i.jsx)(n.p,{children:"The model needs to be retrained with a clean training dataset..."}),"\n",(0,i.jsx)(n.h5,{id:"training-10-split",children:"Training 10% Split"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# create data subset with 10% of the training data\ntrain_10_percent_split = int(0.1 * len(train_tweets))\ntrain_tweets_10_percent_clean = train_tweets[:train_10_percent_split]\ntrain_labels_10_percent_clean = train_labels[:train_10_percent_split]\nprint(len(train_tweets), len(train_tweets_10_percent_clean))\n# 6851 685\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# check label distribution in randomized subset\ndist_train_dataset = pd.Series(train_labels).value_counts()\ndist_10_percent_train_subset = pd.Series(train_labels_10_percent_clean).value_counts()\n\n\nprint(dist_train_dataset, dist_10_percent_train_subset)\n# 0    3928\n# 1    2923\n# ---------\n# 406\n# 279\n\nprint(\n    (dist_train_dataset[0]/dist_train_dataset[1]),\n    (dist_10_percent_train_subset[0]/dist_10_percent_train_subset[1])\n)\n\n# the full dataset has 34% more "no-desaster" tweets\n# in the subset the overhang is lower with 46% - not ideal\n# 1.3438248374957236 1.4551971326164874\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# use the same model as before but with cleaned weights\nmodel_6c = tf.keras.models.clone_model(model_6b)\n\nmodel_6c.compile(\n    loss='binary_crossentropy',\n    optimizer=tf.keras.optimizers.Adam(),\n    metrics=['accuracy']\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6c_history = model_6c.fit(\n    train_tweets_10_percent_clean,\n    train_labels_10_percent_clean,\n    epochs=5,\n    validation_data=(val_tweets, val_labels),\n    callbacks=[create_tensorboard_callback_bugged(\n        dir_name=LOG_DIR,\n        experiment_name='model_6c_use'\n    )]\n)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-evaluation-8",children:"Model Evaluation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6b.evaluate(val_tweets, val_labels)\n# evaluation with data leakage - performance suspiciously high\n# loss: 0.3375 - accuracy: 0.8675\nmodel_6c.evaluate(val_tweets, val_labels)\n# the model trained on the cleaned-up 10% dataset - as expected -\n# performs worse than the model trained on the full dataset\n# loss: 0.4904 - accuracy: 0.7822\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# make predictions\nmodel_6c_preds = model_6c.predict(val_tweets)\nsample_prediction=model_6c_preds[0]\nprint(f"Prediction: {sample_prediction}","(disaster)" if sample_prediction>0.5 else "(not a disaster)")\n# Prediction: [0.22155239] (not a disaster)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# convert model prediction probabilities to binary label format\nmodel_6c_preds = tf.squeeze(tf.round(model_6c_preds))\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6c_metrics = calculate_metrics(\n    y_true=val_labels,\n    y_pred=model_6c_preds\n)\n\nprint(model_6c_metrics)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"model-6c-metrics",children:"Model 6c Metrics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Accuracy: 78.21522309711287"}),"\n",(0,i.jsx)(n.li,{children:"Precision: 0.7827333187650908"}),"\n",(0,i.jsx)(n.li,{children:"Recall: 0.7821522309711286"}),"\n",(0,i.jsx)(n.li,{children:"F1: 0.7808542546238821"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# the model performs worse than the baseline but gets close\n# considering that we only used 10% of the data\nprint(np.array(list(model_6c_metrics.values())) > np.array(list(model_6b_metrics.values())))\n# [False False False False]\nprint(np.array(list(model_6c_metrics.values())) > np.array(list(baseline_metrics.values())))\n# [False False False False]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"compare-experiments",children:"Compare Experiments"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# combine training results in dataframe\nmodel_metrics_all = pd.DataFrame({\n    "0_baseline": baseline_metrics,\n    "1_simple_dense": model_1_metrics,\n    "2_lstm": model_2_metrics,\n    "3_gru": model_3_metrics,\n    "4_bidirectional": model_4_metrics,\n    "5_conv1d": model_5_metrics,\n    "6_use": model_6_metrics,\n    "6a_use_added_dense": model_6a_metrics,\n    "6b_use_10_percent": model_6b_metrics,\n    "6c_use_10_percent_cleaned": model_6c_metrics\n})\n\n# transpose\nmodel_metrics_all_transposed = model_metrics_all.transpose()\n\n# rescale accuracy\nmodel_metrics_all_transposed[\'accuracy\'] = model_metrics_all_transposed[\'accuracy\']/100\n\n# sort by F1-score\nmodel_metrics_all_transposed_sorted = model_metrics_all_transposed.sort_values(by=[\'f1\'], ascending=False)\nmodel_metrics_all_transposed_sorted\n# The best performing 6b_use_10_percent is faulty\n# The next best is the USE with 100% of training data 6a_use_added_dense\n# The USE with 10% training data performs closely to the baseline and simple dense model\n'})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{}),(0,i.jsx)(n.th,{children:"accuracy"}),(0,i.jsx)(n.th,{children:"precision"}),(0,i.jsx)(n.th,{children:"recall"}),(0,i.jsx)(n.th,{children:"f1"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"6b_use_10_percent"}),(0,i.jsx)(n.td,{children:"0.867454"}),(0,i.jsx)(n.td,{children:"0.869568"}),(0,i.jsx)(n.td,{children:"0.867454"}),(0,i.jsx)(n.td,{children:"0.866633"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"6a_use_added_dense"}),(0,i.jsx)(n.td,{children:"0.813648"}),(0,i.jsx)(n.td,{children:"0.814169"}),(0,i.jsx)(n.td,{children:"0.813648"}),(0,i.jsx)(n.td,{children:"0.812791"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"0_baseline"}),(0,i.jsx)(n.td,{children:"0.792651"}),(0,i.jsx)(n.td,{children:"0.811139"}),(0,i.jsx)(n.td,{children:"0.792651"}),(0,i.jsx)(n.td,{children:"0.786219"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1_simple_dense"}),(0,i.jsx)(n.td,{children:"0.788714"}),(0,i.jsx)(n.td,{children:"0.796962"}),(0,i.jsx)(n.td,{children:"0.788714"}),(0,i.jsx)(n.td,{children:"0.784729"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"6_use"}),(0,i.jsx)(n.td,{children:"0.784777"}),(0,i.jsx)(n.td,{children:"0.785083"}),(0,i.jsx)(n.td,{children:"0.784777"}),(0,i.jsx)(n.td,{children:"0.783692"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"6c_use_10_percent_cleaned"}),(0,i.jsx)(n.td,{children:"0.782152"}),(0,i.jsx)(n.td,{children:"0.782733"}),(0,i.jsx)(n.td,{children:"0.782152"}),(0,i.jsx)(n.td,{children:"0.780854"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2_lstm"}),(0,i.jsx)(n.td,{children:"0.775591"}),(0,i.jsx)(n.td,{children:"0.776962"}),(0,i.jsx)(n.td,{children:"0.775591"}),(0,i.jsx)(n.td,{children:"0.773741"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3_gru"}),(0,i.jsx)(n.td,{children:"0.770341"}),(0,i.jsx)(n.td,{children:"0.773598"}),(0,i.jsx)(n.td,{children:"0.770341"}),(0,i.jsx)(n.td,{children:"0.767494"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"4_bidirectional"}),(0,i.jsx)(n.td,{children:"0.765092"}),(0,i.jsx)(n.td,{children:"0.764730"}),(0,i.jsx)(n.td,{children:"0.765092"}),(0,i.jsx)(n.td,{children:"0.764430"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"5_conv1d"}),(0,i.jsx)(n.td,{children:"0.759843"}),(0,i.jsx)(n.td,{children:"0.759995"}),(0,i.jsx)(n.td,{children:"0.759843"}),(0,i.jsx)(n.td,{children:"0.758468"})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# plot model results\nmodel_metrics_all_transposed_sorted.plot(\n    kind='bar',\n    rot=30,\n    figsize=(12,8)).legend(bbox_to_anchor=(1.0, 1.0)\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"(Re) Introduction to Tensorflow Natural Language Processing",src:t(574816).Z+"",width:"1101",height:"755"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Load TensorBoard\n%load_ext tensorboard\n%tensorboard --logdir './tensorboad/'\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"(Re) Introduction to Tensorflow Natural Language Processing",src:t(657116).Z+"",width:"847",height:"649"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"(Re) Introduction to Tensorflow Natural Language Processing",src:t(182441).Z+"",width:"844",height:"581"})}),"\n",(0,i.jsx)(n.h2,{id:"saving--loading-trained-model",children:"Saving & Loading Trained Model"}),"\n",(0,i.jsx)(n.h3,{id:"hdf5-format-higher-compatibility-to-3rd-parties",children:"HDF5 Format (Higher Compatibility to 3rd Parties)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# save best performing model to HDF5 format\nmodel_6a.save('./models/6a_use_added_dense.h5')\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# restore model with custom TF Hub layer (only HDF5 format)\n# restoring requires import tensorflow_hub as hub\nloaded_model_6a = tf.keras.models.load_model(\n    './models/6a_use_added_dense.h5',\n    custom_objects={'KerasLayer': hub.KerasLayer}\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# verify loaded model\nloaded_model_6a.evaluate(val_tweets, val_labels) == model_6a.evaluate(val_tweets, val_labels)\n# True\n"})}),"\n",(0,i.jsx)(n.h3,{id:"saved-model-format-tensorflow-default",children:"Saved Model Format (Tensorflow Default)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# save best performing model to saved_model format\nmodel_6a.save('./models/6a_use_added_dense')\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"loaded_model_6a_saved_model = tf.keras.models.load_model(\n    './models/6a_use_added_dense',\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# verify loaded model\nloaded_model_6a_saved_model.evaluate(val_tweets, val_labels) == model_6a.evaluate(val_tweets, val_labels)\n# True\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-model-evaluation",children:"Best Model Evaluation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# find most wrong predictions\n## create dataframe with validation tweets, labels and model predictions\nloaded_model_pred_probs = tf.squeeze(loaded_model_6a_saved_model.predict(val_tweets))\nloaded_model_preds = tf.round(loaded_model_preds)\nprint(loaded_model_preds[:5])\n# [0. 1. 1. 0. 1.]\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'pred_df = pd.DataFrame({\n    "text": val_tweets,\n    "target": val_labels,\n    "pred": loaded_model_preds,\n    "pred_prob": loaded_model_pred_probs\n})\n\npred_df\n'})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{}),(0,i.jsx)(n.th,{children:"text"}),(0,i.jsx)(n.th,{children:"target"}),(0,i.jsx)(n.th,{children:"pred"}),(0,i.jsx)(n.th,{children:"pred_prob"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"DFR EP016 Monthly Meltdown - On Dnbheaven 2015..."}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"0.0"}),(0,i.jsx)(n.td,{children:"0.191866"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"FedEx no longer to transport bioterror germs i..."}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"1.0"}),(0,i.jsx)(n.td,{children:"0.793415"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:"Gunmen kill four in El Salvador bus attack: Su..."}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"1.0"}),(0,i.jsx)(n.td,{children:"0.992559"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"@camilacabello97 Internally and externally scr..."}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"0.0"}),(0,i.jsx)(n.td,{children:"0.255227"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"4"}),(0,i.jsx)(n.td,{children:"Radiation emergency #preparedness starts with ..."}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"1.0"}),(0,i.jsx)(n.td,{children:"0.722030"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"..."}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"757"}),(0,i.jsx)(n.td,{children:"That's the ultimate road to destruction"}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"0.0"}),(0,i.jsx)(n.td,{children:"0.141685"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"758"}),(0,i.jsx)(n.td,{children:"@SetZorah dad why dont you claim me that mean ..."}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"0.0"}),(0,i.jsx)(n.td,{children:"0.111817"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"759"}),(0,i.jsx)(n.td,{children:"FedEx will no longer transport bioterror patho..."}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"1.0"}),(0,i.jsx)(n.td,{children:"0.898317"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"760"}),(0,i.jsx)(n.td,{children:"Crack in the path where I wiped out this morni..."}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"1.0"}),(0,i.jsx)(n.td,{children:"0.671607"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"761"}),(0,i.jsx)(n.td,{children:"I liked a @YouTube video from @dannyonpc http:..."}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"0.0"}),(0,i.jsx)(n.td,{children:"0.127992"})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# create another datframe that only contains wrong predictions\nmost_wrong = pred_df[pred_df['target'] != pred_df['pred']].sort_values(\n    'pred_prob',\n    ascending=False\n)\n\nmost_wrong\n"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{}),(0,i.jsx)(n.th,{children:"text"}),(0,i.jsx)(n.th,{children:"target"}),(0,i.jsx)(n.th,{children:"pred"}),(0,i.jsx)(n.th,{children:"pred_prob"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"31"}),(0,i.jsxs)(n.td,{children:["? High Skies - Burning Buildings ? ",(0,i.jsx)(n.a,{href:"http://t.co",children:"http://t.co"}),"..."]}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"1.0"}),(0,i.jsx)(n.td,{children:"0.936771"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"628"}),(0,i.jsx)(n.td,{children:"@noah_anyname That's where the concentration c..."}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"1.0"}),(0,i.jsx)(n.td,{children:"0.907564"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"759"}),(0,i.jsx)(n.td,{children:"FedEx will no longer transport bioterror patho..."}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"1.0"}),(0,i.jsx)(n.td,{children:"0.898317"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"251"}),(0,i.jsx)(n.td,{children:"@AshGhebranious civil rights continued in the ..."}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"1.0"}),(0,i.jsx)(n.td,{children:"0.854326"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"49"}),(0,i.jsx)(n.td,{children:"@madonnamking RSPCA site multiple 7 story high..."}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"1.0"}),(0,i.jsx)(n.td,{children:"0.853781"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"..."}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"233"}),(0,i.jsx)(n.td,{children:"I get to smoke my shit in peace"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"0.0"}),(0,i.jsx)(n.td,{children:"0.052748"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"411"}),(0,i.jsx)(n.td,{children:"@SoonerMagic_ I mean I'm a fan but I don't nee..."}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"0.0"}),(0,i.jsx)(n.td,{children:"0.046553"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"244"}),(0,i.jsxs)(n.td,{children:["Reddit Will Now Quarantine\x89\xdb_ ",(0,i.jsx)(n.a,{href:"http://t.co/pkUA",children:"http://t.co/pkUA"}),"..."]}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"0.0"}),(0,i.jsx)(n.td,{children:"0.044474"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"23"}),(0,i.jsx)(n.td,{children:"Ron & Fez - Dave's High School Crush https..."}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"0.0"}),(0,i.jsx)(n.td,{children:"0.040853"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"38"}),(0,i.jsx)(n.td,{children:"Why are you deluged with low self-image? Take ..."}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"0.0"}),(0,i.jsx)(n.td,{children:"0.040229"})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"false-positives",children:"False Positives"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'for row in most_wrong[:10].itertuples():\n    _, text, target, pred, pred_prob = row\n    print(f"Target: {target}, Pred: {pred}, Probability: {pred_prob}")\n    print(f"Tweet: {text}")\n    print("----\\n")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Target: 0, Pred: 1.0, Probability: 0.936771035194397\nTweet: ? High Skies - Burning Buildings ? http://t.co/uVq41i3Kx2 #nowplaying\n----\n\nTarget: 0, Pred: 1.0, Probability: 0.9075638055801392\nTweet: @noah_anyname That's where the concentration camps and mass murder come in. \n \nEVERY. FUCKING. TIME.\n----\n\nTarget: 0, Pred: 1.0, Probability: 0.8983168601989746\nTweet: FedEx will no longer transport bioterror pathogens in wake of anthrax lab mishaps http://t.co/lHpgxc4b8J\n----\n\nTarget: 0, Pred: 1.0, Probability: 0.8543258309364319\nTweet: @AshGhebranious civil rights continued in the 60s. And what about trans-generational trauma? if anything we should listen to the Americans.\n----\n\nTarget: 0, Pred: 1.0, Probability: 0.8537805676460266\nTweet: @madonnamking RSPCA site multiple 7 story high rise buildings next to low density character residential in an area that floods\n----\n\nTarget: 0, Pred: 1.0, Probability: 0.8336963057518005\nTweet: [55436] 1950 LIONEL TRAINS SMOKE LOCOMOTIVES WITH MAGNE-TRACTION INSTRUCTIONS http://t.co/xEZBs3sq0y http://t.co/C2x0QoKGlY\n----\n\nTarget: 0, Pred: 1.0, Probability: 0.833143413066864\nTweet: Ashes 2015: Australia\x89\xdb\xaas collapse at Trent Bridge among worst in history: England bundled out Australia for 60 ... http://t.co/t5TrhjUAU0\n----\n\nTarget: 0, Pred: 1.0, Probability: 0.8305423855781555\nTweet: @SonofLiberty357 all illuminated by the brightly burning buildings all around the town!\n----\n\nTarget: 0, Pred: 1.0, Probability: 0.8277301788330078\nTweet: Deaths 3 http://t.co/nApviyGKYK\n----\n\nTarget: 0, Pred: 1.0, Probability: 0.8111591935157776\nTweet: The Sound of Arson\n----\n"})}),"\n",(0,i.jsx)(n.h4,{id:"false-negatives",children:"False Negatives"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'for row in most_wrong[-10:].itertuples():\n    _, text, target, pred, pred_prob = row\n    print(f"Target: {target}, Pred: {pred}, Probability: {pred_prob}")\n    print(f"Tweet: {text}")\n    print("----\\n")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Target: 1, Pred: 0.0, Probability: 0.07530134916305542\nTweet: going to redo my nails and watch behind the scenes of desolation of smaug ayyy\n----\n\nTarget: 1, Pred: 0.0, Probability: 0.07096730172634125\nTweet: @DavidVonderhaar At least you were sincere ??\n----\n\nTarget: 1, Pred: 0.0, Probability: 0.06341199576854706\nTweet: Lucas Duda is Ghost Rider. Not the Nic Cage version but an actual 'engulfed in flames' badass. #Mets\n----\n\nTarget: 1, Pred: 0.0, Probability: 0.06147787347435951\nTweet: You can never escape me. Bullets don't harm me. Nothing harms me. But I know pain. I know pain. Sometimes I share it. With someone like you.\n----\n\nTarget: 1, Pred: 0.0, Probability: 0.05444430932402611\nTweet: @willienelson We need help! Horses will die!Please RT &amp; sign petition!Take a stand &amp; be a voice for them! #gilbert23 https://t.co/e8dl1lNCVu\n----\n\nTarget: 1, Pred: 0.0, Probability: 0.0527476891875267\nTweet: I get to smoke my shit in peace\n----\n\nTarget: 1, Pred: 0.0, Probability: 0.04655275493860245\nTweet: @SoonerMagic_ I mean I'm a fan but I don't need a girl sounding off like a damn siren\n----\n\nTarget: 1, Pred: 0.0, Probability: 0.04447368532419205\nTweet: Reddit Will Now Quarantine\x89\xdb_ http://t.co/pkUAMXw6pm #onlinecommunities #reddit #amageddon #freespeech #Business http://t.co/PAWvNJ4sAP\n----\n\nTarget: 1, Pred: 0.0, Probability: 0.04085317254066467\nTweet: Ron &amp; Fez - Dave's High School Crush https://t.co/aN3W16c8F6 via @YouTube\n----\n\nTarget: 1, Pred: 0.0, Probability: 0.0402291864156723\nTweet: Why are you deluged with low self-image? Take the quiz: http://t.co/XsPqdOrIqj http://t.co/CQYvFR4UCy\n----\n"})}),"\n",(0,i.jsx)(n.h2,{id:"test-dataset-predictions",children:"Test Dataset Predictions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# get the test dataset and randomize\ntest_df_shuffle = test_df.sample(frac=1, random_state=SEED)\n\ntest_df_shuffle.head(5)\n"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{}),(0,i.jsx)(n.th,{children:"id"}),(0,i.jsx)(n.th,{children:"keyword"}),(0,i.jsx)(n.th,{children:"location"}),(0,i.jsx)(n.th,{children:"text"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2406"}),(0,i.jsx)(n.td,{children:"8051"}),(0,i.jsx)(n.td,{children:"refugees"}),(0,i.jsx)(n.td,{children:"NaN"}),(0,i.jsxs)(n.td,{children:["Refugees as citizens - The Hindu ",(0,i.jsx)(n.a,{href:"http://t.co/G",children:"http://t.co/G"}),"..."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"134"}),(0,i.jsx)(n.td,{children:"425"}),(0,i.jsx)(n.td,{children:"apocalypse"}),(0,i.jsx)(n.td,{children:"Currently Somewhere On Earth"}),(0,i.jsx)(n.td,{children:"@5SOStag honestly he could say an apocalypse i..."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"411"}),(0,i.jsx)(n.td,{children:"1330"}),(0,i.jsx)(n.td,{children:"blown%20up"}),(0,i.jsx)(n.td,{children:"Scout Team"}),(0,i.jsx)(n.td,{children:"If you bored as shit don't nobody fuck wit you..."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"203"}),(0,i.jsx)(n.td,{children:"663"}),(0,i.jsx)(n.td,{children:"attack"}),(0,i.jsx)(n.td,{children:"NaN"}),(0,i.jsx)(n.td,{children:"@RealTwanBrown Yesterday I Had A Heat Attack ?..."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"889"}),(0,i.jsx)(n.td,{children:"2930"}),(0,i.jsx)(n.td,{children:"danger"}),(0,i.jsx)(n.td,{children:"Leeds"}),(0,i.jsx)(n.td,{children:"The Devil Wears Prada is still one of my favou..."})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"test_tweets = test_df_shuffle['text']\ntest_tweets = np.array(test_tweets.values.tolist())\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"loaded_model_pred_probs_test = tf.squeeze(loaded_model_6a_saved_model.predict(test_tweets))\nloaded_model_preds_test = tf.round(loaded_model_pred_probs_test)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'pred_test_df = pd.DataFrame({\n    "text": test_tweets,\n    "pred": loaded_model_preds_test,\n    "pred_prob": loaded_model_pred_probs_test\n})\n\npred_test_df\n'})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{}),(0,i.jsx)(n.th,{children:"text"}),(0,i.jsx)(n.th,{children:"pred"}),(0,i.jsx)(n.th,{children:"pred_prob"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"0"}),(0,i.jsxs)(n.td,{children:["Refugees as citizens - The Hindu ",(0,i.jsx)(n.a,{href:"http://t.co/G",children:"http://t.co/G"}),"..."]}),(0,i.jsx)(n.td,{children:"1.0"}),(0,i.jsx)(n.td,{children:"0.717548"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"@5SOStag honestly he could say an apocalypse i..."}),(0,i.jsx)(n.td,{children:"0.0"}),(0,i.jsx)(n.td,{children:"0.093809"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:"If you bored as shit don't nobody fuck wit you..."}),(0,i.jsx)(n.td,{children:"0.0"}),(0,i.jsx)(n.td,{children:"0.082749"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"@RealTwanBrown Yesterday I Had A Heat Attack ?..."}),(0,i.jsx)(n.td,{children:"0.0"}),(0,i.jsx)(n.td,{children:"0.097784"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"4"}),(0,i.jsx)(n.td,{children:"The Devil Wears Prada is still one of my favou..."}),(0,i.jsx)(n.td,{children:"0.0"}),(0,i.jsx)(n.td,{children:"0.028455"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"..."}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3258"}),(0,i.jsx)(n.td,{children:"Free Kindle Book - Aug 3-7 - Thriller - Desola..."}),(0,i.jsx)(n.td,{children:"0.0"}),(0,i.jsx)(n.td,{children:"0.080420"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3259"}),(0,i.jsx)(n.td,{children:"HitchBot travels Europe and greeted with open ..."}),(0,i.jsx)(n.td,{children:"1.0"}),(0,i.jsx)(n.td,{children:"0.603396"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3260"}),(0,i.jsx)(n.td,{children:"If you told me you was drowning. I would not l..."}),(0,i.jsx)(n.td,{children:"0.0"}),(0,i.jsx)(n.td,{children:"0.208108"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3261"}),(0,i.jsx)(n.td,{children:"First time for everything! @ Coney Island Cycl..."}),(0,i.jsx)(n.td,{children:"1.0"}),(0,i.jsx)(n.td,{children:"0.617582"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3262"}),(0,i.jsx)(n.td,{children:"Rocky Fire #cali #SCFD #wildfire #LakeCounty h..."}),(0,i.jsx)(n.td,{children:"1.0"}),(0,i.jsx)(n.td,{children:"0.794876"})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# make random prediction on sub-samples of the test dataset\ntest_samples = random.sample(test_tweets.tolist(), 10)\n\nfor test_sample in test_samples:\n    pred_prob = tf.squeeze(loaded_model_6a_saved_model.predict([test_sample]))\n    pred = tf.round(pred_prob)\n    \n    print(f"Pred: {int(pred)}, Probability: {pred_prob}")\n    print(f"Text: {test_sample}")\n    print("-------\\n")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"1/1 [==============================] - 0s 26ms/step\nPred: 0, Probability: 0.15592874586582184\nText: @EllaEMusic_ You should have just simply let on that you had electrocuted yourself while plugging in your phone charger. It works for me...\n-------\n\n1/1 [==============================] - 0s 25ms/step\nPred: 1, Probability: 0.5131102800369263\nText: Evacuation drill at work. The fire doors wouldn't open so i got to smash the emergency release glass #feelingmanly\n-------\n\n1/1 [==============================] - 0s 33ms/step\nPred: 1, Probability: 0.9751215577125549\nText: Rare photographs show the nightmare aftermath of #Hiroshima | #NoNukes #Amerikkka #WhiteTerrorism #Nuclear #Disaster  http://t.co/8tWLAKdaBf\n-------\n\n1/1 [==============================] - 0s 28ms/step\nPred: 1, Probability: 0.676400899887085\nText: kayaking about killed us so mom and grandma came to the rescue.\n-------\n\n1/1 [==============================] - 0s 26ms/step\nPred: 1, Probability: 0.9690964818000793\nText: Pasco officials impressed by drone video showing floods: Drone videos have given an up-close view of flooded areas\x89\xdb_ http://t.co/PrUunEDids\n-------\n\n1/1 [==============================] - 0s 29ms/step\nPred: 0, Probability: 0.07793092727661133\nText: just trying to smoke and get Taco Bell\n-------\n\n1/1 [==============================] - 0s 26ms/step\nPred: 1, Probability: 0.9799614548683167\nText: RT AbbsWinston: #Zionist #Terrorist kidnapped 15 #Palestinians in overnight terror on Palestinian Villages \x89\xdb_ http://t.co/J5mKcbKcov\n-------\n\n1/1 [==============================] - 0s 24ms/step\nPred: 1, Probability: 0.8005449771881104\nText: ME: gun shot wounds 3 4 6 7 'rapidly lethal' would have killed in 30-60 seconds or few minutes max. #kerricktrial\n-------\n\n1/1 [==============================] - 0s 24ms/step\nPred: 1, Probability: 0.9902410507202148\nText: Three Israeli soldiers wounded in West Bank terrorist attack - Haaretz http://t.co/Mwd1iPMoWT #world\n-------\n\n1/1 [==============================] - 0s 29ms/step\nPred: 0, Probability: 0.03447313234210014\nText: @_Souuul * gains super powers im now lava girl throws you ina chest wrapped in chains &amp; sinks you down the the bottom of the ocean*\n-------\n"})}),"\n",(0,i.jsx)(n.h2,{id:"speedscore-tradeoff",children:"Speed/Score Tradeoff"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def time_to_prediction(model, samples):\n    start_time = time.perf_counter()\n    model.predict(samples)\n    end_time = time.perf_counter()\n    time_to_prediction = end_time - start_time\n    prediction_time_weighted = time_to_prediction / len(samples)\n\n    return time_to_prediction, prediction_time_weighted\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_6_time_to_prediction, model_6_prediction_time_weighted = time_to_prediction(\n    model = loaded_model_6a_saved_model,\n    samples = test_tweets\n)\n\nprint(model_6_time_to_prediction, model_6_prediction_time_weighted)\n# 0.4922969689941965 0.0001508725004579211\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_0_time_to_prediction, model_0_prediction_time_weighted = time_to_prediction(\n    model = model_0,\n    samples = test_tweets\n)\n\nprint(model_0_time_to_prediction, model_0_prediction_time_weighted)\n# 0.05065811199892778 1.5525011338929752e-05\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"TimeToPrediction = [model_6_time_to_prediction, model_0_time_to_prediction]\nTimeToPredictionWeighted = [model_6_prediction_time_weighted, model_0_prediction_time_weighted]\nindex = ['Model 6', 'Model 0']\n\nprediction_times_df = pd.DataFrame({\n    'TimeToPrediction': TimeToPrediction,\n    'TimeToPrediction (weighted)': TimeToPredictionWeighted\n}, index=index)\n\nprediction_times_df.plot(\n    kind='bar',\n    rot=0,\n    subplots=True,\n    figsize=(12,8)\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"(Re) Introduction to Tensorflow Natural Language Processing",src:t(143054).Z+"",width:"1016",height:"682"})}),"\n",(0,i.jsx)(n.h4,{id:"comparing-the-performance-of-all-models",children:"Comparing the Performance of all Models"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_1_time_to_prediction, model_1_prediction_time_weighted = time_to_prediction(\n    model = model_1,\n    samples = test_tweets\n)\n\nmodel_2_time_to_prediction, model_2_prediction_time_weighted = time_to_prediction(\n    model = model_2,\n    samples = test_tweets\n)\n\nmodel_3_time_to_prediction, model_3_prediction_time_weighted = time_to_prediction(\n    model = model_3,\n    samples = test_tweets\n)\n\nmodel_4_time_to_prediction, model_4_prediction_time_weighted = time_to_prediction(\n    model = model_4,\n    samples = test_tweets\n)\n\nmodel_5_time_to_prediction, model_5_prediction_time_weighted = time_to_prediction(\n    model = model_5,\n    samples = test_tweets\n)\n\nmodel_6_time_to_prediction, model_6_prediction_time_weighted = time_to_prediction(\n    model = model_6,\n    samples = test_tweets\n)\n\nmodel_6a_time_to_prediction, model_6a_prediction_time_weighted = time_to_prediction(\n    model = model_6a,\n    samples = test_tweets\n)\n\nmodel_6b_time_to_prediction, model_6b_prediction_time_weighted = time_to_prediction(\n    model = model_6b,\n    samples = test_tweets\n)\n\nmodel_6c_time_to_prediction, model_6c_prediction_time_weighted = time_to_prediction(\n    model = model_6c,\n    samples = test_tweets\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"plt.figure(figsize=(12, 8))\nplt.scatter(model_6c_time_to_prediction, model_6c_metrics['f1'], label='Pre-trained USE (10%)')\nplt.scatter(model_6b_time_to_prediction, model_6b_metrics['f1'], label='Pre-trained USE (10% / data leakage)')\nplt.scatter(model_6a_time_to_prediction, model_6a_metrics['f1'], label='Pre-trained USE (added Dense)')\nplt.scatter(model_6_time_to_prediction, model_6_metrics['f1'], label='Pre-trained USE')\nplt.scatter(model_5_time_to_prediction, model_5_metrics['f1'], label='1D-Convolutional Neural Network (CNN)')\nplt.scatter(model_4_time_to_prediction, model_4_metrics['f1'], label='Bidirectional-LSTM model (RNN)')\nplt.scatter(model_3_time_to_prediction, model_3_metrics['f1'], label='GRU model (RNN)')\nplt.scatter(model_2_time_to_prediction, model_2_metrics['f1'], label='LSTM model (RNN)')\nplt.scatter(model_1_time_to_prediction, model_1_metrics['f1'], label='Feed-forward neural network (dense model)')\nplt.scatter(model_0_time_to_prediction, baseline_metrics['f1'], label='Naive Bayes (baseline)')\nplt.legend()\nplt.title(\"F1-Score vs Time to Prediction\")\nplt.xlabel('Time to Prediction')\nplt.ylabel('F1-Score')\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"(Re) Introduction to Tensorflow Natural Language Processing",src:t(12253).Z+"",width:"1010",height:"701"})})]})}function _(e={}){const{wrapper:n}={...(0,r.ah)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},603905:(e,n,t)=>{t.d(n,{ah:()=>o});var i=t(667294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=i.createContext({}),o=function(e){var n=i.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},_=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,_=a(e,["components","mdxType","originalType","parentName"]),h=o(t),m=r,p=h["".concat(d,".").concat(m)]||h[m]||c[m]||l;return t?i.createElement(p,s(s({ref:n},_),{},{components:t})):i.createElement(p,s({ref:n},_))}));_.displayName="MDXCreateElement"},476806:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-a3f1c3cf7621dc9c70d8bc62dec4a9d5.jpg"},660045:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/tf_nlp_desaster_tweets_01-9df7623eb1b424d4d16ff3f6b9bd98d4.png"},574816:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/tf_nlp_desaster_tweets_02-7188185c31d900af80997ad49889a931.png"},657116:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/tf_nlp_desaster_tweets_03-ff7555ff2b5009fd2a5cdc4fbb40f8dd.png"},182441:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/tf_nlp_desaster_tweets_04-a633f2d0c4e08c1fdf653d5c1ac6e644.png"},143054:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/tf_nlp_desaster_tweets_05-2ecc125f1cbd52d556aaf8c288d36525.png"},12253:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/tf_nlp_desaster_tweets_06-458287cf210faec316cfb51972d6c1a9.png"}}]);