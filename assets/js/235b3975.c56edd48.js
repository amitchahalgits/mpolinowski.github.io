"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[86944],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>d});var i=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,i,a=function(t,e){if(null==t)return{};var n,i,a={},o=Object.keys(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=i.createContext({}),s=function(t){var e=i.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},c=function(t){var e=s(t.components);return i.createElement(p.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},m=i.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,p=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),m=s(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return n?i.createElement(f,r(r({ref:e},c),{},{components:n})):i.createElement(f,r({ref:e},c))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l.mdxType="string"==typeof t?t:a,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},61653:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var i=n(87462),a=(n(67294),n(3905));const o={sidebar_position:8870,slug:"2023-05-07",title:"A little bit of SciPy...",authors:"mpolinowski",tags:["Python","Cheating"],description:"A quick introduction to Scientific Python"},r=void 0,l={unversionedId:"Development/Python/2023-05-07-python-scipy-introduction/index",id:"Development/Python/2023-05-07-python-scipy-introduction/index",title:"A little bit of SciPy...",description:"A quick introduction to Scientific Python",source:"@site/docs/Development/Python/2023-05-07-python-scipy-introduction/index.md",sourceDirName:"Development/Python/2023-05-07-python-scipy-introduction",slug:"/Development/Python/2023-05-07-python-scipy-introduction/2023-05-07",permalink:"/docs/Development/Python/2023-05-07-python-scipy-introduction/2023-05-07",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Python/2023-05-07-python-scipy-introduction/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Cheating",permalink:"/docs/tags/cheating"}],version:"current",sidebarPosition:8870,frontMatter:{sidebar_position:8870,slug:"2023-05-07",title:"A little bit of SciPy...",authors:"mpolinowski",tags:["Python","Cheating"],description:"A quick introduction to Scientific Python"},sidebar:"tutorialSidebar",previous:{title:"Plotly & Seaborn to Explore Text Dataset",permalink:"/docs/Development/Python/2023-05-14-visualizing-text-datasets/2023-05-14"},next:{title:"Matplotlib Pyplot Cheat Sheet 2023",permalink:"/docs/Development/Python/2023-05-03-python-matplotlib-cheat-sheet/2023-05-03"}},p={},s=[{value:"Global Minimum and Maximum",id:"global-minimum-and-maximum",level:2},{value:"BFGS (Broyden-Fletcher-Goldfarb-Shanno Algorithm)",id:"bfgs-broyden-fletcher-goldfarb-shanno-algorithm",level:3},{value:"Basin-Hopping Algorithm",id:"basin-hopping-algorithm",level:3},{value:"Curve Fitting",id:"curve-fitting",level:2}],c={toc:s};function u(t){let{components:e,...o}=t;return(0,a.kt)("wrapper",(0,i.Z)({},c,o,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Sham Sui Po, Hong Kong",src:n(60958).Z,width:"1500",height:"548"})),(0,a.kt)("h1",{id:"scipy-introduction"},"SciPy Introduction"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/python-scipy-intro"},"Github Repository")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#scipy-introduction"},"SciPy Introduction"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#global-minimum-and-maximum"},"Global Minimum and Maximum"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#bfgs-broyden-fletcher-goldfarb-shanno-algorithm"},"BFGS (Broyden-Fletcher-Goldfarb-Shanno Algorithm)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#basin-hopping-algorithm"},"Basin-Hopping Algorithm")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#curve-fitting"},"Curve Fitting"))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.optimize as opt\n")),(0,a.kt)("h2",{id:"global-minimum-and-maximum"},"Global Minimum and Maximum"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def f(x):\n    return x**2 + 10*np.sin(x) + 2*x\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"x = np.linspace(-10,10,51)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"y = f(x)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"fig = plt.figure(figsize=(10,5))\n\nplt.plot(x,y)\n\nplt.title('f(x)=x\xb2 + 10*sin(x) + 2*x')\nplt.grid()\n\nfig.savefig('assets/SciPy_Introduction_00.webp', bbox_inches='tight')\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"SciPy Introduction",src:n(26845).Z,width:"831",height:"451"})),(0,a.kt)("h3",{id:"bfgs-broyden-fletcher-goldfarb-shanno-algorithm"},"BFGS (Broyden-Fletcher-Goldfarb-Shanno Algorithm)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# start searching for a local minimum at x0=0\nx0 = 0\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# use BFGS (Broyden-Fletcher-Goldfarb-Shanno Algorithm)\n[xopt, fopt, gopt, Bodpt, func_calls, grad_calls, warnflags] = opt.fmin_bfgs(\n    f, x0=x0,\n    maxiter=2000,\n    full_output=True\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Optimization terminated successfully.\n         Current function value: -10.728527\n         Iterations: 5\n         Function evaluations: 12\n         Gradient evaluations: 6\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"fig = plt.figure(figsize=(10,5))\n\nplt.plot(x,y, c='fuchsia')\n# start point f(x) = -10.728527\nplt.plot([x0], [f(x0)], 'o', c='dodgerblue')\n# found minimum @[xopt, fopt]\nplt.plot([xopt], [fopt], 'x', c='indigo')\nplt.title('Global Minimum from x0=0')\nplt.grid()\n\nfig.savefig('assets/SciPy_Introduction_01.webp', bbox_inches='tight')\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"SciPy Introduction",src:n(62435).Z,width:"831",height:"451"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# start searching for a local minimum at x0=7.5\nx0 = 7.5\n\n# use BFGS (Broyden-Fletcher-Goldfarb-Shanno Algorithm)\n[xopt, fopt, gopt, Bodpt, func_calls, grad_calls, warnflags] = opt.fmin_bfgs(\n    f, x0=x0,\n    maxiter=2000,\n    full_output=True\n)\n\nfig = plt.figure(figsize=(10,5))\n\nplt.plot(x,y, c='fuchsia')\n# start point [x0, f(x0)]\nplt.plot([x0], [f(x0)], 'o', c='dodgerblue')\n# found minimum @[xopt, fopt]\nplt.plot([xopt], [fopt], 'x', c='indigo')\nplt.title('Local Minimum from x0=7.5')\nplt.grid()\n\nfig.savefig('assets/SciPy_Introduction_02.webp', bbox_inches='tight')\n")),(0,a.kt)("p",null,"The algorithm stops searching for a global minimum after finding the first local minimum:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Optimization terminated successfully.\n         Current function value: 15.730518\n         Iterations: 5\n         Function evaluations: 22\n         Gradient evaluations: 11\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"SciPy Introduction",src:n(33660).Z,width:"831",height:"451"})),(0,a.kt)("h3",{id:"basin-hopping-algorithm"},"Basin-Hopping Algorithm"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# start searching for a local minimum at x0=7.5\nx0 = 7.5\n\n# the bh algo requiers a max number of jumps it should perform niter\n# and a temperature parameter T that allows for larger jumps to be able\n# to hop over local minimums with a maximum step size of stepsize\nresults = opt.basinhopping(f, x0 = x0, niter=3, T=1, stepsize=2)\nresults\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"                        fun: -10.728527164657866\n lowest_optimization_result:       fun: -10.728527164657866\n hess_inv: array([[0.08364616]])\n      jac: array([-2.38418579e-07])\n  message: 'Optimization terminated successfully.'\n     nfev: 10\n      nit: 3\n     njev: 5\n   status: 0\n  success: True\n        x: array([-1.47554364])\n                    message: ['requested number of basinhopping iterations completed successfully']\n      minimization_failures: 0\n                       nfev: 64\n                        nit: 3\n                       njev: 32\n                    success: True\n                          x: array([-1.47554364])\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"fig = plt.figure(figsize=(10,5))\n\nplt.plot(x,y, c='fuchsia')\n# start point [x0, f(x0)]\nplt.plot([x0], [f(x0)], 'o', c='dodgerblue')\n# found minimum @[xopt, fopt]\nplt.plot([results.x], [results.fun], 'x', c='indigo')\nplt.title('Local Minimum from x0=7.5')\nplt.grid()\n\nfig.savefig('assets/SciPy_Introduction_03.webp', bbox_inches='tight')\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"SciPy Introduction",src:n(19906).Z,width:"831",height:"451"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# start searching for a local minimum at x0=7.5\nx0 = 7.5\n\n# increase temperature and max allowed stepsize to 3\nresults = opt.basinhopping(f, x0 = x0, niter=3, T=2, stepsize=3)\n\nfig = plt.figure(figsize=(10,5))\n\nplt.plot(x,y, c='fuchsia')\n# start point [x0, f(x0)]\nplt.plot([x0], [f(x0)], 'o', c='dodgerblue')\n# found minimum @[xopt, fopt]\nplt.plot([results.x], [results.fun], 'x', c='indigo')\nplt.title('Global Minimum from x0=7.5')\nplt.grid()\n\nfig.savefig('assets/SciPy_Introduction_04.webp', bbox_inches='tight')\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"SciPy Introduction",src:n(94398).Z,width:"831",height:"451"})),(0,a.kt)("h2",{id:"curve-fitting"},"Curve Fitting"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# generate noisy data based on function above\ny_noisy = f(x) + 7*np.random.randn(x.size)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"fig = plt.figure(figsize=(10,5))\n\nplt.plot(x,y_noisy, 'o', c='dodgerblue', markersize=1.5, label='noisy data')\nplt.plot(x,y, c='mediumseagreen', linewidth=0.2, label='ground truth')\n\nplt.title('f(x)=x\xb2 + 10*sin(x) + 2*x (Noisy)')\nplt.legend()\nplt.grid()\n\nfig.savefig('assets/SciPy_Introduction_05.webp', bbox_inches='tight')\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"SciPy Introduction",src:n(87181).Z,width:"833",height:"451"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# find optimum for variables in f(x)=ax\xb2 + b*sin(x) + c*x\n# to find a best fit to noisy data\ndef f_guess(x, a, b, c):\n    return a*x**2 + b*np.sin(x) + c*x\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# start guessing with a to c = 2\nstart_values = [2,2,2]\n\nparams, cov = opt.curve_fit(f_guess, x, y_noisy, start_values)\nparams\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"array([ 0.97651997, 10.38400783,  2.06441947])")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def f_fitted(x, a_fit, b_fit, c_fit):\n    return a_fit * x**2 + b_fit * np.sin(x) + c_fit * x\n\ny_fitted=f_fitted(\n    x,\n    a_fit=params[0],\n    b_fit=params[1],\n    c_fit=params[2]\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"fig = plt.figure(figsize=(10,5))\n\nplt.plot(x,y_noisy, 'o', c='dodgerblue', markersize=1.5, label='noisy data')\nplt.plot(x,y_fitted, c='fuchsia', linewidth=1.5, label='fitted function')\n\nplt.title('f(x)=a*x\xb2 + b*sin(x) + c*x (Fitted)')\nplt.legend()\nplt.grid()\n\nfig.savefig('assets/SciPy_Introduction_06.webp', bbox_inches='tight')\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"SciPy Introduction",src:n(35035).Z,width:"833",height:"451"})))}u.isMDXComponent=!0},26845:(t,e,n)=>{n.d(e,{Z:()=>i});const i=n.p+"assets/images/SciPy_Introduction_00-1fb453c98c6111715da91825cf2e551a.webp"},62435:(t,e,n)=>{n.d(e,{Z:()=>i});const i=n.p+"assets/images/SciPy_Introduction_01-bbf0296cae7c9ea3dcf57db8366f49db.webp"},33660:(t,e,n)=>{n.d(e,{Z:()=>i});const i=n.p+"assets/images/SciPy_Introduction_02-5aeb87be813babe57096ca70a36e8a44.webp"},19906:(t,e,n)=>{n.d(e,{Z:()=>i});const i=n.p+"assets/images/SciPy_Introduction_03-5aeb87be813babe57096ca70a36e8a44.webp"},94398:(t,e,n)=>{n.d(e,{Z:()=>i});const i=n.p+"assets/images/SciPy_Introduction_04-439f0af305bf9910e81896ef13740c71.webp"},87181:(t,e,n)=>{n.d(e,{Z:()=>i});const i=n.p+"assets/images/SciPy_Introduction_05-a85f66efff73de402c42280d8b5c1bdc.webp"},35035:(t,e,n)=>{n.d(e,{Z:()=>i});const i=n.p+"assets/images/SciPy_Introduction_06-0fd35a01f261e436b0cf8c894eb90bcb.webp"},60958:(t,e,n)=>{n.d(e,{Z:()=>i});const i=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-5f44d483789c3ce79f05418f930f5cd2.jpg"}}]);