"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[41605],{3905:(t,e,a)=>{a.d(e,{Zo:()=>o,kt:()=>k});var n=a(67294);function l(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){l(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function p(t,e){if(null==t)return{};var a,n,l=function(t,e){if(null==t)return{};var a,n,l={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(l[a]=t[a]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(l[a]=t[a])}return l}var m=n.createContext({}),d=function(t){var e=n.useContext(m),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},o=function(t){var e=d(t.components);return n.createElement(m.Provider,{value:e},t.children)},g={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,l=t.mdxType,r=t.originalType,m=t.parentName,o=p(t,["components","mdxType","originalType","parentName"]),u=d(a),k=l,s=u["".concat(m,".").concat(k)]||u[k]||g[k]||r;return a?n.createElement(s,i(i({ref:e},o),{},{components:a})):n.createElement(s,i({ref:e},o))}));function k(t,e){var a=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=a.length,i=new Array(r);i[0]=u;var p={};for(var m in e)hasOwnProperty.call(e,m)&&(p[m]=e[m]);p.originalType=t,p.mdxType="string"==typeof t?t:l,i[1]=p;for(var d=2;d<r;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},13442:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>m,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>p,toc:()=>d});var n=a(87462),l=(a(67294),a(3905));const r={sidebar_position:4600,slug:"2023-07-10",title:"Serving your SciKit Image Model as a Prediction API",authors:"mpolinowski",tags:["Python","Machine Learning","SKlearn","Flask"],description:"Use Flask, Docker to Deploy your ML Model to the Web"},i=void 0,p={unversionedId:"IoT-and-Machine-Learning/AIOps/2023-07-10-scikit-image-model-deployment-part1/index",id:"IoT-and-Machine-Learning/AIOps/2023-07-10-scikit-image-model-deployment-part1/index",title:"Serving your SciKit Image Model as a Prediction API",description:"Use Flask, Docker to Deploy your ML Model to the Web",source:"@site/docs/IoT-and-Machine-Learning/AIOps/2023-07-10-scikit-image-model-deployment-part1/index.md",sourceDirName:"IoT-and-Machine-Learning/AIOps/2023-07-10-scikit-image-model-deployment-part1",slug:"/IoT-and-Machine-Learning/AIOps/2023-07-10-scikit-image-model-deployment-part1/2023-07-10",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-07-10-scikit-image-model-deployment-part1/2023-07-10",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/AIOps/2023-07-10-scikit-image-model-deployment-part1/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"SKlearn",permalink:"/docs/tags/s-klearn"},{label:"Flask",permalink:"/docs/tags/flask"}],version:"current",sidebarPosition:4600,frontMatter:{sidebar_position:4600,slug:"2023-07-10",title:"Serving your SciKit Image Model as a Prediction API",authors:"mpolinowski",tags:["Python","Machine Learning","SKlearn","Flask"],description:"Use Flask, Docker to Deploy your ML Model to the Web"},sidebar:"tutorialSidebar",previous:{title:"Serving your SciKit Image Model as a Prediction API",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-07-12-scikit-image-model-deployment-part2/2023-07-12"},next:{title:"AutoML with AutoGluon for Timeseries Forecasts",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-06-23-automl-with-autogluon-timeseries-forecast/2023-06-23"}},m={},d=[{value:"Image Data Preprocessing",id:"image-data-preprocessing",level:2},{value:"Image Dataset Preparation",id:"image-dataset-preparation",level:2},{value:"Get Image Dataset from Local Directory",id:"get-image-dataset-from-local-directory",level:3},{value:"Get Image Labels from Folder Structure",id:"get-image-labels-from-folder-structure",level:3},{value:"Dataset Export",id:"dataset-export",level:3},{value:"Data Preprocessing",id:"data-preprocessing",level:2},{value:"Feature Extraction",id:"feature-extraction",level:3},{value:"Histogram of Oriented Gradients (HOG)",id:"histogram-of-oriented-gradients-hog",level:4},{value:"Model Training",id:"model-training",level:2},{value:"SGD Classifier Training Pipeline",id:"sgd-classifier-training-pipeline",level:3},{value:"Model Evaluation",id:"model-evaluation",level:3},{value:"Hyperparameter Tuning",id:"hyperparameter-tuning",level:2},{value:"Training Pipeline",id:"training-pipeline",level:3},{value:"GridSearch",id:"gridsearch",level:3},{value:"Best Model Evaluation",id:"best-model-evaluation",level:3},{value:"Trained Model Export",id:"trained-model-export",level:3},{value:"Deployment Model",id:"deployment-model",level:2},{value:"Model Training",id:"model-training-1",level:3},{value:"Model Evaluation",id:"model-evaluation-1",level:3},{value:"Model Export",id:"model-export",level:3}],o={toc:d};function g(t){let{components:e,...r}=t;return(0,l.kt)("wrapper",(0,n.Z)({},o,r,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"TST, HongKong",src:a(19902).Z,width:"1500",height:"512"})),(0,l.kt)("h1",{id:"serving-your-scikit-learn-model-as-a-prediction-api"},"Serving your SciKit Learn Model as a Prediction API"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/i-know-flowers"},"Github Repository")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#serving-your-scikit-learn-model-as-a-prediction-api"},"Serving your SciKit Learn Model as a Prediction API"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#image-data-preprocessing"},"Image Data Preprocessing")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#image-dataset-preparation"},"Image Dataset Preparation"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#get-image-dataset-from-local-directory"},"Get Image Dataset from Local Directory")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#get-image-labels-from-folder-structure"},"Get Image Labels from Folder Structure")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#dataset-export"},"Dataset Export")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#data-preprocessing"},"Data Preprocessing"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#feature-extraction"},"Feature Extraction"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#histogram-of-oriented-gradients-hog"},"Histogram of Oriented Gradients (HOG)")))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#model-training"},"Model Training"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#sgd-classifier-training-pipeline"},"SGD Classifier Training Pipeline")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#model-evaluation"},"Model Evaluation")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#hyperparameter-tuning"},"Hyperparameter Tuning"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#training-pipeline"},"Training Pipeline")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#gridsearch"},"GridSearch")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#best-model-evaluation"},"Best Model Evaluation")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#trained-model-export"},"Trained Model Export")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#deployment-model"},"Deployment Model"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#model-training-1"},"Model Training")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#model-evaluation-1"},"Model Evaluation")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#model-export"},"Model Export"))))))),(0,l.kt)("h2",{id:"image-data-preprocessing"},"Image Data Preprocessing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import collections\nfrom glob import glob\nimport matplotlib.pyplot as plt\nfrom matplotlib import patches\nimport numpy as np\nimport os\nimport pandas as pd\nimport pickle\nimport re\nfrom scipy import ndimage\nfrom skimage import (\n    io,\n    color,\n    exposure,\n    transform,\n    feature\n)\nimport seaborn as sns\nfrom sklearn.metrics import (\n    classification_report,\n    confusion_matrix,\n    ConfusionMatrixDisplay)\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.preprocessing import StandardScaler\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"SEED = 42\n")),(0,l.kt)("h2",{id:"image-dataset-preparation"},"Image Dataset Preparation"),(0,l.kt)("h3",{id:"get-image-dataset-from-local-directory"},"Get Image Dataset from Local Directory"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# get list of images https://paperswithcode.com/dataset/food-101\ndata_dir = os.listdir('dataset/animals')\nprint(data_dir)\n# ['bear', 'cat', 'chicken', 'cow', 'deer', 'dog', 'duck', 'eagle', 'elephant', 'human', 'lion', 'monkey', 'mouse', 'panda', 'pigeon', 'rabbit', 'sheep', 'tiger', 'wolf']\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"glob('./dataset/animals/{}/*.jpg'.format('wolf'))\n\n# ['./dataset/animals/wolf/wolffrontal0001.jpg',\n#  './dataset/animals/wolf/wolffrontal0002.jpg',\n#  './dataset/animals/wolf/wolffrontal0003.jpg',\n#  ...\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"all_files = []\nfor subfolder in data_dir:\n    all_files += glob('./dataset/animals/{}/*.jpg'.format(subfolder))\n    \nlen(all_files)\n# 2015\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"data_collection = io.ImageCollection(all_files)\ndata_collection.files\n# ['./dataset/animals/bear/bearfrontal0001.jpg',\n#  './dataset/animals/bear/bearfrontal0002.jpg',\n#  './dataset/animals/bear/bearfrontal0003.jpg',\n#  './dataset/animals/bear/bearfrontal0004.jpg',\n#...\n")),(0,l.kt)("h3",{id:"get-image-labels-from-folder-structure"},"Get Image Labels from Folder Structure"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# use regular expression to extract folder name as label - example:\nre.search(\n    r'./dataset/animals/(.*?)/',\n    './dataset/animals/bear/bearfrontal0001.jpg'\n).group(1)\n# label extracted: 'bear'\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def extract_labels(location):\n    label = re.search(\n        r'./dataset/animals/(.*?)/', location\n    ).group(1)\n    \n    return label\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"labels = list(map(extract_labels, data_collection.files))\nlist(set(labels))\n# ['human',\n#  'cat',\n#  'lion',\n#  'sheep',\n#  'cow',\n#  'mouse',\n#  'pigeon',\n#  'tiger',\n#  'rabbit',\n#  'elephant',\n#  'deer',\n#  'eagle',\n#  'dog',\n#  'wolf',\n#  'panda',\n#  'monkey',\n#  'duck',\n#  'chicken',\n#  'bear']\n")),(0,l.kt)("h3",{id:"dataset-export"},"Dataset Export"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def buffer(item):\n    return item\n\n# dataset_arrs = np.array(list(map(buffer,dataset)))\ndataset_list = list(map(buffer, data_collection))\ndataset_array = np.asarray(dataset_list)\ndataset_array.shape\n# (2015, 80, 80, 3)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"data_dict = dict()\n\ndata_dict['description'] = '2015 80x80 RGB images of 19 classes.'\ndata_dict['data'] = dataset_array\ndata_dict['target'] = labels\ndata_dict['labels'] = set(labels)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"label_distribution = collections.Counter(data_dict['target'])\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"plt.figure(figsize=(16, 5))\nplt.title('Target Distribution in Dataset')\n\nsns.countplot(\n    data=data_dict,\n    x='target'\n)\n\nplt.savefig('assets/Scikit_Image_Model_Deployment_01.webp', bbox_inches='tight')\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Scikit-Image Introduction",src:a(38648).Z,width:"1315",height:"451"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# plot multiple random images with labels\nran_gen = np.random.default_rng()\n\nplt.figure(figsize=(12, 12))\n\nfor i in range(12):\n    ax = plt.subplot(4, 4, i+1)\n    random_index = ran_gen.integers(low=0, high=2015, size=1)\n    plt.imshow(data_dict['data'][random_index[0]])\n    plt.title(data_dict['target'][random_index[0]])\n    plt.axis(False)\n\nplt.savefig('assets/Scikit_Image_Model_Deployment_02.webp', bbox_inches='tight')\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Scikit-Image Introduction",src:a(91164).Z,width:"948",height:"725"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# save the dateset\noutput = open('dataset/animals.pkl', 'wb')\npickle.dump(data_dict, output)\n")),(0,l.kt)("h2",{id:"data-preprocessing"},"Data Preprocessing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# load dataset pickle\ndataset = pickle.load(open('dataset/animals.pkl', 'rb'))\ndataset['description']\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"X = dataset['data']\ny = dataset['target']\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# train-test-split\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, stratify=y, random_state=SEED\n)\nprint(X_train.shape, X_test.shape)\n# (1612, 80, 80, 3) (403, 80, 80, 3)\n")),(0,l.kt)("h3",{id:"feature-extraction"},"Feature Extraction"),(0,l.kt)("h4",{id:"histogram-of-oriented-gradients-hog"},"Histogram of Oriented Gradients (HOG)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"testimg = io.imread('assets/lion.jpg')\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# hog feature descriptor\nfeature_vector, hog_image = feature.hog(testimg, orientations=8, pixels_per_cell=(16, 16),\n                    cells_per_block=(1, 1), visualize=True, channel_axis=-1)\n\n# Rescale histogram for better display\nhog_image_rescaled = exposure.rescale_intensity(hog_image, in_range=(0, 5))\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5), sharex=True, sharey=True)\n\nax1.axis('off')\nax1.imshow(testimg, cmap=plt.cm.gray)\nax1.set_title('Input image')\n\nax2.axis('off')\nax2.imshow(hog_image_rescaled, cmap=plt.cm.gray)\nax2.set_title('Histogram of Oriented Gradients')\nplt.show()\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Scikit-Image Introduction",src:a(21812).Z,width:"950",height:"324"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class hog_transformer(BaseEstimator, TransformerMixin):\n    def __init__(\n        self,\n        orientations=9,\n        pixels_per_cell=(8, 8),\n        cells_per_block=(3, 3)\n    ):\n        self.orientations = orientations\n        self.pixels_per_cell = pixels_per_cell\n        self.cells_per_block = cells_per_block\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        def local_hog(img):\n            feature_vector = feature.hog(\n                img,\n                orientations=self.orientations,\n                pixels_per_cell = self.pixels_per_cell,\n                cells_per_block = self.cells_per_block,\n                channel_axis=-1\n            )\n            \n            return feature_vector\n        \n        return [local_hog(x) for x in X]\n")),(0,l.kt)("h2",{id:"model-training"},"Model Training"),(0,l.kt)("h3",{id:"sgd-classifier-training-pipeline"},"SGD Classifier Training Pipeline"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Feature Extraction"),(0,l.kt)("li",{parentName:"ol"},"Normalization"),(0,l.kt)("li",{parentName:"ol"},"Model Fitting")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"feature_extractor = hog_transformer()\nscaler = StandardScaler()\nmodel_sgd = SGDClassifier(loss='hinge', learning_rate='adaptive', eta0=0.1, early_stopping=True)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"X_train_fv = feature_extractor.fit_transform(X_train)\nX_test_fv = feature_extractor.transform(X_test)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"X_train_fv_scaled = scaler.fit_transform(X_train_fv)\nX_test_fv_scaled = scaler.transform(X_test_fv)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"model_sgd.fit(X_train_fv_scaled, y_train)\n")),(0,l.kt)("h3",{id:"model-evaluation"},"Model Evaluation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"y_pred = model_sgd.predict(X_test_fv_scaled)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# plot predictions\nran_gen = np.random.default_rng()\n\nplt.figure(figsize=(12, 12))\n\nfor i in range(12):\n    ax = plt.subplot(4, 4, i+1)\n    random_index = ran_gen.integers(low=0, high=403, size=1)\n    plt.imshow(X_test[random_index[0]])\n    plt.title(y_pred[random_index[0]])\n    plt.axis(False)\n\nplt.savefig('assets/Scikit_Image_Model_Deployment_04.webp', bbox_inches='tight')\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Scikit-Image Introduction",src:a(30284).Z,width:"948",height:"725"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"conf_mtx = ConfusionMatrixDisplay(\n    confusion_matrix=confusion_matrix(y_test, y_pred.tolist()),\n    display_labels=[False]\n)\n\nconf_mtx.plot(cmap='plasma')\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Scikit-Image Introduction",src:a(42746).Z,width:"500",height:"413"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"eval_report = classification_report(y_test, y_pred, output_dict=True)\neval_df = pd.DataFrame(eval_report)\neval_df.transpose()\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"precision"),(0,l.kt)("th",{parentName:"tr",align:null},"recall"),(0,l.kt)("th",{parentName:"tr",align:null},"f1-score"),(0,l.kt)("th",{parentName:"tr",align:null},"support"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bear"),(0,l.kt)("td",{parentName:"tr",align:null},"0.428571"),(0,l.kt)("td",{parentName:"tr",align:null},"0.450000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.439024"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cat"),(0,l.kt)("td",{parentName:"tr",align:null},"0.600000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.562500"),(0,l.kt)("td",{parentName:"tr",align:null},"0.580645"),(0,l.kt)("td",{parentName:"tr",align:null},"32.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"chicken"),(0,l.kt)("td",{parentName:"tr",align:null},"0.611111"),(0,l.kt)("td",{parentName:"tr",align:null},"0.550000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.578947"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cow"),(0,l.kt)("td",{parentName:"tr",align:null},"0.500000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.600000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.545455"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"deer"),(0,l.kt)("td",{parentName:"tr",align:null},"0.695652"),(0,l.kt)("td",{parentName:"tr",align:null},"0.800000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.744186"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"dog"),(0,l.kt)("td",{parentName:"tr",align:null},"0.517241"),(0,l.kt)("td",{parentName:"tr",align:null},"0.576923"),(0,l.kt)("td",{parentName:"tr",align:null},"0.545455"),(0,l.kt)("td",{parentName:"tr",align:null},"26.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"duck"),(0,l.kt)("td",{parentName:"tr",align:null},"0.777778"),(0,l.kt)("td",{parentName:"tr",align:null},"0.700000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.736842"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"eagle"),(0,l.kt)("td",{parentName:"tr",align:null},"0.466667"),(0,l.kt)("td",{parentName:"tr",align:null},"0.736842"),(0,l.kt)("td",{parentName:"tr",align:null},"0.571429"),(0,l.kt)("td",{parentName:"tr",align:null},"19.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"elephant"),(0,l.kt)("td",{parentName:"tr",align:null},"0.541667"),(0,l.kt)("td",{parentName:"tr",align:null},"0.650000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.590909"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"human"),(0,l.kt)("td",{parentName:"tr",align:null},"0.826087"),(0,l.kt)("td",{parentName:"tr",align:null},"0.950000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.883721"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"lion"),(0,l.kt)("td",{parentName:"tr",align:null},"0.375000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.300000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.333333"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"monkey"),(0,l.kt)("td",{parentName:"tr",align:null},"0.466667"),(0,l.kt)("td",{parentName:"tr",align:null},"0.350000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.400000"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mouse"),(0,l.kt)("td",{parentName:"tr",align:null},"0.416667"),(0,l.kt)("td",{parentName:"tr",align:null},"0.250000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.312500"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"panda"),(0,l.kt)("td",{parentName:"tr",align:null},"0.678571"),(0,l.kt)("td",{parentName:"tr",align:null},"0.826087"),(0,l.kt)("td",{parentName:"tr",align:null},"0.745098"),(0,l.kt)("td",{parentName:"tr",align:null},"23.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pigeon"),(0,l.kt)("td",{parentName:"tr",align:null},"0.631579"),(0,l.kt)("td",{parentName:"tr",align:null},"0.600000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.615385"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rabbit"),(0,l.kt)("td",{parentName:"tr",align:null},"0.800000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.600000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.685714"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sheep"),(0,l.kt)("td",{parentName:"tr",align:null},"0.550000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.550000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.550000"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tiger"),(0,l.kt)("td",{parentName:"tr",align:null},"0.800000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.695652"),(0,l.kt)("td",{parentName:"tr",align:null},"0.744186"),(0,l.kt)("td",{parentName:"tr",align:null},"23.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"wolf"),(0,l.kt)("td",{parentName:"tr",align:null},"0.444444"),(0,l.kt)("td",{parentName:"tr",align:null},"0.400000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.421053"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"accuracy"),(0,l.kt)("td",{parentName:"tr",align:null},"0.588089"),(0,l.kt)("td",{parentName:"tr",align:null},"0.588089"),(0,l.kt)("td",{parentName:"tr",align:null},"0.588089"),(0,l.kt)("td",{parentName:"tr",align:null},"0.588089")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"macro avg"),(0,l.kt)("td",{parentName:"tr",align:null},"0.585669"),(0,l.kt)("td",{parentName:"tr",align:null},"0.586737"),(0,l.kt)("td",{parentName:"tr",align:null},"0.580204"),(0,l.kt)("td",{parentName:"tr",align:null},"403.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"weighted avg"),(0,l.kt)("td",{parentName:"tr",align:null},"0.587659"),(0,l.kt)("td",{parentName:"tr",align:null},"0.588089"),(0,l.kt)("td",{parentName:"tr",align:null},"0.582170"),(0,l.kt)("td",{parentName:"tr",align:null},"403.000000")))),(0,l.kt)("h2",{id:"hyperparameter-tuning"},"Hyperparameter Tuning"),(0,l.kt)("h3",{id:"training-pipeline"},"Training Pipeline"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"train_pipeline = Pipeline([\n    ('feature_extraction', hog_transformer(\n        orientations=9,\n        pixels_per_cell=(8, 8),\n        cells_per_block=(3, 3))\n    ),\n    ('normalization', StandardScaler()),\n    ('model_training', SGDClassifier(\n        loss='hinge', eta0=0.1,\n        learning_rate='adaptive',\n        early_stopping=True)\n    )\n])\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"train_pipeline.fit(X_train, y_train)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"y_pred_pipe = train_pipeline.predict(X_test)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"eval_report = classification_report(y_test, y_pred_pipe, output_dict=True)\neval_df = pd.DataFrame(eval_report)\neval_df.transpose()\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"precision"),(0,l.kt)("th",{parentName:"tr",align:null},"recall"),(0,l.kt)("th",{parentName:"tr",align:null},"f1-score"),(0,l.kt)("th",{parentName:"tr",align:null},"support"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bear"),(0,l.kt)("td",{parentName:"tr",align:null},"0.368421"),(0,l.kt)("td",{parentName:"tr",align:null},"0.350000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.358974"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cat"),(0,l.kt)("td",{parentName:"tr",align:null},"0.607143"),(0,l.kt)("td",{parentName:"tr",align:null},"0.531250"),(0,l.kt)("td",{parentName:"tr",align:null},"0.566667"),(0,l.kt)("td",{parentName:"tr",align:null},"32.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"chicken"),(0,l.kt)("td",{parentName:"tr",align:null},"0.571429"),(0,l.kt)("td",{parentName:"tr",align:null},"0.600000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.585366"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cow"),(0,l.kt)("td",{parentName:"tr",align:null},"0.681818"),(0,l.kt)("td",{parentName:"tr",align:null},"0.750000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.714286"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"deer"),(0,l.kt)("td",{parentName:"tr",align:null},"0.772727"),(0,l.kt)("td",{parentName:"tr",align:null},"0.850000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.809524"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"dog"),(0,l.kt)("td",{parentName:"tr",align:null},"0.354839"),(0,l.kt)("td",{parentName:"tr",align:null},"0.423077"),(0,l.kt)("td",{parentName:"tr",align:null},"0.385965"),(0,l.kt)("td",{parentName:"tr",align:null},"26.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"duck"),(0,l.kt)("td",{parentName:"tr",align:null},"0.500000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.550000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.523810"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"eagle"),(0,l.kt)("td",{parentName:"tr",align:null},"0.473684"),(0,l.kt)("td",{parentName:"tr",align:null},"0.473684"),(0,l.kt)("td",{parentName:"tr",align:null},"0.473684"),(0,l.kt)("td",{parentName:"tr",align:null},"19.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"elephant"),(0,l.kt)("td",{parentName:"tr",align:null},"0.444444"),(0,l.kt)("td",{parentName:"tr",align:null},"0.600000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.510638"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"human"),(0,l.kt)("td",{parentName:"tr",align:null},"0.680000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.850000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.755556"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"lion"),(0,l.kt)("td",{parentName:"tr",align:null},"0.500000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.350000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.411765"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"monkey"),(0,l.kt)("td",{parentName:"tr",align:null},"0.500000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.400000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.444444"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mouse"),(0,l.kt)("td",{parentName:"tr",align:null},"0.307692"),(0,l.kt)("td",{parentName:"tr",align:null},"0.200000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.242424"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"panda"),(0,l.kt)("td",{parentName:"tr",align:null},"0.772727"),(0,l.kt)("td",{parentName:"tr",align:null},"0.739130"),(0,l.kt)("td",{parentName:"tr",align:null},"0.755556"),(0,l.kt)("td",{parentName:"tr",align:null},"23.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pigeon"),(0,l.kt)("td",{parentName:"tr",align:null},"0.608696"),(0,l.kt)("td",{parentName:"tr",align:null},"0.700000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.651163"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rabbit"),(0,l.kt)("td",{parentName:"tr",align:null},"0.600000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.600000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.600000"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sheep"),(0,l.kt)("td",{parentName:"tr",align:null},"0.500000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.550000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.523810"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tiger"),(0,l.kt)("td",{parentName:"tr",align:null},"0.722222"),(0,l.kt)("td",{parentName:"tr",align:null},"0.565217"),(0,l.kt)("td",{parentName:"tr",align:null},"0.634146"),(0,l.kt)("td",{parentName:"tr",align:null},"23.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"wolf"),(0,l.kt)("td",{parentName:"tr",align:null},"0.789474"),(0,l.kt)("td",{parentName:"tr",align:null},"0.750000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.769231"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"accuracy"),(0,l.kt)("td",{parentName:"tr",align:null},"0.568238"),(0,l.kt)("td",{parentName:"tr",align:null},"0.568238"),(0,l.kt)("td",{parentName:"tr",align:null},"0.568238"),(0,l.kt)("td",{parentName:"tr",align:null},"0.568238")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"macro avg"),(0,l.kt)("td",{parentName:"tr",align:null},"0.566069"),(0,l.kt)("td",{parentName:"tr",align:null},"0.570124"),(0,l.kt)("td",{parentName:"tr",align:null},"0.564053"),(0,l.kt)("td",{parentName:"tr",align:null},"403.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"weighted avg"),(0,l.kt)("td",{parentName:"tr",align:null},"0.567078"),(0,l.kt)("td",{parentName:"tr",align:null},"0.568238"),(0,l.kt)("td",{parentName:"tr",align:null},"0.563651"),(0,l.kt)("td",{parentName:"tr",align:null},"403.000000")))),(0,l.kt)("h3",{id:"gridsearch"},"GridSearch"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"estimator = Pipeline([\n    ('feature_extraction', hog_transformer()),\n    ('normalization', StandardScaler()),\n    ('model_training', SGDClassifier())\n])\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"param_grid = [\n    {\n        'feature_extraction__orientations': [7, 8, 9, 10, 11],\n        'feature_extraction__pixels_per_cell': [(7, 7), (8, 8), (9, 9)],\n        'feature_extraction__cells_per_block': [(2, 2), (3, 3), (4, 4)],\n        'model_training__loss': ['hinge', 'squared_hinge', 'perceptron'],\n        'model_training__eta0': [0.001, 0.1, 1],\n        'model_training__learning_rate': ['optimal', 'adaptive']\n    }\n]\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"model_grid = GridSearchCV(\n    estimator,\n    param_grid,\n    scoring='accuracy',\n    cv=3,\n    n_jobs=-1,\n    verbose=2\n)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"model_grid.fit(X_train, y_train)\n# Fitting 3 folds for each of 810 candidates, totalling 2430 fits\n# time for a coffee break :)\n")),(0,l.kt)("h3",{id:"best-model-evaluation"},"Best Model Evaluation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"model_grid.best_params_\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"model_grid.best_score_\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"model_best = model_grid.best_estimator_\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"y_pred_best = model_best.predict(X_test)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"eval_report_best = classification_report(y_test, y_pred_best, output_dict=True)\neval_best_df = pd.DataFrame(eval_report_best)\neval_best_df.transpose()\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"precision"),(0,l.kt)("th",{parentName:"tr",align:null},"recall"),(0,l.kt)("th",{parentName:"tr",align:null},"f1-score"),(0,l.kt)("th",{parentName:"tr",align:null},"support"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bear"),(0,l.kt)("td",{parentName:"tr",align:null},"0.680000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.850000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.755556"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cat"),(0,l.kt)("td",{parentName:"tr",align:null},"0.750000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.656250"),(0,l.kt)("td",{parentName:"tr",align:null},"0.700000"),(0,l.kt)("td",{parentName:"tr",align:null},"32.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"chicken"),(0,l.kt)("td",{parentName:"tr",align:null},"0.809524"),(0,l.kt)("td",{parentName:"tr",align:null},"0.850000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.829268"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cow"),(0,l.kt)("td",{parentName:"tr",align:null},"0.809524"),(0,l.kt)("td",{parentName:"tr",align:null},"0.850000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.829268"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"deer"),(0,l.kt)("td",{parentName:"tr",align:null},"0.869565"),(0,l.kt)("td",{parentName:"tr",align:null},"1.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.930233"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"dog"),(0,l.kt)("td",{parentName:"tr",align:null},"0.607143"),(0,l.kt)("td",{parentName:"tr",align:null},"0.653846"),(0,l.kt)("td",{parentName:"tr",align:null},"0.629630"),(0,l.kt)("td",{parentName:"tr",align:null},"26.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"duck"),(0,l.kt)("td",{parentName:"tr",align:null},"0.789474"),(0,l.kt)("td",{parentName:"tr",align:null},"0.750000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.769231"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"eagle"),(0,l.kt)("td",{parentName:"tr",align:null},"0.647059"),(0,l.kt)("td",{parentName:"tr",align:null},"0.578947"),(0,l.kt)("td",{parentName:"tr",align:null},"0.611111"),(0,l.kt)("td",{parentName:"tr",align:null},"19.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"elephant"),(0,l.kt)("td",{parentName:"tr",align:null},"0.782609"),(0,l.kt)("td",{parentName:"tr",align:null},"0.900000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.837209"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"human"),(0,l.kt)("td",{parentName:"tr",align:null},"1.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.900000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.947368"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"lion"),(0,l.kt)("td",{parentName:"tr",align:null},"0.692308"),(0,l.kt)("td",{parentName:"tr",align:null},"0.450000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.545455"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"monkey"),(0,l.kt)("td",{parentName:"tr",align:null},"0.631579"),(0,l.kt)("td",{parentName:"tr",align:null},"0.600000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.615385"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mouse"),(0,l.kt)("td",{parentName:"tr",align:null},"0.684211"),(0,l.kt)("td",{parentName:"tr",align:null},"0.650000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.666667"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"panda"),(0,l.kt)("td",{parentName:"tr",align:null},"0.916667"),(0,l.kt)("td",{parentName:"tr",align:null},"0.956522"),(0,l.kt)("td",{parentName:"tr",align:null},"0.936170"),(0,l.kt)("td",{parentName:"tr",align:null},"23.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pigeon"),(0,l.kt)("td",{parentName:"tr",align:null},"0.666667"),(0,l.kt)("td",{parentName:"tr",align:null},"0.800000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.727273"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rabbit"),(0,l.kt)("td",{parentName:"tr",align:null},"0.866667"),(0,l.kt)("td",{parentName:"tr",align:null},"0.650000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.742857"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sheep"),(0,l.kt)("td",{parentName:"tr",align:null},"0.750000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.750000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.750000"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tiger"),(0,l.kt)("td",{parentName:"tr",align:null},"0.800000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.869565"),(0,l.kt)("td",{parentName:"tr",align:null},"0.833333"),(0,l.kt)("td",{parentName:"tr",align:null},"23.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"wolf"),(0,l.kt)("td",{parentName:"tr",align:null},"0.809524"),(0,l.kt)("td",{parentName:"tr",align:null},"0.850000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.829268"),(0,l.kt)("td",{parentName:"tr",align:null},"20.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"accuracy"),(0,l.kt)("td",{parentName:"tr",align:null},"0.764268"),(0,l.kt)("td",{parentName:"tr",align:null},"0.764268"),(0,l.kt)("td",{parentName:"tr",align:null},"0.764268"),(0,l.kt)("td",{parentName:"tr",align:null},"0.764268")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"macro avg"),(0,l.kt)("td",{parentName:"tr",align:null},"0.766448"),(0,l.kt)("td",{parentName:"tr",align:null},"0.766586"),(0,l.kt)("td",{parentName:"tr",align:null},"0.762383"),(0,l.kt)("td",{parentName:"tr",align:null},"403.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"weighted avg"),(0,l.kt)("td",{parentName:"tr",align:null},"0.765251"),(0,l.kt)("td",{parentName:"tr",align:null},"0.764268"),(0,l.kt)("td",{parentName:"tr",align:null},"0.760746"),(0,l.kt)("td",{parentName:"tr",align:null},"403.000000")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"conf_mtx_best = ConfusionMatrixDisplay(\n    confusion_matrix=confusion_matrix(y_test, y_pred_best.tolist()),\n    display_labels=[False]\n)\n\nconf_mtx_best.plot(cmap='plasma')\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Scikit-Image Introduction",src:a(55550).Z,width:"500",height:"413"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# plot predictions\nran_gen = np.random.default_rng()\n\nplt.figure(figsize=(12, 12))\n\nfor i in range(12):\n    ax = plt.subplot(4, 4, i+1)\n    random_index = ran_gen.integers(low=0, high=403, size=1)\n    plt.imshow(X_test[random_index[0]])\n    plt.title(y_pred_best[random_index[0]])\n    plt.axis(False)\n\nplt.savefig('assets/Scikit_Image_Model_Deployment_07.webp', bbox_inches='tight')\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Scikit-Image Introduction",src:a(3609).Z,width:"948",height:"725"})),(0,l.kt)("h3",{id:"trained-model-export"},"Trained Model Export"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# save the model\noutput = open('model/animal_model_best.pkl', 'wb')\npickle.dump(model_best, output)\n")),(0,l.kt)("h2",{id:"deployment-model"},"Deployment Model"),(0,l.kt)("h3",{id:"model-training-1"},"Model Training"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"best_params = {'feature_extraction__cells_per_block': (2, 2),\n 'feature_extraction__orientations': 11,\n 'feature_extraction__pixels_per_cell': (8, 8),\n 'model_training__eta0': 0.1,\n 'model_training__learning_rate': 'optimal',\n 'model_training__loss': 'perceptron'}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"feature_extractor_pipe = make_pipeline(\n    hog_transformer(\n        orientations=11,\n        pixels_per_cell=(8, 8),\n        cells_per_block=(2, 2))\n    )\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"feature_vectors = feature_extractor_pipe.fit_transform(X_train)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"normalizer = StandardScaler()\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"feature_normed = normalizer.fit_transform(feature_vectors)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"classifier = SGDClassifier(\n        loss='perceptron', eta0=0.1,\n        learning_rate='optimal',\n        early_stopping=True\n)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"classifier.fit(feature_normed, y_train)\n")),(0,l.kt)("h3",{id:"model-evaluation-1"},"Model Evaluation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"feature_vectors_test = feature_extractor_pipe.transform(X_test)\nfeature_normed_test = normalizer.transform(feature_vectors_test)\ny_pred_deploy = classifier.predict(feature_normed_test)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"eval_report_best = classification_report(y_test, y_pred_deploy, output_dict=True)\neval_best_df = pd.DataFrame(eval_report_best)\neval_best_df.transpose()\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"precision"),(0,l.kt)("th",{parentName:"tr",align:null},"recall"),(0,l.kt)("th",{parentName:"tr",align:null},"f1-score"),(0,l.kt)("th",{parentName:"tr",align:null},"support"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bear"),(0,l.kt)("td",{parentName:"tr",align:null},"0.700000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.700000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.700000"),(0,l.kt)("td",{parentName:"tr",align:null},"20.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cat"),(0,l.kt)("td",{parentName:"tr",align:null},"0.862069"),(0,l.kt)("td",{parentName:"tr",align:null},"0.781250"),(0,l.kt)("td",{parentName:"tr",align:null},"0.819672"),(0,l.kt)("td",{parentName:"tr",align:null},"32.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"chicken"),(0,l.kt)("td",{parentName:"tr",align:null},"0.937500"),(0,l.kt)("td",{parentName:"tr",align:null},"0.750000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.833333"),(0,l.kt)("td",{parentName:"tr",align:null},"20.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cow"),(0,l.kt)("td",{parentName:"tr",align:null},"0.625000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.750000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.681818"),(0,l.kt)("td",{parentName:"tr",align:null},"20.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"deer"),(0,l.kt)("td",{parentName:"tr",align:null},"0.809524"),(0,l.kt)("td",{parentName:"tr",align:null},"0.850000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.829268"),(0,l.kt)("td",{parentName:"tr",align:null},"20.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"dog"),(0,l.kt)("td",{parentName:"tr",align:null},"0.588235"),(0,l.kt)("td",{parentName:"tr",align:null},"0.769231"),(0,l.kt)("td",{parentName:"tr",align:null},"0.666667"),(0,l.kt)("td",{parentName:"tr",align:null},"26.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"duck"),(0,l.kt)("td",{parentName:"tr",align:null},"0.750000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.750000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.750000"),(0,l.kt)("td",{parentName:"tr",align:null},"20.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"eagle"),(0,l.kt)("td",{parentName:"tr",align:null},"0.590909"),(0,l.kt)("td",{parentName:"tr",align:null},"0.684211"),(0,l.kt)("td",{parentName:"tr",align:null},"0.634146"),(0,l.kt)("td",{parentName:"tr",align:null},"19.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"elephant"),(0,l.kt)("td",{parentName:"tr",align:null},"0.761905"),(0,l.kt)("td",{parentName:"tr",align:null},"0.800000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.780488"),(0,l.kt)("td",{parentName:"tr",align:null},"20.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"human"),(0,l.kt)("td",{parentName:"tr",align:null},"1.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.950000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.974359"),(0,l.kt)("td",{parentName:"tr",align:null},"20.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"lion"),(0,l.kt)("td",{parentName:"tr",align:null},"0.647059"),(0,l.kt)("td",{parentName:"tr",align:null},"0.550000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.594595"),(0,l.kt)("td",{parentName:"tr",align:null},"20.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"monkey"),(0,l.kt)("td",{parentName:"tr",align:null},"0.875000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.700000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.777778"),(0,l.kt)("td",{parentName:"tr",align:null},"20.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mouse"),(0,l.kt)("td",{parentName:"tr",align:null},"0.647059"),(0,l.kt)("td",{parentName:"tr",align:null},"0.550000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.594595"),(0,l.kt)("td",{parentName:"tr",align:null},"20.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"panda"),(0,l.kt)("td",{parentName:"tr",align:null},"0.956522"),(0,l.kt)("td",{parentName:"tr",align:null},"0.956522"),(0,l.kt)("td",{parentName:"tr",align:null},"0.956522"),(0,l.kt)("td",{parentName:"tr",align:null},"23.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pigeon"),(0,l.kt)("td",{parentName:"tr",align:null},"0.666667"),(0,l.kt)("td",{parentName:"tr",align:null},"0.800000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.727273"),(0,l.kt)("td",{parentName:"tr",align:null},"20.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rabbit"),(0,l.kt)("td",{parentName:"tr",align:null},"0.769231"),(0,l.kt)("td",{parentName:"tr",align:null},"0.500000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.606061"),(0,l.kt)("td",{parentName:"tr",align:null},"20.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sheep"),(0,l.kt)("td",{parentName:"tr",align:null},"0.619048"),(0,l.kt)("td",{parentName:"tr",align:null},"0.650000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.634146"),(0,l.kt)("td",{parentName:"tr",align:null},"20.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tiger"),(0,l.kt)("td",{parentName:"tr",align:null},"0.800000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.869565"),(0,l.kt)("td",{parentName:"tr",align:null},"0.833333"),(0,l.kt)("td",{parentName:"tr",align:null},"23.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"wolf"),(0,l.kt)("td",{parentName:"tr",align:null},"0.761905"),(0,l.kt)("td",{parentName:"tr",align:null},"0.800000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.780488"),(0,l.kt)("td",{parentName:"tr",align:null},"20.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"accuracy"),(0,l.kt)("td",{parentName:"tr",align:null},"0.749380"),(0,l.kt)("td",{parentName:"tr",align:null},"0.749380"),(0,l.kt)("td",{parentName:"tr",align:null},"0.749380"),(0,l.kt)("td",{parentName:"tr",align:null},"0.74938")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"macro avg"),(0,l.kt)("td",{parentName:"tr",align:null},"0.756191"),(0,l.kt)("td",{parentName:"tr",align:null},"0.745304"),(0,l.kt)("td",{parentName:"tr",align:null},"0.746028"),(0,l.kt)("td",{parentName:"tr",align:null},"403.00000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"weighted avg"),(0,l.kt)("td",{parentName:"tr",align:null},"0.759071"),(0,l.kt)("td",{parentName:"tr",align:null},"0.749380"),(0,l.kt)("td",{parentName:"tr",align:null},"0.749534"),(0,l.kt)("td",{parentName:"tr",align:null},"403.00000")))),(0,l.kt)("h3",{id:"model-export"},"Model Export"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# save the model\noutput = open('model/animal_model_deployment.pkl', 'wb')\npickle.dump(classifier, output)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# save fitted normalizer\noutput = open('model/animal_model_deployment_scaler.pkl', 'wb')\npickle.dump(normalizer, output)\n")))}g.isMDXComponent=!0},38648:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/Scikit_Image_Model_Deployment_01-80812a58e9581c9e80ff66ac81e9bd8d.webp"},91164:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/Scikit_Image_Model_Deployment_02-ec9f97f5cc34ee8e777283b7c9875897.webp"},21812:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/Scikit_Image_Model_Deployment_03-3b3931a2a80bc2183c6d7f44069f44d0.webp"},30284:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/Scikit_Image_Model_Deployment_04-55734fda0fc5812b2381442f25649cfd.webp"},42746:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/Scikit_Image_Model_Deployment_05-36d8b114c04dc17de288ca12796cbc10.webp"},55550:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/Scikit_Image_Model_Deployment_06-050534d42c01062b548cd55cdc3354ee.webp"},3609:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/Scikit_Image_Model_Deployment_07-a3ba534c4017a6abcd3c060ef1e48ab7.webp"},19902:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-c77de99ac2aaaf4bfc10d6424f4476da.jpg"}}]);