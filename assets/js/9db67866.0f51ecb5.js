"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[35325],{243191:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=t(474848),a=t(28453);const r={sidebar_position:4340,slug:"2023-07-21",title:"Introduction to Caffe2",authors:"mpolinowski",tags:["Python","Machine Learning"],description:"Deep Learning Framework with Python for flexibility and C++ for speed."},o="Introduction to Caffe2",s={id:"IoT-and-Machine-Learning/ML/2023-07-21-introduction-to-pytorch-caffe2/index",title:"Introduction to Caffe2",description:"Deep Learning Framework with Python for flexibility and C++ for speed.",source:"@site/docs/IoT-and-Machine-Learning/ML/2023-07-21-introduction-to-pytorch-caffe2/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2023-07-21-introduction-to-pytorch-caffe2",slug:"/IoT-and-Machine-Learning/ML/2023-07-21-introduction-to-pytorch-caffe2/2023-07-21",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-07-21-introduction-to-pytorch-caffe2/2023-07-21",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2023-07-21-introduction-to-pytorch-caffe2/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"}],version:"current",sidebarPosition:4340,frontMatter:{sidebar_position:4340,slug:"2023-07-21",title:"Introduction to Caffe2",authors:"mpolinowski",tags:["Python","Machine Learning"],description:"Deep Learning Framework with Python for flexibility and C++ for speed."},sidebar:"tutorialSidebar",previous:{title:"Working with ONNX Models",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-07-25-onnx-models/2023-07-25"},next:{title:"SQL in Data Science - Machine Learning",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-07-02-sql-in-data-science-ml/2023-07-02"}},l={},c=[{value:"Setup with Docker",id:"setup-with-docker",level:2},{value:"Testing Installation",id:"testing-installation",level:3},{value:"Caffe Tutorial",id:"caffe-tutorial",level:2},{value:"Caffe2 Basic Concepts - Operators &amp; Nets",id:"caffe2-basic-concepts---operators--nets",level:3},{value:"Workspaces",id:"workspaces",level:4},{value:"Operators",id:"operators",level:4},{value:"Nets",id:"nets",level:4},{value:"Loading Pre-Trained Models",id:"loading-pre-trained-models",level:2},{value:"Description",id:"description",level:3},{value:"Code",id:"code",level:3},{value:"Inputs",id:"inputs",level:4},{value:"Setup paths",id:"setup-paths",level:4},{value:"Image Preprocessing",id:"image-preprocessing",level:4},{value:"Prepare the CNN and run the net!",id:"prepare-the-cnn-and-run-the-net",level:3},{value:"Process Results",id:"process-results",level:4},{value:"Feeding Larger Batches",id:"feeding-larger-batches",level:4},{value:"Loading Datasets",id:"loading-datasets",level:2},{value:"Image Loading and Preprocessing",id:"image-loading-and-preprocessing",level:2},{value:"Caffe Uses BGR Order",id:"caffe-uses-bgr-order",level:3},{value:"Caffe Prefers CHW Order",id:"caffe-prefers-chw-order",level:3},{value:"Rotation and Mirroring",id:"rotation-and-mirroring",level:3},{value:"Sizing",id:"sizing",level:3},{value:"Rescaling",id:"rescaling",level:3},{value:"Cropping",id:"cropping",level:3},{value:"Upscaling",id:"upscaling",level:3},{value:"Batch Processing",id:"batch-processing",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Guangzhou, China",src:t(235349).A+"",width:"1500",height:"581"})}),"\n",(0,i.jsx)(n.h1,{id:"introduction-to-caffe2",children:"Introduction to Caffe2"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#introduction-to-caffe2",children:"Introduction to Caffe2"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#setup-with-docker",children:"Setup with Docker"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#testing-installation",children:"Testing Installation"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#caffe-tutorial",children:"Caffe Tutorial"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#caffe2-basic-concepts---operators--nets",children:"Caffe2 Basic Concepts - Operators & Nets"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#workspaces",children:"Workspaces"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#operators",children:"Operators"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#nets",children:"Nets"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#loading-pre-trained-models",children:"Loading Pre-Trained Models"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#description",children:"Description"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#code",children:"Code"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#inputs",children:"Inputs"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#setup-paths",children:"Setup paths"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#image-preprocessing",children:"Image Preprocessing"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#prepare-the-cnn-and-run-the-net",children:"Prepare the CNN and run the net!"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#process-results",children:"Process Results"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#feeding-larger-batches",children:"Feeding Larger Batches"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#loading-datasets",children:"Loading Datasets"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#image-loading-and-preprocessing",children:"Image Loading and Preprocessing"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#caffe-uses-bgr-order",children:"Caffe Uses BGR Order"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#caffe-prefers-chw-order",children:"Caffe Prefers CHW Order"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#rotation-and-mirroring",children:"Rotation and Mirroring"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#sizing",children:"Sizing"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#rescaling",children:"Rescaling"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#cropping",children:"Cropping"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#upscaling",children:"Upscaling"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#batch-processing",children:"Batch Processing"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/mpolinowski/morning-caffe2",children:"Github Repository"})}),"\n",(0,i.jsx)(n.h2,{id:"setup-with-docker",children:"Setup with Docker"}),"\n",(0,i.jsxs)(n.p,{children:["There ",(0,i.jsx)(n.a,{href:"https://hub.docker.com/r/caffe2ai/caffe2",children:"several images available"})," with and without GPU support - the image tagged ",(0,i.jsx)(n.code,{children:"latest"})," comes with everything included:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker pull caffe2ai/caffe2:latest\n\ndocker run -it -v /opt/caffe:/home -p 8888:8888 caffe2ai/caffe2:latest jupyter notebook --no-browser --ip=0.0.0.0 --port=8888 --allow-root /home\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Make sure that ",(0,i.jsx)(n.code,{children:"/opt/caffe"})," exists and can be written into by the Docker user."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Copy/paste this URL into your browser when you connect for the first time,\nto login with a token: http://0.0.0.0:8888/?token=9346cde0b9a37cda784d193e4e03a18c760847ace645f6cb\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can now access the ",(0,i.jsx)(n.strong,{children:"Jupyter Notebook"})," on your servers IP address on port ",(0,i.jsx)(n.code,{children:"8888"})," with the generated token above."]}),"\n",(0,i.jsx)(n.h3,{id:"testing-installation",children:"Testing Installation"}),"\n",(0,i.jsx)(n.p,{children:"Create a new notebook and verify that that Caffe2 is up and running:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'from caffe2.python import workspace\nimport numpy as np\nprint ("Creating random data")\ndata = np.random.rand(3, 2)\nprint(data)\nprint ("Adding data to workspace ...")\nworkspace.FeedBlob("mydata", data)\nprint ("Retrieving data from workspace")\nmydata = workspace.FetchBlob("mydata")\nprint(mydata) \n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Introduction to Caffe2",src:t(839073).A+"",width:"1057",height:"702"})}),"\n",(0,i.jsx)(n.p,{children:"It works!"}),"\n",(0,i.jsx)(n.h2,{id:"caffe-tutorial",children:"Caffe Tutorial"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd /opt/caffe\ngit clone --recursive https://github.com/caffe2/tutorials caffe2_tutorials\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Introduction to Caffe2",src:t(890090).A+"",width:"999",height:"367"})}),"\n",(0,i.jsx)(n.h3,{id:"caffe2-basic-concepts---operators--nets",children:"Caffe2 Basic Concepts - Operators & Nets"}),"\n",(0,i.jsx)(n.p,{children:"In this tutorial we will go through a set of Caffe2 basics: the basic concepts including how operators and nets are being written."}),"\n",(0,i.jsxs)(n.p,{children:["First, let's import Caffe2. ",(0,i.jsx)(n.code,{children:"core"})," and ",(0,i.jsx)(n.code,{children:"workspace"})," are usually the two that you need most. If you want to manipulate protocol buffers generated by Caffe2, you probably also want to import ",(0,i.jsx)(n.code,{children:"caffe2_pb2"})," from ",(0,i.jsx)(n.code,{children:"caffe2.proto"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\n# We'll also import a few standard python libraries\nfrom matplotlib import pyplot\nimport numpy as np\nimport time\n\n# These are the droids you are looking for.\nfrom caffe2.python import core, workspace\nfrom caffe2.proto import caffe2_pb2\n\n# Let's show all plots inline.\n%matplotlib inline\n"})}),"\n",(0,i.jsx)(n.p,{children:"You might see a warning saying that caffe2 does not have GPU support. That means you are running a CPU-only build. Don't be alarmed - anything CPU is still runnable without a problem."}),"\n",(0,i.jsx)(n.h4,{id:"workspaces",children:"Workspaces"}),"\n",(0,i.jsx)(n.p,{children:"Let's cover workspaces first, where all the data resides."}),"\n",(0,i.jsx)(n.p,{children:"Similar to Matlab, the Caffe2 workspace consists of blobs you create and store in memory. For now, consider a blob to be a N-dimensional Tensor similar to numpy's ndarray, but contiguous. Down the road, we will show you that a blob is actually a typed pointer that can store any type of C++ objects, but Tensor is the most common type stored in a blob. Let's show what the interface looks like."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Blobs()"})," prints out all existing blobs in the workspace.\n",(0,i.jsx)(n.code,{children:"HasBlob()"})," queries if a blob exists in the workspace. As of now, we don't have any."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print("Current blobs in the workspace: {}".format(workspace.Blobs()))\nprint("Workspace has blob \'X\'? {}".format(workspace.HasBlob("X")))\n'})}),"\n",(0,i.jsxs)(n.p,{children:["We can feed blobs into the workspace using ",(0,i.jsx)(n.code,{children:"FeedBlob()"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'X = np.random.randn(2, 3).astype(np.float32)\nprint("Generated X from numpy:\\n{}".format(X))\nworkspace.FeedBlob("X", X)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now, let's take a look at what blobs are in the workspace."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print("Current blobs in the workspace: {}".format(workspace.Blobs()))\nprint("Workspace has blob \'X\'? {}".format(workspace.HasBlob("X")))\nprint("Fetched X:\\n{}".format(workspace.FetchBlob("X")))\n'})}),"\n",(0,i.jsx)(n.p,{children:"Let's verify that the arrays are equal."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'np.testing.assert_array_equal(X, workspace.FetchBlob("X"))\n'})}),"\n",(0,i.jsx)(n.p,{children:"Note that if you try to access a blob that does not exist, an error will be thrown:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'try:\n    workspace.FetchBlob("invincible_pink_unicorn")\nexcept RuntimeError as err:\n    print(err)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["One thing that you might not use immediately: you can have multiple workspaces in Python using different names, and switch between them. Blobs in different workspaces are separate from each other. You can query the current workspace using ",(0,i.jsx)(n.code,{children:"CurrentWorkspace"}),". Let's try switching the workspace by name (gutentag) and creating a new one if it doesn't exist."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print("Current workspace: {}".format(workspace.CurrentWorkspace()))\nprint("Current blobs in the workspace: {}".format(workspace.Blobs()))\n\n# Switch the workspace. The second argument "True" means creating \n# the workspace if it is missing.\nworkspace.SwitchWorkspace("gutentag", True)\n\n# Let\'s print the current workspace. Note that there is nothing in the\n# workspace yet.\nprint("Current workspace: {}".format(workspace.CurrentWorkspace()))\nprint("Current blobs in the workspace: {}".format(workspace.Blobs()))\n'})}),"\n",(0,i.jsx)(n.p,{children:"Let's switch back to the default workspace."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'workspace.SwitchWorkspace("default")\nprint("Current workspace: {}".format(workspace.CurrentWorkspace()))\nprint("Current blobs in the workspace: {}".format(workspace.Blobs()))\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Finally, ",(0,i.jsx)(n.code,{children:"ResetWorkspace()"})," clears anything that is in the current workspace."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'workspace.ResetWorkspace()\nprint("Current blobs in the workspace after reset: {}".format(workspace.Blobs()))\n'})}),"\n",(0,i.jsx)(n.h4,{id:"operators",children:"Operators"}),"\n",(0,i.jsxs)(n.p,{children:["Operators in Caffe2 are kind of like functions. From the C++ side, they all derive from a common interface, and are registered by type, so that we can call different operators during runtime. The interface of operators is defined in ",(0,i.jsx)(n.code,{children:"caffe2/proto/caffe2.proto"}),". Basically, it takes in a bunch of inputs, and produces a bunch of outputs."]}),"\n",(0,i.jsxs)(n.p,{children:['Remember, when we say "create an operator" in Caffe2 Python, nothing gets run yet. All it does is create the protocol buffer that specifies what the operator should be. At a later time it will be sent to the C++ backend for execution. If you are not familiar with protobuf, it is a json-like serialization tool for structured data. Find more about protocol buffers ',(0,i.jsx)(n.a,{href:"https://developers.google.com/protocol-buffers/",children:"here"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Let's see an actual example."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Create an operator.\nop = core.CreateOperator(\n    "Relu", # The type of operator that we want to run\n    ["X"], # A list of input blobs by their names\n    ["Y"], # A list of output blobs by their names\n)\n# and we are done!\n'})}),"\n",(0,i.jsx)(n.p,{children:"As we mentioned, the created op is actually a protobuf object. Let's show the content."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print("Type of the created op is: {}".format(type(op)))\nprint("Content:\\n")\nprint(str(op))\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Ok, let's run the operator. We first feed the input X to the workspace.\nThen the simplest way to run an operator is to do ",(0,i.jsx)(n.code,{children:"workspace.RunOperatorOnce(operator)"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'workspace.FeedBlob("X", np.random.randn(2, 3).astype(np.float32))\nworkspace.RunOperatorOnce(op)\n'})}),"\n",(0,i.jsx)(n.p,{children:"After execution, let's see if the operator is doing the right thing."}),"\n",(0,i.jsxs)(n.p,{children:["In this case, the operator is a common activation function used in neural networks, called [ReLU](",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Rectifier_(neural_networks)",children:"https://en.wikipedia.org/wiki/Rectifier_(neural_networks)"}),", or Rectified Linear Unit activation. ReLU activation helps to add necessary non-linear characteristics to the neural network classifier, and is defined as:"]}),"\n",(0,i.jsx)(n.p,{children:"$$ReLU(x) = max(0, x)$$"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print("Current blobs in the workspace: {}\\n".format(workspace.Blobs()))\nprint("X:\\n{}\\n".format(workspace.FetchBlob("X")))\nprint("Y:\\n{}\\n".format(workspace.FetchBlob("Y")))\nprint("Expected:\\n{}\\n".format(np.maximum(workspace.FetchBlob("X"), 0)))\n'})}),"\n",(0,i.jsx)(n.p,{children:"This is working if your Expected output matches your Y output in this example."}),"\n",(0,i.jsx)(n.p,{children:"Operators also take optional arguments if needed. They are specified as key-value pairs. Let's take a look at one simple example, which takes a tensor and fills it with Gaussian random variables."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'op = core.CreateOperator(\n    "GaussianFill",\n    [], # GaussianFill does not need any parameters.\n    ["Z"],\n    shape=[100, 100], # shape argument as a list of ints.\n    mean=1.0,  # mean as a single float\n    std=1.0, # std as a single float\n)\nprint("Content of op:\\n")\nprint(str(op))\n'})}),"\n",(0,i.jsx)(n.p,{children:"Let's run it and see if things are as intended."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'workspace.RunOperatorOnce(op)\ntemp = workspace.FetchBlob("Z")\npyplot.hist(temp.flatten(), bins=50)\npyplot.title("Distribution of Z")\n'})}),"\n",(0,i.jsx)(n.p,{children:"If you see a bell shaped curve then it worked!"}),"\n",(0,i.jsx)(n.h4,{id:"nets",children:"Nets"}),"\n",(0,i.jsxs)(n.p,{children:["Nets are essentially computation graphs. We keep the name ",(0,i.jsx)(n.code,{children:"Net"})," for backward consistency (and also to pay tribute to neural nets). A Net is composed of multiple operators just like a program written as a sequence of commands. Let's take a look."]}),"\n",(0,i.jsx)(n.p,{children:"When we talk about nets, we will also talk about BlobReference, which is an object that wraps around a string so we can do easy chaining of operators."}),"\n",(0,i.jsx)(n.p,{children:"Let's create a network that is essentially the equivalent of the following python math:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"X = np.random.randn(2, 3)\nW = np.random.randn(5, 3)\nb = np.ones(5)\nY = X * W^T + b\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We'll show the progress step by step. Caffe2's ",(0,i.jsx)(n.code,{children:"core.Net"})," is a wrapper class around a NetDef protocol buffer."]}),"\n",(0,i.jsx)(n.p,{children:"When creating a network, its underlying protocol buffer is essentially empty other than the network name. Let's create the net and then show the proto content."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'net = core.Net("my_first_net")\nprint("Current network proto:\\n\\n{}".format(net.Proto()))\n'})}),"\n",(0,i.jsx)(n.p,{children:"Let's create a blob called X, and use GaussianFill to fill it with some random data."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'X = net.GaussianFill([], ["X"], mean=0.0, std=1.0, shape=[2, 3], run_once=0)\nprint("New network proto:\\n\\n{}".format(net.Proto()))\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You might have observed a few differences from the earlier ",(0,i.jsx)(n.code,{children:"core.CreateOperator"})," call. Basically, when using a net, you can directly create an operator ",(0,i.jsx)(n.em,{children:"and"})," add it to the net at the same time by calling ",(0,i.jsx)(n.code,{children:"net.SomeOp"})," where SomeOp is a registered type string of an operator. This gets translated to:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'op = core.CreateOperator("SomeOp", ...)\nnet.Proto().op.append(op)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Also, you might be wondering what X is. X is a ",(0,i.jsx)(n.code,{children:"BlobReference"})," which records two things:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The blob's name, which is accessed with ",(0,i.jsx)(n.code,{children:"str(X)"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The net it got created from, which is recorded by the internal variable ",(0,i.jsx)(n.code,{children:"_from_net"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Let's verify it. Also, remember, we are not actually running anything yet, so X contains nothing but a symbol. Don't expect to get any numerical values out of it right now :)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print("Type of X is: {}".format(type(X)))\nprint("The blob name is: {}".format(str(X)))\n'})}),"\n",(0,i.jsx)(n.p,{children:"Let's continue to create W and b."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'W = net.GaussianFill([], ["W"], mean=0.0, std=1.0, shape=[5, 3], run_once=0)\nb = net.ConstantFill([], ["b"], shape=[5,], value=1.0, run_once=0)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now, one simple code sugar: since the BlobReference objects know what net it is generated from, in addition to creating operators from net, you can also create operators from BlobReferences. Let's create the FC operator in this way."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'Y = X.FC([W, b], ["Y"])\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Under the hood, ",(0,i.jsx)(n.code,{children:"X.FC(...)"})," simply delegates to ",(0,i.jsx)(n.code,{children:"net.FC"})," by inserting ",(0,i.jsx)(n.code,{children:"X"})," as the first input of the corresponding operator, so what we did above is equivalent to"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'Y = net.FC([X, W, b], ["Y"])\n'})}),"\n",(0,i.jsx)(n.p,{children:"Let's take a look at the current network."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print("Current network proto:\\n\\n{}".format(net.Proto()))\n'})}),"\n",(0,i.jsx)(n.p,{children:"Too verbose huh? Let's try to visualize it as a graph. Caffe2 ships with a very minimal graph visualization tool for this purpose."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from caffe2.python import net_drawer\nfrom IPython import display\ngraph = net_drawer.GetPydotGraph(net, rankdir="LR")\ndisplay.Image(graph.create_png(), width=800)\n'})}),"\n",(0,i.jsx)(n.p,{children:"So we have defined a Net, but nothing has been executed yet. Remember that the net above is essentially a protobuf that holds the definition of the network. When we actually run the network, what happens under the hood is:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A C++ net object is instantiated from the protobuf"}),"\n",(0,i.jsx)(n.li,{children:"The instantiated net's Run() function is called"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Before we do anything, we should clear any earlier workspace variables with ",(0,i.jsx)(n.code,{children:"ResetWorkspace()"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Then there are two ways to run a net from Python. We will do the first option in the example below."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Call ",(0,i.jsx)(n.code,{children:"workspace.RunNetOnce()"}),", which instantiates, runs and immediately destructs the network"]}),"\n",(0,i.jsxs)(n.li,{children:["Call ",(0,i.jsx)(n.code,{children:"workspace.CreateNet()"})," to create the C++ net object owned by the workspace, then call ",(0,i.jsx)(n.code,{children:"workspace.RunNet()"}),", passing the name of the network to it"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'workspace.ResetWorkspace()\nprint("Current blobs in the workspace: {}".format(workspace.Blobs()))\nworkspace.RunNetOnce(net)\nprint("Blobs in the workspace after execution: {}".format(workspace.Blobs()))\n# Let\'s dump the contents of the blobs\nfor name in workspace.Blobs():\n    print("{}:\\n{}".format(name, workspace.FetchBlob(name)))\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Now let's try the second way to create the net, and run it. First, clear the variables with ",(0,i.jsx)(n.code,{children:"ResetWorkspace()"}),". Then create the net with the workspace's ",(0,i.jsx)(n.code,{children:"net"})," object that we created earlier using ",(0,i.jsx)(n.code,{children:"CreateNet(net_object)"}),". Finally, run the net with ",(0,i.jsx)(n.code,{children:"RunNet(net_name)"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'workspace.ResetWorkspace()\nprint("Current blobs in the workspace: {}".format(workspace.Blobs()))\nworkspace.CreateNet(net)\nworkspace.RunNet(net.Proto().name)\nprint("Blobs in the workspace after execution: {}".format(workspace.Blobs()))\nfor name in workspace.Blobs():\n    print("{}:\\n{}".format(name, workspace.FetchBlob(name)))\n'})}),"\n",(0,i.jsxs)(n.p,{children:["There are a few differences between ",(0,i.jsx)(n.code,{children:"RunNetOnce"})," and ",(0,i.jsx)(n.code,{children:"RunNet"}),", but the main difference is the computational overhead. Since ",(0,i.jsx)(n.code,{children:"RunNetOnce"})," involves serializing the protobuf to pass between Python and C and instantiating the network, it may take longer to run. Let's run a test and see what the time overhead is."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# It seems that %timeit magic does not work well with\n# C++ extensions so we'll basically do for loops\nstart = time.time()\nfor i in range(1000):\n    workspace.RunNetOnce(net)\nend = time.time()\nprint('Run time per RunNetOnce: {}'.format((end - start) / 1000))\n\nstart = time.time()\nfor i in range(1000):\n    workspace.RunNet(net.Proto().name)\nend = time.time()\nprint('Run time per RunNet: {}'.format((end - start) / 1000))\n"})}),"\n",(0,i.jsx)(n.p,{children:"Congratulations, you now know the many of the key components of the Caffe2 Python API! Ready for more Caffe2? Check out the rest of the tutorials for a variety of interesting use-cases!"}),"\n",(0,i.jsx)(n.h2,{id:"loading-pre-trained-models",children:"Loading Pre-Trained Models"}),"\n",(0,i.jsx)(n.h3,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["In this tutorial, we will use the pre-trained ",(0,i.jsx)(n.code,{children:"squeezenet"})," model from the ",(0,i.jsx)(n.a,{href:"https://github.com/caffe2/caffe2/wiki/Model-Zoo",children:"ModelZoo"})," to classify our own images. As input, we will provide the path (or URL) to an image we want to classify. It will also be helpful to know the ",(0,i.jsx)(n.a,{href:"https://gist.githubusercontent.com/aaronmarkham/cd3a6b6ac071eca6f7b4a6e40e6038aa/raw/9edb4038a37da6b5a44c3b5bc52e448ff09bfe5b/alexnet_codes",children:"ImageNet object code"}),' for the image so we can verify our results. The \'object code\' is nothing more than the integer label for the class used during training, for example "985" is the code for the class "daisy". Note, although we are using squeezenet here, this tutorial serves as a somewhat universal method for running inference on pretrained models.']}),"\n",(0,i.jsx)(n.p,{children:"Note, assuming the last layer of the network is a softmax layer, the results come back as a multidimensional array of probabilities with length equal to the number of classes that the model was trained on. The probabilities may be indexed by the object code (integer type), so if you know the object code you can index the results array at that index to view the network's confidence that the input image is of that class."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Model Download Options"})}),"\n",(0,i.jsxs)(n.p,{children:["Although we will use ",(0,i.jsx)(n.code,{children:"squeezenet"})," here, you can check out the ",(0,i.jsx)(n.a,{href:"https://github.com/caffe2/caffe2/wiki/Model-Zoo",children:"Model Zoo for pre-trained models"})," to browse/download a variety of pretrained models, or you can use Caffe2's ",(0,i.jsx)(n.code,{children:"caffe2.python.models.download"})," module to easily acquire pre-trained models from ",(0,i.jsx)(n.a,{href:"http://github.com/caffe2/models",children:"Github caffe2/models"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For our purposes, we will use the ",(0,i.jsx)(n.code,{children:"models.download"})," module to download ",(0,i.jsx)(n.code,{children:"squeezenet"})," into the ",(0,i.jsx)(n.code,{children:"/caffe2/python/models"})," folder of our local Caffe2 installation with the following command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"python -m caffe2.python.models.download -i squeezenet\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Update"}),": The repository has been archived - I am manually downloading this into the container ",(0,i.jsx)(n.code,{children:"/caffe2/caffe2/python/models/squeezenet"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"wget https://github.com/facebookarchive/models/raw/master/squeezenet/init_net.pb"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"wget https://github.com/facebookarchive/models/raw/master/squeezenet/predict_net.pb"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"wget https://github.com/facebookarchive/models/raw/master/squeezenet/value_info.json"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If the above download worked then you should have a directory named squeezenet in your ",(0,i.jsx)(n.code,{children:"/caffe2/python/models"})," folder that contains ",(0,i.jsx)(n.code,{children:"init_net.pb"})," and ",(0,i.jsx)(n.code,{children:"predict_net.pb"}),". Note, if you do not use the ",(0,i.jsx)(n.code,{children:"-i"})," flag, the model will be downloaded to your CWD, however it will still be a directory named squeezenet containing two protobuf files. Alternatively, if you wish to download all of the models, you can clone the entire repo using:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"git clone https://github.com/caffe2/models\n"})}),"\n",(0,i.jsx)(n.h3,{id:"code",children:"Code"}),"\n",(0,i.jsx)(n.p,{children:"Before we start, lets take care of the required imports."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n%matplotlib inline\nfrom caffe2.proto import caffe2_pb2\nimport numpy as np\nimport skimage.io\nimport skimage.transform\nfrom matplotlib import pyplot\nimport os\nfrom caffe2.python import core, workspace, models\nimport urllib2\nimport operator\nprint("Required modules imported.")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"!mkdir -p /caffe2/caffe2/python/models/squeezenet\n\n!wget https://github.com/facebookarchive/models/raw/master/squeezenet/init_net.pb -P /caffe2/caffe2/python/models/squeezenet\n!wget https://github.com/facebookarchive/models/raw/master/squeezenet/predict_net.pb -P /caffe2/caffe2/python/models/squeezenet\n!wget https://github.com/facebookarchive/models/raw/master/squeezenet/value_info.json -P /caffe2/caffe2/python/models/squeezenet\n\n!ls -la /caffe2/caffe2/python/models/squeezenet\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"total 6052\ndrwxr-xr-x 1 root root      80 Jul 24 06:17 .\ndrwxr-xr-x 1 root root      20 Jul 24 06:13 ..\n-rw-r--r-- 1 root root 6181001 Jul 24 06:15 init_net.pb\n-rw-r--r-- 1 root root    6175 Jul 24 06:15 predict_net.pb\n-rw-r--r-- 1 root root      32 Jul 24 06:17 value_info.json\n"})}),"\n",(0,i.jsx)(n.h4,{id:"inputs",children:"Inputs"}),"\n",(0,i.jsx)(n.p,{children:"Here, we will specify the inputs to be used for this run, including the input image, the model location, the mean file (optional), the required size of the image, and the location of the label mapping file."}),"\n",(0,i.jsxs)(n.p,{children:["I downloaded an image ",(0,i.jsx)(n.code,{children:"flower.jpg"})," and placed it next to the Jupyter Notebook in ",(0,i.jsx)(n.code,{children:"/opt/caffe/caffe2_tutorials"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Configuration --- Change to your setup and preferences!\n# This directory should contain the models downloaded from the model zoo. To run this \n#   tutorial, make sure there is a 'squeezenet' directory at this location that \n#   contains both the 'init_net.pb' and 'predict_net.pb'\nCAFFE_MODELS = \"/caffe2/caffe2/python/models\"\n\n# Some sample images you can try, or use any URL to a regular image.\nIMAGE_LOCATION = \"flower.jpg\"\n\n# What model are we using?\n#    Format below is the model's: <folder, INIT_NET, predict_net, mean, input image size>\n#    You can switch 'squeezenet' out with 'bvlc_alexnet', 'bvlc_googlenet' or others that you have downloaded\nMODEL = 'squeezenet', 'init_net.pb', 'predict_net.pb', 'ilsvrc_2012_mean.npy', 227\n\n# labels - these help decypher the output and source from a list from ImageNet's object labels \n#    to provide an result like \"tabby cat\" or \"lemon\" depending on what's in the picture \n#   you submit to the CNN.\nlabels =  \"https://gist.githubusercontent.com/aaronmarkham/cd3a6b6ac071eca6f7b4a6e40e6038aa/raw/9edb4038a37da6b5a44c3b5bc52e448ff09bfe5b/alexnet_codes\"\nprint(\"Config set!\")\n"})}),"\n",(0,i.jsx)(n.h4,{id:"setup-paths",children:"Setup paths"}),"\n",(0,i.jsx)(n.p,{children:"With the configs set, we can now load the mean file (if it exists), as well as the predict net and the init net."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# set paths and variables from model choice and prep image\nCAFFE_MODELS = os.path.expanduser(CAFFE_MODELS)\n\n# mean can be 128 or custom based on the model\n# gives better results to remove the colors found in all of the training images\nMEAN_FILE = os.path.join(CAFFE_MODELS, MODEL[0], MODEL[3])\nif not os.path.exists(MEAN_FILE):\n    print("No mean file found!")\n    mean = 128\nelse:\n    print ("Mean file found!")\n    mean = np.load(MEAN_FILE).mean(1).mean(1)\n    mean = mean[:, np.newaxis, np.newaxis]\nprint("mean was set to: ", mean)\n\n# some models were trained with different image sizes, this helps you calibrate your image\nINPUT_IMAGE_SIZE = MODEL[4]\n\n# make sure all of the files are around...\nINIT_NET = os.path.join(CAFFE_MODELS, MODEL[0], MODEL[1])\nPREDICT_NET = os.path.join(CAFFE_MODELS, MODEL[0], MODEL[2])\n\n# Check to see if the files exist\nif not os.path.exists(INIT_NET):\n    print("WARNING: " + INIT_NET + " not found!")\nelse:\n    if not os.path.exists(PREDICT_NET):\n        print("WARNING: " + PREDICT_NET + " not found!")\n    else:\n        print("All needed files found!")\n        \n'})}),"\n",(0,i.jsx)(n.h4,{id:"image-preprocessing",children:"Image Preprocessing"}),"\n",(0,i.jsx)(n.p,{children:"Now that we have our inputs specified and verified the existance of the input network, we can load the image and pre-processing the image for ingestion into a Caffe2 convolutional neural network! This is a very important step as the trained CNN requires a specifically sized input image whose values are from a particular distribution."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Function to crop the center cropX x cropY pixels from the input image\ndef crop_center(img,cropx,cropy):\n    y,x,c = img.shape\n    startx = x//2-(cropx//2)\n    starty = y//2-(cropy//2)    \n    return img[starty:starty+cropy,startx:startx+cropx]\n\n# Function to rescale the input image to the desired height and/or width. This function will preserve\n#   the aspect ratio of the original image while making the image the correct scale so we can retrieve\n#   a good center crop. This function is best used with center crop to resize any size input images into\n#   specific sized images that our model can use.\ndef rescale(img, input_height, input_width):\n    # Get original aspect ratio\n    aspect = img.shape[1]/float(img.shape[0])\n    if(aspect>1):\n        # landscape orientation - wide image\n        res = int(aspect * input_height)\n        imgScaled = skimage.transform.resize(img, (input_width, res))\n    if(aspect<1):\n        # portrait orientation - tall image\n        res = int(input_width/aspect)\n        imgScaled = skimage.transform.resize(img, (res, input_height))\n    if(aspect == 1):\n        imgScaled = skimage.transform.resize(img, (input_width, input_height))\n    return imgScaled\n\n# Load the image as a 32-bit float\n#    Note: skimage.io.imread returns a HWC ordered RGB image of some size\nimg = skimage.img_as_float(skimage.io.imread(IMAGE_LOCATION)).astype(np.float32)\nprint(\"Original Image Shape: \" , img.shape)\n\n# Rescale the image to comply with our desired input size. This will not make the image 227x227\n#    but it will make either the height or width 227 so we can get the ideal center crop.\nimg = rescale(img, INPUT_IMAGE_SIZE, INPUT_IMAGE_SIZE)\nprint(\"Image Shape after rescaling: \" , img.shape)\npyplot.figure()\npyplot.imshow(img)\npyplot.title('Rescaled image')\n\n# Crop the center 227x227 pixels of the image so we can feed it to our model\nimg = crop_center(img, INPUT_IMAGE_SIZE, INPUT_IMAGE_SIZE)\nprint(\"Image Shape after cropping: \" , img.shape)\npyplot.figure()\npyplot.imshow(img)\npyplot.title('Center Cropped')\n\n# switch to CHW (HWC --\x3e CHW)\nimg = img.swapaxes(1, 2).swapaxes(0, 1)\nprint(\"CHW Image Shape: \" , img.shape)\n\npyplot.figure()\nfor i in range(3):\n    # For some reason, pyplot subplot follows Matlab's indexing\n    # convention (starting with 1). Well, we'll just follow it...\n    pyplot.subplot(1, 3, i+1)\n    pyplot.imshow(img[i])\n    pyplot.axis('off')\n    pyplot.title('RGB channel %d' % (i+1))\n\n# switch to BGR (RGB --\x3e BGR)\nimg = img[(2, 1, 0), :, :]\n\n# remove mean for better results\nimg = img * 255 - mean\n\n# add batch size axis which completes the formation of the NCHW shaped input that we want\nimg = img[np.newaxis, :, :, :].astype(np.float32)\n\nprint(\"NCHW image (ready to be used as input): \", img.shape)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Introduction to Caffe2",src:t(257203).A+"",width:"382",height:"672"})}),"\n",(0,i.jsx)(n.h3,{id:"prepare-the-cnn-and-run-the-net",children:"Prepare the CNN and run the net!"}),"\n",(0,i.jsx)(n.p,{children:"Now that the image is ready to be ingested by the CNN, let's open the protobufs, load them into the workspace, and run the net."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Read the contents of the input protobufs into local variables\nwith open(INIT_NET, "rb") as f:\n    init_net = f.read()\nwith open(PREDICT_NET, "rb") as f:\n    predict_net = f.read()\n\n# Initialize the predictor from the input protobufs\np = workspace.Predictor(init_net, predict_net)\n\n# Run the net and return prediction\nNCHW_batch = np.zeros((1,3,227,227))\nNCHW_batch[0] = img\nresults = p.run([NCHW_batch.astype(np.float32)])\n# Turn it into something we can play with and examine which is in a multi-dimensional array\nresults = np.asarray(results)\nprint("results shape: ", results.shape)\n\n# Quick way to get the top-1 prediction result\n# Squeeze out the unnecessary axis. This returns a 1-D array of length 1000\npreds = np.squeeze(results)\n# Get the prediction and the confidence by finding the maximum value and index of maximum value in preds array\ncurr_pred, curr_conf = max(enumerate(preds), key=operator.itemgetter(1))\nprint("Prediction: ", curr_pred)\nprint("Confidence: ", curr_conf)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prediction"}),":  ",(0,i.jsx)(n.code,{children:"723"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Confidence"}),":  ",(0,i.jsx)(n.code,{children:"0.910284"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"process-results",children:"Process Results"}),"\n",(0,i.jsx)(n.p,{children:"Recall ImageNet is a 1000 class dataset and observe that it is no coincidence that the third axis of results is length 1000. This axis is holding the probability for each category in the pre-trained model. So when you look at the results array at a specific index, the number can be interpreted as the probability that the input belongs to the class corresponding to that index. Now that we have run the predictor and collected the results, we can interpret them by matching them to their corresponding english labels."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# the rest of this is digging through the results \nresults = np.delete(results, 1)\nindex = 0\nhighest = 0\narr = np.empty((0,2), dtype=object)\narr[:,0] = int(10)\narr[:,1:] = float(10)\nfor i, r in enumerate(results):\n    # imagenet index begins with 1!\n    i=i+1\n    arr = np.append(arr, np.array([[i,r]]), axis=0)\n    if (r > highest):\n        highest = r\n        index = i \n\n# top N results\nN = 5\ntopN = sorted(arr, key=lambda x: x[1], reverse=True)[:N]\nprint("Raw top {} results: {}".format(N,topN))\n\n# Isolate the indexes of the top-N most likely classes\ntopN_inds = [int(x[0]) for x in topN]\nprint("Top {} classes in order: {}".format(N,topN_inds))\n\n# Now we can grab the code list and create a class Look Up Table\nresponse = urllib2.urlopen(labels)\nclass_LUT = []\nfor line in response:\n    code, result = line.partition(":")[::2]\n    code = code.strip()\n    result = result.replace("\'", "")\n    if code.isdigit():\n        class_LUT.append(result.split(",")[0][1:])\n        \n# For each of the top-N results, associate the integer result with an actual class\nfor n in topN:\n    print("Model predicts \'{}\' with {}% confidence".format(class_LUT[int(n[0])],float("{0:.2f}".format(n[1]*100))))\n\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Raw top 5 results: [array([723.0, 0.9102839827537537], dtype=object), array([968.0, 0.017375782132148743], dtype=object), array([719.0, 0.010471619665622711], dtype=object), array([985.0, 0.009765725582838058], dtype=object), array([767.0, 0.006287392228841782], dtype=object)]\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Top 5"})," classes in order: ",(0,i.jsx)(n.code,{children:"[723, 968, 719, 985, 767]"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Model predicts"}),": ",(0,i.jsx)(n.code,{children:"pinwheel"})," with ",(0,i.jsx)(n.code,{children:"91.03%"})," confidence"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Model predicts"}),": ",(0,i.jsx)(n.code,{children:"cup"})," with ",(0,i.jsx)(n.code,{children:"1.74%"})," confidence"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Model predicts"}),": ",(0,i.jsx)(n.code,{children:"piggy"}),"bank' with ",(0,i.jsx)(n.code,{children:"1.05%"})," confidence"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Model predicts"}),": ",(0,i.jsx)(n.code,{children:"daisy"})," with ",(0,i.jsx)(n.code,{children:"0.98%"})," confidence"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Model predicts"}),": ",(0,i.jsx)(n.code,{children:"rubber eraser"})," with ",(0,i.jsx)(n.code,{children:"0.63%"})," confidence"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"feeding-larger-batches",children:"Feeding Larger Batches"}),"\n",(0,i.jsx)(n.p,{children:"Above is an example of how to feed one image at a time. We can achieve higher throughput if we feed multiple images at a time in a single batch. Recall, the data fed into the classifier is in 'NCHW' order, so to feed multiple images, we will expand the 'N' axis."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# List of input images to be fed\nimages = ["images/cowboy-hat.jpg",\n            "images/cell-tower.jpg",\n            "images/Ducreux.jpg",\n            "images/pretzel.jpg",\n            "images/orangutan.jpg",\n            "images/aircraft-carrier.jpg",\n            "images/cat.jpg"]\n\n# Allocate space for the batch of formatted images\nNCHW_batch = np.zeros((len(images),3,227,227))\nprint ("Batch Shape: ",NCHW_batch.shape)\n\n# For each of the images in the list, format it and place it in the batch\nfor i,curr_img in enumerate(images):\n    img = skimage.img_as_float(skimage.io.imread(curr_img)).astype(np.float32)\n    img = rescale(img, 227, 227)\n    img = crop_center(img, 227, 227)\n    img = img.swapaxes(1, 2).swapaxes(0, 1)\n    img = img[(2, 1, 0), :, :]\n    img = img * 255 - mean\n    NCHW_batch[i] = img\n\nprint("NCHW image (ready to be used as input): ", NCHW_batch.shape)\n\n# Run the net on the batch\nresults = p.run([NCHW_batch.astype(np.float32)])\n\n# Turn it into something we can play with and examine which is in a multi-dimensional array\nresults = np.asarray(results)\n\n# Squeeze out the unnecessary axis\npreds = np.squeeze(results)\nprint("Squeezed Predictions Shape, with batch size {}: {}".format(len(images),preds.shape))\n\n# Describe the results\nfor i,pred in enumerate(preds):\n    print("Results for: \'{}\'".format(images[i]))\n    # Get the prediction and the confidence by finding the maximum value \n    #   and index of maximum value in preds array\n    curr_pred, curr_conf = max(enumerate(pred), key=operator.itemgetter(1))\n    print("\\tPrediction: ", curr_pred)\n    print("\\tClass Name: ", class_LUT[int(curr_pred)])\n    print("\\tConfidence: ", curr_conf)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Batch Shape"}),":  ",(0,i.jsx)(n.code,{children:"(8, 3, 227, 227)"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NCHW image"})," (ready to be used as input):  (8, 3, 227, 227)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Squeezed Predictions Shape"}),", with batch size 8: (8, 1000)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Results for"}),": 'images/cowboy-hat.jpg'","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Prediction:  515"}),"\n",(0,i.jsx)(n.li,{children:"Class Name:  cowboy hat"}),"\n",(0,i.jsx)(n.li,{children:"Confidence:  0.850092"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Results for"}),": ",(0,i.jsx)(n.code,{children:"images/cell-tower.jpg"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Prediction:  645"}),"\n",(0,i.jsx)(n.li,{children:"Class Name:  maypole"}),"\n",(0,i.jsx)(n.li,{children:"Confidence:  0.185843"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Results for"}),": ",(0,i.jsx)(n.code,{children:"images/Ducreux.jpg"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Prediction:  568"}),"\n",(0,i.jsx)(n.li,{children:"Class Name:  fur coat"}),"\n",(0,i.jsx)(n.li,{children:"Confidence:  0.102531"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Results for"}),": ",(0,i.jsx)(n.code,{children:"images/pretzel.jpg"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Prediction:  932"}),"\n",(0,i.jsx)(n.li,{children:"Class Name:  pretzel"}),"\n",(0,i.jsx)(n.li,{children:"Confidence:  0.999622"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Results for"}),": ",(0,i.jsx)(n.code,{children:"images/orangutan.jpg"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Prediction:  365"}),"\n",(0,i.jsx)(n.li,{children:"Class Name:  orangutan"}),"\n",(0,i.jsx)(n.li,{children:"Confidence:  0.992006"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Results for"}),": ",(0,i.jsx)(n.code,{children:"images/aircraft-carrier.jpg"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Prediction:  403"}),"\n",(0,i.jsx)(n.li,{children:"Class Name:  aircraft carrier"}),"\n",(0,i.jsx)(n.li,{children:"Confidence:  0.999878"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Results for"}),": ",(0,i.jsx)(n.code,{children:"images/cat.jpg"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Prediction:  281"}),"\n",(0,i.jsx)(n.li,{children:"Class Name:  tabby"}),"\n",(0,i.jsx)(n.li,{children:"Confidence:  0.513315"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Results for"}),": ",(0,i.jsx)(n.code,{children:"images/flower.jpg"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Prediction:  985"}),"\n",(0,i.jsx)(n.li,{children:"Class Name:  daisy"}),"\n",(0,i.jsx)(n.li,{children:"Confidence:  0.982227"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"loading-datasets",children:"Loading Datasets"}),"\n",(0,i.jsx)(n.p,{children:"So Caffe2 uses a binary DB format to store the data that we would like to train models on. A Caffe2 DB is a glorified name of a key-value storage where the keys are usually randomized so that the batches are approximately i.i.d. The values are the real stuff here: they contain the serialized strings of the specific data formats that you would like your training algorithm to ingest. So, the stored DB would look (semantically) like this:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"key1 value1"}),", ",(0,i.jsx)(n.code,{children:"key2 value2"}),", ",(0,i.jsx)(n.code,{children:"key3 value3"})," ..."]}),"\n",(0,i.jsx)(n.p,{children:"To a DB, it treats the keys and values as strings, but you probably want structured contents. One way to do this is to use a TensorProtos protocol buffer: it essentially wraps Tensors, aka multi-dimensional arrays, together with the tensor data type and shape information. Then, one can use the TensorProtosDBInput operator to load the data into an SGD training fashion."}),"\n",(0,i.jsxs)(n.p,{children:["Here, we will show you one example of how to create your own dataset. To this end, we will use the UCI Iris dataset - which was a very popular classical dataset for classifying Iris flowers. It contains 4 real-valued features representing the dimensions of the flower, and classifies things into 3 types of Iris flowers. The dataset can be downloaded ",(0,i.jsx)(n.a,{href:"https://archive.ics.uci.edu/ml/datasets/Iris",children:"here"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# First let's import some necessities\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\n%matplotlib inline\nimport urllib2 # for downloading the dataset from the web.\nimport numpy as np\nfrom matplotlib import pyplot\nfrom StringIO import StringIO\nfrom caffe2.python import core, utils, workspace\nfrom caffe2.proto import caffe2_pb2\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"f = urllib2.urlopen('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data')\nraw_data = f.read()\nprint('Raw data looks like this:')\nprint(raw_data[:100] + '...')\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Raw data looks like this:\n5.1,3.5,1.4,0.2,Iris-setosa\n4.9,3.0,1.4,0.2,Iris-setosa\n4.7,3.2,1.3,0.2,Iris-setosa\n4.6,3.1,1.5,0.2,...\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# load the features to a feature matrix.\nfeatures = np.loadtxt(StringIO(raw_data), dtype=np.float32, delimiter=',', usecols=(0, 1, 2, 3))\n# load the labels to a feature matrix\nlabel_converter = lambda s : {'Iris-setosa':0, 'Iris-versicolor':1, 'Iris-virginica':2}[s]\nlabels = np.loadtxt(StringIO(raw_data), dtype=np.int, delimiter=',', usecols=(4,), converters={4: label_converter})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Before we do training, one thing that is often beneficial is to separate the dataset into training and testing. In this case, let's randomly shuffle the data, use the first 100 data points to do training, and the remaining 50 to do testing. For more sophisticated approaches, you can use e.g. cross validation to separate your dataset into multiple training and testing splits. Read more about cross validation ",(0,i.jsx)(n.a,{href:"http://scikit-learn.org/stable/modules/cross_validation.html",children:"here"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"random_index = np.random.permutation(150)\nfeatures = features[random_index]\nlabels = labels[random_index]\n\ntrain_features = features[:100]\ntrain_labels = labels[:100]\ntest_features = features[100:]\ntest_labels = labels[100:]\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Let's plot the first two features together with the label.\n# Remember, while we are plotting the testing feature distribution\n# here too, you might not be supposed to do so in real research,\n# because one should not peek into the testing data.\nlegend = ['rx', 'b+', 'go']\npyplot.title(\"Training data distribution, feature 0 and 1\")\nfor i in range(3):\n    pyplot.plot(train_features[train_labels==i, 0], train_features[train_labels==i, 1], legend[i])\npyplot.figure()\npyplot.title(\"Testing data distribution, feature 0 and 1\")\nfor i in range(3):\n    pyplot.plot(test_features[test_labels==i, 0], test_features[test_labels==i, 1], legend[i])\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Introduction to Caffe2",src:t(557244).A+"",width:"388",height:"540"})}),"\n",(0,i.jsx)(n.p,{children:"Now, as promised, let's put things into a Caffe2 DB. In this DB, what would happen is that we will use \"train_xxx\" as the key, and use a TensorProtos object to store two tensors for each data point: one as the feature and one as the label. We will use Caffe2's Python DB interface to do so."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# First, let's see how one can construct a TensorProtos protocol buffer from numpy arrays.\nfeature_and_label = caffe2_pb2.TensorProtos()\nfeature_and_label.protos.extend([\n    utils.NumpyArrayToCaffe2Tensor(features[0]),\n    utils.NumpyArrayToCaffe2Tensor(labels[0])])\nprint('This is what the tensor proto looks like for a feature and its label:')\nprint(str(feature_and_label))\nprint('This is the compact string that gets written into the db:')\nprint(feature_and_label.SerializeToString())\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Now, actually write the db.\n\ndef write_db(db_type, db_name, features, labels):\n    db = core.C.create_db(db_type, db_name, core.C.Mode.write)\n    transaction = db.new_transaction()\n    for i in range(features.shape[0]):\n        feature_and_label = caffe2_pb2.TensorProtos()\n        feature_and_label.protos.extend([\n            utils.NumpyArrayToCaffe2Tensor(features[i]),\n            utils.NumpyArrayToCaffe2Tensor(labels[i])])\n        transaction.put(\n            \'train_%03d\'.format(i),\n            feature_and_label.SerializeToString())\n    # Close the transaction, and then close the db.\n    del transaction\n    del db\n\nwrite_db("minidb", "iris_train.minidb", train_features, train_labels)\nwrite_db("minidb", "iris_test.minidb", test_features, test_labels)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now, let's create a very simple network that only consists of one single TensorProtosDBInput operator, to showcase how we load data from the DB that we created. For training, you might want to do something more complex: creating a network, train it, get the model, and run the prediction service. To this end you can look at the MNIST tutorial for details."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'net_proto = core.Net("example_reader")\ndbreader = net_proto.CreateDB([], "dbreader", db="iris_train.minidb", db_type="minidb")\nnet_proto.TensorProtosDBInput([dbreader], ["X", "Y"], batch_size=16)\n\nprint("The net looks like this:")\nprint(str(net_proto.Proto()))\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"workspace.CreateNet(net_proto)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Let\'s run it to get batches of features.\nworkspace.RunNet(net_proto.Proto().name)\nprint("The first batch of feature is:")\nprint(workspace.FetchBlob("X"))\nprint("The first batch of label is:")\nprint(workspace.FetchBlob("Y"))\n\n# Let\'s run again.\nworkspace.RunNet(net_proto.Proto().name)\nprint("The second batch of feature is:")\nprint(workspace.FetchBlob("X"))\nprint("The second batch of label is:")\nprint(workspace.FetchBlob("Y"))\n'})}),"\n",(0,i.jsx)(n.h2,{id:"image-loading-and-preprocessing",children:"Image Loading and Preprocessing"}),"\n",(0,i.jsx)(n.p,{children:"In this tutorial we're going to look at how we can load in images from a local file or a URL which you can then utilize in other tutorials or examples. Also, we're going to go in depth on the kinds of preprocessing that is necessary to utilize Caffe2 with images."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\n%matplotlib inline\nimport skimage\nimport skimage.io as io\nimport skimage.transform \nimport sys\nimport numpy as np\nimport math\nfrom matplotlib import pyplot\nimport matplotlib.image as mpimg\nprint("Required modules imported.")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"caffe-uses-bgr-order",children:"Caffe Uses BGR Order"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test an Image"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"In the code block below use IMAGE_LOCATION to load what you would like to test. Just change the comment flags to go through each round of the Tutorial. In this way, you'll get to see what happens with a variety of image formats and some tips on how you might preprocess them. If you want to try your own image, drop it in the images folder or use a remote URL. When you pick a remote URL, make it easy on yourself and try to find a URL that points to a common image file type and extension versus some long identifier or query string which might just break this next step."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Color Issues"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Keep in mind when you load images from smartphone cameras that you may run into color formatting issues. Below we show an example of how flipping between RGB and BGR can impact an image. This would obviously throw off detection in your model. Due to legacy support of OpenCV in Caffe and how it handles images in Blue-Green-Red (BGR) order instead of the more commonly used Red-Green-Blue (RGB) order, Caffe2 also expects BGR order. In many ways this decision helps in the long run as you use different computer vision utilities and libraries, but it also can be the source of confusion."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# You can load either local IMAGE_FILE or remote URL\n# For Round 1 of this tutorial, try a local image.\nIMAGE_LOCATION = \'flower.jpg\'\n\n# For Round 2 of this tutorial, try a URL image with a flower: \n# IMAGE_LOCATION = "https://cdn.pixabay.com/photo/2015/02/10/21/28/flower-631765_1280.jpg"\n# IMAGE_LOCATION = "images/flower.jpg"\n\n# For Round 3 of this tutorial, try another URL image with lots of people:\n# IMAGE_LOCATION = "https://upload.wikimedia.org/wikipedia/commons/1/18/NASA_Astronaut_Group_15.jpg"\n# IMAGE_LOCATION = "images/astronauts.jpg"\n\n# For Round 4 of this tutorial, try a URL image with a portrait!\n# IMAGE_LOCATION = "https://upload.wikimedia.org/wikipedia/commons/9/9a/Ducreux1.jpg"\n# IMAGE_LOCATION = "images/Ducreux.jpg"\n\nimg = skimage.img_as_float(skimage.io.imread(IMAGE_LOCATION)).astype(np.float32)\n\n# test color reading\n# show the original image\npyplot.figure()\npyplot.subplot(1,2,1)\npyplot.imshow(img)\npyplot.axis(\'on\')\npyplot.title(\'Original image = RGB\')\n\n# show the image in BGR - just doing RGB->BGR temporarily for display\nimgBGR = img[:, :, (2, 1, 0)]\n#pyplot.figure()\npyplot.subplot(1,2,2)\npyplot.imshow(imgBGR)\npyplot.axis(\'on\')\npyplot.title(\'OpenCV, Caffe2 = BGR\')\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Introduction to Caffe2",src:t(874757).A+"",width:"386",height:"151"})}),"\n",(0,i.jsx)(n.p,{children:"As you can see in the example above, the difference in order is very important to keep in mind. In the code block below we'll be taking the image and converting to BGR order for Caffe to process it appropriately."}),"\n",(0,i.jsx)(n.h3,{id:"caffe-prefers-chw-order",children:"Caffe Prefers CHW Order"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"H"}),": Height"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"W"}),": Width"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"C"}),": Channel (as in color)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Digging even deeper into how image data can be stored is the memory allocation order. You might have noticed when we first loaded the image that we forced it through some interesting transformations. These were data transformations that let us play with the image as if it were a cube. What we see is on top of the cube, and manipulating the layers below can change what we view. We can tinker with it's underlying properties and as you saw above, swap colors quite easily."}),"\n",(0,i.jsx)(n.p,{children:'For GPU processing, which is what Caffe2 excels at, this order needs to be CHW. For CPU processing, this order is generally HWC. Essentially, you\'re going to want to use CHW and make sure that step is included in your image pipeline. Tweak RGB to be BGR, which is encapsulated as this "C" payload, then tweak HWC, the "C" being the very same colors you just switched around.'}),"\n",(0,i.jsx)(n.p,{children:"You may ask why! And the reason points to cuDNN which is what helps accelerate processing on GPUs. It uses only CHW, and we'll sum it up by saying it is faster."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"img_hcw = \"flower.jpg\"\nimg_hcw = skimage.img_as_float(skimage.io.imread(img_hcw)).astype(np.float32)\nprint(\"Image shape before HWC --\x3e CHW conversion: \", img_hcw.shape)\n# swapping the axes to go from HWC to CHW\n# uncomment the next line and run this block!\nimg_chw = img_hcw.swapaxes(1, 2).swapaxes(0, 1)\nprint(\"Image shape after HWC --\x3e CHW conversion: \", img_chw.shape)\n# we know this is going to go wrong, so...\ntry:\n    # Plot original\n    pyplot.figure()\n    pyplot.subplot(1, 2, 1)\n    pyplot.imshow(img_hcw)\n    pyplot.axis('on')\n    pyplot.title('hcw')\n    pyplot.subplot(1, 2, 2)\n    pyplot.imshow(img_chw)\n    pyplot.axis('on')\n    pyplot.title('chw')\nexcept:\n    print(\"Here come bad things!\")\n    # TypeError: Invalid dimensions for image data\n    raise \n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Introduction to Caffe2",src:t(303482).A+"",width:"376",height:"189"})}),"\n",(0,i.jsx)(n.h3,{id:"rotation-and-mirroring",children:"Rotation and Mirroring"}),"\n",(0,i.jsx)(n.p,{children:"This topic is usually reserved for images that are coming from a smart phone. Phones, in general, take great pictures, but do a horrible job communicating how the image was taken and what orientation it should be in. Then there's the user who does everything under the sun with their phone's cameras, making them do things its designer never expected. Cameras - right, because there are often two cameras and these two cameras take different sized pictures in both pixel count and aspect ratio, and not only that, they sometimes take them mirrored, and they sometimes take them in portrait and landscape modes, and sometimes they don't bother to tell which mode they were in."}),"\n",(0,i.jsx)(n.p,{children:"In many ways this is the first thing you need to evaluate in your pipeline, then look at sizing (described below), then figure out the color situation. If you're developing for iOS, then you're in luck, it's going to be relatively easy. If you're a super-hacker wizard developer with lead-lined shorts and developing for Android, then at least you have lead-lined shorts."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Image came in sideways - it should be a portait image!\n# How you detect this depends on the platform\n# Could be a flag from the camera object\n# Could be in the EXIF data\n# ROTATED_IMAGE = \"https://upload.wikimedia.org/wikipedia/commons/8/87/Cell_Phone_Tower_in_Ladakh_India_with_Buddhist_Prayer_Flags.jpg\"\nROTATED_IMAGE = \"images/cell-tower.jpg\"\nimgRotated = skimage.img_as_float(skimage.io.imread(ROTATED_IMAGE)).astype(np.float32)\npyplot.figure()\npyplot.imshow(imgRotated)\npyplot.axis('on')\npyplot.title('Rotated image')\n\n# Image came in flipped or mirrored - text is backwards!\n# Again detection depends on the platform\n# This one is intended to be read by drivers in their rear-view mirror\n# MIRROR_IMAGE = \"https://upload.wikimedia.org/wikipedia/commons/2/27/Mirror_image_sign_to_be_read_by_drivers_who_are_backing_up_-b.JPG\"\nMIRROR_IMAGE = \"images/mirror-image.jpg\"\nimgMirror = skimage.img_as_float(skimage.io.imread(MIRROR_IMAGE)).astype(np.float32)\npyplot.figure()\npyplot.imshow(imgMirror)\npyplot.axis('on')\npyplot.title('Mirror image')\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Introduction to Caffe2",src:t(672334).A+"",width:"352",height:"538"})}),"\n",(0,i.jsx)(n.p,{children:"Let's transform these images into something Caffe2 and the standard detection models we have around can detect. Also, this little trick might save you if, say for example, you really had to detect the cell tower but there's no EXIF data to be found: then you'd cycle through every rotation, and every flip, spawning many derivatives of this photo and run them all through. When the percentage of confidence of detection is high enough, Bam!, you found the orientation you needed and that sneaky cell tower."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Run me to flip the image back and forth\nimgMirror = np.fliplr(imgMirror)\npyplot.figure()\npyplot.imshow(imgMirror)\npyplot.axis('off')\npyplot.title('Mirror image')\n\n# Run me to rotate the image 90 degrees\nimgRotated = np.rot90(imgRotated, 3)\npyplot.figure()\npyplot.imshow(imgRotated)\npyplot.axis('off')\npyplot.title('Rotated image')\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Introduction to Caffe2",src:t(145975).A+"",width:"310",height:"526"})}),"\n",(0,i.jsx)(n.h3,{id:"sizing",children:"Sizing"}),"\n",(0,i.jsxs)(n.p,{children:["Part of preprocessing is resizing. For reasons we won't get into here, images in the Caffe2 pipeline should be square. Also, to help with performance, they should be resized to a standard height and width which is usually going to be smaller than your original source. In the example below we're resizing to ",(0,i.jsx)(n.code,{children:"256 x 256"})," pixels, however you might notice that the input_height and input_width is set to ",(0,i.jsx)(n.code,{children:"224 x 224"})," which is then used to specify the crop. This is what several image-based models are expecting. They were trained on images sized to ",(0,i.jsx)(n.code,{children:"224 x 224"})," and in order for the model to properly identify the suspect images you throw at it, these should also be ",(0,i.jsx)(n.code,{children:"224 x 224"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Model is expecting 224 x 224, so resize/crop needed.\n# First, let\'s resize the image to 256*256\norig_h, orig_w, _ = img.shape\nprint("Original image\'s shape is {}x{}".format(orig_h, orig_w))\ninput_height, input_width = 224, 224\nprint("Model\'s input shape is {}x{}".format(input_height, input_width))\nimg256 = skimage.transform.resize(img, (256, 256))\n\n# Plot original and resized images for comparison\nf, axarr = pyplot.subplots(1,2)\naxarr[0].imshow(img)\naxarr[0].set_title("Original Image (" + str(orig_h) + "x" + str(orig_w) + ")")\naxarr[0].axis(\'on\')\naxarr[1].imshow(img256)\naxarr[1].axis(\'on\')\naxarr[1].set_title(\'Resized image to 256x256\')\npyplot.tight_layout()\n\nprint("New image shape:" + str(img256.shape))\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Original image's shape is 534x800"}),"\n",(0,i.jsx)(n.li,{children:"Model's input shape is 224x224"}),"\n",(0,i.jsx)(n.li,{children:"New image shape:(256, 256, 3)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Introduction to Caffe2",src:t(772144).A+"",width:"427",height:"212"})}),"\n",(0,i.jsx)(n.h3,{id:"rescaling",children:"Rescaling"}),"\n",(0,i.jsx)(n.p,{children:"If you imagine portait images versus landscape images you'll know that there are a lot of things that can get messed up by doing a slopping resize. Rescaling is assuming that you're locking down the aspect ratio to prevent distortion in the image. In this case, we'll scale down the image to the shortest side that matches with the model's input size."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Landscape"}),": limit resize by the height"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Portrait"}),": limit resize by the width"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print("Original image shape:" + str(img.shape) + " and remember it should be in H, W, C!")\nprint("Model\'s input shape is {}x{}".format(input_height, input_width))\naspect = img.shape[1]/float(img.shape[0])\nprint("Orginal aspect ratio: " + str(aspect))\nif(aspect>1):\n    # landscape orientation - wide image\n    res = int(aspect * input_height)\n    imgScaled = skimage.transform.resize(img, (input_height, res))\nif(aspect<1):\n    # portrait orientation - tall image\n    res = int(input_width/aspect)\n    imgScaled = skimage.transform.resize(img, (res, input_width))\nif(aspect == 1):\n    imgScaled = skimage.transform.resize(img, (input_height, input_width))\npyplot.figure()\npyplot.imshow(imgScaled)\npyplot.axis(\'on\')\npyplot.title(\'Rescaled image\')\nprint("New image shape:" + str(imgScaled.shape) + " in HWC")\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Original image shape:(534, 800, 3) and remember it should be in H, W, C!"}),"\n",(0,i.jsx)(n.li,{children:"Model's input shape is 224x224"}),"\n",(0,i.jsx)(n.li,{children:"Orginal aspect ratio: 1.49812734082"}),"\n",(0,i.jsx)(n.li,{children:"New image shape:(224, 335, 3) in HWC"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"At this point only one dimension is set to what the model's input requires. We still need to crop one side to make a square."}),"\n",(0,i.jsx)(n.h3,{id:"cropping",children:"Cropping"}),"\n",(0,i.jsx)(n.p,{children:"There are a variety of strategies we could utilize. In fact, we could backpeddle and decide to do a center crop. So instead of scaling down to the smallest we could get on at least one side, we take a chunk out of the middle. If we had done that without scaling we would have ended up with just part of a flower pedal, so we still needed some resizing of the image."}),"\n",(0,i.jsx)(n.p,{children:"Below we'll try a few strategies for cropping:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Just grab the exact dimensions you need from the middle!"}),"\n",(0,i.jsx)(n.li,{children:"Resize to a square that's pretty close then grab from the middle."}),"\n",(0,i.jsx)(n.li,{children:"Use the rescaled image and grab the middle."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Compare the images and cropping strategies\n# Try a center crop on the original for giggles\nprint(\"Original image shape:\" + str(img.shape) + \" and remember it should be in H, W, C!\")\ndef crop_center(img,cropx,cropy):\n    y,x,c = img.shape\n    startx = x//2-(cropx//2)\n    starty = y//2-(cropy//2)    \n    return img[starty:starty+cropy,startx:startx+cropx]\n# yes, the function above should match resize and take a tuple...\n\npyplot.figure()\n# Original image\nimgCenter = crop_center(img,224,224)\npyplot.subplot(1,3,1)\npyplot.imshow(imgCenter)\npyplot.axis('on')\npyplot.title('Original')\n\n# Now let's see what this does on the distorted image\nimg256Center = crop_center(img256,224,224)\npyplot.subplot(1,3,2)\npyplot.imshow(img256Center)\npyplot.axis('on')\npyplot.title('Squeezed')\n\n# Scaled image\nimgScaledCenter = crop_center(imgScaled,224,224)\npyplot.subplot(1,3,3)\npyplot.imshow(imgScaledCenter)\npyplot.axis('on')\npyplot.title('Scaled')\n\npyplot.tight_layout()\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Introduction to Caffe2",src:t(487897).A+"",width:"429",height:"145"})}),"\n",(0,i.jsx)(n.p,{children:"As you can see that didn't work out so well, except for maybe the last one. The middle one may be just fine too, but you won't know until you try on the model and test a lot of candidate images. At this point we can look at the difference we have, split it in half and remove some pixels from each side. This does have a drawback, however, as an off-center subject of interest would get clipped."}),"\n",(0,i.jsx)(n.h3,{id:"upscaling",children:"Upscaling"}),"\n",(0,i.jsxs)(n.p,{children:['What do you do when the images you want to run are "tiny"? In our example we\'ve been prepping for Input Images with the spec of ',(0,i.jsx)(n.code,{children:"224x224"}),". Consider this ",(0,i.jsx)(n.code,{children:"128x128"})," image below."]}),"\n",(0,i.jsx)(n.p,{children:"The most basic approach is going from a small square to a bigger square and using the defauls skimage provides for you. This resize method defaults the interpolation order parameter to 1 which happens to be bi-linear if you even cared, but it is worth mentioning because these might be the fine-tuning knobs you need later to fix problems, such as strange visual artifacts, that can be introduced in upscaling images."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"imgTiny = \"images/Cellsx128.png\"\nimgTiny = skimage.img_as_float(skimage.io.imread(imgTiny)).astype(np.float32)\nprint(\"Original image shape: \", imgTiny.shape)\nimgTiny224 = skimage.transform.resize(imgTiny, (224, 224))\nprint(\"Upscaled image shape: \", imgTiny224.shape)\n# Plot original\npyplot.figure()\npyplot.subplot(1, 2, 1)\npyplot.imshow(imgTiny)\npyplot.axis('on')\npyplot.title('128x128')\n# Plot upscaled\npyplot.subplot(1, 2, 2)\npyplot.imshow(imgTiny224)\npyplot.axis('on')\npyplot.title('224x224')\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Original image shape:  (128, 128, 4)"}),"\n",(0,i.jsx)(n.li,{children:"Upscaled image shape:  (224, 224, 4)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Introduction to Caffe2",src:t(893315).A+"",width:"377",height:"195"})}),"\n",(0,i.jsx)(n.h3,{id:"batch-processing",children:"Batch Processing"}),"\n",(0,i.jsxs)(n.p,{children:["In the last steps below we are going to switch the image's data order to BGR, stuff that into the Color column, then reorder the columns for GPU processing (",(0,i.jsx)(n.code,{children:"HCW"})," --\x3e ",(0,i.jsx)(n.code,{children:"CHW"}),") and then add a fourth dimension (N) to the image to track the number of images. In theory, you can just keep adding dimensions to your data, but this one is required for Caffe2 as it relays to Caffe how many images to expect in this batch. We set it to one (1) to indicate there's only one image going into Caffe in this batch. Note that in the final output when we check ",(0,i.jsx)(n.code,{children:"img.shape"})," the order is quite different. We've added N for number of images, and changed the order like so: ",(0,i.jsx)(n.code,{children:"N"}),", ",(0,i.jsx)(n.code,{children:"C"}),", ",(0,i.jsx)(n.code,{children:"H"}),", ",(0,i.jsx)(n.code,{children:"W"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# This next line helps with being able to rerun this section\n# if you want to try the outputs of the different crop strategies above\n# swap out imgScaled with img (original) or img256 (squeezed)\nimgCropped = crop_center(imgScaled,224,224)\nprint(\"Image shape before HWC --\x3e CHW conversion: \", imgCropped.shape)\n# (1) Since Caffe expects CHW order and the current image is HWC,\n#     we will need to change the order.\nimgCropped = imgCropped.swapaxes(1, 2).swapaxes(0, 1)\nprint(\"Image shape after HWC --\x3e CHW conversion: \", imgCropped.shape)\n\npyplot.figure()\nfor i in range(3):\n    # For some reason, pyplot subplot follows Matlab's indexing\n    # convention (starting with 1). Well, we'll just follow it...\n    pyplot.subplot(1, 3, i+1)\n    pyplot.imshow(imgCropped[i], cmap=pyplot.cm.gray)\n    pyplot.axis('off')\n    pyplot.title('RGB channel %d' % (i+1))\n\n# (2) Caffe uses a BGR order due to legacy OpenCV issues, so we\n#     will change RGB to BGR.\nimgCropped = imgCropped[(2, 1, 0), :, :]\nprint(\"Image shape after BGR conversion: \", imgCropped.shape)\n\n# for discussion later - not helpful at this point\n# (3) (Optional) We will subtract the mean image. Note that skimage loads\n#     image in the [0, 1] range so we multiply the pixel values\n#     first to get them into [0, 255].\n#mean_file = os.path.join(CAFFE_ROOT, 'python/caffe/imagenet/ilsvrc_2012_mean.npy')\n#mean = np.load(mean_file).mean(1).mean(1)\n#img = img * 255 - mean[:, np.newaxis, np.newaxis]\n\npyplot.figure()\nfor i in range(3):\n    # For some reason, pyplot subplot follows Matlab's indexing\n    # convention (starting with 1). Well, we'll just follow it...\n    pyplot.subplot(1, 3, i+1)\n    pyplot.imshow(imgCropped[i], cmap=pyplot.cm.gray)\n    pyplot.axis('off')\n    pyplot.title('BGR channel %d' % (i+1))\n# (4) Finally, since caffe2 expect the input to have a batch term\n#     so we can feed in multiple images, we will simply prepend a\n#     batch dimension of size 1. Also, we will make sure image is\n#     of type np.float32.\nimgCropped = imgCropped[np.newaxis, :, :, :].astype(np.float32)\nprint('Final input shape is:', imgCropped.shape)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Image shape before HWC --\x3e CHW conversion:  (224, 224, 3)"}),"\n",(0,i.jsx)(n.li,{children:"Image shape after HWC --\x3e CHW conversion:  (3, 224, 224)"}),"\n",(0,i.jsx)(n.li,{children:"Image shape after BGR conversion:  (3, 224, 224)"}),"\n",(0,i.jsx)(n.li,{children:"Final input shape is: (1, 3, 224, 224)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Introduction to Caffe2",src:t(479729).A+"",width:"352",height:"289"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},839073:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/introduction-to-pytorch-caffe_01-52365d331443f5232285f1dd260c1cd1.png"},890090:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/introduction-to-pytorch-caffe_02-a60006288066565368d6e220f7df93a4.png"},257203:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/introduction-to-pytorch-caffe_03-9d8db0f1a0330a8c16d2d9bc0db5f48f.png"},557244:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/introduction-to-pytorch-caffe_04-29e0161d91e68b2ef667be9a6ddaac32.png"},874757:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/introduction-to-pytorch-caffe_05-8408c66472fa2fe8c0c9b9180998fd24.png"},672334:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/introduction-to-pytorch-caffe_06-bc2a796863243b31aa64346fa4c90aa3.png"},145975:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/introduction-to-pytorch-caffe_07-0274f0916356f23ce9425024ada01aef.png"},772144:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/introduction-to-pytorch-caffe_08-50e9bb046f144402d8655f4bc8f195e4.png"},487897:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/introduction-to-pytorch-caffe_09-7dc84647ac6bed4679ad460f6e093213.png"},893315:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/introduction-to-pytorch-caffe_10-9c35f675b41de2c662336e9747e14c73.png"},303482:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/introduction-to-pytorch-caffe_11-4361a30172e8ad27d5c4beda1aae38ff.png"},479729:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/introduction-to-pytorch-caffe_12-674dbefa22615346cbb0becbda4e64ea.png"},235349:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-5a33ed1aeac871d5b7a7594cc7d702c8.jpg"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(296540);const a={},r=i.createContext(a);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);