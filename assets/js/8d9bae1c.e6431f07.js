"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[42800],{386117:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>h,contentTitle:()=>a,default:()=>o,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=n(474848),t=n(28453);const r={sidebar_position:9040,slug:"2022-09-27",title:"Analyzing and Decrypting TLS with Wireshark",authors:"mpolinowski",tags:["LINUX","Security"],description:"Capturing session keys to decrypt TLS traffic."},a=void 0,c={id:"DevOps/Security/2022-09-27--wireshark-with-tls-encryption/index",title:"Analyzing and Decrypting TLS with Wireshark",description:"Capturing session keys to decrypt TLS traffic.",source:"@site/docs/DevOps/Security/2022-09-27--wireshark-with-tls-encryption/index.md",sourceDirName:"DevOps/Security/2022-09-27--wireshark-with-tls-encryption",slug:"/DevOps/Security/2022-09-27--wireshark-with-tls-encryption/2022-09-27",permalink:"/docs/DevOps/Security/2022-09-27--wireshark-with-tls-encryption/2022-09-27",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Security/2022-09-27--wireshark-with-tls-encryption/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Security",permalink:"/docs/tags/security"}],version:"current",sidebarPosition:9040,frontMatter:{sidebar_position:9040,slug:"2022-09-27",title:"Analyzing and Decrypting TLS with Wireshark",authors:"mpolinowski",tags:["LINUX","Security"],description:"Capturing session keys to decrypt TLS traffic."},sidebar:"tutorialSidebar",previous:{title:"Server Security",permalink:"/docs/category/server-security"},next:{title:"Securing Webservers - Uncomplicated Firewall",permalink:"/docs/DevOps/Security/2020-07-28--uncomplicated-firewall-ufw/2020-07-28"}},h={},l=[{value:"Capture Session Keys (LINUX)",id:"capture-session-keys-linux",level:2},{value:"Decrypt HTTPs Session in Wireshark",id:"decrypt-https-session-in-wireshark",level:2},{value:"TLSv1.3 Handshake",id:"tlsv13-handshake",level:3},{value:"Client Hello",id:"client-hello",level:4},{value:"Server Hello",id:"server-hello",level:4}];function d(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"TST, Hong Kong",src:n(368347).A+"",width:"1500",height:"517"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#capture-session-keys-linux",children:"Capture Session Keys (LINUX)"})}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#decrypt-https-session-in-wireshark",children:"Decrypt HTTPs Session in Wireshark"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#tlsv13-handshake",children:"TLSv1.3 Handshake"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#client-hello",children:"Client Hello"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#server-hello",children:"Server Hello"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"capture-session-keys-linux",children:"Capture Session Keys (LINUX)"}),"\n",(0,i.jsxs)(s.p,{children:["Open a terminal and set the SSL keylogger variable for this session (do not add this permanently, e.g. to ",(0,i.jsx)(s.code,{children:".zshrc"}),"):"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"export SSLKEYLOGFILE=/home/my-user/Documents/tls_keylog.log\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Now start ",(0,i.jsx)(s.code,{children:"chromium"}),", ",(0,i.jsx)(s.code,{children:"chrome"})," or ",(0,i.jsx)(s.code,{children:"firefox"})," by typing the application name into your terminal and pressing enter. Just opening the browser should trigger a few key exchanges. But you can also browse the web and then check the log file:"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"tls_keylog.log"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"CLIENT_HANDSHAKE_TRAFFIC_SECRET ccda30d136b2...\r\nSERVER_HANDSHAKE_TRAFFIC_SECRET ccda30d136b2...\r\nCLIENT_TRAFFIC_SECRET_0 ccda30d136b2ea601eb...\r\nSERVER_TRAFFIC_SECRET_0 ccda30d136b2ea601e...\n"})}),"\n",(0,i.jsx)(s.p,{children:"We can now use the captured keys to decrypt our web traffic with wireshark."}),"\n",(0,i.jsx)(s.h2,{id:"decrypt-https-session-in-wireshark",children:"Decrypt HTTPs Session in Wireshark"}),"\n",(0,i.jsxs)(s.p,{children:["I now open the web interface of my INSTAR IP camera while logging the web traffic in Wireshark. Here I can see a lot of ",(0,i.jsx)(s.code,{children:"TCP"})," and ",(0,i.jsx)(s.code,{children:"TLSv1.3"})," packets coming through:"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(713532).A+"",width:"1035",height:"462"})}),"\n",(0,i.jsx)(s.p,{children:"Now close the browser and stop the Wireshark capture. To clean up the log I can filter for frames that contain the IP address of my IP camera:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"ip.addr == 192.168.2.115\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Right click one of the ",(0,i.jsx)(s.strong,{children:"Client Hello"})," packages and select to follow the ",(0,i.jsx)(s.strong,{children:"TCP Stream"}),":"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(514167).A+"",width:"1187",height:"548"})}),"\n",(0,i.jsxs)(s.p,{children:["Close the opening window and select the first package that contains ",(0,i.jsx)(s.strong,{children:"Application Data"})," after the hello and cypher negotiation:"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(854798).A+"",width:"1178",height:"461"})}),"\n",(0,i.jsxs)(s.p,{children:["Right-click the package and open the ",(0,i.jsx)(s.strong,{children:"Transport Layer Security Preferences"}),":"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(207265).A+"",width:"1150",height:"725"})}),"\n",(0,i.jsx)(s.p,{children:"Here you need to add the log file created earlier:"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(722648).A+"",width:"1092",height:"521"})}),"\n",(0,i.jsx)(s.p,{children:"The entries are now successfully decrypted and what showed up as encrypted application data before can now be identified as a TLS handshake:"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(897139).A+"",width:"1153",height:"462"})}),"\n",(0,i.jsx)(s.h3,{id:"tlsv13-handshake",children:"TLSv1.3 Handshake"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsxs)(s.em,{children:["see also ",(0,i.jsx)(s.a,{href:"https://tls13.xargs.org/",children:"tls13.xargs.org"})]})}),"\n",(0,i.jsxs)(s.p,{children:["To deeper analyze our now decrypted data we can open the ",(0,i.jsx)(s.strong,{children:"Conversations"})," window:"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(258282).A+"",width:"1153",height:"276"})}),"\n",(0,i.jsx)(s.p,{children:'Select a "conversation" and use it to filter our log file:'}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(492349).A+"",width:"1188",height:"394"})}),"\n",(0,i.jsx)(s.h4,{id:"client-hello",children:"Client Hello"}),"\n",(0,i.jsxs)(s.p,{children:["The conversation starts with a TCP handshake that is followed by a ",(0,i.jsx)(s.strong,{children:"Client Hello"}),". In here our client - in this case our web-browser - states that it knows ",(0,i.jsx)(s.code,{children:"TLSv1.3"})," and ",(0,i.jsx)(s.code,{children:"TLSv1.2"})," and insists on the Elliptical Curve Diffie Hellman Ephemeral (",(0,i.jsx)(s.code,{children:"ECDHE"}),") Key Exchange and supports 16 different cypher suits for the data encryption:"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(271220).A+"",width:"1181",height:"617"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(753242).A+"",width:"1163",height:"241"})}),"\n",(0,i.jsx)(s.h4,{id:"server-hello",children:"Server Hello"}),"\n",(0,i.jsxs)(s.p,{children:["The server (my IP camera) - now knowing what our client (the browser) supports - picks a TLS version, cypher suite and ellipsis it wants to use - ",(0,i.jsx)(s.code,{children:"Supported Version: TLS 1.3 (0x0304)"}),", ",(0,i.jsx)(s.code,{children:"Cipher Suite: TLS_AES_256_GCM_SHA384 (0x1302)"})," and ",(0,i.jsx)(s.code,{children:"Group: x25519 (29)"})," - and sends it's public key:"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(974819).A+"",width:"1163",height:"614"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(637960).A+"",width:"1167",height:"115"})}),"\n",(0,i.jsx)(s.p,{children:"Once the encryption is established the server will send it's TLS certificate:"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(877905).A+"",width:"1168",height:"718"})})]})}function o(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},368347:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-ec671595d585b88a85b017a7908fb619.jpg"},713532:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/wireshark-with-tls-encryption_01-2b7a820aa9632a29e23c3bcda447dd80.png"},514167:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/wireshark-with-tls-encryption_02-2842d40a7abd14f46733ffb3337ae641.png"},854798:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/wireshark-with-tls-encryption_03-9441944ba9f96ebcae3c86d833f2018a.png"},207265:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/wireshark-with-tls-encryption_04-92a40d6fd4a8ff77e25efb5a6572ab5e.png"},722648:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/wireshark-with-tls-encryption_05-a7f4f65ac958cf9944bb1da345c898df.png"},897139:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/wireshark-with-tls-encryption_06-288bd3e709c0927f187fa8a8fbecce62.png"},258282:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/wireshark-with-tls-encryption_07-c1c01d762234a682c399a59951b1fe32.png"},492349:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/wireshark-with-tls-encryption_08-c9565580fa98c7b8a9b07fe93d63ce05.png"},271220:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/wireshark-with-tls-encryption_09-d489cda33ea5192db46bf3420321cedd.png"},753242:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/wireshark-with-tls-encryption_10-3309e1184f84f6bffeaa100ac98819b9.png"},974819:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/wireshark-with-tls-encryption_11-e6b9bb4d5f33b64ff1588e230d4c3ad6.png"},637960:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/wireshark-with-tls-encryption_12-352a87c8f3d743d1e51cc026cae9b9f4.png"},877905:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/wireshark-with-tls-encryption_13-c01d7d32c6c02a811372466a9c2f4a89.png"},28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>c});var i=n(296540);const t={},r=i.createContext(t);function a(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);