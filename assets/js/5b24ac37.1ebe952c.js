"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[21510],{77412:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var a=t(474848),s=t(28453);const i={sidebar_position:5050,slug:"2022-05-25",title:"App Deployment with Hashicorp Nomad from Gitlab",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"]},o=void 0,r={id:"DevOps/Hashicorp/2022-05-25-hashicorp-nomad-with-gitlab/index",title:"App Deployment with Hashicorp Nomad from Gitlab",description:"Shen Zhen, China",source:"@site/docs/DevOps/Hashicorp/2022-05-25-hashicorp-nomad-with-gitlab/index.md",sourceDirName:"DevOps/Hashicorp/2022-05-25-hashicorp-nomad-with-gitlab",slug:"/DevOps/Hashicorp/2022-05-25-hashicorp-nomad-with-gitlab/2022-05-25",permalink:"/docs/DevOps/Hashicorp/2022-05-25-hashicorp-nomad-with-gitlab/2022-05-25",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-05-25-hashicorp-nomad-with-gitlab/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Consul",permalink:"/docs/tags/consul"},{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:5050,frontMatter:{sidebar_position:5050,slug:"2022-05-25",title:"App Deployment with Hashicorp Nomad from Gitlab",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"]},sidebar:"tutorialSidebar",previous:{title:"App Deployment with Hashicorp Nomad from Gitlab Part Deux",permalink:"/docs/DevOps/Hashicorp/2022-05-26-hashicorp-nomad-with-gitlab-part-2/2022-05-26"},next:{title:"Hashicorp Nomad for NGINX Web Proxies",permalink:"/docs/DevOps/Hashicorp/2022-05-24-hashicorp-nomad-with-nginx/2022-05-24"}},d={},c=[{value:"Deploy Applications from the Gitlab Docker Registry",id:"deploy-applications-from-the-gitlab-docker-registry",level:2},{value:"Add a Healthcheck",id:"add-a-healthcheck",level:3},{value:"Updating Applications",id:"updating-applications",level:3},{value:"Adding a Loadbalancer / App Ingress",id:"adding-a-loadbalancer--app-ingress",level:3},{value:"Use Git to Download Artifacts",id:"use-git-to-download-artifacts",level:2},{value:"Preparation",id:"preparation",level:3},{value:"Create your SSH Key",id:"create-your-ssh-key",level:4},{value:"Configuring Gitlab",id:"configuring-gitlab",level:4},{value:"Test the Connection",id:"test-the-connection",level:4},{value:"Create a Nomad Job",id:"create-a-nomad-job",level:3}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Shen Zhen, China",src:t(121426).A+"",width:"2230",height:"839"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#deploy-applications-from-the-gitlab-docker-registry",children:"Deploy Applications from the Gitlab Docker Registry"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#add-a-healthcheck",children:"Add a Healthcheck"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#updating-applications",children:"Updating Applications"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#adding-a-loadbalancer--app-ingress",children:"Adding a Loadbalancer / App Ingress"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#use-git-to-download-artifacts",children:"Use Git to Download Artifacts"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#preparation",children:"Preparation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#create-your-ssh-key",children:"Create your SSH Key"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#configuring-gitlab",children:"Configuring Gitlab"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#test-the-connection",children:"Test the Connection"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#create-a-nomad-job",children:"Create a Nomad Job"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"deploy-applications-from-the-gitlab-docker-registry",children:"Deploy Applications from the Gitlab Docker Registry"}),"\n",(0,a.jsxs)(n.p,{children:["I want to download a Docker image from a private ",(0,a.jsx)(n.a,{href:"/docs/DevOps/GitOps/2020-08-03--gitlab-as-docker-registry/2020-08-03",children:"Gitlab Docker Registry"})," and run the container on a dynamic port forwarded to a static port on the inside of the container providing a web frontend:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'job "wiki_de" {\n\tdatacenters = ["instaryun"]\n\n\tgroup "wiki_de" {\n    count = 1\n        \n\t\tnetwork {\n\t\t\tmode = "host"\n\t\t\tport "http" {\n\t\t\t\tto = "1234"\n\t\t\t}\n\t\t}\n\n\t\ttask "container" {\n\t\t\tdriver = "docker"\n\n\t\t\tconfig {\n\t\t\t\timage = "mygitlab.mydomain.com:12345/wiki/wiki_de_mdx"\n\t\t\t\tports = ["http"]\n\n        auth {\n          username = "mynomaduserongitlab"\n          password = "acomplicatedpassword"\n        }\n\t\t\t}\n\t\t}\n\t}\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"This time I want to use the Nomad web frontend to plan and execute the job:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Nomad &amp; Gitlab",src:t(190935).A+"",width:"1264",height:"777"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Nomad &amp; Gitlab",src:t(483356).A+"",width:"1008",height:"436"})}),"\n",(0,a.jsx)(n.p,{children:"After clicking on execute I find the UI a bit lacking - you get feedback if something went wrong. But there is no progress or error log. So let's check the CLI:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"nomad job status wiki_de\n\nDeployed\nTask Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\nwiki_de     1        1       0        0          2022-06-12T11:23:40+02:00\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created   Modified\na98b7e7d  005f708b  wiki_de     0        run      running  1m5s ago  1s ago\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"nomad alloc-status a98b7e7d\n\nRecent Events:\nTime                       Type        Description\n2022-06-12T11:14:45+02:00  Started     Task started by client\n2022-06-12T11:13:41+02:00  Driver      Downloading image\n2022-06-12T11:13:41+02:00  Task Setup  Building Task Directory\n2022-06-12T11:13:40+02:00  Received    Task received by client\n"})}),"\n",(0,a.jsx)(n.p,{children:"Everything seemed to have worked. Checking the UI confirms that the allocation was successful:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Nomad &amp; Gitlab",src:t(719269).A+"",width:"1005",height:"615"})}),"\n",(0,a.jsx)(n.p,{children:"Checking the docker process tells me that the port allocation is in place as well:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker ps\nCONTAINER ID        PORTS\nca5e75497442        my.minion.ip:24372->1234/tcp, my.minion.ip:24372->1234/udp\n"})}),"\n",(0,a.jsxs)(n.p,{children:["I am able to access my web frontend by running ",(0,a.jsx)(n.code,{children:"curl http://my.minion.ip:24372"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"add-a-healthcheck",children:"Add a Healthcheck"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://www.nomadproject.io/docs/job-specification/service",children:"Job Specification / Service"})}),"\n",(0,a.jsx)(n.p,{children:"The health check initially failed since - even though I am running the container on my host network - I am still assigning a random port to it and forward it to my HTTP port inside the container:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'network {\n  mode = "host"\n  port "http" {\n    to = "1234"\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"This means that Consul is trying to connect on to the HTTP frontend on this random port instead - that, unfortunately, leads to nothing and makes the health check fail:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Gitlab CI with Nomad",src:t(68792).A+"",width:"917",height:"515"})}),"\n",(0,a.jsx)(n.p,{children:"I initially left this part in because I plan to use the Consul service discovery to handle routing automatically. But it seems for now I have to add a static port to continue. This is going to cause an issue later on when trying to update the application:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'Scheduler dry-run:\n- WARNING: Failed to place all allocations.\n  Task Group "docker" (failed to place 1 allocation):\n    * Resources exhausted on 1 nodes\n    * Dimension "network: reserved port collision http=1234" exhausted on 1 nodes\n'})}),"\n",(0,a.jsx)(n.p,{children:"So I first have to manually stop the running allocation and then plan/run the job to update the application..."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'network {\n    mode = "host"\n    port "http" {\n        static = "1234"\n    }\n}\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'job "wiki_en" {\n\t  datacenters = ["wiki_search"]\n    type = "service"\n\n\tgroup "docker" {\n    count = 1\n        \n    network {\n        mode = "host"\n        port "http" {\n            static = "1234"\n        }\n\t  }\n\n    service {\n        name = "wikiEN"\n        port = "http"\n        tags = [\n            "frontend",\n            "urlprefix-/en/"\n        ]\n\n        check {\n            name     = "HTTP Health"\n            path     = "/"\n            type     = "http"\n            protocol = "http"\n            interval = "10s"\n            timeout  = "2s"\n        }\n    }\n\n    task "wiki_en_container" {\n        driver = "docker"\n\n        config {\n            image = "mygitlab.mydomain.com:12345/wiki/wiki_de_mdx"\n            ports = ["http"]\n            network_mode = "host"\n\n            auth {\n              username = "mynomaduserongitlab"\n              password = "acomplicatedpassword"\n            }\n          }\n        }\n    }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["This application provides a web frontend on port ",(0,a.jsx)(n.code,{children:"1234"}),". The health check now registers a service with Consul that will check every 10s if the web frontend is available. Once the health check fails Nomad will be triggered to fullfill the requirement of having at least one healthy instance of this app running. We now have a self-healing app! Nice!"]}),"\n",(0,a.jsx)(n.p,{children:"But before I run it - let's define some update parameter for the application."}),"\n",(0,a.jsx)(n.h3,{id:"updating-applications",children:"Updating Applications"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://www.nomadproject.io/docs/job-specification/service",children:"Job Specification / Update"})}),"\n",(0,a.jsx)(n.p,{children:"The Update block below will make sure that only 1 instance of the app is running at a time. It would be better to have count higher than one and a load-balancing service in place - but there are space restraints. So I accept some potential downtime."}),"\n",(0,a.jsxs)(n.p,{children:["The update service makes sure that the application passes the health-check for at least ",(0,a.jsx)(n.code,{children:"10s"})," and rolls the application back to the old version if the health-check fails for ",(0,a.jsx)(n.code,{children:"2min"}),". Once the application is deemed healthy the canary deployment will be promoted to stable."]}),"\n",(0,a.jsxs)(n.p,{children:["To make sure that Nomad always pulls the latest Docker image - this job only going to be used after a new image was committed - you can add the ",(0,a.jsx)(n.a,{href:"https://www.nomadproject.io/docs/drivers/docker#force_pull",children:"force-pull"})," option:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'job "wiki_en" {\n\t  datacenters = ["wiki_search"]\n    type = "service"\n\n\tgroup "docker" {\n    count = 1\n        \n    network {\n        mode = "host"\n        port "http" {\n            static = "1234"\n        }\n\t  }\n\n    update {\n      max_parallel = 1\n      min_healthy_time  = "10s"\n      healthy_deadline  = "2m"\n      progress_deadline = "5m"\n      auto_revert = true\n      auto_promote = true\n      canary = 1\n    }\n\n    service {\n        name = "wikiEN"\n        port = "http"\n        tags = [\n            "frontend",\n            "urlprefix-/en/"\n        ]\n\n        check {\n            name     = "HTTP Health"\n            path     = "/"\n            type     = "http"\n            protocol = "http"\n            interval = "10s"\n            timeout  = "2s"\n        }\n    }\n\n    task "wiki_en_container" {\n        driver = "docker"\n\n        config {\n            image = "mygitlab.mydomain.com:12345/wiki/wiki_de_mdx"\n            ports = ["http"]\n            network_mode = "host"\n            force_pull = true\n\n            auth {\n              username = "mynomaduserongitlab"\n              password = "acomplicatedpassword"\n            }\n          }\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Starting the job I can now see the canary deployment and job promotion once the Consul health check is successful:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Gitlab CI with Nomad",src:t(806273).A+"",width:"944",height:"244"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Gitlab CI with Nomad",src:t(678406).A+"",width:"917",height:"653"})}),"\n",(0,a.jsx)(n.h3,{id:"adding-a-loadbalancer--app-ingress",children:"Adding a Loadbalancer / App Ingress"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"/docs/DevOps/Hashicorp/2022-05-26-hashicorp-nomad-with-gitlab-part-2/2022-05-26",children:"see Part II"})}),"\n",(0,a.jsx)(n.h2,{id:"use-git-to-download-artifacts",children:"Use Git to Download Artifacts"}),"\n",(0,a.jsx)(n.h3,{id:"preparation",children:"Preparation"}),"\n",(0,a.jsx)(n.h4,{id:"create-your-ssh-key",children:"Create your SSH Key"}),"\n",(0,a.jsxs)(n.p,{children:["First we need to create the private and public SSH key on the ",(0,a.jsx)(n.strong,{children:"Nomad Minion"})," node:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"ssh-keygen -t rsa -b 4096 -f /etc/nomad.d/.ssh/id_rsa\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["I realized afterwards that the Nomad process is executed by the ",(0,a.jsx)(n.code,{children:"root"})," user on each minion. Only the master node uses the ",(0,a.jsx)(n.code,{children:"nomad"})," user. This means this key could be placed in the root home dir. But I am going to add a default SSH config parameter that will make sure that this key is used - no matter where it is placed. And having everything neatly placed inside the ",(0,a.jsx)(n.code,{children:"nomad.d"})," dir is maybe not a bad idea. This might even be source controlled and used in provisioning new instances of each Nomad Minion."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["This will create the RSA and RSA public key - place them inside your Nomad users home directory. If you used the following command before to create the user ",(0,a.jsx)(n.code,{children:"useradd --system --home /etc/nomad.d --shell /bin/false nomad"})," this directory will be ",(0,a.jsx)(n.code,{children:"/etc/nomad.d"}),":"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"id_rsa"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"-----BEGIN OPENSSH PRIVATE KEY-----\nbYWQ=fDSAFe4 ... 5sdgfdDFSfszgf\n-----END OPENSSH PRIVATE KEY-----\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"id_rsa.pub"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"ssh-rsa AA ... 7+lU= myuser@Nomad\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Make sure those files can be used by the Nomad user ",(0,a.jsx)(n.code,{children:"chown nomad:nomad /etc/nomad.d/*"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"chmod 400 /etc/nomad.d/.ssh/id_rsa\n\nls -la /etc/nomad.d/.ssh\n\ntotal 16\ndrwxr-xr-x 2 root  root  4096 Jun  8 12:18 .\ndrwxr-xr-x 4 nomad nomad 4096 Jun  8 12:18 ..\n-r-------- 7 nomad nomad 3.2K Jun 13 07:23 id_rsa\n-rw-r--r-- 7 nomad nomad  744 Jun 13 07:23 id_rsa.pub\n"})}),"\n",(0,a.jsx)(n.p,{children:"Make sure that the Nomad user's known hosts file is populated:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"ssh-keyscan my.gitlab.address.com | sudo tee -a /etc/nomad.d/.ssh/known_hosts\n"})}),"\n",(0,a.jsx)(n.p,{children:"Make sure that SSH uses the correct public key when connecting to your Gitlab server by adding the following configuration:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"nano /etc/ssh/ssh_config\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Host my.gitlab.address.com\n   Preferredauthentications publickey\n   IdentityFile /etc/nomad.d/.ssh/id_rsa\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"ssh -T git@my.gitlab.address.com\nWelcome to GitLab, @nomaduser!\n"})}),"\n",(0,a.jsx)(n.h4,{id:"configuring-gitlab",children:"Configuring Gitlab"}),"\n",(0,a.jsx)(n.p,{children:"Create a Nomad User in Gitlab and add the Public key:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Gitlab CI with Nomad",src:t(648842).A+"",width:"1221",height:"646"})}),"\n",(0,a.jsx)(n.h4,{id:"test-the-connection",children:"Test the Connection"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"runuser -u nomad -- mkdir /etc/nomad.d/test\ncd /etc/nomad.d/test\nrunuser -u nomad -- git clone git@my.gitlab.address.com/group/repo.git\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The repository should be downloaded into your ",(0,a.jsx)(n.code,{children:"test"})," directory without having to type in a password - then you are good to go!"]}),"\n",(0,a.jsx)(n.h3,{id:"create-a-nomad-job",children:"Create a Nomad Job"}),"\n",(0,a.jsxs)(n.p,{children:["For testing I am going to download some HTML code from a private Gitlab repository and execute a small terminal Node.js web server called ",(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/httpster",children:"httpster"})," to serve those files:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"httpster -p 8080 -d /home/somedir/public_html\n"})}),"\n",(0,a.jsx)(n.p,{children:"So now we can plan and run our Nomad job from the Nomad UI:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'job "web_front" {\n  datacenters = ["kundensysteme"]\n\n  group "web" {\n\n    task "httpster" {\n      driver = "exec"\n\n      config {\n        command = "httpster"\n        args = ["-p", "8080", "-d", "${NOMAD_TASK_DIR}/html"]\n      }\n\n      artifact {\n        source      = "git::git@my.gitlab.address.com/group/repo.git"\n        destination = "${NOMAD_TASK_DIR}/html"\n        options {\n          sshkey = "${base64encode(file(pathexpand("~/.ssh/id_rsa")))}"\n          depth = 1\n        }\n      }\n\n      resources {\n        cpu    = 128\n        memory = 128\n      }\n    }\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["But it seems that you cannot access the ",(0,a.jsx)(n.a,{href:"https://discuss.hashicorp.com/t/call-to-function-pathexpand-failed-filesystem-function-disabled/30995",children:"servers filesystem"})," when using the Nomad webUI:"]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Parse Error"}),':\ninput.hcl:18,41-52: Error in function call; Call to function "pathexpand" failed: filesystem function disabled. input.hcl:18,20-72: Unsuitable value type; Unsuitable value: value must be known']}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Gitlab CI with Nomad",src:t(380755).A+"",width:"1009",height:"772"})}),"\n",(0,a.jsx)(n.p,{children:"So let's create this job file on our Nomad master and execute it using the Nomad CLI:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'nomad plan test_artifacts.nomad                                                                                      \n+/- Job: "web_front"\n+/- Stop: "true" => "false"\n+/- Task Group: "web" (1 create)\n  +/- Task: "httpster" (forces create/destroy update)\n    +/- Artifact {\n          GetterMode:            "any"\n          GetterOptions[sshkey]: "ADgfdt...tf325sd"\n          GetterSource:          "git::ssh://git@my.gitlab.address.com/group/repo.git"\n          RelativeDest:          "local/html"\n        }\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nTo submit the job with version verification run:\n\nnomad job run -check-index 8150 test_artifacts.nomad\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'nomad job run -check-index 8150 test_artifacts.nomad\n\n==> 2022-06-13T08:24:57+02:00: Monitoring evaluation "19cbcc30"\n    2022-06-13T08:24:57+02:00: Evaluation triggered by job "web_front"\n==> 2022-06-13T08:24:58+02:00: Monitoring evaluation "19cbcc30"\n    2022-06-13T08:24:58+02:00: Evaluation within deployment: "cb210d05"\n    2022-06-13T08:24:58+02:00: Allocation "ab8494c7" created: node "005f708b", group "web"\n    2022-06-13T08:24:58+02:00: Evaluation status changed: "pending" -> "complete"\n==> 2022-06-13T08:24:58+02:00: Evaluation "19cbcc30" finished with status "complete"\n==> 2022-06-13T08:24:58+02:00: Monitoring deployment "cb210d05"\n  \u2713 Deployment "cb210d05" successful\n    \n    2022-06-13T08:25:14+02:00\n    ID          = cb210d05\n    Job ID      = web_front\n    Job Version = 9\n    Status      = successful\n    Description = Deployment completed successfully\n    \n    Deployed\n    Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\n    web         1        1       1        0          2022-06-13T08:35:12+02:00\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"nomad job status web_front\n\nDeployed\nTask Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\nweb         1        1       0        0          2022-06-13T07:15:19+02:00\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status    Created     Modified\n11526379  005f708b  web         1        run      pending   7s ago      4s ago\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'nomad alloc-status a6323ccc\n\nTask "httpster" is "running"\nTask Resources\nCPU        Memory          Disk     Addresses\n0/128 MHz  13 MiB/128 MiB  300 MiB  \n\nRecent Events:\nTime                       Type                   Description\n2022-06-13T08:25:02+02:00  Started                Task started by client\n2022-06-13T08:25:01+02:00  Downloading Artifacts  Client is downloading artifacts\n2022-06-13T08:24:58+02:00  Task Setup             Building Task Directory\n2022-06-13T08:24:58+02:00  Received               Task received by client\n'})}),"\n",(0,a.jsx)(n.p,{children:"I can verify that the web server is running:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"netstat -tlnp\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp6       0      0 :::8080                 :::*                    LISTEN      7002/node\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"curl localhost:8080\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset='utf-8'>\n\n    ...\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"It works!"})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},190935:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Gitlab_CI_with_Nomad_01-c7c13dba915ead792f9618238d8b17f2.png"},483356:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Gitlab_CI_with_Nomad_02-09854662304c0ba9eb7ccb0230187f79.png"},719269:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Gitlab_CI_with_Nomad_03-86a495d684bd0f12f7de3b1ca88ce382.png"},648842:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Gitlab_CI_with_Nomad_04-6c73c147e43a6e9d386b0b11a04da5fb.png"},380755:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Gitlab_CI_with_Nomad_05-1fd0f49135a65752b1bfa7e652879961.png"},68792:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Gitlab_CI_with_Nomad_06-22d1ded82c984ab4eb8643798cff8bb0.png"},806273:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Gitlab_CI_with_Nomad_07-828676621659533b7460794c186049c1.png"},678406:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/Gitlab_CI_with_Nomad_08-c942127691667ad6d3ef0b9e4da5dc1c.png"},121426:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var a=t(296540);const s={},i=a.createContext(s);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);