"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[60207],{823687:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>o});var r=a(785893),s=a(603905);const t={sidebar_position:9080,slug:"2020-06-16",title:"Salt State",authors:"mpolinowski",tags:["LINUX","Salt"]},i=void 0,l={id:"DevOps/Salt/2020-06-16--salt-state/index",title:"Salt State",description:"Guangzhou, China",source:"@site/docs/DevOps/Salt/2020-06-16--salt-state/index.mdx",sourceDirName:"DevOps/Salt/2020-06-16--salt-state",slug:"/DevOps/Salt/2020-06-16--salt-state/2020-06-16",permalink:"/docs/DevOps/Salt/2020-06-16--salt-state/2020-06-16",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Salt/2020-06-16--salt-state/index.mdx",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Salt",permalink:"/docs/tags/salt"}],version:"current",sidebarPosition:9080,frontMatter:{sidebar_position:9080,slug:"2020-06-16",title:"Salt State",authors:"mpolinowski",tags:["LINUX","Salt"]},sidebar:"tutorialSidebar",previous:{title:"Salt Pillars & Formulas",permalink:"/docs/DevOps/Salt/2020-06-17--salt-pillars-formulas/2020-06-17"},next:{title:"Salty DevOps",permalink:"/docs/DevOps/Salt/2020-06-15--salty-devops/2020-06-15"}},c={},o=[{value:"Setting up your Minions",id:"setting-up-your-minions",level:2},{value:"Installing Apache",id:"installing-apache",level:3},{value:"Configuring Apache",id:"configuring-apache",level:3},{value:"Jinja Scripts",id:"jinja-scripts",level:2},{value:"Conditionals",id:"conditionals",level:3},{value:"Looping",id:"looping",level:3},{value:"Scripts CleanUP",id:"scripts-cleanup",level:3},{value:"Working with Dictionaries",id:"working-with-dictionaries",level:3},{value:"Splitting up our Files",id:"splitting-up-our-files",level:3},{value:"Using Custom Python Scripts",id:"using-custom-python-scripts",level:2}];function d(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.ah)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{alt:"Guangzhou, China",src:a(148051).Z+"",width:"1500",height:"515"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#setting-up-your-minions",children:"Setting up your Minions"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#installing-apache",children:"Installing Apache"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#configuring-apache",children:"Configuring Apache"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#jinja-scripts",children:"Jinja Scripts"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#conditionals",children:"Conditionals"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#looping",children:"Looping"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#scripts-cleanup",children:"Scripts CleanUP"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#working-with-dictionaries",children:"Working with Dictionaries"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#splitting-up-our-files",children:"Splitting up our Files"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#using-custom-python-scripts",children:"Using Custom Python Scripts"})}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"setting-up-your-minions",children:"Setting up your Minions"}),"\n",(0,r.jsx)(e.h3,{id:"installing-apache",children:"Installing Apache"}),"\n",(0,r.jsxs)(e.p,{children:["We can set the state of an Minion inside a YAML file that contains instructions for Salt. Start by creating a folder ",(0,r.jsx)(e.code,{children:"/srv/salt"})," and run ",(0,r.jsx)(e.code,{children:"git init"})," to version your ",(0,r.jsx)(e.a,{href:"https://docs.saltstack.com/en/master/ref/states/all/index.html",children:"minion state"}),". To make sure that our minion has ",(0,r.jsx)(e.a,{href:"https://docs.saltstack.com/en/master/ref/states/all/salt.states.pkg.html#salt.states.pkg.installed",children:"Apache installed"})," we will create an ",(0,r.jsx)(e.code,{children:"apache.sls"})," file inside the directory ",(0,r.jsx)(e.strong,{children:"on your MASTER"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"install_apache:\r\n  pkg.installed:\r\n   - name: apache2\n"})}),"\n",(0,r.jsx)(e.p,{children:"You can now execute this set of instructions on your minion server by running:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"sudo salt ubuntuAsus state.sls apache\r\n\r\nubuntuAsus:\r\n----------\r\n          ID: install_apache\r\n    Function: pkg.installed\r\n        Name: apache2\r\n      Result: True\r\n     Comment: The following packages were installed/updated: apache2\r\n     Started: 15:15:20.619100\r\n    Duration: 28624.3 ms\r\n     Changes:   \r\n              ----------\r\n              apache2:\r\n                  ----------\r\n                  new:\r\n                      2.4.41-4ubuntu3\r\n                  old:\r\n              apache2-bin:\r\n                  ----------\r\n                  new:\r\n                      2.4.41-4ubuntu3\r\n                  old:\r\n              apache2-data:\r\n\r\nSummary for ubuntuAsus\r\n------------\r\nSucceeded: 1 (changed=1)\r\nFailed:    0\r\n------------\r\nTotal states run:     1\r\nTotal run time:  28.624 s\n"})}),"\n",(0,r.jsxs)(e.p,{children:["This step had our Minion download a copy of ",(0,r.jsx)(e.code,{children:"apache.sls"})," file from our master and run it's instructions. The master does not need to know how the minion is going to download and install the required software - the OS on our minion makes that decision. Since we have Ubuntu installed on our minion it will run ",(0,r.jsx)(e.code,{children:"apt-get update && apt-get install apache2"}),"."]}),"\n",(0,r.jsx)(e.h3,{id:"configuring-apache",children:"Configuring Apache"}),"\n",(0,r.jsxs)(e.p,{children:["We can now also make sure that Apache will be ",(0,r.jsx)(e.a,{href:"https://docs.saltstack.com/en/master/ref/states/all/salt.states.service.html#module-salt.states.service",children:"enabled and activated as a service"})," by adding the following line to our instruction file:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"install_apache:\r\n  pkg.installed:\r\n   - name: apache2\r\n\r\nenable_apache:\r\n  service.running:\r\n    - name: apache2\r\n    - enable: True\n"})}),"\n",(0,r.jsx)(e.p,{children:"We can also configure Apache to display a landing page on Port 80:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"install_apache:\r\n  pkg.installed:\r\n   - name: apache2\r\n\r\nenable_apache:\r\n  service.running:\r\n    - name: apache2\r\n    - enable: True\r\n\r\nadd_landing_page:\r\n  file.managed:\r\n    - name: /var/www/html/index.html\r\n    - contents: |\r\n        <!doctype html>\r\n        <body><h1>Salty Dayze, Sailor!</h1></body>\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Now re-run ",(0,r.jsx)(e.code,{children:"state.sls"})," and the default Apache Landing Page will be overwritten by our ",(0,r.jsx)(e.strong,{children:"Hello World"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"sudo salt ubuntuAsus state.sls apache test=true\r\n\r\nsudo salt ubuntuAsus state.sls apache\n"})}),"\n",(0,r.jsx)(e.p,{children:"You can visit the website on your minions IP address and port 80. You can get the IP address by running the following command:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"sudo salt ubuntuAsus network.ip_addrs\r\n\r\nubuntuAsus:\r\n    - 10.1.88.0\r\n    - 172.17.0.1\r\n    - 192.168.2.111\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:"curl 192.168.2.111\r\n\r\n<!doctype html>\r\n<body><h1>Salty Dayze, Sailor!</h1></body>\n"})}),"\n",(0,r.jsx)(e.h2,{id:"jinja-scripts",children:"Jinja Scripts"}),"\n",(0,r.jsx)(e.h3,{id:"conditionals",children:"Conditionals"}),"\n",(0,r.jsxs)(e.p,{children:["The Apache install script in this form will only work for Debian-based operating system - the Apache package is called ",(0,r.jsx)(e.code,{children:"apache2"})," on Ubuntu but ",(0,r.jsx)(e.code,{children:"httpd"})," on CentOS. We can use the Jinja script syntax to make our script more robust:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"install_apache:\r\n  pkg.installed:\r\n   {% if salt.grains.get('os_family') == 'Debian' %}\r\n   - name: apache2\r\n   {% elif salt.grains.get('os_family') == 'RedHat' %}\r\n   - name: httpd\r\n   {% endif %}\r\n\r\nenable_apache:\r\n  service.running:\r\n    {% if salt.grains.get('os_family') == 'Debian' %}\r\n    - name: apache2\r\n    {% elif salt.grains.get('os_family') == 'RedHat' %}\r\n    - name: httpd\r\n    {% endif %}\r\n    - enable: True\r\n\r\nadd_landing_page:\r\n  file.managed:\r\n    - name: /var/www/html/index.html\r\n    - contents: |\r\n        <!doctype html>\r\n        <body><h1>Salty Dayze, Sailor!</h1></body>\n"})}),"\n",(0,r.jsxs)(e.p,{children:["We can test this script with the ",(0,r.jsx)(e.code,{children:"state.show_sls"})," command:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"sudo salt '*' state.show_sls apache | less\r\n\r\nubuntuAsus:\r\n    ----------\r\n    enable_apache:\r\n        ----------\r\n        __env__:\r\n            base\r\n        __sls__:\r\n            apache\r\n        service:\r\n            |_\r\n              ----------\r\n              name:\r\n                  apache2\r\n            |_\r\n              ----------\r\n              enable:\r\n                  True\r\n            - running\r\n            |_\r\n              ----------\r\n              order:\r\n                  10001\n"})}),"\n",(0,r.jsxs)(e.p,{children:["We can see that our Ubuntu Minion correctly resolved the ",(0,r.jsx)(e.code,{children:"apache2"})," package and not ",(0,r.jsx)(e.code,{children:"httpd"}),"."]}),"\n",(0,r.jsx)(e.h3,{id:"looping",children:"Looping"}),"\n",(0,r.jsxs)(e.p,{children:["To configure Apache we can now create configuration files in the ",(0,r.jsx)(e.code,{children:"conf-available"})," directory and copy them over into the ",(0,r.jsx)(e.code,{children:"conf-enabled"})," directory to start using them:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"mod_status:\r\n  file.managed:\r\n    - name: /etc/apache2/conf-available/mod_status.conf\r\n    - contents: |\r\n      <Location '/status'>\r\n        SetHandler server-status\r\n      </Location>\r\n  cmd.run:\r\n    - name: a2enmod status && a2enconf mod_status\r\n    - creates: /etc/apache2/conf-enabled/mod_status.conf\r\n\r\nmod_info:\r\n  file.managed:\r\n    - name: /etc/apache2/conf-available/mod_info.conf\r\n    - contents: |\r\n      <Location '/info'>\r\n        SetHandler server-info\r\n      </Location>\r\n  cmd.run:\r\n    - name: a2enmod info && a2enconf mod_info\r\n    - creates: /etc/apache2/conf-enabled/mod_info.conf\n"})}),"\n",(0,r.jsx)(e.p,{children:"This configuration script can be compacted by writing a for-loop:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"{% for conf in ['status', 'info'] %}\r\n\r\nmod_{{ conf }}:\r\n  file.managed:\r\n    - name: /etc/apache2/conf-available/mod_{{ conf }}.conf\r\n    - contents: |\r\n        <Location '/{{ conf }}'>\r\n            SetHandler server-{{ conf }}\r\n        </Location>\r\n\r\n  {% if salt.grains.get('os_family') == 'Debian' %}\r\n  cmd.run:\r\n    - name: a2enmod {{ conf }} && a2enconf mod_{{ conf }}\r\n    - creates: /etc/apache2/conf-enabled/mod_{{ conf }}.conf\r\n  {% endif %}\r\n\r\n{% endfor %}\n"})}),"\n",(0,r.jsx)(e.p,{children:"The command step is only necessary on Debian systems and can be wrapped into a conditional. We can again test our script:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"sudo salt '*' state.show_sls mods | less\r\n\r\nubuntuAsus:\r\n    ----------\r\n    mod_info:\r\n        ----------\r\n        __env__:\r\n            base\r\n        __sls__:\r\n            mods\r\n    ...\n"})}),"\n",(0,r.jsx)(e.h3,{id:"scripts-cleanup",children:"Scripts CleanUP"}),"\n",(0,r.jsx)(e.p,{children:"Commenting your scripts and separating logic from state:"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"apache.sls"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# Install vanilla Apache on Debian/RedHat\r\n\r\n{% if salt.grains.get('os_family') == 'Debian' %}\r\n{% set apache_pkg = 'apache2' %}\r\n{% elif salt.grains.get('os_family') == 'RedHat' %}\r\n{% set apache_pkg = 'httpd' %}\r\n{% endif %}\r\n\r\ninstall_apache:\r\n  pkg.installed:\r\n   - name: {{ apache_pkg }}\r\n\r\nenable_apache:\r\n  service.running:\r\n    - name: {{ apache_pkg }}\r\n\r\n    # Will be enabled automatically on Debian but has to be enabled manually on RedHat\r\n    - enable: True\r\n\r\n# Adding a blank front page\r\nadd_landing_page:\r\n  file.managed:\r\n    - name: /var/www/html/index.html\r\n    - contents: |\r\n        <!doctype html>\r\n        <body><h1>Salty Dayze, Sailor!</h1></body>\n"})}),"\n",(0,r.jsx)(e.h3,{id:"working-with-dictionaries",children:"Working with Dictionaries"}),"\n",(0,r.jsx)(e.p,{children:"Create a lookup dictionary to assign the correct package and service name for each minion:"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"apache.sls"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# Install vanilla Apache on Debian/RedHat\r\n\r\n{% set lookup = {\r\n    'Debian': {\r\n        'pkg': 'apache2',\r\n        'srv': 'apache2'\r\n    },\r\n    'RedHat': {\r\n        'pkg': 'httpd',\r\n        'srv': 'httpd'\r\n    }\r\n} %}\r\n\r\n{% set apache = lookup[salt.grains.get('os_family')] %}\r\n\r\ninstall_apache:\r\n  pkg.installed:\r\n   - name: {{ apache.pkg }}\r\n\r\nenable_apache:\r\n  service.running:\r\n    - name: {{ apache.srv }}\r\n\r\n    # Will be enabled automatically on Debian but has to be enabled manually on RedHat\r\n    - enable: True\r\n\r\n# Adding a blank front page\r\nadd_landing_page:\r\n  file.managed:\r\n    - name: /var/www/html/index.html\r\n    - contents: |\r\n        <!doctype html>\r\n        <body><h1>Salty Dayze, Sailor!</h1></body>\n"})}),"\n",(0,r.jsxs)(e.p,{children:["making this is a little bit more compact by using ",(0,r.jsx)(e.code,{children:"grains.filter_by"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"sudo salt '*' grains.filter_by '{Debian: apache2, RedHat: httpd}'\r\n\r\nubuntuAsus:\r\n    apache2\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"apache.sls"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# Install vanilla Apache on Debian/RedHat\r\n\r\n{% set apache = salt.grains.filter_by({\r\n    'Debian': {\r\n        'pkg': 'apache2',\r\n        'srv': 'apache2'\r\n    },\r\n    'RedHat': {\r\n        'pkg': 'httpd',\r\n        'srv': 'httpd'\r\n    }\r\n}) %}\r\n\r\ninstall_apache:\r\n  pkg.installed:\r\n   - name: {{ apache.pkg }}\r\n\r\nenable_apache:\r\n  service.running:\r\n    - name: {{ apache.srv }}\r\n\r\n    # Will be enabled automatically on Debian but has to be enabled manually on RedHat\r\n    - enable: True\r\n\r\n# Adding a blank front page\r\nadd_landing_page:\r\n  file.managed:\r\n    - name: /var/www/html/index.html\r\n    - contents: |\r\n        <!doctype html>\r\n        <body><h1>Salty Dayze, Sailor!</h1></body>\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Again, you can test your script with ",(0,r.jsx)(e.code,{children:"sudo salt '*' state.show_sls apache | less"}),"."]}),"\n",(0,r.jsx)(e.h3,{id:"splitting-up-our-files",children:"Splitting up our Files"}),"\n",(0,r.jsxs)(e.p,{children:["We can now break up our configuration file so that every SLS file only does one thing - if possible. We will collect the resulting files inside a subdirectory ",(0,r.jsx)(e.code,{children:"/srv/salt/apache"}),":"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"welcome.sls"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# Adding a blank front page\r\nadd_landing_page:\r\n  file.managed:\r\n    - name: /var/www/html/index.html\r\n    - contents: |\r\n        <!doctype html>\r\n        <body><h1>Salty Dayze, Sailor!</h1></body>\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"map.sls"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# Get package/service name per OS version\r\n{% set apache = salt.grains.filter_by({\r\n    'Debian': {\r\n        'pkg': 'apache2',\r\n        'srv': 'apache2'\r\n    },\r\n    'RedHat': {\r\n        'pkg': 'httpd',\r\n        'srv': 'httpd'\r\n    }\r\n}) %}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"init.sls"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# Install vanilla Apache on Debian/RedHat\r\n\r\n{% from 'apache/map.sls' import apache with context %}\r\n\r\ninstall_apache:\r\n  pkg.installed:\r\n   - name: {{ apache.pkg }}\r\n\r\nenable_apache:\r\n  service.running:\r\n    - name: {{ apache.srv }}\r\n\r\n    # Will be enabled automatically on Debian but has to be enabled manually on RedHat\r\n    - enable: True\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"mods.sls"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"{% for conf in ['status', 'info'] %}\r\n\r\nmod_{{ conf }}:\r\n  file.managed:\r\n    - name: /etc/apache2/conf-available/mod_{{ conf }}.conf\r\n    - contents: |\r\n        <Location '/{{ conf }}'>\r\n            SetHandler server-{{ conf }}\r\n        </Location>\r\n\r\n  {% if salt.grains.get('os_family') == 'Debian' %}\r\n  cmd.run:\r\n    - name: a2enmod {{ conf }} && a2enconf mod_{{ conf }}\r\n    - creates: /etc/apache2/conf-enabled/mod_{{ conf }}.conf\r\n  {% endif %}\r\n\r\n{% endfor %}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Again, you can test your script with ",(0,r.jsx)(e.code,{children:"sudo salt '*' state.show_sls apache | less"})]}),"\n",(0,r.jsx)(e.h2,{id:"using-custom-python-scripts",children:"Using Custom Python Scripts"}),"\n",(0,r.jsxs)(e.p,{children:["You can write your own Python modules and execute them with Salt. Start by creating a folder ",(0,r.jsx)(e.code,{children:"/srv/salt/_modules"})," and add your Python scripts - ",(0,r.jsx)(e.code,{children:"myUtils.py"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"def getDate():\r\n    return __salt__['cmd.run']('date')\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"sudo salt '*' saltutil.sync_modules  //sync script with all minions\r\nsudo salt '*' myUtils.getDate\r\n\r\nubuntuAsus:\r\n    Tue Aug  4 09:19:49 UTC 2020\n"})})]})}function h(n={}){const{wrapper:e}={...(0,s.ah)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},603905:(n,e,a)=>{a.d(e,{ah:()=>o});var r=a(667294);function s(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}function t(n,e){var a=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.push.apply(a,r)}return a}function i(n){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?t(Object(a),!0).forEach((function(e){s(n,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(a,e))}))}return n}function l(n,e){if(null==n)return{};var a,r,s=function(n,e){if(null==n)return{};var a,r,s={},t=Object.keys(n);for(r=0;r<t.length;r++)a=t[r],e.indexOf(a)>=0||(s[a]=n[a]);return s}(n,e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);for(r=0;r<t.length;r++)a=t[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(s[a]=n[a])}return s}var c=r.createContext({}),o=function(n){var e=r.useContext(c),a=e;return n&&(a="function"==typeof n?n(e):i(i({},e),n)),a},d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},h=r.forwardRef((function(n,e){var a=n.components,s=n.mdxType,t=n.originalType,c=n.parentName,h=l(n,["components","mdxType","originalType","parentName"]),p=o(a),u=s,g=p["".concat(c,".").concat(u)]||p[u]||d[u]||t;return a?r.createElement(g,i(i({ref:e},h),{},{components:a})):r.createElement(g,i({ref:e},h))}));h.displayName="MDXCreateElement"},148051:(n,e,a)=>{a.d(e,{Z:()=>r});const r=a.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-84382f048ade340d9439e0fd8b2d8085.jpg"}}]);