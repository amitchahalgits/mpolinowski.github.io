"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[25913],{450726:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var o=s(785893),t=s(603905);const r={sidebar_position:3950,slug:"2022-11-24",title:"Hashicorp Nomad - Working with Consul Connect",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"],description:"Use the Consul service mesh to connect a frontend with it's API backend."},i=void 0,a={id:"DevOps/Hashicorp/2022-11-24-hashicorp-consul-connect/index",title:"Hashicorp Nomad - Working with Consul Connect",description:"Use the Consul service mesh to connect a frontend with it's API backend.",source:"@site/docs/DevOps/Hashicorp/2022-11-24-hashicorp-consul-connect/index.md",sourceDirName:"DevOps/Hashicorp/2022-11-24-hashicorp-consul-connect",slug:"/DevOps/Hashicorp/2022-11-24-hashicorp-consul-connect/2022-11-24",permalink:"/docs/DevOps/Hashicorp/2022-11-24-hashicorp-consul-connect/2022-11-24",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-11-24-hashicorp-consul-connect/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Consul",permalink:"/docs/tags/consul"},{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:3950,frontMatter:{sidebar_position:3950,slug:"2022-11-24",title:"Hashicorp Nomad - Working with Consul Connect",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"],description:"Use the Consul service mesh to connect a frontend with it's API backend."},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Vault - Installation 2023",permalink:"/docs/DevOps/Hashicorp/2022-12-03-hashicorp-vault-installation/2022-12-03"},next:{title:"Deploy Grav CMS with Hashicorp Nomad",permalink:"/docs/DevOps/Hashicorp/2022-11-18-hashicorp-nomad-grav/2022-11-18"}},c={},l=[{value:"Nomad Agent Consul Integration",id:"nomad-agent-consul-integration",level:2},{value:"Consul Namespace",id:"consul-namespace",level:3},{value:"Consul Service Mesh",id:"consul-service-mesh",level:2},{value:"Mesh-enabled Services",id:"mesh-enabled-services",level:2},{value:"API Service",id:"api-service",level:3},{value:"Web Frontend",id:"web-frontend",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.ah)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Shen Zhen, China",src:s(740556).Z+"",width:"2230",height:"839"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#nomad-agent-consul-integration",children:"Nomad Agent Consul Integration"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#consul-namespace",children:"Consul Namespace"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#consul-service-mesh",children:"Consul Service Mesh"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#mesh-enabled-services",children:"Mesh-enabled Services"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#api-service",children:"API Service"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#web-frontend",children:"Web Frontend"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Prerequisite ",(0,o.jsx)(n.a,{href:"https://github.com/containernetworking/plugins",children:"CNI Plugins"})," see ",(0,o.jsx)(n.a,{href:"/docs/DevOps/Hashicorp/2022-10-23-hashicorp-consul-connect/2022-10-23",children:"Hashicorp Nomad - Working with Consul Connect"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"nomad-agent-consul-integration",children:"Nomad Agent Consul Integration"}),"\n",(0,o.jsxs)(n.p,{children:["In order to use Consul with Nomad, you will need to configure and install Consul on your nodes alongside Nomad. The ",(0,o.jsx)(n.a,{href:"https://developer.hashicorp.com/nomad/docs/configuration/consul",children:"consul stanza"})," configures the Nomad agent's (",(0,o.jsx)(n.strong,{children:"Master Node"}),") communication with Consul for service discovery and key-value integration. When configured, tasks can register themselves with Consul, and the Nomad cluster can automatically bootstrap itself:"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"/etc/nomad.d/server.hcl"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# This is an example that is part of Nomad\'s internal default configuration for Consul integration.\nconsul {\n  # The address to the Consul agent.\n  address = "127.0.0.1:8500"\n  token   = "abcd1234"\n  grpc_address = "127.0.0.1:8502"\n\n  # TLS encryption\n  ssl = true\n  ca_file = "/etc/consul.d/tls/consul-agent-ca.pem"\n  cert_file = "/etc/consul.d/tls/consul-server-consul-0.pem"\n  key_file = "/etc/consul.d/tls/consul-server-consul-0-key.pem"\n  verify_ssl = true\n\n  # The service name to register the server and client with Consul.\n  server_service_name = "nomad"\n  client_service_name = "nomad-client"\n\n  # Enables automatically registering the services.\n  auto_advertise = true\n\n  # Enabling the server and client to bootstrap using Consul.\n  server_auto_join = true\n  client_auto_join = true\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"After updating and restarting your Nomad Master service you should be able to see all your Nomad clients and their registered services in Consul:"}),"\n",(0,o.jsx)(n.h3,{id:"consul-namespace",children:"Consul Namespace"}),"\n",(0,o.jsxs)(n.p,{children:["Nomad requires agent",":read"," permissions. In order to use the consul_namespace feature, Nomad will need a token generated in Consul's default namespace. That token should be created with agent",":read"," as well as a namespace block with the other relevant permissions for running Nomad in the intended namespace. The Consul policy below shows an example policy configuration for a Nomad server:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'agent_prefix "" {\n  policy = "read"\n}\n\nnamespace "nomad-ns" {\n  acl = "write"\n\n  key_prefix "" {\n    policy = "read"\n  }\n\n  node_prefix "" {\n    policy = "read"\n  }\n\n  service_prefix "" {\n    policy = "write"\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Nomad Agent Consul Integration ",src:s(517460).Z+"",width:"1299",height:"763"})}),"\n",(0,o.jsx)(n.h2,{id:"consul-service-mesh",children:"Consul Service Mesh"}),"\n",(0,o.jsxs)(n.p,{children:["Consul service mesh provides service-to-service connection authorization and encryption using mutual Transport Layer Security (",(0,o.jsx)(n.strong,{children:"TLS"}),"). Applications can use sidecar proxies in a service mesh configuration to automatically establish TLS connections for inbound and outbound connections."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Nomad Agent Consul Integration ",src:s(672844).Z+"",width:"963",height:"304"})}),"\n",(0,o.jsx)(n.p,{children:"To support Consul service mesh, Nomad adds a new networking mode for jobs that enables tasks in the same task group to share their networking stack. When service mesh is enabled, Nomad will launch a proxy alongside the application in the job file. The proxy (Envoy) provides secure communication with other applications in the cluster."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["We need to enable the ",(0,o.jsx)(n.strong,{children:"gRPC port"})," and set ",(0,o.jsx)(n.strong,{children:"connect"})," to enabled by adding some additional information to our Consul client configurations:"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"/etc/consul.d/consul.hcl"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"ports {\n  grpc_tls = 8502\n}\n\nconnect {\n  enabled = true\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"To facilitate cross-Consul datacenter requests of Connect services registered by Nomad, Consul agents will need to be configured with default anonymous ACL tokens with ACL policies of sufficient permissions to read service and node metadata pertaining to those requests."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'service_prefix "" { policy = "read" }\nnode_prefix    "" { policy = "read" }\n'})}),"\n",(0,o.jsx)(n.h2,{id:"mesh-enabled-services",children:"Mesh-enabled Services"}),"\n",(0,o.jsxs)(n.p,{children:["The following job file is an example to enable secure communication between a web dashboard and a backend counting service. The web dashboard and the counting service are managed by Nomad. The dashboard is configured to connect to the counting service via localhost on port ",(0,o.jsx)(n.code,{children:"9001"}),". The proxy is managed by Nomad, and handles ",(0,o.jsx)(n.code,{children:"mTLS"})," communication to the counting service."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"servicemesh.tf"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'job "countdash" {\n  datacenters = ["dc1"]\n\n  group "api" {\n    network {\n      mode = "bridge"\n    }\n\n    service {\n      name = "count-api"\n      port = "9001"\n\n      connect {\n        sidecar_service {}\n      }\n    }\n\n    task "web" {\n      driver = "docker"\n\n      config {\n        image = "hashicorpdev/counter-api:v3"\n      }\n    }\n  }\n\n  group "dashboard" {\n    network {\n      mode = "bridge"\n\n      port "http" {\n        static = 9002\n        to     = 9002\n      }\n    }\n\n    service {\n      name = "count-dashboard"\n      port = "http"\n\n      connect {\n        sidecar_service {\n          proxy {\n            upstreams {\n              destination_name = "count-api"\n              local_bind_port  = 8080\n            }\n          }\n        }\n      }\n    }\n\n    task "dashboard" {\n      driver = "docker"\n\n      env {\n        COUNTING_SERVICE_URL = "http://${NOMAD_UPSTREAM_ADDR_count_api}"\n      }\n\n      config {\n        image = "hashicorpdev/counter-dashboard:v3"\n      }\n    }\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"ERROR"})," message: ",(0,o.jsx)(n.code,{children:'WARNING: Failed to place all allocations. Task Group "api" (failed to place 1 allocation) Constraint "${attr.consul.grpc} > 0": 1 nodes excluded by filter'}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Consul agents running TLS and a version greater than ",(0,o.jsx)(n.strong,{children:"1.14.0"})," should set the ",(0,o.jsx)(n.code,{children:"grpc_tls"})," configuration parameter instead of ",(0,o.jsx)(n.code,{children:"grpc"}),". But the error message above shows up when ",(0,o.jsx)(n.code,{children:"grpc"})," is not defined - the following configuration solves this issue (adding ",(0,o.jsx)(n.code,{children:"grpc"})," back in):"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"/etc/consul.d/consul.hcl"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"ports {\n  grpc  = 8503\n  grpc_tls = 8502\n}\n\nconnect {\n  enabled = true\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Nomad Agent Consul Integration ",src:s(184188).Z+"",width:"1305",height:"392"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Nomad Agent Consul Integration ",src:s(909593).Z+"",width:"1305",height:"717"})}),"\n",(0,o.jsx)(n.h3,{id:"api-service",children:"API Service"}),"\n",(0,o.jsxs)(n.p,{children:["The API service is defined as a task group with a ",(0,o.jsx)(n.code,{children:"bridge"})," network. Since the API service is only accessible via Consul service mesh, it does not define any ports in its network. The service stanza enables service mesh. The port in the service stanza is the port the API service listens on. The Envoy proxy will automatically route traffic to that port inside the network namespace.:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'group "api" {\n    network {\n      mode = "bridge"\n    }\n\n    # ...\n\n    service {\n      name = "count-api"\n      port = "9001"\n\n    # ...\n\n      connect {\n        sidecar_service {}\n      }\n    }\n\n    # ...\n\n  }\n'})}),"\n",(0,o.jsx)(n.h3,{id:"web-frontend",children:"Web Frontend"}),"\n",(0,o.jsx)(n.p,{children:"The web frontend is defined as a task group with a bridge network and a static forwarded port:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'group "dashboard" {\n  network {\n    mode = "bridge"\n\n    port "http" {\n      static = 9002\n      to     = 9002\n    }\n  }\n\n  # ...\n\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"to = 9002"})," parameter forwards that host port to port ",(0,o.jsx)(n.code,{children:"9002"})," inside the network namespace. The web frontend connects to the API service via Consul service mesh. This allows you to connect to the web frontend in a browser by visiting ",(0,o.jsx)(n.code,{children:"http://<host_ip>:9002"})," as show below:"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Nomad Agent Consul Integration ",src:s(491352).Z+"",width:"1307",height:"490"})}),"\n",(0,o.jsx)(n.p,{children:"The web frontend is configured to communicate with the API service with an environment variable:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'env {\n  COUNTING_SERVICE_URL = "http://${NOMAD_UPSTREAM_ADDR_count_api}"\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.ah)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},603905:(e,n,s)=>{s.d(n,{ah:()=>l});var o=s(667294);function t(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}function r(e,n){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),s.push.apply(s,o)}return s}function i(e){for(var n=1;n<arguments.length;n++){var s=null!=arguments[n]?arguments[n]:{};n%2?r(Object(s),!0).forEach((function(n){t(e,n,s[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):r(Object(s)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(s,n))}))}return e}function a(e,n){if(null==e)return{};var s,o,t=function(e,n){if(null==e)return{};var s,o,t={},r=Object.keys(e);for(o=0;o<r.length;o++)s=r[o],n.indexOf(s)>=0||(t[s]=e[s]);return t}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)s=r[o],n.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(t[s]=e[s])}return t}var c=o.createContext({}),l=function(e){var n=o.useContext(c),s=n;return e&&(s="function"==typeof e?e(n):i(i({},n),e)),s},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var s=e.components,t=e.mdxType,r=e.originalType,c=e.parentName,h=a(e,["components","mdxType","originalType","parentName"]),u=l(s),p=t,m=u["".concat(c,".").concat(p)]||u[p]||d[p]||r;return s?o.createElement(m,i(i({ref:n},h),{},{components:s})):o.createElement(m,i({ref:n},h))}));h.displayName="MDXCreateElement"},672844:(e,n,s)=>{s.d(n,{Z:()=>o});const o=s.p+"assets/images/Nomad_Consul_Connect_00-99a0f8143fbbaa571b75e3cb9b3d9dc9.png"},517460:(e,n,s)=>{s.d(n,{Z:()=>o});const o=s.p+"assets/images/Nomad_Consul_Connect_01-abce6dd3be0ac5d3bc4ab6d46cd002e3.png"},184188:(e,n,s)=>{s.d(n,{Z:()=>o});const o=s.p+"assets/images/Nomad_Consul_Connect_02-937bcfae28003a6320407fc3506a9a6a.png"},909593:(e,n,s)=>{s.d(n,{Z:()=>o});const o=s.p+"assets/images/Nomad_Consul_Connect_03-10b7e21d28ccb460b24d8757097a6b39.png"},491352:(e,n,s)=>{s.d(n,{Z:()=>o});const o=s.p+"assets/images/Nomad_Consul_Connect_04-1031f503c528a4f8cf09dc7347819bc1.png"},740556:(e,n,s)=>{s.d(n,{Z:()=>o});const o=s.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"}}]);