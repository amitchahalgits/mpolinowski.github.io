"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[89586],{81853:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>t,metadata:()=>a,toc:()=>l});var s=r(474848),o=r(28453);const t={sidebar_position:8070,slug:"2022-03-28",title:"MQTT Message Server and Angular Frontend",authors:"mpolinowski",tags:["MQTT","Javascript","Databases"]},i=void 0,a={id:"Automation_and_Robotics/MQTT/2022-03-28--mqtt-message-server/index",title:"MQTT Message Server and Angular Frontend",description:"Guangzhou, China",source:"@site/docs/Automation_and_Robotics/MQTT/2022-03-28--mqtt-message-server/index.md",sourceDirName:"Automation_and_Robotics/MQTT/2022-03-28--mqtt-message-server",slug:"/Automation_and_Robotics/MQTT/2022-03-28--mqtt-message-server/2022-03-28",permalink:"/docs/Automation_and_Robotics/MQTT/2022-03-28--mqtt-message-server/2022-03-28",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Automation_and_Robotics/MQTT/2022-03-28--mqtt-message-server/index.md",tags:[{label:"MQTT",permalink:"/docs/tags/mqtt"},{label:"Javascript",permalink:"/docs/tags/javascript"},{label:"Databases",permalink:"/docs/tags/databases"}],version:"current",sidebarPosition:8070,frontMatter:{sidebar_position:8070,slug:"2022-03-28",title:"MQTT Message Server and Angular Frontend",authors:"mpolinowski",tags:["MQTT","Javascript","Databases"]},sidebar:"tutorialSidebar",previous:{title:"INSTAR MQTT with RabbitMQ",permalink:"/docs/Automation_and_Robotics/MQTT/2022-03-30--mqtt-with-rabbit-mq/2022-03-30"},next:{title:"Building Eclipse Mosquitto v2 from Source",permalink:"/docs/Automation_and_Robotics/MQTT/2022-03-27--build-mosquitto-from-source/2022-03-27"}},c={},l=[{value:"Basic Setup",id:"basic-setup",level:2},{value:"Msg Server",id:"msg-server",level:3},{value:"Database",id:"database",level:3},{value:"Connections",id:"connections",level:2},{value:"Connecting to your MQTT Broker",id:"connecting-to-your-mqtt-broker",level:3},{value:"Connecting to your MongoDB Instance",id:"connecting-to-your-mongodb-instance",level:3},{value:"Spinning up the Webserver",id:"spinning-up-the-webserver",level:3},{value:"Test",id:"test",level:3},{value:"Writing Incoming Messages to Database",id:"writing-incoming-messages-to-database",level:2},{value:"API &amp; Frontend",id:"api--frontend",level:2},{value:"Generating Channel IDs",id:"generating-channel-ids",level:2},{value:"Angular Frontend",id:"angular-frontend",level:2},{value:"Connecting the Frontend",id:"connecting-the-frontend",level:2},{value:"Addendum",id:"addendum",level:2},{value:"Establishing Connections",id:"establishing-connections",level:3},{value:"Writing Messages to Database",id:"writing-messages-to-database",level:3}];function d(n){const e={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{alt:"Guangzhou, China",src:r(27267).A+"",width:"1500",height:"583"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"#basic-setup",children:"Basic Setup"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#msg-server",children:"Msg Server"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#database",children:"Database"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"#connections",children:"Connections"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#connecting-to-your-mqtt-broker",children:"Connecting to your MQTT Broker"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#connecting-to-your-mongodb-instance",children:"Connecting to your MongoDB Instance"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#spinning-up-the-webserver",children:"Spinning up the Webserver"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#test",children:"Test"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#writing-incoming-messages-to-database",children:"Writing Incoming Messages to Database"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#api--frontend",children:"API & Frontend"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#generating-channel-ids",children:"Generating Channel IDs"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#angular-frontend",children:"Angular Frontend"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#connecting-the-frontend",children:"Connecting the Frontend"})}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"#addendum",children:"Addendum"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#establishing-connections",children:"Establishing Connections"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#writing-messages-to-database",children:"Writing Messages to Database"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,s.jsx)(e.h3,{id:"msg-server",children:"Msg Server"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"git clone https://github.com/mpolinowski/mqtt-msg\r\ncd mqtt-msg\r\nnpm install\n"})}),"\n",(0,s.jsx)(e.h3,{id:"database",children:"Database"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"docker pull mongo:4.4.14\r\ndocker pull mongo-express:1.0.0-alpha.4\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"docker-compose.yml"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yml",children:"version: '3.8'\r\n\r\nservices:\r\n\r\n  mongodb:\r\n    image: mongo:4.4.14\r\n    container_name: mongodb\r\n    restart: unless-stopped\r\n    ports:\r\n      - 27017:27017\r\n    environment:\r\n      MONGO_INITDB_ROOT_USERNAME: root\r\n      MONGO_INITDB_ROOT_PASSWORD: example\r\n    volumes:\r\n      - type: bind\r\n        source: /opt/mongo/db\r\n        target: /data/db\r\n    healthcheck:\r\n      test: echo 'db.runCommand(\"ping\").ok' | mongo mongodb:27017/test --quiet\r\n      interval: 30s\r\n      timeout: 10s\r\n      retries: 3\r\n    networks:\r\n      - mongodb_network\r\n\r\n  mongo-express:\r\n    image: mongo-express:1.0.0-alpha.4\r\n    container_name: mongo-express\r\n    restart: unless-stopped\r\n    ports:\r\n      - 8081:8081\r\n    environment:\r\n      ME_CONFIG_MONGODB_ADMINUSERNAME: root\r\n      ME_CONFIG_MONGODB_ADMINPASSWORD: example\r\n      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongodb:27017/\r\n      ME_CONFIG_BASICAUTH_USERNAME: admin\r\n      ME_CONFIG_BASICAUTH_PASSWORD: example\r\n    depends_on:\r\n      - mongodb\r\n    networks:\r\n      - mongodb_network\r\n\r\nnetworks:\r\n  mongodb_network:\r\n    name: mongodb_network\n"})}),"\n",(0,s.jsx)(e.p,{children:"Create directories for data storage:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"mkdir -p /opt/mongo/{db,configdb}\n"})}),"\n",(0,s.jsx)(e.p,{children:"Open ports if application runs on a different server and start database:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"ufw allow 8081/tcp\r\nufw allow 27017/tcp\r\nufw reload\r\nufw status\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"docker-compose up -d\r\ndocker ps -a\n"})}),"\n",(0,s.jsxs)(e.p,{children:["And login to the Mongo-Express web frontend on your server IP and port ",(0,s.jsx)(e.code,{children:"8081"})," with your basicAuth password (s. ",(0,s.jsx)(e.em,{children:"docker-compose.yml"}),")."]}),"\n",(0,s.jsx)(e.h2,{id:"connections",children:"Connections"}),"\n",(0,s.jsx)(e.h3,{id:"connecting-to-your-mqtt-broker",children:"Connecting to your MQTT Broker"}),"\n",(0,s.jsxs)(e.p,{children:["We will use the ",(0,s.jsx)(e.strong,{children:"mqtt"})," NPM package (",(0,s.jsx)(e.code,{children:"npm install mqtt"}),") to connect to the MQTT broker running on an INSTAR WQHD Camera with the following options:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// INSTAR MQTT Broker setup\r\nconst {connect} = require('mqtt')\r\nconst brokerURL = 'mqtt://192.168.2.115:1883'\r\nconst topicPrefix = 'msg/'\r\nconst options = {\r\n  // Clean session\r\n  clean: true,\r\n  connectTimeout: 4000,\r\n  // Auth\r\n  clientId: 'mqtt_msg',\r\n  username: 'admin',\r\n  password: 'admin',\r\n}\r\nconst client  = connect(brokerURL, options)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["We can test the connection by publishing a heartbeat from our Msg client (see ",(0,s.jsx)(e.code,{children:"app.ts"}),") and reading the message using an MQTT subscription:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"initMqttListener() {\r\n        console.log('[INFO] :: Msg server connecting to MQTT broker')\r\n\r\n        // MQTT Subscription\r\n        client.on('connect', function() {\r\n            console.log('[INFO] :: Connected to MQTT Broker ' + brokerURL)\r\n            client.subscribe(topicPrefix + '#', function(err: any) {\r\n                if (err) {\r\n                    console.log('[ERROR] :: MQTT error', err)\r\n                } else {\r\n                    client.publish(topicPrefix + 'heartbeat', 'Msg Service is online')\r\n                    console.log('[INFO] :: Topic', topicPrefix + 'heartbeat', 'was updated')\r\n                }\r\n            })\r\n        })\r\n\r\n        // Read MQTT Messages\r\n        client.on('message', function(topic: any, message: any) {\r\n            // Read topic/message from buffer\r\n            console.log('[MQTT] ::', topic.toString(), '\"' + message.toString() + '\"')\r\n            client.end()\r\n        })\r\n    }\n"})}),"\n",(0,s.jsx)(e.h3,{id:"connecting-to-your-mongodb-instance",children:"Connecting to your MongoDB Instance"}),"\n",(0,s.jsxs)(e.p,{children:["We will use the ",(0,s.jsx)(e.strong,{children:"mongoose"})," NPM package (",(0,s.jsx)(e.code,{children:"npm install mongoose"}),") to connect to the database with the following options:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'// MongoDB setup\r\nconst mongoose = require(\'mongoose\')\r\nconst mongoAuth = {\r\n    "auth": {\r\n        "authSource": "admin"\r\n    },\r\n    "user": "root",\r\n    "pass": "example"\r\n}\r\nconst mongoURL = \'mongodb://root:example@192.168.2.111:27017/?retryWrites=true&w=majority\'\n'})}),"\n",(0,s.jsxs)(e.p,{children:["The following code connects to our MongoDB instances and creates a collection ",(0,s.jsx)(e.code,{children:"mqtt-msg"})," inside the ",(0,s.jsx)(e.code,{children:"test"})," database:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"initDB() {\r\n        connect_db().catch(err => console.log('[ERROR] :: Database error', err));\r\n        async function connect_db() {\r\n            await mongoose.connect(mongoURL, mongoAuth);\r\n          }\r\n\r\n        const createCollection = mongoose.model('mqtt-msg', { name: String})\r\n\r\n        const test = new createCollection({ name: 'Msg Client'})\r\n        test.save().then(() => console.log('[INFO] :: Msg server connected to database'))\r\n    }\n"})}),"\n",(0,s.jsx)(e.h3,{id:"spinning-up-the-webserver",children:"Spinning up the Webserver"}),"\n",(0,s.jsxs)(e.p,{children:["We will use the ",(0,s.jsx)(e.strong,{children:"express"})," NPM package (",(0,s.jsx)(e.code,{children:"npm install express"}),") to create a webserver with the following options:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// Express setup\r\nconst express = require('express')\r\nconst app = express()\r\nconst port = process.env.PORT || 8888\n"})}),"\n",(0,s.jsxs)(e.p,{children:["To get started we will simply return a timestamp on the webroot ",(0,s.jsx)(e.code,{children:"/"})," and use the function to trigger our msg client, that so far only establishes connections to our broker and database:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// Run Webfront\r\napp.get('/', (req: any, res: any) => {\r\n    res.json({ server: \"running\", timestamp: new Date().getTime() })\r\n})\r\n\r\n\r\n// Webserver\r\napp.listen(port, () => {\r\n    console.log('[INFO] :: Webserver running on Port', port)\r\n\r\n    new MsgBot()\r\n})\n"})}),"\n",(0,s.jsx)(e.h3,{id:"test",children:"Test"}),"\n",(0,s.jsxs)(e.p,{children:["Run the app with ",(0,s.jsx)(e.code,{children:"npm start"})," and check your console output. If everything works you will see the following lines:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'[INFO] :: Webserver running on Port 8888\r\n[INFO] :: Msg service is online\r\n[INFO] :: Msg server connecting to MQTT broker\r\n[INFO] :: Connected to MQTT Broker mqtt://192.168.2.115:1883\r\n[INFO] :: Topic msg/heartbeat was updated\r\n[MQTT] :: msg/heartbeat "Msg Service is online"\r\n[INFO] :: Msg server connected to database\n'})}),"\n",(0,s.jsxs)(e.p,{children:["You can find the entire ",(0,s.jsx)(e.code,{children:"app.ts"})," file from this stage below: ",(0,s.jsx)(e.a,{href:"#establishing-connections",children:"Establishing Connections"}),"."]}),"\n",(0,s.jsx)(e.h2,{id:"writing-incoming-messages-to-database",children:"Writing Incoming Messages to Database"}),"\n",(0,s.jsx)(e.p,{children:"We can now remove the test from our database initialization:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"initDB() {\r\n        connect_db().catch(err => console.log('[ERROR] :: Database error', err));\r\n        async function connect_db() {\r\n            await mongoose.connect(mongoURL, mongoAuth);\r\n          }\r\n    }\n"})}),"\n",(0,s.jsx)(e.p,{children:"And instead move it down into the MQTT function to handle incoming (JSON formatted) MQTT messages and write them into our database:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"initMqttListener() {\r\n    console.log('[INFO] :: Msg server connecting to MQTT broker')\r\n\r\n    // MQTT Subscription\r\n    client.on('connect', function() {\r\n        console.log('[INFO] :: Connected to MQTT Broker ' + brokerURL)\r\n        client.subscribe(topicPrefix + '#', function(err: any) {\r\n            if (err) {\r\n                console.log('[ERROR] :: MQTT error', err)\r\n            } else {\r\n                client.publish(topicPrefix + 'server', JSON.stringify({ msg: 'Msg Service is online' }))\r\n                console.log('[INFO] :: Topic', topicPrefix + 'server', 'was updated')\r\n            }\r\n        })\r\n    })\r\n\r\n    // Read MQTT Messages\r\n    client.on('message', function(topic: any, message: any) {\r\n        // Read topic/message from buffer\r\n        const msg = message.toString()\r\n        console.log('[MQTT] ::', topic.toString(), '\"' + msg + '\"')\r\n        // Write message to database\r\n        // Define Collection model\r\n        const msgModel = mongoose.model('mqtt-msg', { msg: String, createdOn: Date, topicId: String })\r\n        // Use JSON for messages\r\n        const msgObject = JSON.parse(msg)\r\n        // Add date to each message object\r\n        msgObject.createdOn = new Date()\r\n        // Add ID to each message object\r\n        msgObject.topicId = topic\r\n\r\n        new msgModel(msgObject).save().then(() => console.log('[INFO] :: Msg saved to database'))\r\n\r\n        client.end()\r\n    })\r\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["See ",(0,s.jsx)(e.a,{href:"#writing-messages-to-database",children:"Writing Messages to Database"})," for full application code."]}),"\n",(0,s.jsx)(e.h2,{id:"api--frontend",children:"API & Frontend"}),"\n",(0,s.jsx)(e.h2,{id:"generating-channel-ids",children:"Generating Channel IDs"}),"\n",(0,s.jsx)(e.p,{children:"To be able to add those messages to an user interface we will have to provide an API. We can start by creating random session IDs for communication channels:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// Return random channel ID\r\napp.get('/channelId', (req: any, res: any) => {\r\n    const {client1, client2} = req.query\r\n    const channelId = topicPrefix + btoa(client1 + '_' + client2 + '_' + new Date().getTime)\r\n    res.json({ channelId })\r\n})\n"})}),"\n",(0,s.jsx)(e.p,{children:"This creates an Express route that returns a unique, randomly generated, ID for each pair of clients:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'curl \'http://localhost:8888/channelId?client1=me&client2=you\'\r\n\r\n{"channelId":"msg/bWVfeW91X2Z1bmN0aW9uIGdldFRpbWUoKSB7IFtuYXRpdmUgY29kZV0gfQ=="}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"angular-frontend",children:"Angular Frontend"}),"\n",(0,s.jsx)(e.p,{children:"Scaffold the Angular app:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install -g @angular/cli\r\nng new frontend\r\ncd frontend\r\nng generate library msg-server\n"})}),"\n",(0,s.jsxs)(e.p,{children:["This will create a library for our message server in ",(0,s.jsx)(e.code,{children:"frontend/projects/msg-server/src/lib"})," that we need to import as ",(0,s.jsx)(e.strong,{children:"MsgServer"})," module in ",(0,s.jsx)(e.code,{children:"frontend/src/app/app.module.ts"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { MsgServerModule } from 'projects/msg-server/src/public-api';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    MsgServerModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Now remove all the placeholder HTML from ",(0,s.jsx)(e.code,{children:"frontend/src/app/app.component.html"})," and replace it with:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:"<lib-msg-server></lib-msg-server>\r\n\r\n<router-outlet></router-outlet>\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Run the app ",(0,s.jsx)(e.code,{children:"npm start"})," and verify that it is running on ",(0,s.jsx)(e.code,{children:"http://localhost:4200/"})," - you should see a simple __msg-server works! __."]}),"\n",(0,s.jsxs)(e.p,{children:["We can now replace this HTML with a code snippit from ",(0,s.jsx)(e.a,{href:"https://codepen.io/virgilpana/pen/ZYZXgP",children:"codepen.io"}),". The line we saw above is generated in ",(0,s.jsx)(e.code,{children:"frontend/projects/msg-server/src/lib/msg-server.component.ts"})," which we can replace with our template code:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-msg-server',\r\n  templateUrl: './msg-server.component.html',\r\n  styleUrls: [\r\n    './msg-server.component.html'\r\n  ]\r\n})\r\nexport class MsgServerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["And copy&paste the code from ",(0,s.jsx)(e.a,{href:"https://codepen.io/virgilpana/pen/ZYZXgP",children:"codepen.io"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["HTML into ",(0,s.jsx)(e.code,{children:"frontend/projects/msg-server/src/lib/msg-server.component.html"})]}),"\n",(0,s.jsxs)(e.li,{children:["CSS into ",(0,s.jsx)(e.code,{children:"frontend/projects/msg-server/src/lib/msg-server.component.css"})]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"And make changes as you see fit to the HTL and CSS."}),"\n",(0,s.jsx)(e.h2,{id:"connecting-the-frontend",children:"Connecting the Frontend"}),"\n",(0,s.jsx)(e.p,{children:"Install the following library:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install ngx-mqtt\r\nnpm install ngx-mqtt-chat\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Import it into ",(0,s.jsx)(e.code,{children:"frontend/projects/msg-server/src/lib/msg-server.module.ts"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { NgxMqttChatModule } from 'ngx-mqtt-chat';\r\nimport { MsgServerComponent } from './msg-server.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MsgServerComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    NgxMqttChatModule,\r\n    FormsModule\r\n  ],\r\n  exports: [\r\n    MsgServerComponent\r\n  ]\r\n})\r\n\r\nexport class MsgServerModule { }\n"})}),"\n",(0,s.jsxs)(e.p,{children:["And provide the connection data for your MQTT Broker (the module only seems to support websockets and no authentication ?) in ",(0,s.jsx)(e.code,{children:"frontend/projects/msg-server/src/lib/msg-server.component.ts"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"import { Component, OnInit } from '@angular/core';\r\nimport { NgxMqttChatService } from 'ngx-mqtt-chat';\r\n\r\n@Component({\r\n  selector: 'lib-msg-server',\r\n  templateUrl: './msg-server.component.html',\r\n  styleUrls: [\r\n    './msg-server.component.css'\r\n  ]\r\n})\r\nexport class MsgServerComponent implements OnInit {\r\n  chatView=false;\r\n  constructor(\r\n      private messagingService: NgxMqttChatService\r\n    ) { }\r\n\r\n  ngOnInit(): void {\r\n    let mqtt = {\r\n      manageConnectionManually: false,\r\n      hostname: '192.168.2.111',\r\n      port: 1885,\r\n      path: ''\r\n    } as any\r\n    this.messagingService.connect(mqtt),\r\n      this.messagingService.publishToTopic(\r\n        'msg/bWVfeW91X2Z1bmN0aW9uIGdldFRpbWUoKSB7IFtuYXRpdmUgY29kZV0gfQ==',\r\n        { msg:\"Client connected...\" }\r\n    )\r\n  }\r\n\r\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Here the messaging service is using the channel ID ",(0,s.jsx)(e.code,{children:"msg/bWVfeW91X2Z1bmN0aW9uIGdldFRpbWUoKSB7IFtuYXRpdmUgY29kZV0gfQ=="})," created earlier to publish a status message."]}),"\n",(0,s.jsx)(e.h2,{id:"addendum",children:"Addendum"}),"\n",(0,s.jsx)(e.h3,{id:"establishing-connections",children:"Establishing Connections"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// Express setup\r\nconst express = require('express')\r\nconst app = express()\r\nconst port = process.env.PORT || 8888\r\n\r\n// MongoDB setup\r\nconst mongoose = require('mongoose')\r\nconst mongoAuth = {\r\n    \"auth\": {\r\n        \"authSource\": \"admin\"\r\n    },\r\n    \"user\": \"root\",\r\n    \"pass\": \"example\"\r\n}\r\nconst mongoURL = 'mongodb://root:example@192.168.2.111:27017/?retryWrites=true&w=majority'\r\n\r\n\r\n// INSTAR MQTT Broker setup\r\nconst {connect} = require('mqtt')\r\nconst brokerURL = 'mqtt://192.168.2.115:1883'\r\nconst topicPrefix = 'msg/'\r\nconst options = {\r\n  // Clean session\r\n  clean: true,\r\n  connectTimeout: 4000,\r\n  // Auth\r\n  clientId: 'mqtt_msg',\r\n  username: 'admin',\r\n  password: 'admin',\r\n}\r\nconst client  = connect(brokerURL, options)\r\n\r\n\r\n// Msg Bot\r\nexport class MsgBot {\r\n    constructor() {\r\n        console.log('[INFO] :: Msg service is online')\r\n        this.initMqttListener()\r\n        this.initDB()\r\n    }\r\n\r\n    initDB() {\r\n        connect_db().catch(err => console.log('[ERROR] :: Database error', err));\r\n        async function connect_db() {\r\n            await mongoose.connect(mongoURL, mongoAuth);\r\n          }\r\n\r\n        const createCollection = mongoose.model('mqtt-msg', { name: String})\r\n\r\n        const test = new createCollection({ name: 'Msg Client'})\r\n        test.save().then(() => console.log('[INFO] :: Msg server connected to database'))\r\n    }\r\n\r\n    initMqttListener() {\r\n        console.log('[INFO] :: Msg server connecting to MQTT broker')\r\n\r\n        // MQTT Subscription\r\n        client.on('connect', function() {\r\n            console.log('[INFO] :: Connected to MQTT Broker ' + brokerURL)\r\n            client.subscribe(topicPrefix + '#', function(err: any) {\r\n                if (err) {\r\n                    console.log('[ERROR] :: MQTT error', err)\r\n                } else {\r\n                    client.publish(topicPrefix + 'heartbeat', 'Msg Service is online')\r\n                    console.log('[INFO] :: Topic', topicPrefix + 'heartbeat', 'was updated')\r\n                }\r\n            })\r\n        })\r\n\r\n        // Read MQTT Messages\r\n        client.on('message', function(topic: any, message: any) {\r\n            // Read topic/message from buffer\r\n            console.log('[MQTT] ::', topic.toString(), '\"' + message.toString() + '\"')\r\n            client.end()\r\n        })\r\n    }\r\n}\r\n\r\n\r\n// Run Webfront\r\napp.get('/', (req: any, res: any) => {\r\n    res.json({ server: \"running\", timestamp: new Date().getTime() })\r\n})\r\n\r\n\r\n// Webserver\r\napp.listen(port, () => {\r\n    console.log('[INFO] :: Webserver running on Port', port)\r\n\r\n    new MsgBot()\r\n})\n"})}),"\n",(0,s.jsx)(e.h3,{id:"writing-messages-to-database",children:"Writing Messages to Database"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// Express setup\r\nconst express = require('express')\r\nconst app = express()\r\nconst port = process.env.PORT || 8888\r\n\r\n// MongoDB setup\r\nconst mongoose = require('mongoose')\r\nconst mongoAuth = {\r\n    \"auth\": {\r\n        \"authSource\": \"admin\"\r\n    },\r\n    \"user\": \"root\",\r\n    \"pass\": \"example\"\r\n}\r\nconst mongoURL = 'mongodb://root:example@192.168.2.111:27017/?retryWrites=true&w=majority'\r\n\r\n\r\n// INSTAR MQTT Broker setup\r\nconst {connect} = require('mqtt')\r\nconst brokerURL = 'mqtt://192.168.2.115:1883'\r\nconst topicPrefix = 'msg/'\r\nconst options = {\r\n  // Clean session\r\n  clean: true,\r\n  connectTimeout: 4000,\r\n  // Auth\r\n  clientId: 'msg_server',\r\n  username: 'admin',\r\n  password: 'admin',\r\n}\r\nconst client  = connect(brokerURL, options)\r\n\r\n\r\n// Msg Bot\r\nexport class MsgBot {\r\n\r\n    constructor() {\r\n        console.log('[INFO] :: Msg service is online')\r\n        this.initMqttListener()\r\n        this.initDB()\r\n    }\r\n\r\n    initDB() {\r\n        connect_db().catch(err => console.log('[ERROR] :: Database error', err));\r\n        async function connect_db() {\r\n            await mongoose.connect(mongoURL, mongoAuth);\r\n          }\r\n    }\r\n\r\n    initMqttListener() {\r\n        console.log('[INFO] :: Msg server connecting to MQTT broker')\r\n\r\n        // MQTT Subscription\r\n        client.on('connect', function() {\r\n            console.log('[INFO] :: Connected to MQTT Broker ' + brokerURL)\r\n            client.subscribe(topicPrefix + '#', function(err: any) {\r\n                if (err) {\r\n                    console.log('[ERROR] :: MQTT error', err)\r\n                } else {\r\n                    client.publish(topicPrefix + 'server', JSON.stringify({ msg: 'Msg Service is online' }))\r\n                    console.log('[INFO] :: Topic', topicPrefix + 'server', 'was updated')\r\n                }\r\n            })\r\n        })\r\n\r\n        // Read MQTT Messages\r\n        client.on('message', function(topic: any, message: any) {\r\n            // Read topic/message from buffer\r\n            const msg = message.toString()\r\n            console.log('[MQTT] ::', topic.toString(), '\"' + msg + '\"')\r\n            // Write message to database\r\n            // Define Collection model\r\n            const msgModel = mongoose.model('mqtt-msg', { msg: String, createdOn: Date, topicId: String })\r\n            // Use JSON for messages\r\n            const msgObject = JSON.parse(msg)\r\n            // Add date to each message object\r\n            msgObject.createdOn = new Date()\r\n            // Add ID to each message object\r\n            msgObject.topicId = topic\r\n\r\n            new msgModel(msgObject).save().then(() => console.log('[INFO] :: Msg saved to database'))\r\n\r\n            client.end()\r\n        })\r\n    }\r\n}\r\n\r\n\r\n// Run Webfront\r\napp.get('/', (req: any, res: any) => {\r\n    res.json({ server: \"running\", timestamp: new Date().getTime() })\r\n})\r\n\r\n\r\n// Webserver\r\napp.listen(port, () => {\r\n    console.log('[INFO] :: Webserver running on Port', port)\r\n\r\n    new MsgBot()\r\n})\n"})})]})}function g(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},27267:(n,e,r)=>{r.d(e,{A:()=>s});const s=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-8ced3c54d38a6194434c5e7d8e5c77ba.jpg"},28453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>a});var s=r(296540);const o={},t=s.createContext(o);function i(n){const e=s.useContext(t);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),s.createElement(t.Provider,{value:e},n.children)}}}]);