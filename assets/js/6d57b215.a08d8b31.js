"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[46999],{3905:(n,e,r)=>{r.d(e,{Zo:()=>u,kt:()=>g});var a=r(67294);function t(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function s(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,a)}return r}function o(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?s(Object(r),!0).forEach((function(e){t(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function i(n,e){if(null==n)return{};var r,a,t=function(n,e){if(null==n)return{};var r,a,t={},s=Object.keys(n);for(a=0;a<s.length;a++)r=s[a],e.indexOf(r)>=0||(t[r]=n[r]);return t}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(a=0;a<s.length;a++)r=s[a],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(t[r]=n[r])}return t}var c=a.createContext({}),l=function(n){var e=a.useContext(c),r=e;return n&&(r="function"==typeof n?n(e):o(o({},e),n)),r},u=function(n){var e=l(n.components);return a.createElement(c.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var r=n.components,t=n.mdxType,s=n.originalType,c=n.parentName,u=i(n,["components","mdxType","originalType","parentName"]),d=l(r),g=t,m=d["".concat(c,".").concat(g)]||d[g]||p[g]||s;return r?a.createElement(m,o(o({ref:e},u),{},{components:r})):a.createElement(m,o({ref:e},u))}));function g(n,e){var r=arguments,t=e&&e.mdxType;if("string"==typeof n||t){var s=r.length,o=new Array(s);o[0]=d;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=n,i.mdxType="string"==typeof n?n:t,o[1]=i;for(var l=2;l<s;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},41584:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=r(87462),t=(r(67294),r(3905));const s={sidebar_position:4380,slug:"2023-06-27",title:"SQL in Data Science - The Basics using Python",authors:"mpolinowski",tags:["Python","Machine Learning","Cheating"],description:"Cheat Sheet using Psycopg2 to interact with PostgreSQL Databases"},o=void 0,i={unversionedId:"IoT-and-Machine-Learning/ML/2023-06-27-sql-in-data-science-basics/index",id:"IoT-and-Machine-Learning/ML/2023-06-27-sql-in-data-science-basics/index",title:"SQL in Data Science - The Basics using Python",description:"Cheat Sheet using Psycopg2 to interact with PostgreSQL Databases",source:"@site/docs/IoT-and-Machine-Learning/ML/2023-06-27-sql-in-data-science-basics/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2023-06-27-sql-in-data-science-basics",slug:"/IoT-and-Machine-Learning/ML/2023-06-27-sql-in-data-science-basics/2023-06-27",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-06-27-sql-in-data-science-basics/2023-06-27",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2023-06-27-sql-in-data-science-basics/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Cheating",permalink:"/docs/tags/cheating"}],version:"current",sidebarPosition:4380,frontMatter:{sidebar_position:4380,slug:"2023-06-27",title:"SQL in Data Science - The Basics using Python",authors:"mpolinowski",tags:["Python","Machine Learning","Cheating"],description:"Cheat Sheet using Psycopg2 to interact with PostgreSQL Databases"},sidebar:"tutorialSidebar",previous:{title:"SQL in Data Science - Slightly more Advanced Queries",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-06-30-sql-in-data-science-advanced/2023-06-30"},next:{title:"Detection of Exoplanets using Transit Photometry",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-06-26-autogluon-transit-photometry-dataset/2023-06-26"}},c={},l=[{value:"Database Installation with Docker Compose",id:"database-installation-with-docker-compose",level:2},{value:"SQL and Python",id:"sql-and-python",level:2},{value:"Creating Tables",id:"creating-tables",level:3},{value:"Inserting Data",id:"inserting-data",level:3},{value:"Updating Data",id:"updating-data",level:3},{value:"Retrieving Data",id:"retrieving-data",level:3},{value:"Querying data using fetchone() method",id:"querying-data-using-fetchone-method",level:4},{value:"Querying data using fetchall() method",id:"querying-data-using-fetchall-method",level:4},{value:"Querying data using fetchmany() method",id:"querying-data-using-fetchmany-method",level:4},{value:"Deleting Data",id:"deleting-data",level:3},{value:"Create Table from CSV",id:"create-table-from-csv",level:3},{value:"Filter Conditions",id:"filter-conditions",level:3},{value:"WHERE",id:"where",level:4},{value:"WHERE by Value",id:"where-by-value",level:4},{value:"WHERE BETWEEN Values",id:"where-between-values",level:4},{value:"WHERE by No-Match",id:"where-by-no-match",level:4},{value:"WHERE IS NULL",id:"where-is-null",level:4},{value:"WHERE IN Group",id:"where-in-group",level:4},{value:"WHERE Value AND Value",id:"where-value-and-value",level:4},{value:"WHERE Value OR Value",id:"where-value-or-value",level:4},{value:"WHERE NOT",id:"where-not",level:4},{value:"WHERE LIKE",id:"where-like",level:4},{value:"Transformations",id:"transformations",level:3},{value:"ORDER BY",id:"order-by",level:4},{value:"Return AS",id:"return-as",level:4},{value:"Aggregations",id:"aggregations",level:4},{value:"GROUP BY",id:"group-by",level:4},{value:"GROUP BY Aggregation",id:"group-by-aggregation",level:4}],u={toc:l};function p(n){let{components:e,...s}=n;return(0,t.kt)("wrapper",(0,a.Z)({},u,s,{components:e,mdxType:"MDXLayout"}),(0,t.kt)("p",null,(0,t.kt)("img",{alt:"Guangzhou, China",src:r(76038).Z,width:"1500",height:"581"})),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sql-in-data-science"},"SQL in Data Science"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#database-installation-with-docker-compose"},"Database Installation with Docker Compose")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sql-and-python"},"SQL and Python"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#creating-tables"},"Creating Tables")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#inserting-data"},"Inserting Data")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#updating-data"},"Updating Data")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#retrieving-data"},"Retrieving Data"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#querying-data-using-fetchone-method"},"Querying data using fetchone() method")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#querying-data-using-fetchall-method"},"Querying data using fetchall() method")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#querying-data-using-fetchmany-method"},"Querying data using fetchmany() method")))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#deleting-data"},"Deleting Data")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#create-table-from-csv"},"Create Table from CSV")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#filter-conditions"},"Filter Conditions"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#where"},"WHERE")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#where-by-value"},"WHERE by Value")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#where-between-values"},"WHERE BETWEEN Values")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#where-by-no-match"},"WHERE by No-Match")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#where-is-null"},"WHERE IS NULL")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#where-in-group"},"WHERE IN Group")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#where-value-and-value"},"WHERE Value AND Value")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#where-value-or-value"},"WHERE Value OR Value")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#where-not"},"WHERE NOT")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#where-like"},"WHERE LIKE")))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#transformations"},"Transformations"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#order-by"},"ORDER BY")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#return-as"},"Return AS")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#aggregations"},"Aggregations")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#group-by"},"GROUP BY")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#group-by-aggregation"},"GROUP BY Aggregation"))))))))),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/sql-for-data-science/tree/master/01_basic_scripts"},"Github Repository")),(0,t.kt)("h1",{id:"sql-in-data-science"},"SQL in Data Science"),(0,t.kt)("p",null,"PostgreSQL lets you build queries which run a variety of machine learning algorithms against your data."),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-06-27-sql-in-data-science-basics/2023-06-27"},"SQL in Data Science - The Basics using Python")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-06-30-sql-in-data-science-advanced/2023-06-30"},"SQL in Data Science - Slightly more Advanced Queries")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-07-02-sql-in-data-science-ml/2023-07-02"},"SQL in Data Science - Machine Learning"))),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://www.postgresqltutorial.com/postgresql-python/"},"Source: PostgreSQL Python"))),(0,t.kt)("h2",{id:"database-installation-with-docker-compose"},"Database Installation with Docker Compose"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir /opt/pgdata\nsudo chown myuser:myuser /opt/pgdata\nsudo chmod 777 /opt/pgdata\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull postgres:alpine\n")),(0,t.kt)("p",null,(0,t.kt)("em",{parentName:"p"},"docker-compose.yml")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-yml"},"# Use postgres/example user/password credentials\nversion: '3'\n\nservices:\n\n  db:\n    image: postgres:alpine\n    restart: unless-stopped\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: testing\n      PGDATA: /var/lib/postgresql/data/pgdata\n    volumes:\n      - /opt/pgdata:/var/lib/postgresql/data\n    ports:\n      - 5432:5432\n\n  adminer:\n    image: adminer\n    restart: unless-stopped\n    ports:\n      - 8080:8080 \n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"http://localhost:8080\n")),(0,t.kt)("p",null,(0,t.kt)("img",{alt:"SQL in Data Science",src:r(88526).Z,width:"834",height:"318"})),(0,t.kt)("h2",{id:"sql-and-python"},"SQL and Python"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"pip install psycopg2-binary\n")),(0,t.kt)("p",null,"Create a connection object:"),(0,t.kt)("p",null,(0,t.kt)("em",{parentName:"p"},"hello","_","world.py")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},"import psycopg2\n\nDB = 'testing'\nHOST = 'localhost'\nUSER = 'postgres'\nPASS = 'password'\nPORT = 5432\n\nconn = psycopg2.connect(\n    database = DB,\n    host = HOST,\n    user = USER,\n    password = PASS,\n    port = PORT\n)\n")),(0,t.kt)("p",null,"A cursor object will help you execute any queries on the database and retrieve data. Here's how to create a cursor object:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},"cursor = conn.cursor()\n")),(0,t.kt)("h3",{id:"creating-tables"},"Creating Tables"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def create_tables():\n    """ create tables in the PostgreSQL database"""\n    commands = (\n        """\n        CREATE TABLE vendors (\n            vendor_id SERIAL PRIMARY KEY,\n            vendor_name VARCHAR(255) NOT NULL\n        )\n        """,\n        """ CREATE TABLE parts (\n                part_id SERIAL PRIMARY KEY,\n                part_name VARCHAR(255) NOT NULL\n                )\n        """,\n        """\n        CREATE TABLE part_drawings (\n                part_id INTEGER PRIMARY KEY,\n                file_extension VARCHAR(5) NOT NULL,\n                drawing_data BYTEA NOT NULL,\n                FOREIGN KEY (part_id)\n                REFERENCES parts (part_id)\n                ON UPDATE CASCADE ON DELETE CASCADE\n        )\n        """,\n        """\n        CREATE TABLE vendor_parts (\n                vendor_id INTEGER NOT NULL,\n                part_id INTEGER NOT NULL,\n                PRIMARY KEY (vendor_id , part_id),\n                FOREIGN KEY (vendor_id)\n                    REFERENCES vendors (vendor_id)\n                    ON UPDATE CASCADE ON DELETE CASCADE,\n                FOREIGN KEY (part_id)\n                    REFERENCES parts (part_id)\n                    ON UPDATE CASCADE ON DELETE CASCADE\n        )\n        """)\n        )\n    try:\n        for command in commands:\n            cursor.execute(command)\n        # close communication with the PostgreSQL database server\n        cursor.close()\n        # commit the changes\n        conn.commit()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            conn.close()\n            print(\'INFO :: Database connection closed.\')\n')),(0,t.kt)("p",null,"We can test the connection by running:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"python 01_create_read_table.py\n\nINFO :: Connecting to database...\nINFO :: PostgreSQL database version:\n('PostgreSQL 15.3 on x86_64-pc-linux-musl, compiled by gcc (Alpine 12.2.1_git20220924-r10) 12.2.1 20220924, 64-bit',)\nINFO :: Database connection closed.\n")),(0,t.kt)("p",null,(0,t.kt)("img",{alt:"SQL in Data Science",src:r(33400).Z,width:"1040",height:"422"})),(0,t.kt)("h3",{id:"inserting-data"},"Inserting Data"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def insert_vendor(vendor_name):\n    """ insert a new vendor into the vendors table """\n    sql = """INSERT INTO vendors(vendor_name)\n             VALUES(%s) RETURNING vendor_id;"""\n    conn = None\n    vendor_id = None\n    try:\n        # read database configuration\n        params = config()\n        # connect to the PostgreSQL database\n        conn = psycopg2.connect(**params)\n        # create a new cursor\n        cur = conn.cursor()\n        # execute the INSERT statement\n        cur.execute(sql, (vendor_name,))\n        # get the generated id back\n        vendor_id = cur.fetchone()[0]\n        # commit the changes to the database\n        conn.commit()\n        # close communication with the database\n        cur.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            conn.close()\n\n    return vendor_id\n\nif __name__ == \'__main__\':\n    # insert one vendor\n    insert_vendor("3M Co.")\n')),(0,t.kt)("p",null,(0,t.kt)("img",{alt:"SQL in Data Science",src:r(98228).Z,width:"885",height:"300"})),(0,t.kt)("h3",{id:"updating-data"},"Updating Data"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def update_vendor(vendor_id, vendor_name):\n    """ update vendor name based on the vendor id """\n    sql = """ UPDATE vendors\n                SET vendor_name = %s\n                WHERE vendor_id = %s"""\n    conn = None\n    updated_rows = 0\n    try:\n        # read database configuration\n        params = config()\n        # connect to the PostgreSQL database\n        conn = psycopg2.connect(**params)\n        # create a new cursor\n        cur = conn.cursor()\n        # execute the UPDATE  statement\n        cur.execute(sql, (vendor_name, vendor_id))\n        # get the number of updated rows\n        updated_rows = cur.rowcount\n        # Commit the changes to the database\n        conn.commit()\n        # Close communication with the PostgreSQL database\n        cur.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            conn.close()\n\n    return updated_rows\n\n\nif __name__ == \'__main__\':\n    # Update vendor id 1\n    update_vendor(1, "3M Corp") \n')),(0,t.kt)("p",null,(0,t.kt)("img",{alt:"SQL in Data Science",src:r(45283).Z,width:"1020",height:"324"})),(0,t.kt)("h3",{id:"retrieving-data"},"Retrieving Data"),(0,t.kt)("p",null,"We use the ",(0,t.kt)("inlineCode",{parentName:"p"},"execute()")," function and submit a query string as its argument. This query that we submitted will be run against the database:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'cursor.execute("SELECT * FROM my_table")\n')),(0,t.kt)("p",null,"After the query executes, we need to use one of these functions to retrieve data row(s):"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"fetchone() - ",(0,t.kt)("inlineCode",{parentName:"li"},"print(cursor.fetchone())")),(0,t.kt)("li",{parentName:"ul"},"fetchall() - ",(0,t.kt)("inlineCode",{parentName:"li"},"print(cursor.fetchall())")),(0,t.kt)("li",{parentName:"ul"},"fetchmany() - ",(0,t.kt)("inlineCode",{parentName:"li"},"print(cursor.fetchmany(size=3))"))),(0,t.kt)("h4",{id:"querying-data-using-fetchone-method"},"Querying data using fetchone() method"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def get_vendor():\n    """ query data from the vendors table """\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        cursor.execute("SELECT vendor_id, vendor_name FROM vendors ORDER BY vendor_name")\n        print("The number of vendors: ", cursor.rowcount)\n\n        print(cursor.fetchone())\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            conn.close()\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"python 04_fetch_data.py\n\nThe number of vendors:  7\n(1, '3M Corp')\n")),(0,t.kt)("h4",{id:"querying-data-using-fetchall-method"},"Querying data using fetchall() method"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def get_all_vendors():\n    """ query data from the vendors table """\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        cursor.execute("SELECT vendor_id, vendor_name FROM vendors ORDER BY vendor_name")\n        rows = cursor.fetchall()\n        print("The number of vendors: ", cursor.rowcount)\n        for row in rows:\n            print(row)\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            conn.close()\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"python 04_fetch_data.py\n\nThe number of vendors:  7\n(1, '3M Corp')\n(2, 'AKM Semiconductor Inc.')\n(3, 'Asahi Glass Co Ltd.')\n(4, 'Daikin Industries Ltd.')\n(5, 'Dynacast International Inc.')\n(6, 'Foster Electric Co. Ltd.')\n(7, 'Murata Manufacturing Co. Ltd.')\nThe number of vendors:  7\n")),(0,t.kt)("h4",{id:"querying-data-using-fetchmany-method"},"Querying data using fetchmany() method"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def get_vendors(size):\n    """ query data from the vendors table """\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        cursor.execute("SELECT vendor_id, vendor_name FROM vendors ORDER BY vendor_name")\n        rows = cursor.fetchmany(size=size)\n        print("The number of vendors: ", cursor.rowcount)\n        for row in rows:\n            print(row)\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            conn.close()\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"python 04_fetch_data.py\n\nThe number of vendors:  7\n(1, '3M Corp')\n(2, 'AKM Semiconductor Inc.')\n(3, 'Asahi Glass Co Ltd.')\n")),(0,t.kt)("h3",{id:"deleting-data"},"Deleting Data"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def delete_part(part_id):\n    """ delete vendors by id """\n    conn = None\n    rows_deleted = 0\n    try:\n        # read database configuration\n        params = config()\n        # connect to the PostgreSQL database\n        conn = psycopg2.connect(**params)\n        # create a new cursor\n        cursor = conn.cursor()\n        # execute the UPDATE  statement\n        cursor.execute("DELETE FROM vendors WHERE vendor_id = %s", (part_id,))\n        # get the number of updated rows\n        rows_deleted = cursor.rowcount\n        # Commit the changes to the database\n        conn.commit()\n        # Close communication with the PostgreSQL database\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            conn.close()\n\n    return rows_deleted\n\n\nif __name__ == \'__main__\':\n    deleted_rows = delete_part(2)\n    print(\'The number of deleted rows: \', deleted_rows)\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"python 05_delete_data.py\nThe number of deleted rows:  1\n")),(0,t.kt)("h3",{id:"create-table-from-csv"},"Create Table from CSV"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},"data = pd.read_csv ('dataset_penguins.csv')   \ndf = pd.DataFrame(data)\n\n\ndef create_table():\n    conn = None\n    try:\n        # read database configuration\n        params = config()\n        # connect to the PostgreSQL database\n        conn = psycopg2.connect(**params)\n        # create a new cursor\n        cursor = conn.cursor()\n        # create the table\n        cursor.execute('''\n        CREATE TABLE penguins (\n            uid CHAR(25) primary key,\n            species VARCHAR(10),\n            island VARCHAR(10),\n            culmen_length_mm FLOAT,\n            culmen_depth_mm FLOAT,\n            flipper_length_mm FLOAT,\n            body_mass_g INT,\n            sex VARCHAR(10)\n            )\n               ''')\n        conn.commit()\n        # Close communication with the PostgreSQL database\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},"def add_data():\n    conn = None\n    try:\n        # read database configuration\n        params = config()\n        # connect to the PostgreSQL database\n        conn = psycopg2.connect(**params)\n        # create a new cursor\n        cursor = conn.cursor()\n        # insert data\n        for row in df.itertuples():\n            cursor.execute('INSERT INTO penguins (uid, species, island, culmen_length_mm, culmen_depth_mm, flipper_length_mm, body_mass_g, sex) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)', (row.uid, row.species, row.island, row.culmen_length_mm, row.culmen_depth_mm, row.flipper_length_mm, row.body_mass_g, row.sex))\n        # Commit the changes to the database\n        conn.commit()\n        # Close communication with the PostgreSQL database\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n")),(0,t.kt)("h3",{id:"filter-conditions"},"Filter Conditions"),(0,t.kt)("h4",{id:"where"},"WHERE"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def get_penguins_by_id(uid):\n    """ query data from the penguins table """\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n\n        query = "SELECT (species, island, body_mass_g, sex) FROM penguins WHERE uid = \'{0}\'".format(uid)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == \'__main__\':\n    results = get_penguins_by_id(uid=\'649bc5d39b21a1b93e0985a5\')\n    print(results)\n')),(0,t.kt)("h4",{id:"where-by-value"},"WHERE by Value"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def get_penguins_by_mass_thresh(body_mass_g):\n    """ query data from the penguins table """\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n\n        query = "SELECT (species, island, sex) FROM penguins WHERE body_mass_g >= \'{0}\'".format(body_mass_g)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == \'__main__\':\n    results = get_penguins_by_mass_thresh(body_mass_g=6000)\n    print(results)\n')),(0,t.kt)("h4",{id:"where-between-values"},"WHERE BETWEEN Values"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def get_penguins_by_mass_range(lower, upper):\n    """ query data from the penguins table """\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n\n        query = "SELECT (species, island, sex) FROM penguins WHERE body_mass_g BETWEEN \'{0}\' AND \'{1}\'".format(lower, upper)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == \'__main__\':\n    results = get_penguins_by_mass_range(lower=4300, upper=4500)\n    print(results)\n')),(0,t.kt)("h4",{id:"where-by-no-match"},"WHERE by No-Match"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def get_penguins_by_non_match(species):\n    """ query data from the penguins table """\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n\n        query = "SELECT (species, island, sex) FROM penguins WHERE species <> \'{0}\'".format(species)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == \'__main__\':\n    results = get_penguins_by_non_match(species=\'Adelie\')\n    print(results)\n')),(0,t.kt)("h4",{id:"where-is-null"},"WHERE IS NULL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def get_penguins_where_sex_is_null():\n    """ query data from the penguins table """\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        \n        query = "SELECT (uid, species, island) FROM penguins WHERE sex IS NULL"\n        \n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == \'__main__\':\n    results = get_penguins_where_sex_is_null()\n    print(results)\n')),(0,t.kt)("h4",{id:"where-in-group"},"WHERE IN Group"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},"def get_penguins_in(group):\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n\n        query = \"SELECT (species, island, sex) FROM penguins WHERE uid IN {0}\".format(group)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    results = get_penguins_in(\n        group=('649bc5d39b21a1b93e0985a5', '649bc5d39b21a1b93e0986de', '649bc5d39b21a1b93e098671')\n        )\n    print(results)\n")),(0,t.kt)("h4",{id:"where-value-and-value"},"WHERE Value AND Value"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},"def get_penguins_and(body_mass_g, island):\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n\n        query = \"SELECT (species, island, sex) FROM penguins WHERE body_mass_g >= '{0}' AND island = '{1}'\".format(body_mass_g, island)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    results = get_penguins_and(body_mass_g=6000, island='Biscoe')\n    print(results)\n")),(0,t.kt)("h4",{id:"where-value-or-value"},"WHERE Value OR Value"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},"def get_penguins_or(island1, island2):\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = \"SELECT (species, island, sex) FROM penguins WHERE (island = '{0}' OR island = '{1}')\".format(island1, island2)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    results = get_penguins_or(island1='Biscoe',island2='Dream')\n    print(results)\n")),(0,t.kt)("h4",{id:"where-not"},"WHERE NOT"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},"def get_penguins_not(island, sex):\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = \"SELECT (species, island, sex) FROM penguins WHERE NOT island = '{0}' AND NOT sex = '{1}'\".format(island, sex)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    results = get_penguins_not(island='Biscoe',sex='MALE')\n    print(results)\n")),(0,t.kt)("h4",{id:"where-like"},"WHERE LIKE"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},"def get_penguins_like(island, sex):\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = \"SELECT (species, island, sex) FROM penguins WHERE island LIKE '{0}' AND sex LIKE '{1}%'\".format(island, sex)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    results = get_penguins_like(island='%eam',sex='MA%')\n    print(results)\n")),(0,t.kt)("h3",{id:"transformations"},"Transformations"),(0,t.kt)("h4",{id:"order-by"},"ORDER BY"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},"def get_penguins_return_ordered(island, orderby):\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = \"SELECT (species, island, sex) FROM penguins WHERE island = '{0}' ORDER BY {1} DESC\".format(island, orderby)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    results = get_penguins_return_ordered(island='Dream', orderby='species')\n    print(results)\n")),(0,t.kt)("h4",{id:"return-as"},"Return AS"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def get_penguins_return_math(uid):\n    """ query data from the penguins table """\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = "SELECT (culmen_length_mm + culmen_depth_mm) / body_mass_g AS ident FROM penguins WHERE uid = \'{0}\'".format(uid)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == \'__main__\':\n    results = get_penguins_return_math(uid=\'649bc5d39b21a1b93e0985a3\')\n    print(results)\n')),(0,t.kt)("h4",{id:"aggregations"},"Aggregations"),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},(0,t.kt)("inlineCode",{parentName:"p"},"AVG()"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"COUNT()"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"MIN()"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"MAX()"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"SUM()"))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def get_penguins_return_avg(column):\n    """ query data from the penguins table """\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = "SELECT AVG({0}) AS average FROM penguins".format(column)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == \'__main__\':\n    results = get_penguins_return_avg(column=\'body_mass_g\')\n    print(results)\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def get_penguins_return_count(column):\n    """ query data from the penguins table """\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = "SELECT COUNT({0}) AS row_count FROM penguins".format(column)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == \'__main__\':\n    # count all rows in a table\n    results = get_penguins_return_count(column=\'*\')\n    print(results)\n    # count all rows in specified column excluding NULL values\n    results = get_penguins_return_count(column=\'sex\')\n    print(results)\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def get_penguins_return_count_distinct(column):\n    """ query data from the penguins table """\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = "SELECT COUNT(DISTINCT {0}) AS distinct_row_count FROM penguins".format(column)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == \'__main__\':\n    # count all rows in specified column excluding NULL values and duplicates\n    results = get_penguins_return_count(column=\'uid\')\n    print(results)\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def get_penguins_return_minmax(column):\n    """ query data from the penguins table """\n    min_values = []\n    max_values = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n\n        query = "SELECT MIN({0}) AS average FROM penguins".format(column)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            min_values.append(penguin)\n        \n        query = "SELECT MAX({0}) AS average FROM penguins".format(column)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            max_values.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(min_values, max_values)\n            conn.close()\n\n\nif __name__ == \'__main__\':\n    results = get_penguins_return_minmax(column=\'body_mass_g\')\n    print(results)\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def get_penguins_return_sum_total(column1, column2):\n    """ query data from the penguins table """\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n\n        query = "SELECT SUM({0} + {1}) AS total FROM penguins".format(column1, column2)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == \'__main__\':\n    results = get_penguins_return_sum_total(column1=\'culmen_length_mm\', column2=\'culmen_depth_mm\')\n    print(results)\n')),(0,t.kt)("h4",{id:"group-by"},"GROUP BY"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def get_penguins_return_count_groups(column, groups):\n    """ query data from the penguins table """\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = "SELECT COUNT(DISTINCT {0}) AS distinct_row_count FROM penguins GROUP BY {1}".format(column, groups)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == \'__main__\':\n    # this returns 3 groups (MALE, FEMALE, NULL) for all 3 island groups\n    results = get_penguins_return_count_groups(column=\'uid\', groups=\'island, sex\')\n    print(results)\n')),(0,t.kt)("h4",{id:"group-by-aggregation"},"GROUP BY Aggregation"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-py"},'def get_penguins_return_group_count_agg(group, condition):\n    """ query data from the penguins table """\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = "SELECT {0}, COUNT(*) AS distinct_row_count FROM penguins GROUP BY {0} HAVING COUNT (*) {1}".format(group, condition)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == \'__main__\':\n    # return counts for all species that have more than 100 specimens\n    results = get_penguins_return_group_count_agg(group=\'species\', condition=\'>100\')\n    print(results)\n')))}p.isMDXComponent=!0},88526:(n,e,r)=>{r.d(e,{Z:()=>a});const a=r.p+"assets/images/SQL_in_Data_Science_01-eee4c3e6fadd582de7f9fc2321824960.png"},33400:(n,e,r)=>{r.d(e,{Z:()=>a});const a=r.p+"assets/images/SQL_in_Data_Science_02-d08f7693735f40cde424fc3d421c9b6e.png"},98228:(n,e,r)=>{r.d(e,{Z:()=>a});const a=r.p+"assets/images/SQL_in_Data_Science_03-8ba758bae3750d686da7a2934c37271c.png"},45283:(n,e,r)=>{r.d(e,{Z:()=>a});const a=r.p+"assets/images/SQL_in_Data_Science_04-370f42b79ff2e907e0eab16a2365054c.png"},76038:(n,e,r)=>{r.d(e,{Z:()=>a});const a=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-5a33ed1aeac871d5b7a7594cc7d702c8.jpg"}}]);