"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[81310],{969621:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>t,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var i=l(474848),s=l(28453);const o={sidebar_position:4670,slug:"2023-02-09",title:"MLflow 2.1 Introduction",authors:"mpolinowski",tags:["Python","Machine Learning","MLFlow"],description:"An open source platform for the machine learning lifecycle."},r=void 0,a={id:"IoT-and-Machine-Learning/AIOps/2023-02-09-mlflow-introduction/index",title:"MLflow 2.1 Introduction",description:"An open source platform for the machine learning lifecycle.",source:"@site/docs/IoT-and-Machine-Learning/AIOps/2023-02-09-mlflow-introduction/index.md",sourceDirName:"IoT-and-Machine-Learning/AIOps/2023-02-09-mlflow-introduction",slug:"/IoT-and-Machine-Learning/AIOps/2023-02-09-mlflow-introduction/2023-02-09",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-02-09-mlflow-introduction/2023-02-09",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/AIOps/2023-02-09-mlflow-introduction/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"MLFlow",permalink:"/docs/tags/ml-flow"}],version:"current",sidebarPosition:4670,frontMatter:{sidebar_position:4670,slug:"2023-02-09",title:"MLflow 2.1 Introduction",authors:"mpolinowski",tags:["Python","Machine Learning","MLFlow"],description:"An open source platform for the machine learning lifecycle."},sidebar:"tutorialSidebar",previous:{title:"Deploying Prediction APIs",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-03-27-deploying-prediction-apis-with-flask/2023-03-27"},next:{title:"Apache Airflow Dynamic DAGs",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-02-06-apache-airflow-dynamic-dags/2023-02-06"}},t={},c=[{value:"Installing MLflow (PIP)",id:"installing-mlflow-pip",level:2},{value:"Downloading the Quickstart",id:"downloading-the-quickstart",level:3},{value:"Using the Tracking API",id:"using-the-tracking-api",level:2},{value:"Viewing the Tracking UI",id:"viewing-the-tracking-ui",level:3},{value:"Running MLflow Projects",id:"running-mlflow-projects",level:3},{value:"Saving and Serving Models",id:"saving-and-serving-models",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"TST, HongKong",src:l(977131).A+"",width:"1500",height:"512"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#installing-mlflow-pip",children:"Installing MLflow (PIP)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#downloading-the-quickstart",children:"Downloading the Quickstart"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#using-the-tracking-api",children:"Using the Tracking API"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#viewing-the-tracking-ui",children:"Viewing the Tracking UI"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#running-mlflow-projects",children:"Running MLflow Projects"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#saving-and-serving-models",children:"Saving and Serving Models"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["MLflow is an open source platform to manage the ML lifecycle, including ",(0,i.jsx)(n.strong,{children:"experimentation"}),", ",(0,i.jsx)(n.strong,{children:"reproducibility"}),", ",(0,i.jsx)(n.strong,{children:"deployment"})," and a ",(0,i.jsx)(n.strong,{children:"central model registry"}),". MLflow currently offers four components:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MLflow Tracking"}),": Record and query experiments: code, data, config, and results"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MLflow Projects"}),": Package data science code in a format to reproduce runs on any platform"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MLflow Models"}),": Deploy machine learning models in diverse serving environments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Model Registry"}),": Store, annotate, discover, and manage models in a central repository"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"installing-mlflow-pip",children:"Installing MLflow (PIP)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install MLflow\npip install mlflow\n# Install MLflow with extra ML libraries and 3rd-party tools\npip install 'mlflow[extras]'\n# Install a lightweight version of MLflow\npip install mlflow-skinny\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To use certain MLflow modules and functionality (ML model persistence/inference, artifact storage options, etc), you may need to install extra libraries. For example, the mlflow.tensorflow module requires TensorFlow to be installed. See ",(0,i.jsx)(n.a,{href:"https://github.com/mlflow/mlflow/blob/master/EXTRA_DEPENDENCIES.rst",children:"Extra Dependencies"})," for more details."]}),"\n",(0,i.jsxs)(n.p,{children:["When using MLflow skinny, you may need to install additional dependencies if you wish to use certain MLflow modules and functionalities. For example, usage of SQL-based storage for MLflow Tracking (e.g. ",(0,i.jsx)(n.code,{children:'mlflow.set_tracking_uri("sqlite:///my.db")'}),") requires ",(0,i.jsx)(n.code,{children:"pip install mlflow-skinny sqlalchemy alembic sqlparse. If using MLflow skinny for serving, a minimally functional installation would require "}),"pip install mlflow-skinny flask`."]}),"\n",(0,i.jsx)(n.p,{children:"The MLFlow installation with extras contains the following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Successfully installed Mako-1.2.4 PyJWT-2.6.0 PySocks-1.7.1 SecretStorage-3.3.3 adal-1.2.7 aiokafka-0.8.0 alembic-1.9.3 azure-common-1.1.28 azure-core-1.26.3 azure-graphrbac-0.61.1 azure-mgmt-authorization-3.0.0 azure-mgmt-containerregistry-10.0.0 azure-mgmt-core-1.3.2 azure-mgmt-keyvault-10.1.0 azure-mgmt-resource-21.2.1 azure-mgmt-storage-20.1.0 azureml-core-1.48.0 backports.tempfile-1.0 backports.weakref-1.0.post1 bcrypt-4.0.1 cryptography-38.0.4 databricks-cli-0.17.4 docker-6.0.1 fastapi-0.88.0 gevent-22.10.2 geventhttpclient-2.0.2 google-cloud-core-2.3.2 google-cloud-storage-2.7.0 google-crc32c-1.5.0 google-resumable-media-2.4.1 gunicorn-20.1.0 isodate-0.6.1 jeepney-0.8.0 jsonpickle-2.2.0 kafka-python-2.0.2 knack-0.10.1 kubernetes-25.3.0 llvmlite-0.39.1 mlflow-2.1.1 mlserver-1.3.0.dev2 mlserver-mlflow-1.3.0.dev2 msal-1.21.0 msal-extensions-1.0.0 msrest-0.7.1 msrestazure-0.6.4 ndg-httpsclient-0.5.1 numba-0.56.4 numpy-1.23.5 orjson-3.8.5 paramiko-2.12.0 pkginfo-1.9.6 portalocker-2.7.0 prometheus-flask-exporter-0.21.0 py-grpc-prometheus-0.7.0 pynacl-1.5.0 pyopenssl-22.1.0 pysftp-0.2.9 python-dotenv-0.21.1 python-rapidjson-1.9 querystring-parser-1.2.4 requests-auth-aws-sigv4-0.7 shap-0.41.0 slicer-0.0.7 sqlalchemy-1.4.46 sqlparse-0.4.3 starlette-exporter-0.15.1 tritonclient-2.30.0 uvloop-0.17.0 zope.event-4.6 zope.interface-5.5.2\n"})}),"\n",(0,i.jsx)(n.h3,{id:"downloading-the-quickstart",children:"Downloading the Quickstart"}),"\n",(0,i.jsxs)(n.p,{children:["Download the quickstart code by cloning MLflow via and ",(0,i.jsx)(n.code,{children:"cd"})," into the ",(0,i.jsx)(n.code,{children:"examples"})," subdirectory of the repository. We\u2019ll use this working directory for running the quickstart:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/mlflow/mlflow\ncd mlflow/examples\n"})}),"\n",(0,i.jsx)(n.h2,{id:"using-the-tracking-api",children:"Using the Tracking API"}),"\n",(0,i.jsx)(n.h3,{id:"viewing-the-tracking-ui",children:"Viewing the Tracking UI"}),"\n",(0,i.jsxs)(n.p,{children:["By default, wherever you run your program, the tracking API writes data into files into a local ",(0,i.jsx)(n.code,{children:"./mlruns"})," directory. You can then run MLflow\u2019s Tracking UI on ",(0,i.jsx)(n.code,{children:"http://localhost:5000"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mlflow ui\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python quickstart/mlflow_tracking.py\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"MLFlow Introduction",src:l(861497).A+"",width:"1244",height:"500"})}),"\n",(0,i.jsx)(n.h3,{id:"running-mlflow-projects",children:"Running MLflow Projects"}),"\n",(0,i.jsx)(n.p,{children:"MLflow allows you to package code and its dependencies as a project that can be run in a reproducible fashion on other data. Each project includes its code and a MLproject file that defines its dependencies (for example, Python environment) as well as what commands can be run into the project and what arguments they take."}),"\n",(0,i.jsxs)(n.p,{children:["You can run existing projects with the ",(0,i.jsx)(n.code,{children:"mlflow run"})," command, which runs a project from either a ",(0,i.jsx)(n.a,{href:"https://github.com/mlflow/mlflow/tree/master/examples/sklearn_elasticnet_wine",children:"local directory"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mlflow run sklearn_elasticnet_wine -P alpha=0.5\n"})}),"\n",(0,i.jsx)(n.p,{children:"or a GitHub URI:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mlflow run https://github.com/mlflow/mlflow-example.git -P alpha=5.0\n"})}),"\n",(0,i.jsxs)(n.p,{children:["There\u2019s a sample project in tutorial, including a ",(0,i.jsx)(n.a,{href:"https://mlflow.org/docs/latest/projects.html",children:"MLproject"})," file that specifies its dependencies. If you haven\u2019t configured a ",(0,i.jsx)(n.a,{href:"https://mlflow.org/docs/latest/tracking.html#tracking-server",children:"tracking server"})," yet, projects log their Tracking API data in the local mlruns directory so you can see these runs using mlflow ui."]}),"\n",(0,i.jsxs)(n.p,{children:["If I try to run ",(0,i.jsx)(n.code,{children:"mlflow run sklearn_elasticnet_wine -P alpha=0.5"})," I get an error message ",(0,i.jsx)(n.code,{children:"FileNotFoundError: [Errno 2] No such file or directory: 'pyenv'"}),". It seems that MLFlow expected to find a virtual environment with dependencies installed. The directory contains a ",(0,i.jsx)(n.code,{children:"python_env.yml"})," file - I assume that all those dependencies would have been installed automatically if a virtEnv would have been present? Ah ok, there is the info:"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["By default ",(0,i.jsx)(n.code,{children:"mlflow run"})," installs all dependencies using virtualenv. To run a project without using virtualenv, you can provide the ",(0,i.jsx)(n.code,{children:"--env-manager=local"})," option to ",(0,i.jsx)(n.code,{children:"mlflow run"}),". In this case, you must ensure that the necessary dependencies are already installed in your Python environment."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mlflow run --env-manager=local sklearn_elasticnet_wine -P alpha=0.5\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Elasticnet model (alpha=0.500000, l1_ratio=0.100000):\n  RMSE: 0.7460550348172179\n  MAE: 0.576381895873763\n  R2: 0.21136606570632266\n2023/02/09 13:32:42 INFO mlflow.projects: === Run (ID '886087767c9646b9824ec9315e63ac84') succeeded ===\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The run statistics will be stored in the ",(0,i.jsx)(n.code,{children:"mlruns"})," dir inside the ",(0,i.jsx)(n.code,{children:"examples"})," dir that we started this training from. So we can open the UI from here ",(0,i.jsx)(n.code,{children:"mlflow ui"})," and should be able to see a new entry:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"MLFlow Introduction",src:l(394914).A+"",width:"1246",height:"572"})}),"\n",(0,i.jsxs)(n.p,{children:["After the run MLFlow generated a a ",(0,i.jsx)(n.code,{children:"requirements.txt"})," and ",(0,i.jsx)(n.code,{children:"python_env.yml"})," file - based on my local environment:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"mlruns/0/886087767c9646b9824ec9315e63ac84/artifacts/model/python_env.yaml"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:"python: 3.10.9\nbuild_dependencies:\n- pip==22.3.1\n- setuptools==66.1.1\n- wheel==0.38.4\ndependencies:\n- -r requirements.txt\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"mlruns/0/886087767c9646b9824ec9315e63ac84/artifacts/model/requirements.txt"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mlflow<3,>=2.1\ncloudpickle==2.2.0\npsutil==5.9.4\nscikit-learn==1.2.0\ntyping-extensions==4.4.0\n"})}),"\n",(0,i.jsx)(n.p,{children:"And also saved the pickled artifacts from our training:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"MLFlow Introduction",src:l(285419).A+"",width:"1239",height:"762"})}),"\n",(0,i.jsx)(n.h2,{id:"saving-and-serving-models",children:"Saving and Serving Models"}),"\n",(0,i.jsx)(n.p,{children:"MLflow includes a generic MLmodel format for saving models from a variety of tools in diverse flavors. For example, many models can be served as Python functions, so an MLmodel file can declare how each model should be interpreted as a Python function in order to let various tools serve it. MLflow also includes tools for running such models locally and exporting them to Docker containers or commercial serving platforms."}),"\n",(0,i.jsxs)(n.p,{children:["To illustrate this functionality, the ",(0,i.jsx)(n.code,{children:"mlflow.sklearn"})," package can log scikit-learn models as MLflow artifacts and then load them again for serving. There is an example training application in ",(0,i.jsx)(n.a,{href:"https://github.com/mlflow/mlflow/tree/master/examples/sklearn_logistic_regression",children:"sklearn_logistic_regression/train.py"})," that you can run as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mlflow run --env-manager=local sklearn_logistic_regression\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When you run the example, it outputs an MLflow run ID for that experiment. If you look at ",(0,i.jsx)(n.code,{children:"mlflow ui"}),", you will also see that the run saved a model folder containing an MLmodel description file and a pickled scikit-learn model:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"=== Running command 'python train.py' in run with ID 'ee566cd8d86b411f978c6e3db5d161cb' ===\nScore: 0.6666666666666666\nModel saved in run ee566cd8d86b411f978c6e3db5d161cb\n=== Run (ID 'ee566cd8d86b411f978c6e3db5d161cb') succeeded ===\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"MLFlow Introduction",src:l(335508).A+"",width:"1243",height:"771"})}),"\n",(0,i.jsxs)(n.p,{children:["You can pass the run ID and the path of the model within the artifacts directory (here \u201cmodel\u201d) to various tools. For example, MLflow includes a ",(0,i.jsx)(n.a,{href:"https://mlflow.org/docs/latest/models.html#local-model-deployment",children:"simple REST server for python-based models"})," - ",(0,i.jsx)(n.code,{children:"mlflow models serve -m runs:/<RUN_ID>/model"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mlflow models serve --env-manager=local -m runs:/ee566cd8d86b411f978c6e3db5d161cb/model --port 8080\n"})}),"\n",(0,i.jsx)(n.p,{children:"The REST API defines 4 endpoints:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/ping"}),": used for health check"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/health"}),": (same as /ping)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/version"}),": used for getting the mlflow version"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/invocations"}),": used for scoring"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Once you have started the server, you can pass it some sample data and see the predictions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl -d \'{"dataframe_split": {"columns": ["x"], "data": [[1], [-1]]}}\' -H \'Content-Type: application/json\' -X POST localhost:8080/invocations\n'})}),"\n",(0,i.jsx)(n.p,{children:"This returns:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'{"predictions": [1, 0]}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},861497:(e,n,l)=>{l.d(n,{A:()=>i});const i=l.p+"assets/images/MLFlow_Intro_01-f79462a8aabd01d01db4d3e4a34e250c.png"},394914:(e,n,l)=>{l.d(n,{A:()=>i});const i=l.p+"assets/images/MLFlow_Intro_02-9b7a418a66fcc1612a02f6ceddd339c1.png"},285419:(e,n,l)=>{l.d(n,{A:()=>i});const i=l.p+"assets/images/MLFlow_Intro_03-2e1f1c5474ad809b68ed47d203bb6c2e.png"},335508:(e,n,l)=>{l.d(n,{A:()=>i});const i=l.p+"assets/images/MLFlow_Intro_04-2d0b13503988e438b06f7585cd94d793.png"},977131:(e,n,l)=>{l.d(n,{A:()=>i});const i=l.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-c77de99ac2aaaf4bfc10d6424f4476da.jpg"},28453:(e,n,l)=>{l.d(n,{R:()=>r,x:()=>a});var i=l(296540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);