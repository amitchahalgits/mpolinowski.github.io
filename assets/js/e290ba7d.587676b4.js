"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[51886],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(t),u=i,h=m["".concat(o,".").concat(u)]||m[u]||d[u]||r;return t?a.createElement(h,l(l({ref:n},c),{},{components:t})):a.createElement(h,l({ref:n},c))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},88226:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=t(87462),i=(t(67294),t(3905));const r={sidebar_position:4575,slug:"2023-09-27",title:"MLOps with ZenML - SKLearn Classifier Pipeline",authors:"mpolinowski",tags:["Python","Machine Learning"],description:"Use ZenML to build a SciKit-Learn SVC Image Classifier Pipeline"},l=void 0,s={unversionedId:"IoT-and-Machine-Learning/AIOps/2023-09-27-zenml-intro-sklearn-pipeline/index",id:"IoT-and-Machine-Learning/AIOps/2023-09-27-zenml-intro-sklearn-pipeline/index",title:"MLOps with ZenML - SKLearn Classifier Pipeline",description:"Use ZenML to build a SciKit-Learn SVC Image Classifier Pipeline",source:"@site/docs/IoT-and-Machine-Learning/AIOps/2023-09-27-zenml-intro-sklearn-pipeline/index.md",sourceDirName:"IoT-and-Machine-Learning/AIOps/2023-09-27-zenml-intro-sklearn-pipeline",slug:"/IoT-and-Machine-Learning/AIOps/2023-09-27-zenml-intro-sklearn-pipeline/2023-09-27",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-09-27-zenml-intro-sklearn-pipeline/2023-09-27",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/AIOps/2023-09-27-zenml-intro-sklearn-pipeline/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"}],version:"current",sidebarPosition:4575,frontMatter:{sidebar_position:4575,slug:"2023-09-27",title:"MLOps with ZenML - SKLearn Classifier Pipeline",authors:"mpolinowski",tags:["Python","Machine Learning"],description:"Use ZenML to build a SciKit-Learn SVC Image Classifier Pipeline"},sidebar:"tutorialSidebar",previous:{title:"AIOps",permalink:"/docs/category/aiops"},next:{title:"Tensorflow Serving API",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-08-19-tensorflow-serving-api/2023-08-19"}},o={},p=[{value:"Installation",id:"installation",level:2},{value:"ZenML Server with Docker-Compose",id:"zenml-server-with-docker-compose",level:3},{value:"ZenML Client Python Package",id:"zenml-client-python-package",level:3},{value:"Run the Classifier using a ZenML Pipeline",id:"run-the-classifier-using-a-zenml-pipeline",level:2},{value:"Define Steps",id:"define-steps",level:3},{value:"Define Pipeline of Steps",id:"define-pipeline-of-steps",level:3},{value:"Initialize Pipeline",id:"initialize-pipeline",level:3},{value:"Visualize the Results",id:"visualize-the-results",level:2}],c={toc:p};function d(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Guangzhou, China",src:t(94749).Z,width:"1061",height:"405"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#mlops-with-zenml"},"MLOps with ZenML"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#installation"},"Installation"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#zenml-server-with-docker-compose"},"ZenML Server with Docker-Compose")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#zenml-client-python-package"},"ZenML Client Python Package")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#run-the-classifier-using-a-zenml-pipeline"},"Run the Classifier using a ZenML Pipeline"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#define-steps"},"Define Steps")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#define-pipeline-of-steps"},"Define Pipeline of Steps")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#initialize-pipeline"},"Initialize Pipeline")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#visualize-the-results"},"Visualize the Results"))))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/mpolinowski/zenml-introduction"},"Github Repository"))),(0,i.kt)("h1",{id:"mlops-with-zenml"},"MLOps with ZenML"),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("h3",{id:"zenml-server-with-docker-compose"},"ZenML Server with Docker-Compose"),(0,i.kt)("p",null,"Docker compose offers a simpl way of managing multi-container setups on your local machine, which is the case for instance if you are looking to deploy the ZenML server container and connect it to a MySQL database service also running in a Docker container."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"docker-compose.yml")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3.9"\n\nservices:\n  mysql:\n    image: mysql:8.0\n    ports:\n      - 3306:3306\n    volumes:\n      - type: bind\n        source: ./data\n        target: /var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=password\n  zenml:\n    image: zenmldocker/zenml-server\n    ports:\n      - "8888:8080"\n    environment:\n      - ZENML_STORE_URL=mysql://root:password@host.docker.internal/zenml\n      - ZENML_DEFAULT_USER_NAME=admin\n      - ZENML_DEFAULT_USER_PASSWORD=zenml\n    links:\n      - mysql\n    depends_on:\n      - mysql\n    extra_hosts:\n      - "host.docker.internal:host-gateway"\n    restart: on-failure\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note"),": Changes I made to this file - compared to the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.zenml.io/deploying-zenml/zenml-self-hosted/deploy-with-docker#zenml-server-with-docker-compose"},"official documentation")," are that I mounted a directory into the MySQL container to persist my data. And I had to change the outer server port ",(0,i.kt)("inlineCode",{parentName:"p"},"8080")," used by the ZenML Server to ",(0,i.kt)("inlineCode",{parentName:"p"},"8888")," to avoid a port conflict on my server.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -p zenml up  -d\n")),(0,i.kt)("p",null,"Verify that the ZenML interface is up and running by signing in - the dashboard will be hosted on your Servers IP on the outer port you defined in the compose file above (in my case port ",(0,i.kt)("inlineCode",{parentName:"p"},"8888"),"). The admin login is the default user name and password from the compose file:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"MLOps with ZenML",src:t(55038).Z,width:"938",height:"574"})),(0,i.kt)("h3",{id:"zenml-client-python-package"},"ZenML Client Python Package"),(0,i.kt)("p",null,"ZenML is a Python package that can be installed directly via pip:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install zenml\n")),(0,i.kt)("p",null,"To be able to use ZenML with the ML Framework of our choice we need to install the corresponding ",(0,i.kt)("strong",{parentName:"p"},"Integration"),", e.g.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"zenml integration install sklearn\n")),(0,i.kt)("p",null,"Which works a bit like a package manager checking if you have all packages installed ZenML lists as a requirement when when working with SKLearn models."),(0,i.kt)("p",null,"You can connect your ZenML client using the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"zenml connect --url http://my-server:8888 --username admin --password zenml\n")),(0,i.kt)("p",null,"And initialize the project pipeline:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"rm -rf .zen\nzenml init\n")),(0,i.kt)("h2",{id:"run-the-classifier-using-a-zenml-pipeline"},"Run the Classifier using a ZenML Pipeline"),(0,i.kt)("h3",{id:"define-steps"},"Define Steps"),(0,i.kt)("p",null,"Define the classifier in 3 ZenML Pipeline steps - ",(0,i.kt)("strong",{parentName:"p"},"Data Loading"),", ",(0,i.kt)("strong",{parentName:"p"},"Model Training")," and ",(0,i.kt)("strong",{parentName:"p"},"Model Evaluation"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"import numpy as np\nfrom sklearn.base import ClassifierMixin\nfrom sklearn.svm import SVC\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from zenml import step\nfrom typing_extensions import Annotated\nfrom typing import Tuple\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'@step\ndef importer() -> Tuple[\n    Annotated[np.ndarray, "X_train"],\n    Annotated[np.ndarray, "X_test"],\n    Annotated[np.ndarray, "y_train"],\n    Annotated[np.ndarray, "y_test"],\n]:\n    """Load the digits dataset as numpy arrays."""\n    digits = load_digits()\n    data = digits.images.reshape((len(digits.images), -1))\n    X_train, X_test, y_train, y_test = train_test_split(\n        data, digits.target, test_size=0.2, shuffle=False\n    )\n    return X_train, X_test, y_train, y_test\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'@step\ndef svc_trainer(\n            X_train: np.ndarray,\n            y_train: np.ndarray\n        ) -> ClassifierMixin:\n    """Train the SVC classifier."""\n    model = SVC(gamma=0.001)\n    model.fit(X_train, y_train)\n\n    return model\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'@step\ndef evaluator(\n    X_test: np.ndarray,\n    y_test: np.ndarray,\n    model: ClassifierMixin\n) -> float:\n    """Calculate the model accuracy using the test set."""\n    score = model.score(X_test, y_test)\n    print(f"Test Accuracy: {score}")\n\n    return score\n')),(0,i.kt)("h3",{id:"define-pipeline-of-steps"},"Define Pipeline of Steps"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from zenml import pipeline\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'@pipeline\ndef digits_classifier():\n    """SVC digits classifier pipeline"""\n    X_train, X_test, y_train, y_test = importer()\n    model = svc_trainer(X_train, y_train=y_train)\n    evaluator(X_test=X_test, y_test=y_test, model=model)\n')),(0,i.kt)("h3",{id:"initialize-pipeline"},"Initialize Pipeline"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"classifier = digits_classifier()\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Initiating a new run for the pipeline: digits_classifier.\nRegistered new version: (version 1).\nExecuting a new run.\nUsing user: admin\nUsing stack: default\norchestrator: default\nartifact_store: default\nStep importer has started.\nStep importer has finished in 3.163s.\nStep svc_trainer has started.\nStep svc_trainer has finished in 0.644s.\nStep evaluator has started.\nTest Accuracy: 0.9583333333333334\nStep evaluator has finished in 0.582s.\nRun digits_classifier-2023_09_27-08_22_04_011726 has finished in 6.684s.\nDashboard URL: http://my-server:8888/workspaces/default/pipelines/32b2fbc0-765b-48d9-badd-75d60e1f46fa/runs/a9ffc4c6-5a2b-4560-bb8b-beab259b4bf1/dag32b2fbc0-765b-48d9-badd-75d60e1f46fa/runs/a9ffc4c6-5a2b-4560-bb8b-beab259b4bf1/dag\n")),(0,i.kt)("h2",{id:"visualize-the-results"},"Visualize the Results"),(0,i.kt)("p",null,"Head over to the dashboard URL given above to see the visualization of the pipeline run:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"MLOps with ZenML",src:t(37635).Z,width:"1222",height:"848"})))}d.isMDXComponent=!0},55038:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/ZenML_MLFlow_01-69e1936cfdf9c8368d49aba7ebb431a1.png"},37635:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/ZenML_MLFlow_02-884a7b51fde67330b01aaf40f85e8df8.png"},94749:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-fe9bbb57ea8da08fea2f3fef2bf2515b.jpg"}}]);