"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[84466],{638351:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=n(785893),t=n(603905);const o={sidebar_position:4980,slug:"2023-02-13",title:"Gatsby Blog with a MeiLi Search Backend",authors:"mpolinowski",tags:["LINUX","Docker"],description:"Serve your Gatsby.js Blog in a goFiber container and connect a Search Engine."},a=void 0,s={id:"DevOps/Provisioning/2023-02-13--meili-search-gatsby/index",title:"Gatsby Blog with a MeiLi Search Backend",description:"Serve your Gatsby.js Blog in a goFiber container and connect a Search Engine.",source:"@site/docs/DevOps/Provisioning/2023-02-13--meili-search-gatsby/index.md",sourceDirName:"DevOps/Provisioning/2023-02-13--meili-search-gatsby",slug:"/DevOps/Provisioning/2023-02-13--meili-search-gatsby/2023-02-13",permalink:"/docs/DevOps/Provisioning/2023-02-13--meili-search-gatsby/2023-02-13",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Provisioning/2023-02-13--meili-search-gatsby/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Docker",permalink:"/docs/tags/docker"}],version:"current",sidebarPosition:4980,frontMatter:{sidebar_position:4980,slug:"2023-02-13",title:"Gatsby Blog with a MeiLi Search Backend",authors:"mpolinowski",tags:["LINUX","Docker"],description:"Serve your Gatsby.js Blog in a goFiber container and connect a Search Engine."},sidebar:"tutorialSidebar",previous:{title:"Provision OSticket with Docker (2023)",permalink:"/docs/DevOps/Provisioning/2023-03-09--os-ticket-docker-2023/2023-03-09"},next:{title:"Deploy Mautic with Docker",permalink:"/docs/DevOps/Provisioning/2022-11-16--mautic-docker/2022-11-16"}},l={},c=[{value:"Prepare the goFiber Webserver",id:"prepare-the-gofiber-webserver",level:2},{value:"Building the Go App",id:"building-the-go-app",level:3},{value:"CI Pipeline",id:"ci-pipeline",level:2},{value:"Docker Compose",id:"docker-compose",level:2}];function d(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.ah)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{alt:"Shenzhen, China",src:n(820520).Z+"",width:"1500",height:"567"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://github.com/mpolinowski/meili-hello",children:"Github Repository"})}),"\n"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"#prepare-the-gofiber-webserver",children:"Prepare the goFiber Webserver"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#building-the-go-app",children:"Building the Go App"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#ci-pipeline",children:"CI Pipeline"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#docker-compose",children:"Docker Compose"})}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"I already looked into how to:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/DevOps/Elasticsearch/2023-02-10--meili-rusty-elastic-docker/2023-02-10",children:"Deploy a MeiLi Search Engine with Docker"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/Development/Javascript/2023-02-12-react-meili-search-starter/2023-02-12",children:"Build a Search Interface with React.js"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/Development/Javascript/2023-02-13-gatsby-meili-search-starter/2023-02-13",children:"Use Gatsby.js to pre-render the React.js Interface"})}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["The next step is to wrap the pre-rendered build inside a Docker container that uses ",(0,i.jsx)(r.a,{href:"https://github.com/gofiber/fiber",children:"goFiber"})," to serve the generated static HTML/CSS/JS/JSON code."]}),"\n",(0,i.jsx)(r.h2,{id:"prepare-the-gofiber-webserver",children:"Prepare the goFiber Webserver"}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.a,{href:"https://github.com/mpolinowski/meili-hello/blob/master/03_gastby_frontend/docker/container/app.go",children:"code for the webserver"})," is fairly simple - very similar to Express.js:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"flag"\r\n\t"log"\r\n\r\n\t"github.com/gofiber/fiber/v2"\r\n\t"github.com/gofiber/fiber/v2/middleware/logger"\r\n\t"github.com/gofiber/fiber/v2/middleware/recover"\r\n)\r\n\r\nvar (\r\n\tport = flag.String("port", ":8888", "Port to listen on")\r\n\tprod = flag.Bool("prod", false, "Enable prefork in Production")\r\n)\r\n\r\nfunc main() {\r\n\r\n\t// Create fiber app\r\n\r\n\t// Development\r\n\t// app := fiber.New(fiber.Config{\r\n\t// \tPrefork: *prod, // go run app.go -prod\r\n\t// })\r\n\r\n\t// Production\r\n\tapp := fiber.New(fiber.Config{\r\n\t\tPrefork: true,\r\n\t})\r\n\r\n\t// Middleware\r\n\tapp.Use(recover.New())\r\n\tapp.Use(logger.New())\r\n\r\n\t// Setup static files\r\n\tapp.Static("/", "./data/public")\r\n\r\n\t// Listen on port 8888\r\n\tlog.Fatal(app.Listen(*port)) // go run app.go -port=:8888\r\n}\n'})}),"\n",(0,i.jsxs)(r.p,{children:["The webserver expects our static code - generated from our React.js MeiLi search interface and pre-rendered by Gatsby.js - in the ",(0,i.jsx)(r.code,{children:"public"})," folder. It will then serve it on ",(0,i.jsx)(r.code,{children:"/"})," with port ",(0,i.jsx)(r.code,{children:"8888"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"building-the-go-app",children:"Building the Go App"}),"\n",(0,i.jsxs)(r.p,{children:["We can now use Docker to build the webserver inside a ",(0,i.jsx)(r.a,{href:"https://hub.docker.com/_/golang",children:"Golang Container"})," and then transfer our website code and the build binary into a tiny ",(0,i.jsx)(r.a,{href:"https://hub.docker.com/_/alpine",children:"Alpine Container"}),":"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-yml",children:'# Building the binary of the App\r\nFROM golang:alpine AS build\r\n\r\n# Project labels\r\nLABEL maintainer="m.polinowski@gmail.com"\r\n\r\n# `build` can be replaced with your project name\r\nWORKDIR /go/src/build\r\n\r\n# Copy all the Code and stuff to compile everything\r\nCOPY ./container/* ./\r\n\r\n# Downloads all the dependencies in advance (could be left out, but it\'s more clear this way)\r\nRUN go mod download\r\n\r\n# Builds the application as a staticly linked one, to allow it to run on alpine\r\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o app .\r\n\r\n# Moving the binary to the \'final Image\' to make it smaller\r\nFROM alpine:latest\r\n\r\nWORKDIR /app\r\n\r\n# Create the `public` dir and copy all the assets into it\r\nRUN mkdir ./data\r\nCOPY ./container/data ./data\r\n\r\n# `build` can be replaced here as well\r\nCOPY --from=build /go/src/build/app .\r\n\r\n# Exposes port 8888 because our program listens on that port\r\nEXPOSE 8888\r\n\r\n# CMD ["./app"]\r\nRUN chmod +x ./data/run.sh\r\nCMD ["ash", "./data/run.sh"]\n'})}),"\n",(0,i.jsx)(r.h2,{id:"ci-pipeline",children:"CI Pipeline"}),"\n",(0,i.jsxs)(r.p,{children:["Now I would use a Gitlab CI pipeline to do my Gatsby.js build as well as the build described above. But this also works locally with a ",(0,i.jsx)(r.strong,{children:"npm script"})," that we can add to the ",(0,i.jsx)(r.a,{href:"https://github.com/mpolinowski/meili-hello/blob/master/03_gastby_frontend/package.json",children:"package.json"})," file of our Gatsby.js app:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:'"scripts": {\r\n    "build": "node --max-old-space-size=8192 node_modules/gatsby/dist/bin/gatsby build",\r\n    "develop": "node --max-old-space-size=8192 node_modules/gatsby/dist/bin/gatsby develop",\r\n    "start": "npm run develop",\r\n    "serve": "gatsby serve",\r\n    "clean": "gatsby clean",\r\n    "docker": "mv public/* docker/container/data/public && docker build -t my_blog docker/. && mv docker/container/data/public/* public"\r\n  }\n'})}),"\n",(0,i.jsx)(r.p,{children:"So now we can enter the root dir of our Gatsby.js app and execute:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"npm run build\r\nnpm run docker\n"})}),"\n",(0,i.jsx)(r.p,{children:"Now we have both container images ready to be served:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"REPOSITORY             TAG      SIZE\r\nmy_blog                latest   23.4MB\r\ngetmeili/meilisearch   latest   258MB\n"})}),"\n",(0,i.jsx)(r.h2,{id:"docker-compose",children:"Docker Compose"}),"\n",(0,i.jsxs)(r.p,{children:["Now we can write a ",(0,i.jsx)(r.code,{children:"docker-compose.yml"})," that brings it all together for us - ",(0,i.jsx)(r.strong,{children:"Note"})," that I ran into an issue here. I am building the Gatsby.js page while starting the MeiLi Search container manually (without Compose). I am connecting to the service on ",(0,i.jsx)(r.code,{children:"localhost"}),". If I now use a virtual network for those container I will have to change the connection URL from ",(0,i.jsx)(r.code,{children:"localhost:7700"})," to ",(0,i.jsx)(r.code,{children:"meilisearch:7700"}),". But to keep this simple I just run the container on the ",(0,i.jsx)(r.code,{children:"host"})," network stack here - so nothing needs to be changed:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-yml",children:'version: \'3\'\r\n\r\nservices:\r\n  meilisearch:\r\n    container_name: meilisearch\r\n    image: getmeili/meilisearch:latest\r\n    environment:\r\n      - MEILI_MASTER_KEY=RhTX1pLPSKSn7KW9yf9u_MNKC0v1YKkmx2Sc6qSwbLQ\r\n      - MEILI_NO_ANALYTICS=true\r\n      # - MEILI_ENV=development\r\n      - MEILI_ENV=production\r\n    network_mode: "host"\r\n    # ports:\r\n    #   - ${MEILI_PORT:-7700}:7700\r\n    # networks:\r\n    #   - meilisearch\r\n    volumes:\r\n      - /opt/meili_data:/meili_data\r\n    restart: unless-stopped\r\n\r\n  gatsby_frontend:\r\n    container_name: my_blog\r\n    image: my_blog:latest\r\n    network_mode: "host"    \r\n    # ports:\r\n    #   - 8888:8888\r\n    # networks:\r\n    #   - meilisearch\r\n    restart: unless-stopped\r\n\r\n# networks:\r\n#   meilisearch:\r\n#     driver: bridge\n'})}),"\n",(0,i.jsx)(r.p,{children:"You can now bring the application up with:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"docker-compose up\n"})}),"\n",(0,i.jsxs)(r.p,{children:["and visit ",(0,i.jsx)(r.code,{children:"http://localhost:8888"})," and should see the Gatsby.js frontend being served by your goFiber webserver connecting to your MeiLi Search backend:"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{alt:"Gatsby Blog with a MeiLi Search Backend",src:n(870360).Z+"",width:"1671",height:"673"})}),"\n",(0,i.jsx)(r.p,{children:"\ud83d\udc4d"})]})}function h(e={}){const{wrapper:r}={...(0,t.ah)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},603905:(e,r,n)=>{n.d(r,{ah:()=>c});var i=n(667294);function t(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);r&&(i=i.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){t(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,i,t=function(e,r){if(null==e)return{};var n,i,t={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],r.indexOf(n)>=0||(t[n]=e[n]);return t}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var l=i.createContext({}),c=function(e){var r=i.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},d={inlineCode:"code",wrapper:function(e){var r=e.children;return i.createElement(i.Fragment,{},r)}},h=i.forwardRef((function(e,r){var n=e.components,t=e.mdxType,o=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),p=c(n),b=t,g=p["".concat(l,".").concat(b)]||p[b]||d[b]||o;return n?i.createElement(g,a(a({ref:r},h),{},{components:n})):i.createElement(g,a({ref:r},h))}));h.displayName="MDXCreateElement"},870360:(e,r,n)=>{n.d(r,{Z:()=>i});const i=n.p+"assets/images/MeiLi_Search_Gastby_Serve_01-75bce4e67148b813b68f423f0d8e3dd7.png"},820520:(e,r,n)=>{n.d(r,{Z:()=>i});const i=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-983e9af3d84f5fb9ebad02646e63767d.jpg"}}]);