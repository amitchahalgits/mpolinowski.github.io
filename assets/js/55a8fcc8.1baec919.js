"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[56311],{509248:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var t=r(785893),s=r(603905);const i={sidebar_position:8040,slug:"2023-06-13",title:"NGINX HTTP/2 Docker Ingress",authors:"mpolinowski",tags:["NGINX","Docker"]},o=void 0,c={id:"DevOps/NGINX/2023-06-13-nginx-docker-ingress/index",title:"NGINX HTTP/2 Docker Ingress",description:"Guangzhou, China",source:"@site/docs/DevOps/NGINX/2023-06-13-nginx-docker-ingress/index.md",sourceDirName:"DevOps/NGINX/2023-06-13-nginx-docker-ingress",slug:"/DevOps/NGINX/2023-06-13-nginx-docker-ingress/2023-06-13",permalink:"/docs/DevOps/NGINX/2023-06-13-nginx-docker-ingress/2023-06-13",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/NGINX/2023-06-13-nginx-docker-ingress/index.md",tags:[{label:"NGINX",permalink:"/docs/tags/nginx"},{label:"Docker",permalink:"/docs/tags/docker"}],version:"current",sidebarPosition:8040,frontMatter:{sidebar_position:8040,slug:"2023-06-13",title:"NGINX HTTP/2 Docker Ingress",authors:"mpolinowski",tags:["NGINX","Docker"]},sidebar:"tutorialSidebar",previous:{title:"NGINX",permalink:"/docs/category/nginx"},next:{title:"NGINX Websocket Proxy",permalink:"/docs/DevOps/NGINX/2022-12-08-nginx-websocket-proxy/2022-12-08"}},a={},l=[{value:"Setup",id:"setup",level:2},{value:"Networking",id:"networking",level:3},{value:"Container Network",id:"container-network",level:4}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.ah)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Guangzhou, China",src:r(469699).Z+"",width:"1500",height:"624"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#setup",children:"Setup"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#networking",children:"Networking"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#container-network",children:"Container Network"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["This article is an update to ",(0,t.jsx)(n.a,{href:"/docs/DevOps/NGINX/2021-02-22-nginx-docker-ingress/2021-02-22/",children:"NGINX Docker Ingress for your Gatsby Build"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/mpolinowski/nginx_docker_ingress",children:"Github Repository"})}),"\n",(0,t.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsxs)(n.p,{children:["Get the repository from Github and save it e.g. in ",(0,t.jsx)(n.code,{children:"/opt"})," - ",(0,t.jsx)(n.strong,{children:"Note"})," if you choose a different location you will have to adjust the ",(0,t.jsx)(n.code,{children:"docker run"})," commands below accordingly:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd /opt\r\ngit pull https://github.com/mpolinowski/nginx_docker_ingress.git\r\ncd /nginx_docker_ingress\n"})}),"\n",(0,t.jsx)(n.p,{children:"Check out the default configuration file that is included in the repository:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nano /conf.d/default.conf\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This contains 2 server locations - I am using the ports ",(0,t.jsx)(n.code,{children:"8080"})," and ",(0,t.jsx)(n.code,{children:"8081"})," here so that they don't interfere with your other applications (e.g. if you already have a web server running) - but feel free to change them to the default ports ",(0,t.jsx)(n.code,{children:"80"})," and ",(0,t.jsx)(n.code,{children:"443"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-conf",children:"server {\r\n    listen 8080;\r\n    listen [::]:8080;\r\n\r\n...\r\n\r\nserver {\r\n    listen 8081 ssl http2 default_server;\r\n    listen [::]:8081 ssl;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Both of them are configured to listen for traffic on ",(0,t.jsx)(n.code,{children:"localhost"})," - replace this address with your server domain. Or just leave it be for testing:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-conf",children:"server_name localhost;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The first server location expects ",(0,t.jsx)(n.strong,{children:"HTTP"})," traffic on port ",(0,t.jsx)(n.code,{children:"8080"})," and redirects this traffic to port ",(0,t.jsx)(n.code,{children:"8081"})," expecting there to be the ",(0,t.jsx)(n.strong,{children:"HTTP/2"})," endpoint:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-conf",children:"return 301 https://$server_name:8081$request_uri;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The repository contains a self-signed TLS certificate that you can use for testing. For production run Certbot to generate a CA cert and replace the ",(0,t.jsx)(n.code,{children:"ssl/self-signed.conf"})," include with it (",(0,t.jsx)(n.strong,{children:"Make sure"})," to mount the Let's Encrypt certificate into the NGINX container!):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-conf",children:"# ssl_certificate /opt/letsencrypt/live/my.domain.com/fullchain.pem;\r\n# ssl_certificate_key /opt/letsencrypt/live/my.domain.com/privkey.pem;\r\n\r\ninclude ssl/self-signed.conf; # Replace with the 2 lines above when using CA Cert\r\ninclude ssl/ssl-params.conf;\r\ninclude /etc/nginx/conf.d/header.conf;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Last but not least - define the location that should be proxied by NGINX. The default location is the NGINX welcome page:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-conf",children:"location / {\r\n    root   /usr/share/nginx/html;\r\n    index  index.html index.htm;\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Jump to running the container to do a test run - this path in ",(0,t.jsx)(n.code,{children:"/opt/nginx_docker_ingress"})," the command below has to point to the repository:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker run -p 8080:8080 -p 8081:8081 -v /opt/nginx_docker_ingress:/etc/nginx --name ingress nginx:1.25.0-alpine3.17\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Once the container is up you should be able to access ",(0,t.jsx)(n.code,{children:"http://localhost:8080"})," and be redirected to ",(0,t.jsx)(n.code,{children:"https://localhost:8081"})," to see the NGINX welcome page:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"NGINX HTTP/2 Docker Ingress",src:r(782397).Z+"",width:"1087",height:"262"})}),"\n",(0,t.jsx)(n.h3,{id:"networking",children:"Networking"}),"\n",(0,t.jsxs)(n.p,{children:["If your application is not running in a Docker container start the NGINX Ingress with ",(0,t.jsx)(n.code,{children:"--network host"})," so that it has access to your host network:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker run --rm --network host -v /opt/nginx_docker_ingress:/etc/nginx --name ingress nginx:1.25.0-alpine3.17\n"})}),"\n",(0,t.jsxs)(n.p,{children:["E.g. if you have an application running on ",(0,t.jsx)(n.code,{children:"http://localhost:3000"})," you can replace the NGINX location block with:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-conf",children:"location / {\r\n    proxy_pass http://127.0.0.1:3000/;\r\n  }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Restart the container and revisit ",(0,t.jsx)(n.code,{children:"http://localhost:8080"}),". Again, you will be redirected to ",(0,t.jsx)(n.code,{children:"https://localhost:8081"})," - but this time you will be seeing the web application beeing proxied by NGINX (If your browser still shows the NGINX welcome page do a hard refresh with ",(0,t.jsx)(n.code,{children:"CTRL"})," + ",(0,t.jsx)(n.code,{children:"F5"})," to bypass the browser cache)."]}),"\n",(0,t.jsx)(n.p,{children:"The problem here is that your app is now directly reachable over port 3000 and proxied on port 8081. Of course you can just firewall port 3000. But there is a better way."}),"\n",(0,t.jsx)(n.h4,{id:"container-network",children:"Container Network"}),"\n",(0,t.jsxs)(n.p,{children:["To have the NGINX container work as an ingress we first need to create a virtual network - I choose the name ",(0,t.jsx)(n.code,{children:"wikinet"})," as this network will host our company wiki:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker network create wikinet\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The wiki frontend container - the app that I want to proxy - is called ",(0,t.jsx)(n.code,{children:"wiki_en"}),". I can add this container to the virtual network with the following command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker network connect wikinet wiki_en\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let\u2019s see if the container has been added:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker network inspect wikinet\n"})}),"\n",(0,t.jsx)(n.p,{children:"The output show us that our container has been added successfully:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'[\r\n  {\r\n    "Name": "wikinet",\r\n    "Id": "725dfcde3015d752f8d0c4bbfe2027d9a4cb1cb3c6cc9b4f4094fb33d5a1d6bc",\r\n    "Created": "2021-05-10T15:07:38.420998455+08:00",\r\n    "Scope": "local",\r\n    "Driver": "bridge",\r\n    "EnableIPv6": false,\r\n    "IPAM": {\r\n      "Driver": "default",\r\n      "Options": {},\r\n      "Config": [\r\n        {\r\n          "Subnet": "172.18.0.0/16",\r\n          "Gateway": "172.18.0.1"\r\n        }\r\n      ]\r\n    },\r\n    "Internal": false,\r\n    "Attachable": false,\r\n    "Ingress": false,\r\n    "ConfigFrom": {\r\n      "Network": ""\r\n    },\r\n    "ConfigOnly": false,\r\n    "Containers": {\r\n      "e903e22b56f21973ade9bab9aa58aa8994b0a2399eadff36a4801fbc26fb82d4": {\r\n        "Name": "wiki_en",\r\n        "EndpointID": "82090263f6853a6219989828ade375a4db5aa655561293bf5bce0d7dfeb4640a",\r\n        "MacAddress": "02:42:ac:12:00:02",\r\n        "IPv4Address": "172.18.0.2/16",\r\n        "IPv6Address": ""\r\n      }\r\n    },\r\n    "Options": {},\r\n    "Labels": {}\r\n  }\r\n]\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The next step is to add the container to my ingresses proxy pass. ",(0,t.jsx)(n.strong,{children:"Note"})," that we can now use the Docker DNS service to connect the container by it's name:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-conf",children:"location / {\r\n    proxy_pass http://wiki_en:3000/;\r\n  }\n"})}),"\n",(0,t.jsx)(n.p,{children:"And to restart the NGINX ingress into the same virtual network:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker run -d -p 8080:8080 -p 8081:8081 -v /opt/nginx_docker_ingress:/etc/nginx --network=wikinet --name nginx:1.25.0-alpine3.17\n"})}),"\n",(0,t.jsx)(n.p,{children:"The application is now locked inside the virtual network and the NGINX proxy works as an ingress directing traffic in."})]})}function h(e={}){const{wrapper:n}={...(0,s.ah)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>l});var t=r(667294);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,s=function(e,n){if(null==e)return{};var r,t,s={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var a=t.createContext({}),l=function(e){var n=t.useContext(a),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var r=e.components,s=e.mdxType,i=e.originalType,a=e.parentName,h=c(e,["components","mdxType","originalType","parentName"]),p=l(r),u=s,g=p["".concat(a,".").concat(u)]||p[u]||d[u]||i;return r?t.createElement(g,o(o({ref:n},h),{},{components:r})):t.createElement(g,o({ref:n},h))}));h.displayName="MDXCreateElement"},782397:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/NGINX_Docker_Ingress_01-47a886649f4d6d590bc13bd7cab3f6e6.png"},469699:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/photo-456tdsfggd_67gfh6dgdf4_d-526887f388d51eb7c6cdecdbf57889ba.jpg"}}]);