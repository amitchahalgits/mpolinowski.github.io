"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[37728],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>d});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},u=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),d=o,h=p["".concat(l,".").concat(d)]||p[d]||m[d]||a;return r?t.createElement(h,i(i({ref:n},u),{},{components:r})):t.createElement(h,i({ref:n},u))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},43569:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var t=r(87462),o=(r(67294),r(3905));const a={sidebar_position:6060,slug:"2022-07-24",title:"Mosquitto Broker Docker Cross-Compile",authors:"mpolinowski",tags:["IoT"]},i=void 0,s={unversionedId:"IoT-and-Machine-Learning/MQTT/2022-07-24-mosquitto-broker-cross-compilation/index",id:"IoT-and-Machine-Learning/MQTT/2022-07-24-mosquitto-broker-cross-compilation/index",title:"Mosquitto Broker Docker Cross-Compile",description:"Guangzhou, China",source:"@site/docs/IoT-and-Machine-Learning/MQTT/2022-07-24-mosquitto-broker-cross-compilation/index.md",sourceDirName:"IoT-and-Machine-Learning/MQTT/2022-07-24-mosquitto-broker-cross-compilation",slug:"/IoT-and-Machine-Learning/MQTT/2022-07-24-mosquitto-broker-cross-compilation/2022-07-24",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-07-24-mosquitto-broker-cross-compilation/2022-07-24",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/MQTT/2022-07-24-mosquitto-broker-cross-compilation/index.md",tags:[{label:"IoT",permalink:"/docs/tags/io-t"}],version:"current",sidebarPosition:6060,frontMatter:{sidebar_position:6060,slug:"2022-07-24",title:"Mosquitto Broker Docker Cross-Compile",authors:"mpolinowski",tags:["IoT"]},sidebar:"tutorialSidebar",previous:{title:"MQTT",permalink:"/docs/category/mqtt"},next:{title:"Mosquitto Broker from Source",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-07-23-mosquitto-broker-compilation/2022-07-23"}},l={},c=[{value:"Preparation",id:"preparation",level:2}],u={toc:c};function m(e){let{components:n,...a}=e;return(0,o.kt)("wrapper",(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Guangzhou, China",src:r(69978).Z,width:"2385",height:"962"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#preparation"},"Preparation"))),(0,o.kt)("p",null,"In the previous article I compiled the Mosquitto broker on Arch Linux and was able to get it to work with Websocket support. The target system - an INSTAR IP camera - uses an ARM processor which means that I have to find a way to cross-compile a binary that I can run on that system:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"uname -m\narmv7l\n")),(0,o.kt)("p",null,"There are several guides on how to install special compilers on your system. But I would prefer to run the compiler inside a docker container instead."),(0,o.kt)("h2",{id:"preparation"},"Preparation"),(0,o.kt)("p",null,"Download the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dockcross/dockcross"},"dockcross repository"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/dockcross/dockcross.git\ncd dockcross\n")),(0,o.kt)("p",null,"The repository offers containers for a variety of environments:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"android-arm                 linux-armv5-musl    linux-riscv32          README.md\nandroid-arm64               linux-armv5-uclibc  linux-riscv64          test\nandroid-x86                 linux-armv6         linux-s390x            tools\nandroid-x86_64              linux-armv6-lts     linux-x64              web-wasi\nbare-armv7emhf-nano_newlib  linux-armv6-musl    linux-x64-clang        web-wasm\ncommon                      linux-armv7         linux-x64-tinycc       windows-arm64\nCONTRIBUTING.md             linux-armv7a        linux-x86              windows-armv7\nDockerfile.in               linux-armv7a-lts    linux-x86_64-full      windows-shared-x64\nimagefiles                  linux-armv7l-musl   linux-xtensa-uclibc    windows-shared-x64-posix\nLICENSE                     linux-armv7-lts     Makefile               windows-shared-x86\nlinux-arm64                 linux-m68k-uclibc   manylinux2014-aarch64  windows-static-x64\nlinux-arm64-full            linux-mips          manylinux2014-x64      windows-static-x64-posix\nlinux-arm64-lts             linux-mipsel-lts    manylinux2014-x86      windows-static-x86\nlinux-arm64-musl            linux-mips-lts      manylinux_2_28-x64\nlinux-armv5                 linux-ppc64le       manylinux-common\n")),(0,o.kt)("p",null,"You are now supposed to just run the included scripts to download the correct docker image and run an compiler script inside the container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm dockcross/linux-armv7l-musl > ./dockcross-linux-armv7l-musl\nchmod +x ./dockcross-linux-armv7l-musl\n./dockcross-linux-armv7l-musl bash -c '$CC test/C/hello.c -o hello_arm'\n")),(0,o.kt)("p",null,"The test C code is a simple hello world:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  printf("Hello cross-compilation world!\\n");\n  return 0;\n}\n')),(0,o.kt)("p",null,"Running the command generates a binary inside the root dir that is ",(0,o.kt)("em",{parentName:"p"},"ARM'ed"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"file hello_arm\nhello_arm: ELF 32-bit LSB pie executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-musl-armhf.so.1, not stripped\n")))}m.isMDXComponent=!0},69978:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-4dda98a4eb3b498839926e0b6a5039aa.jpg"}}]);