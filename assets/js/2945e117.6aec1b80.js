"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[41559],{810660:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var s=r(785893),t=r(603905);const a={sidebar_position:6040,slug:"2021-09-14",title:"PostgreSQL 14 Database Refresher :: Working with JSON & Node.js",authors:"mpolinowski",tags:["SQL","Javascript"]},i=void 0,o={id:"DevOps/Provisioning/2021-09-14--postgres-refresher-node-json/index",title:"PostgreSQL 14 Database Refresher :: Working with JSON & Node.js",description:"Shenzhen, China",source:"@site/docs/DevOps/Provisioning/2021-09-14--postgres-refresher-node-json/index.md",sourceDirName:"DevOps/Provisioning/2021-09-14--postgres-refresher-node-json",slug:"/DevOps/Provisioning/2021-09-14--postgres-refresher-node-json/2021-09-14",permalink:"/docs/DevOps/Provisioning/2021-09-14--postgres-refresher-node-json/2021-09-14",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Provisioning/2021-09-14--postgres-refresher-node-json/index.md",tags:[{label:"SQL",permalink:"/docs/tags/sql"},{label:"Javascript",permalink:"/docs/tags/javascript"}],version:"current",sidebarPosition:6040,frontMatter:{sidebar_position:6040,slug:"2021-09-14",title:"PostgreSQL 14 Database Refresher :: Working with JSON & Node.js",authors:"mpolinowski",tags:["SQL","Javascript"]},sidebar:"tutorialSidebar",previous:{title:"Traefik v2 Webproxy Configuration - 1st Attempt",permalink:"/docs/DevOps/Provisioning/2021-10-12--traefik-configuration/2021-10-12"},next:{title:"PostgreSQL 14 Database Refresher :: Working with GraphQL",permalink:"/docs/DevOps/Provisioning/2021-09-14--postgres-refresher-hasura/2021-09-14"}},l={},d=[{value:"PostgreSQL Setup",id:"postgresql-setup",level:2},{value:"Docker",id:"docker",level:3},{value:"Create a Database",id:"create-a-database",level:3},{value:"Add a Table",id:"add-a-table",level:3},{value:"Add Data",id:"add-data",level:3},{value:"Node.js",id:"nodejs",level:2},{value:"Connecting to your Database",id:"connecting-to-your-database",level:3},{value:"Adding a Frontend",id:"adding-a-frontend",level:3},{value:"JSON Types",id:"json-types",level:2},{value:"Define a Column in a Table",id:"define-a-column-in-a-table",level:3},{value:"Insert JSON Data",id:"insert-json-data",level:3},{value:"Query Data",id:"query-data",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.ah)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Shenzhen, China",src:r(324195).Z+"",width:"1500",height:"392"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#postgresql-setup",children:"PostgreSQL Setup"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#docker",children:"Docker"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#create-a-database",children:"Create a Database"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#add-a-table",children:"Add a Table"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#add-data",children:"Add Data"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#nodejs",children:"Node.js"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#connecting-to-your-database",children:"Connecting to your Database"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#adding-a-frontend",children:"Adding a Frontend"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#json-types",children:"JSON Types"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#define-a-column-in-a-table",children:"Define a Column in a Table"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#insert-json-data",children:"Insert JSON Data"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#query-data",children:"Query Data"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#filter-results",children:"Filter Results"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#expand-data",children:"Expand Data"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#checking-containment",children:"Checking Containment"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#creating-indices",children:"Creating Indices"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"postgresql-setup",children:"PostgreSQL Setup"}),"\n",(0,s.jsx)(n.h3,{id:"docker",children:"Docker"}),"\n",(0,s.jsxs)(n.p,{children:["I am going to use the ",(0,s.jsx)(n.a,{href:"https://hub.docker.com/_/postgres",children:"official Docker image"})," to set up the SQL Database on a Debian Bullseye server:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker run -d --rm \\\r\n    --name postgres \\\r\n    -e POSTGRES_PASSWORD=secretpassword \\\r\n    -p 5432:5432 \\\r\n    postgres:14\n"})}),"\n",(0,s.jsx)(n.p,{children:"I can now access the container and connect to the Postgres CLI:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'docker exec -ti -u postgres postgres psql\r\n\r\npsql (14.0 (Debian 14.0-1.pgdg110+1))\r\nType "help" for help.\r\n\r\npostgres=#\n'})}),"\n",(0,s.jsx)(n.h3,{id:"create-a-database",children:"Create a Database"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE DATABASE books;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Switch to using the new ",(0,s.jsx)(n.code,{children:"books"})," table instead of the default ",(0,s.jsx)(n.code,{children:"postgres"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'\\connect books;\r\nYou are now connected to database "books" as user "postgres".\n'})}),"\n",(0,s.jsx)(n.h3,{id:"add-a-table",children:"Add a Table"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE the_expanse (\r\n  book_id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\r\n  title VARCHAR ( 25 ) UNIQUE NOT NULL,\r\n  isbn VARCHAR ( 25 ) UNIQUE NOT NULL,\r\n  year INT,\r\n  pages INT,\r\n  created_on TIMESTAMP NOT NULL\r\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"add-data",children:"Add Data"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"INSERT INTO the_expanse \r\n  (title, isbn, year, pages, created_on)\r\nVALUES \r\n  ('Leviathan Wakes', '978-0-316-12908-4', 2011, 592, NOW() - interval '1256 days'),\r\n  ('Calibans War', '978-1-841-49990-1', 2012, 595, NOW() - interval '993 days'),\r\n  ('Abaddons Gate', '978-0-316-12907-7', 2013, 539, NOW() - interval '765 days'),\r\n  ('Cibola Burn', '978-0-316-21762-0', 2014, 583, NOW() - interval '543 days'),\r\n  ('Nemesis Games', '978-0-316-21758-3', 2015, 544, NOW() - interval '267 days'),\r\n  ('Babylons Ashes', '978-0-316-33474-7', 2016, 608, NOW() - interval '189 days'),\r\n  ('Persepolis Rising', '978-0-316-33283-5', 2017, 560, NOW() - interval '122 days'),\r\n  ('Tiamats Wrath', '978-0-316-33286-6', 2019, 544, NOW() - interval '98 days'),\r\n  ('Leviathan Falls', '978-0-356-51039-2', 2021, 528, NOW() - interval '21 days');\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM the_expanse\r\n;\r\n book_id |       title       |       isbn        | year | pages |         created_on         \r\n---------+-------------------+-------------------+------+-------+----------------------------\r\n       1 | Leviathan Wakes   | 978-0-316-12908-4 | 2011 |   592 | 2018-05-03 08:42:05.608243\r\n       2 | Calibans War      | 978-1-841-49990-1 | 2012 |   595 | 2019-01-21 08:42:05.608243\r\n       3 | Abaddons Gate     | 978-0-316-12907-7 | 2013 |   539 | 2019-09-06 08:42:05.608243\r\n       4 | Cibola Burn       | 978-0-316-21762-0 | 2014 |   583 | 2020-04-15 08:42:05.608243\r\n       5 | Nemesis Games     | 978-0-316-21758-3 | 2015 |   544 | 2021-01-16 08:42:05.608243\r\n       6 | Babylons Ashes    | 978-0-316-33474-7 | 2016 |   608 | 2021-04-04 08:42:05.608243\r\n       7 | Persepolis Rising | 978-0-316-33283-5 | 2017 |   560 | 2021-06-10 08:42:05.608243\r\n       9 | Tiamats Wrath     | 978-0-316-33286-6 | 2019 |   544 | 2021-07-04 08:44:16.827956\r\n      10 | Leviathan Falls   | 978-0-356-51039-2 | 2021 |   528 | 2021-09-19 08:44:16.827956\r\n(9 rows)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"nodejs",children:"Node.js"}),"\n",(0,s.jsx)(n.h3,{id:"connecting-to-your-database",children:"Connecting to your Database"}),"\n",(0,s.jsxs)(n.p,{children:["Let's build a Node.js project that utilizes our Postgres database with help of the ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/pg",children:"node-postgres"})," package:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm init -y\r\nnpm install pg\r\ntouch server.js\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"server.js"}),", put this (change the ",(0,s.jsx)(n.code,{children:"pg"})," parameter according to your Postgres setup):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const pg = require('pg');\r\n\r\nconst pgURL = '192.168.2.111'\r\nconst pgPort = '5432'\r\nconst pgUser = 'postgres'\r\nconst pgPass = 'secretpassword'\r\n\r\n\r\nconst cs = 'postgresql://'+pgUser+':'+pgPass+'@'+pgURL+':'+pgPort+'/books';\r\n\r\nconst client = new pg.Client(cs);\r\n\r\nclient.connect();\r\nconst sql = 'SELECT * FROM the_expanse LIMIT $1';\r\nconst values = ['9'];\r\n\r\nclient.query(sql, values).then(res => {\r\n\r\n    const data = res.rows;\r\n\r\n    data.forEach(row => console.log(row));\r\n\r\n}).finally(() => {\r\n    client.end()\r\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"And run the script in Node:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"node server.js\r\n\r\n{\r\n  book_id: 1,\r\n  title: 'Leviathan Wakes',\r\n  isbn: '978-0-316-12908-4',\r\n  year: 2011,\r\n  pages: 592,\r\n  created_on: 2018-05-03T00:42:05.608Z\r\n}\r\n{\r\n  book_id: 2,\r\n  title: 'Calibans War',\r\n  isbn: '978-1-841-49990-1',\r\n  year: 2012,\r\n  pages: 595,\r\n  created_on: 2019-01-21T00:42:05.608Z\r\n}\r\n{\r\n  book_id: 3,\r\n  title: 'Abaddons Gate',\r\n  isbn: '978-0-316-12907-7',\r\n  year: 2013,\r\n  pages: 539,\r\n  created_on: 2019-09-06T00:42:05.608Z\r\n}\r\n{\r\n  book_id: 4,\r\n  title: 'Cibola Burn',\r\n  isbn: '978-0-316-21762-0',\r\n  year: 2014,\r\n  pages: 583,\r\n  created_on: 2020-04-15T00:42:05.608Z\r\n}\r\n{\r\n  book_id: 5,\r\n  title: 'Nemesis Games',\r\n  isbn: '978-0-316-21758-3',\r\n  year: 2015,\r\n  pages: 544,\r\n  created_on: 2021-01-16T00:42:05.608Z\r\n}\r\n{\r\n  book_id: 6,\r\n  title: 'Babylons Ashes',\r\n  isbn: '978-0-316-33474-7',\r\n  year: 2016,\r\n  pages: 608,\r\n  created_on: 2021-04-04T00:42:05.608Z\r\n}\r\n{\r\n  book_id: 7,\r\n  title: 'Persepolis Rising',\r\n  isbn: '978-0-316-33283-5',\r\n  year: 2017,\r\n  pages: 560,\r\n  created_on: 2021-06-10T00:42:05.608Z\r\n}\r\n{\r\n  book_id: 9,\r\n  title: 'Tiamats Wrath',\r\n  isbn: '978-0-316-33286-6',\r\n  year: 2019,\r\n  pages: 544,\r\n  created_on: 2021-07-04T00:44:16.827Z\r\n}\r\n{\r\n  book_id: 10,\r\n  title: 'Leviathan Falls',\r\n  isbn: '978-0-356-51039-2',\r\n  year: 2021,\r\n  pages: 528,\r\n  created_on: 2021-09-19T00:44:16.827Z\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"adding-a-frontend",children:"Adding a Frontend"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install express\r\nmkdir static\r\ntouch static/index.html server_express.js\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"static/index.html"})," put:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html lang="en">\r\n  <head>\r\n    <meta charset="UTF-8" />\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\r\n    <title>PostgreSQL Sample</title>\r\n  </head>\r\n  <body>\r\n    <input type="text" placeholder="Type 1 - 9" id="search" />\r\n    <button id="btn">Search</button>\r\n    <pre>\r\n        <code id="code"></code>\r\n    </pre>\r\n\r\n    <script>\r\n      const btn = document.getElementById("btn");\r\n      const code = document.getElementById("code");\r\n      const search = document.getElementById("search");\r\n\r\n      btn.addEventListener("click", async () => {\r\n        code.innerText = "loading";\r\n\r\n        const res = await fetch(\r\n          "/get?search=" + encodeURIComponent(search.value)\r\n        );\r\n        const json = await res.json();\r\n\r\n        code.innerText = "\\n" + JSON.stringify(json, null, 4);\r\n      });\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"server_express.js"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const express = require(\"express\");\r\nconst { Pool } = require(\"pg\");\r\n\r\nconst PORT = process.env.PORT || 8888;\r\n\r\nconst pgURL = '192.168.2.111'\r\nconst pgPort = '5432'\r\nconst pgUser = 'postgres'\r\nconst pgPass = 'secretpassword'\r\n\r\nconst pool = new Pool({\r\n  connectionString:\r\n    'postgresql://'+pgUser+':'+pgPass+'@'+pgURL+':'+pgPort+'/books',\r\n});\r\n\r\nasync function init() {\r\n  const app = express();\r\n\r\n  app.get(\"/get\", async (req, res) => {\r\n    const client = await pool.connect();\r\n    const [booksRes] = await Promise.all([\r\n      client.query(\r\n        // Never put user inputs directly into the SQL query\r\n        // `SELECT * FROM comments NATURAL LEFT JOIN rich_content WHERE board_id = ${req.query.search}`\r\n        // Always parametrize it so that the PG driver can clean it up to prevent SQL injections.\r\n        \"SELECT * FROM the_expanse LIMIT $1\",\r\n        [req.query.search]\r\n      )\r\n    ]);\r\n    res\r\n      .json({\r\n        status: \"ok\",\r\n        posts: booksRes.rows,\r\n      })\r\n      .end();\r\n    await client.end();\r\n  });\r\n\r\n  app.use(express.static(\"./static\"));\r\n  app.listen(PORT);\r\n\r\n  console.log(`running on http://localhost:${PORT}`);\r\n}\r\ninit();\n"})}),"\n",(0,s.jsx)(n.p,{children:"And run the app:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"node server_express.js\r\nrunning on http://localhost:8888\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Postgres in Nodejs",src:r(272713).Z+"",width:"930",height:"447"})}),"\n",(0,s.jsx)(n.h2,{id:"json-types",children:"JSON Types"}),"\n",(0,s.jsxs)(n.p,{children:["There are two ",(0,s.jsx)(n.a,{href:"https://www.postgresql.org/docs/9.4/datatype-json.html",children:"JSON data types"}),": json and ",(0,s.jsx)(n.code,{children:"jsonb"}),". They accept almost identical sets of values as input. The major practical difference is one of efficiency. The json data type stores an exact copy of the input text, which processing functions must reparse on each execution; while ",(0,s.jsx)(n.code,{children:"jsonb"})," data is stored in a decomposed binary format that makes it slightly slower to input due to added conversion overhead, but significantly faster to process, since no reparsing is needed. ",(0,s.jsx)(n.code,{children:"jsonb"})," also supports indexing, which can be a significant advantage."]}),"\n",(0,s.jsxs)(n.p,{children:["Because the json type stores an exact copy of the input text, it will preserve semantically-insignificant white space between tokens, as well as the order of keys within JSON objects. Also, if a JSON object within the value contains the same key more than once, all the key/value pairs are kept. (The processing functions consider the last value as the operative one.) By contrast, ",(0,s.jsx)(n.code,{children:"jsonb"})," does not preserve white space, does not preserve the order of object keys, and does not keep duplicate object keys. If duplicate keys are specified in the input, only the last value is kept."]}),"\n",(0,s.jsxs)(n.p,{children:["In general, most applications should prefer to store JSON data as ",(0,s.jsx)(n.code,{children:"jsonb"}),", unless there are quite specialized needs, such as legacy assumptions about ordering of object keys."]}),"\n",(0,s.jsx)(n.h3,{id:"define-a-column-in-a-table",children:"Define a Column in a Table"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE the_expanse_tv (\r\n  episode_id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\r\n  season_id INT NOT NULL,\r\n  content JSONB NOT NULL\r\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"insert-json-data",children:"Insert JSON Data"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'INSERT INTO the_expanse_tv\r\n  (season_id, content)\r\nVALUES\r\n  (1, \'{"title":"Dulcinea","imdb-rating":"7.7","air-date":"2015-11-23","abstract":"In the asteroid belt near Saturn, James Holden and the crew of the ice freighter Canterbury, on its way to Ceres Station, investigate a distress call from an unknown derelict ship, the Scopuli."}\'),\r\n  (1, \'{"title":"The Big Empty","imdb-rating":"7.7","air-date":"2015-12-15","abstract":"Holden and crew are trapped in a badly damaged shuttle. On Ceres, Miller uncovers clues about Julie Mao. On Earth, Chrisjen Avasarala questions a terrorist."}\'),\r\n  (1, \'{"title":"Remember the Cant","imdb-rating":"8.0","air-date":"2015-12-16","abstract":"While Avasarala plays a dangerous game of politics, Holden and his crew are forced to turn on one another while held captive by the Martian Navy."}\'),\r\n  (1, \'{"title":"CQB","imdb-rating":"8.7","air-date":"2015-12-16","abstract":"Holden and crew are caught in the middle of a desperate battle as mysterious war ships attack and board the Donnager. As Miller continues to investigate Julie Mao, his partner Havelock continues to go missing."}\'),\r\n  (1, \'{"title":"Back to the Butcher","imdb-rating":"7.8","air-date":"2016-01-05","abstract":"The crew has survived the loss of the Canterbury and the Donnager and are contacted by an unlikely ally. Miller, on Ceres, continues his investigation and his thoughts of a conspiracy grow."}\'),\r\n  (1, \'{"title":"Rock Bottom","imdb-rating":"8.0","air-date":"2016-01-12","abstract":"Holdens team makes an uneasy alliance with Fred Johnson while Miller fights for his life against Anderson Dawes thugs."}\'),\r\n  (1, \'{"title":"Windmills","imdb-rating":"7.9","air-date":"2016-01-19","abstract":"Holden and crew realize that they qre not alone on the Rocinante and find themselves up against a Martian Marine blockade. Millers dark night of the soul, believing all is lost, finds a new reason to keep going. Avasarala visits Holdens family in Montana."}\'),\r\n  (1, \'{"title":"Salvage","imdb-rating":"8.7","air-date":"2016-01-26","abstract":"A derelict vessel holds a potentially devastating secret. Holden and his crew cross paths with Miller on Eros. Avasarala receives bad news."}\'),\r\n  (1, \'{"title":"Critical Mass","imdb-rating":"8.7","air-date":"2016-02-02","abstract":"A flashback to Julies origin story reveals her trajectory. Holden and Miller finally meet and team up to get to the bottom of the strange emergency situation happening on Eros. As the true horror of the events on Eros is revealed, an ailing Holden and Miller must overcome incredible odds if they hope to live to fight another day. Part 1 of 2"}\'),\r\n  (1, \'{"title":"Leviathan Wakes","imdb-rating":"8.7","air-date":"2016-02-02","abstract":"A flashback to Julies origin story reveals her trajectory. Holden and Miller finally meet and team up to get to the bottom of the strange emergency situation happening on Eros. As the true horror of the events on Eros is revealed, an ailing Holden and Miller must overcome incredible odds if they hope to live to fight another day. Part 2 of 2"}\');\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select column_name, data_type from information_schema.columns where table_name = 'the_expanse_tv';\r\n\r\n column_name | data_type \r\n-------------+-----------\r\n episode_id  | integer\r\n season_id   | integer\r\n content     | jsonb\r\n(3 rows)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"query-data",children:"Query Data"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'SELECT content->\'title\' AS title FROM the_expanse_tv;\r\n\r\n         title         \r\n-----------------------\r\n "Dulcinea"\r\n "The Big Empty"\r\n "Remember the Cant"\r\n "CQB"\r\n "Back to the Butcher"\r\n "Rock Bottom"\r\n "Windmills"\r\n "Salvage"\r\n "Critical Mass"\r\n "Leviathan Wakes"\r\n(10 rows)\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.ah)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>d});var s=r(667294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,s)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,s,t=function(e,n){if(null==e)return{};var r,s,t={},a=Object.keys(e);for(s=0;s<a.length;s++)r=a[s],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)r=a[s],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var l=s.createContext({}),d=function(e){var n=s.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},h=s.forwardRef((function(e,n){var r=e.components,t=e.mdxType,a=e.originalType,l=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),p=d(r),g=t,u=p["".concat(l,".").concat(g)]||p[g]||c[g]||a;return r?s.createElement(u,i(i({ref:n},h),{},{components:r})):s.createElement(u,i({ref:n},h))}));h.displayName="MDXCreateElement"},272713:(e,n,r)=>{r.d(n,{Z:()=>s});const s=r.p+"assets/images/Postgres_Nodejs_01-f075095af45e56745e32e28d7053d3f9.png"},324195:(e,n,r)=>{r.d(n,{Z:()=>s});const s=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-71f2b7209f58ecc12682d4095513b1b8.jpg"}}]);