"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[31560],{315442:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>t,default:()=>d,frontMatter:()=>c,metadata:()=>a,toc:()=>h});var r=n(474848),i=n(28453);const c={sidebar_position:8010,slug:"2021-08-09",title:"Hashicorp Consul Refresher - Services",authors:"mpolinowski",tags:["Consul","Linux"]},t=void 0,a={id:"DevOps/Hashicorp/2021-08-09--hashicorp-consul-services/index",title:"Hashicorp Consul Refresher - Services",description:"Guangzhou, China",source:"@site/docs/DevOps/Hashicorp/2021-08-09--hashicorp-consul-services/index.md",sourceDirName:"DevOps/Hashicorp/2021-08-09--hashicorp-consul-services",slug:"/DevOps/Hashicorp/2021-08-09--hashicorp-consul-services/2021-08-09",permalink:"/docs/DevOps/Hashicorp/2021-08-09--hashicorp-consul-services/2021-08-09",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2021-08-09--hashicorp-consul-services/index.md",tags:[{label:"Consul",permalink:"/docs/tags/consul"},{label:"Linux",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:8010,frontMatter:{sidebar_position:8010,slug:"2021-08-09",title:"Hashicorp Consul Refresher - Services",authors:"mpolinowski",tags:["Consul","Linux"]},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Consul Refresher - Key Value Store",permalink:"/docs/DevOps/Hashicorp/2021-08-10--hashicorp-consul-key-value-store/2021-08-10"},next:{title:"Nomad Access Control Lists",permalink:"/docs/DevOps/Hashicorp/2021-08-08--hashicorp-nomad-access-control-lists/2021-08-08"}},l={},h=[{value:"Registering a Service",id:"registering-a-service",level:2},{value:"Service Definition",id:"service-definition",level:3},{value:"Health Checks",id:"health-checks",level:2},{value:"Types of Health Checks",id:"types-of-health-checks",level:3},{value:"Check Service Status",id:"check-service-status",level:2},{value:"DNS Request",id:"dns-request",level:3},{value:"Consul REST API",id:"consul-rest-api",level:3},{value:"Prepared Queries",id:"prepared-queries",level:4}];function o(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"Guangzhou, China",src:n(840528).A+"",width:"1500",height:"464"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#registering-a-service",children:"Registering a Service"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#service-definition",children:"Service Definition"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#health-checks",children:"Health Checks"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#types-of-health-checks",children:"Types of Health Checks"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#check-service-status",children:"Check Service Status"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#dns-request",children:"DNS Request"})}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#consul-rest-api",children:"Consul REST API"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#prepared-queries",children:"Prepared Queries"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"registering-a-service",children:"Registering a Service"}),"\n",(0,r.jsxs)(s.p,{children:["Services can registered with Consul as part of the ",(0,r.jsx)(s.a,{href:"/docs/DevOps/Hashicorp/2021-08-05--hashicorp-consul-service-discovery/2021-08-05",children:"Nomand Job"})," that sets them up. But you can also directly register a service with Consul using the REST API ",(0,r.jsx)(s.code,{children:"consul services register"})," with inline parameters or sending a separate service file using the ",(0,r.jsx)(s.code,{children:"-config-file"})," or ",(0,r.jsx)(s.code,{children:"-config-dir"})," flag. It can also be placed inside the Consul agent configuration directory and be read on start-up."]}),"\n",(0,r.jsx)(s.h3,{id:"service-definition",children:"Service Definition"}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"https://www.consul.io/docs/discovery/services",children:"service definition"})," contains a set of parameters that specify various aspects of the service, including how it is discovered by other services in the network:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"id"}),": Name of the node. If not specified, the value of the name field will be used."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"name"}),": Name of the service - use valid DNS labels for service definition names for compatibility with external DNSs."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"tags"}),": List of string values that can be used to add service-level labels. Use valid DNS labels for service definition IDs"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"address"}),": \tString value that specifies a service-specific IP address or hostname. If no value is specified, the IP address of the agent node is used by default."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"port"}),": Integer value that specifies a service-specific port number."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"checks"}),": Array of objects that define ",(0,r.jsx)(s.a,{href:"https://www.consul.io/docs/discovery/services#health-checks",children:"health checks"})," for the service."]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"nano ~/consul_services/test_service.hcl\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\r\n  "service": {\r\n    "id": "webservice01",\r\n    "name": "webservice-test",\r\n    "tags": ["this", "is", "a", "test"],\r\n    "address": "192.168.2.111",\r\n    "port": 9200\r\n  }\r\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["This definition registers a web service running on port ",(0,r.jsx)(s.code,{children:"9200"}),". I am going to create this with Node.js module ",(0,r.jsx)(s.code,{children:"npm install httpster"})," that allows me to quickly spin up a web service from my command line ",(0,r.jsx)(s.strong,{children:"on the minion server 192.168.2.111"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"httpster -p 9200\n"})}),"\n",(0,r.jsx)(s.p,{children:"Back on my Consul master I can now register this service with Consul:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"consul services register ~/consul_services/test_service.hcl\n"})}),"\n",(0,r.jsx)(s.p,{children:"The new service immediately shows up as healthy in the nomad UI:"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"Hashicorp Consul Services",src:n(161339).A+"",width:"995",height:"262"})}),"\n",(0,r.jsx)(s.h2,{id:"health-checks",children:"Health Checks"}),"\n",(0,r.jsx)(s.p,{children:'But the consul is not yet keeping a eye on the service - even if you shut down the web server it will remain "green" since we don\'t have a health check configured:'}),"\n",(0,r.jsx)(s.h3,{id:"types-of-health-checks",children:"Types of Health Checks"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Application Level"}),": Check if the service is still running."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"System Level"}),": Check if the Node and Port is available."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["There are several different ",(0,r.jsx)(s.a,{href:"https://www.consul.io/docs/discovery/checks",children:"kinds of checks"}),":"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Scripts"}),": These checks depend on invoking an external application that performs the health check, exits with an appropriate exit code, and potentially generates some output. A script is paired with an invocation interval"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"HTTP Status"}),": These checks curl HTTP GET request to the specified URL, waiting the specified interval amount of time between requests. The status of the service depends on the HTTP response code: any ",(0,r.jsx)(s.code,{children:"2xx"})," code is considered passing, a ",(0,r.jsx)(s.code,{children:"429"})," ",(0,r.jsx)(s.strong,{children:"Too ManyRequests"})," is a warning, and anything else is a failure."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"TCP Connection"}),': These checks make a TCP connection attempt to the specified IP/hostname and port, waiting interval amount of time between attempts. If no hostname is specified, it defaults to "localhost".']}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Docker"}),": These checks depend on invoking an external application which is packaged within a Docker Container. The application is triggered within the running container via the Docker Exec API."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"So let's deregister the service and actually add a check to the service declaration that periodically checks if the web service is still online:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"consul services deregister ~/consul_services/test_service.hcl\r\nnano ~/consul_services/test_service.hcl\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\r\n  "service": {\r\n    "id": "webservice01",\r\n    "name": "webservice-test",\r\n    "tags": ["this", "is", "a", "test"],\r\n    "address": "192.168.2.111",\r\n    "port": 9200,\r\n    "check": {\r\n      "id": "web",\r\n      "name": "check web service on port 9200",\r\n      "tcp": "192.168.2.111:9200",\r\n      "interval": "10s",\r\n      "timeout": "1s"\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:"And run the service again:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"consul services register ~/consul_services/test_service.hcl\n"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"Hashicorp Consul Services",src:n(383008).A+"",width:"999",height:"747"})}),"\n",(0,r.jsxs)(s.p,{children:["And this time we have both the verification that the Consul agent on our minion is running and the TCP Health Check telling us the web service is online. The latter will alert us within ",(0,r.jsx)(s.code,{children:"10s"})," when we shut down our web service:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"dial tcp 192.168.2.111:9200: connect: connection refused\n"})}),"\n",(0,r.jsx)(s.h2,{id:"check-service-status",children:"Check Service Status"}),"\n",(0,r.jsx)(s.h3,{id:"dns-request",children:"DNS Request"}),"\n",(0,r.jsxs)(s.p,{children:["Consul provides an DNS Service that allows you to query for services, e.g. our ",(0,r.jsx)(s.code,{children:"webservice-test.service.consul"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"dig @192.168.2.110 -p 8600 webservice-test.service.consul\r\n\r\n; <<>> DiG 9.11.26-RedHat-9.11.26-4.el8_4 <<>> @192.168.2.110 -p 8600 webservice-test.service.consul\r\n\r\n;; ANSWER SECTION:\r\nwebservice-test.service.consul. 0 IN    A       192.168.2.111\n"})}),"\n",(0,r.jsxs)(s.p,{children:["The response tells us that there was one server found on IP ",(0,r.jsx)(s.code,{children:"192.168.2.111"})," that provides the service ",(0,r.jsx)(s.code,{children:"webservice-test"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"consul-rest-api",children:"Consul REST API"}),"\n",(0,r.jsx)(s.p,{children:"Alternatively, you can send a GET request to the Consul API:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:'curl --request GET http://192.168.2.110:8500/v1/catalog/service/webservice-test\r\n\r\n[{"ID":"d561f8d4-9606-8c9c-40d4-a5350857801e","Node":"consul-master","Address":"192.168.2.110","Datacenter":"instaryun","TaggedAddresses":{"lan":"192.168.2.110","lan_ipv4":"192.168.2.110","wan":"192.168.2.110","wan_ipv4":"192.168.2.110"},"NodeMeta":{"consul-network-segment":""},"ServiceKind":"","ServiceID":"webservice01","ServiceName":"webservice-test","ServiceTags":["this","is","a","test"],"ServiceAddress":"192.168.2.111","ServiceTaggedAddresses":{"lan_ipv4":{"Address":"192.168.2.111","Port":9200},"wan_ipv4":{"Address":"192.168.2.111","Port":9200}},"ServiceWeights":{"Passing":1,"Warning":1},"ServiceMeta":{},"ServicePort":9200,"ServiceSocketPath":"","ServiceEnableTagOverride":false,"ServiceProxy":{"Mode":"","MeshGateway":{},"Expose":{}},"ServiceConnect":{},"CreateIndex":10150,"ModifyIndex":10150}]%\n'})}),"\n",(0,r.jsx)(s.h4,{id:"prepared-queries",children:"Prepared Queries"}),"\n",(0,r.jsxs)(s.p,{children:["You can also write common queries down into files as ",(0,r.jsx)(s.a,{href:"https://www.consul.io/api-docs/query",children:"Prepared Queries"})," and run them from there - ",(0,r.jsx)(s.code,{children:"nano ~/consul_services/prepared-query.hcl"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\r\n  "Name": "thisisatest",\r\n  "Service": {\r\n    "Service": "webservice-test",\r\n    "Tags": ["this","is","a","test"]\r\n  }\r\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:"You can register this query through the Consul REST API:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:'curl --request POST --data @prepared-query.hcl http://192.168.2.110:8500/v1/query\r\n\r\n{"ID":"d3b2063d-df45-7649-c0ec-e3d671deced3"}% \n'})}),"\n",(0,r.jsxs)(s.p,{children:["And the query was saved under the ",(0,r.jsx)(s.strong,{children:"ID"})," ",(0,r.jsx)(s.code,{children:"d3b2063d-df45-7649-c0ec-e3d671deced3"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'curl --request GET http://192.168.2.110:8500/v1/query/d3b2063d-df45-7649-c0ec-e3d671deced3 | jq\r\n\r\n[\r\n  {\r\n    "ID": "d3b2063d-df45-7649-c0ec-e3d671deced3",\r\n    "Name": "thisisatest",\r\n    "Session": "",\r\n    "Token": "",\r\n    "Template": {\r\n      "Type": "",\r\n      "Regexp": "",\r\n      "RemoveEmptyTags": false\r\n    },\r\n    "Service": {\r\n      "Service": "webservice-test",\r\n      "Failover": {\r\n        "NearestN": 0,\r\n        "Datacenters": null\r\n      },\r\n      "OnlyPassing": false,\r\n      "IgnoreCheckIDs": null,\r\n      "Near": "",\r\n      "Tags": [\r\n        "this",\r\n        "is",\r\n        "a",\r\n        "test"\r\n      ],\r\n      "NodeMeta": null,\r\n      "ServiceMeta": null,\r\n      "Connect": false\r\n    },\r\n    "DNS": {\r\n      "TTL": ""\r\n    },\r\n    "CreateIndex": 10622,\r\n    "ModifyIndex": 10622\r\n  }\r\n]\n'})}),"\n",(0,r.jsxs)(s.p,{children:["We can now use this query, under it's registered name ",(0,r.jsx)(s.code,{children:"thisisatest"}),", in our applications to find an address where the service ",(0,r.jsx)(s.code,{children:"webservice-test"})," is hosted:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"dig @192.168.2.110 -p 8600 thisisatest.query.consul\r\n\r\n;; ANSWER SECTION:\r\nthisisatest.query.consul. 0     IN      A       192.168.2.111\n"})}),"\n",(0,r.jsxs)(s.p,{children:["And the server that is a best match is ",(0,r.jsx)(s.code,{children:"192.168.2.111"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"To update the query - e.g. if we want our application to start using the version 2 of our webservice - we just have to update the prepared query file:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\r\n  "Name": "thisisatest",\r\n  "Service": {\r\n    "Service": "webservice-test",\r\n    "Tags": ["this","is","a","test", "v2"]\r\n  }\r\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:"and then use PUT to upload the update to Consul:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"curl --request PUT --data @prepared-query.hcl http://192.168.2.110:8500/v1/query/d3b2063d-df45-7649-c0ec-e3d671deced3\n"})})]})}function d(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},161339:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/Hashicorp_Consul_Services_01-0c3cd6732325b63b8df4b3c2709bbc94.png"},383008:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/Hashicorp_Consul_Services_02-d221e0d037fd15fb81ff283507dd718e.png"},840528:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-93003c28ff7bc4ddb754375440d588dd.jpg"},28453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>a});var r=n(296540);const i={},c=r.createContext(i);function t(e){const s=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(c.Provider,{value:s},e.children)}}}]);