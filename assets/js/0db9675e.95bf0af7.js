"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[95603],{121810:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var t=r(785893),a=r(603905);const s={sidebar_position:9090,slug:"2020-08-16",title:"Nomad Server Cluster",authors:"mpolinowski",tags:["LINUX","Nomad"]},i=void 0,o={id:"DevOps/Hashicorp/2020-08-16--nomad-cluster/index",title:"Nomad Server Cluster",description:"TST, Hong Kong",source:"@site/docs/DevOps/Hashicorp/2020-08-16--nomad-cluster/index.md",sourceDirName:"DevOps/Hashicorp/2020-08-16--nomad-cluster",slug:"/DevOps/Hashicorp/2020-08-16--nomad-cluster/2020-08-16",permalink:"/docs/DevOps/Hashicorp/2020-08-16--nomad-cluster/2020-08-16",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2020-08-16--nomad-cluster/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Nomad",permalink:"/docs/tags/nomad"}],version:"current",sidebarPosition:9090,frontMatter:{sidebar_position:9090,slug:"2020-08-16",title:"Nomad Server Cluster",authors:"mpolinowski",tags:["LINUX","Nomad"]},sidebar:"tutorialSidebar",previous:{title:"Installing HashiCorp Consul on Ubuntu Server 20.04",permalink:"/docs/DevOps/Hashicorp/2020-08-17--installing-consul-ubuntu/2020-08-17"},next:{title:"Installing HashiCorp Nomad on Ubuntu Server 20.04",permalink:"/docs/DevOps/Hashicorp/2020-08-15--installing-nomad-ubuntu/2020-08-15"}},l={},c=[{value:"Setting up the Server",id:"setting-up-the-server",level:2},{value:"Setting up a Client",id:"setting-up-a-client",level:2},{value:"Submit a Job",id:"submit-a-job",level:2},{value:"Multiple Instances",id:"multiple-instances",level:3},{value:"WebUI",id:"webui",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.ah)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"TST, Hong Kong",src:r(935221).Z+"",width:"1500",height:"464"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#setting-up-the-server",children:"Setting up the Server"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#setting-up-a-client",children:"Setting up a Client"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#submit-a-job",children:"Submit a Job"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#multiple-instances",children:"Multiple Instances"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#webui",children:"WebUI"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Extended your single-node setup to a scalable, production-grade cluster with multiple nodes."}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-the-server",children:"Setting up the Server"}),"\n",(0,t.jsxs)(n.p,{children:["The first step is to ",(0,t.jsx)(n.a,{href:"https://github.com/hashicorp/nomad/tree/master/demo/vagrant",children:"create the configuration file for the server"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir ~/nomad\r\ncd ~/nomad\r\nnano server.hcl\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Paste the following into a file called ",(0,t.jsx)(n.code,{children:"server.hcl"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cfg",children:'# Increase log verbosity\r\nlog_level = "DEBUG"\r\n\r\n# Setup data dir\r\ndata_dir = "/tmp/server1"\r\n\r\n# Give the agent a unique name. Defaults to hostname\r\nname = "server1"\r\n\r\n# Enable the server\r\nserver {\r\n  enabled = true\r\n\r\n  # Self-elect, should be 3 or 5 for production\r\n  bootstrap_expect = 1\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This will start an agent in server only mode and have it elected as a leader. The major change that should be made for production is to run more than one server, and to change the corresponding ",(0,t.jsx)(n.code,{children:"bootstrap_expect"})," value. Once the file is created, start the agent in a new tab:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nomad agent -config server.hcl\n"})}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-a-client",children:"Setting up a Client"}),"\n",(0,t.jsxs)(n.p,{children:["Similar to the server, you must first ",(0,t.jsx)(n.a,{href:"https://github.com/hashicorp/nomad/tree/master/demo/vagrant",children:"configure the clients"})," by pasting the following into ",(0,t.jsx)(n.code,{children:"~/nomad/client1.hcl"})," on your ",(0,t.jsx)(n.strong,{children:"Client Server"})," (if your Client and Master are on the same server change the server address to ",(0,t.jsx)(n.code,{children:"127.0.0.1"}),"):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Increase log verbosity\r\nlog_level = "DEBUG"\r\n\r\n# Setup data dir\r\ndata_dir = "/tmp/client1"\r\n\r\n# Give the agent a unique name. Defaults to hostname\r\nname = "client1"\r\n\r\n# Enable the client\r\nclient {\r\n  enabled = true\r\n\r\n  # For demo assume we are talking to server1 - in my case this is IP 192.168.2.110.\r\n  #  For production, this should be like "nomad.service.consul:4647" and a system\r\n  # like Consul used for service discovery.\r\n  servers = ["192.168.2.110"]\r\n}\r\n\r\n# Modify our port to avoid a collision with server1\r\nports {\r\n  http = 5656\r\n}\r\n\r\n# Because we will potentially have two clients talking to the same\r\n# Docker daemon, we have to disable the dangling container cleanup,\r\n# otherwise they will stop each other\'s work thinking it was orphaned.\r\nplugin "docker" {\r\n  config {\r\n    gc {\r\n      dangling_containers {\r\n        enabled = false\r\n      }\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now create the data directory and start the Nomad agent:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir /tmp/client1\r\nnomad agent -config client1.hcl\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Back on the ",(0,t.jsx)(n.strong,{children:"Master Server"})," you can now check if the Client was able to connect:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nomad node status\r\nID        DC   Name     Class   Drain  Eligibility  Status\r\ndfa0023b  dc1  client1  <none>  false  eligible     ready\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Your Client was added with the Client ID ",(0,t.jsx)(n.code,{children:"dfa0023b"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"submit-a-job",children:"Submit a Job"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Because the sample job contains a Consul health check, Nomad\u2019s deployment watcher will wait for the check to pass by default. This will cause your deployment to stall after the first allocation updates. Resolve this by adding the following attribute inside of the update stanza:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'nano ~/nomad/example.nomad\r\nhealth_check = "task_states"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Use the job run command to submit the job:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'nomad job run example.nomad\r\n  ==> Monitoring evaluation "0cd401ff"\r\n      Evaluation triggered by job "example"\r\n      Evaluation within deployment: "fdc580b0"\r\n      Allocation "74f0acf4" created: node "dfa0023b", group "cache"\r\n      Evaluation status changed: "pending" -> "complete"\r\n  ==> Evaluation "0cd401ff" finished with status "complete"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can see that the Master allocated the deployment onto the Client server with the ID ",(0,t.jsx)(n.code,{children:"dfa0023b"}),". To stop the job run:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nomad job stop example\n"})}),"\n",(0,t.jsx)(n.h3,{id:"multiple-instances",children:"Multiple Instances"}),"\n",(0,t.jsxs)(n.p,{children:["We can now edit the ",(0,t.jsx)(n.code,{children:"example.nomad"})," file to start more than one instance of ",(0,t.jsx)(n.code,{children:"redis"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'group "cache" {\r\n    # The "count" parameter specifies the number of the task groups that should\r\n    # be running under this group. This value must be non-negative and defaults\r\n    # to 1.\r\n    count = 3\r\n\r\n    ...\r\n}\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["You can verify the modified file with ",(0,t.jsx)(n.code,{children:"nomad job plan example.nomad"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To handle this extra load we will create another Client - this time on the same PC that runs the Master Server (I only have those 2 at the moment \xaf\\",(0,t.jsx)(n.em,{children:"(\u30c4)"}),"/\xaf):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nano ~/nomad/client2.hcl\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Increase log verbosity\r\nlog_level = "DEBUG"\r\n\r\n# Setup data dir\r\ndata_dir = "/tmp/client2"\r\n\r\n# Give the agent a unique name. Defaults to hostname\r\nname = "client2"\r\n\r\n# Enable the client\r\nclient {\r\n  enabled = true\r\n  servers = ["127.0.0.1"]\r\n}\r\n\r\n# Modify our port to avoid a collision with server1\r\nports {\r\n  http = 5657\r\n}\r\n\r\n# Because we will potentially have two clients talking to the same\r\n# Docker daemon, we have to disable the dangling container cleanup,\r\n# otherwise they will stop each other\'s work thinking it was orphaned.\r\nplugin "docker" {\r\n  config {\r\n    gc {\r\n      dangling_containers {\r\n        enabled = false\r\n      }\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now create the data directory and start the Nomad agent:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir /tmp/client2\r\nnomad agent -config client2.hcl\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can now check if the second Client was able to connect:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nomad node status\r\n\r\nID        DC   Name     Class   Drain  Eligibility  Status\r\nf5893fd2  dc1  client1  <none>  false  eligible     ready\r\n849470a4  dc1  client2  <none>  false  eligible     ready\n"})}),"\n",(0,t.jsx)(n.p,{children:"Use the job run command to submit the job:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'nomad job run example.nomad\r\n\r\n==> Monitoring evaluation "b13a03df"\r\n    Evaluation triggered by job "example"\r\n    Evaluation within deployment: "5ce135ac"\r\n    Allocation "2074bce6" created: node "849470a4", group "cache"\r\n    Allocation "da4c9a66" created: node "f5893fd2", group "cache"\r\n    Allocation "0bd967d0" created: node "f5893fd2", group "cache"\r\n    Evaluation status changed: "pending" -> "complete"\r\n==> Evaluation "b13a03df" finished with status "complete"\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can see that the Master allocated the deployment onto the both Client server."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nomad status example\r\n\r\nID            = example\r\nName          = example\r\nSubmit Date   = 2020-08-29T12:45:14Z\r\nType          = service\r\nPriority      = 50\r\nDatacenters   = dc1\r\nNamespace     = default\r\nStatus        = running\r\nPeriodic      = false\r\nParameterized = false\r\n\r\nSummary\r\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\r\ncache       0       0         3        0       0         0\r\n\r\nLatest Deployment\r\nID          = 9d27882a\r\nStatus      = failed\r\nDescription = Failed due to progress deadline\r\n\r\nDeployed\r\nTask Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\r\ncache       3        3       0        0          2020-08-29T12:55:14Z\r\n\r\nAllocations\r\nID        Node ID   Task Group  Version  Desired  Status    Created     Modified\r\nbe729abd  849470a4  cache       4        run      running   16m42s ago  13m42s ago\r\n5daea777  f5893fd2  cache       4        run      running   16m42s ago  13m42s ago\r\n88c1eeaa  f5893fd2  cache       4        run      running   16m42s ago  13m42s ago\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'nomad alloc status be729abd\r\n\r\nID                  = be729abd-865c-f70d-2557-0e364d066b81\r\nEval ID             = fd465084\r\nName                = example.cache[1]\r\nNode ID             = 849470a4\r\nNode Name           = client2\r\nJob ID              = example\r\nJob Version         = 4\r\nClient Status       = running\r\nClient Description  = Tasks are running\r\nDesired Status      = run\r\nDesired Description = <none>\r\nCreated             = 17m56s ago\r\nModified            = 14m56s ago\r\nDeployment ID       = 9d27882a\r\nDeployment Health   = unhealthy\r\n\r\nTask "redis" is "running"\r\nTask Resources\r\nCPU        Memory           Disk     Addresses\r\n4/500 MHz  952 KiB/256 MiB  300 MiB  db: 192.168.2.110:27149\r\n\r\nTask Events:\r\nStarted At     = 2020-08-29T12:46:47Z\r\nFinished At    = N/A\r\nTotal Restarts = 0\r\nLast Restart   = N/A\r\n\r\nRecent Events:\r\nTime                  Type             Description\r\n2020-08-29T12:48:14Z  Alloc Unhealthy  Task not running for min_healthy_time of 10s by deadline\r\n2020-08-29T12:46:47Z  Started          Task started by client\r\n2020-08-29T12:45:48Z  Driver           Docker image pull progress: Pulled 5/6 (24.59MiB/28.03MiB) layers: 0 waiting/1 pulling - est 121.5s remaining\r\n2020-08-29T12:45:14Z  Driver           Downloading image\r\n2020-08-29T12:45:14Z  Task Setup       Building Task Directory\r\n2020-08-29T12:45:14Z  Received         Task received by client\n'})}),"\n",(0,t.jsx)(n.h2,{id:"webui",children:"WebUI"}),"\n",(0,t.jsxs)(n.p,{children:["You can check out the Nomad UI on your Servers IP address and port 4646 e.g. ",(0,t.jsx)(n.code,{children:"http://192.168.2.110:4646/ui/jobs"}),":"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Nomad Cluster UI",src:r(117872).Z+"",width:"903",height:"499"})}),"\n",(0,t.jsxs)(n.p,{children:["You can use the ",(0,t.jsx)(n.strong,{children:"Stop"})," button to stop the deployment."]})]})}function h(e={}){const{wrapper:n}={...(0,a.ah)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>c});var t=r(667294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),u=c(r),p=a,m=u["".concat(l,".").concat(p)]||u[p]||d[p]||s;return r?t.createElement(m,i(i({ref:n},h),{},{components:r})):t.createElement(m,i({ref:n},h))}));h.displayName="MDXCreateElement"},117872:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/Nomad_Cluster_01-ee4d1f448e8fba734b38d660ae1db3c8.png"},935221:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-5a16d6b2b972d978c81f00ba048e2c6d.jpg"}}]);