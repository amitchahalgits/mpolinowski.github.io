"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[62119],{663786:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var t=n(474848),o=n(28453);const a={sidebar_position:9010,slug:"2020-08-30",title:"NGINX Docker Multihost",authors:"mpolinowski",tags:["LINUX","NGINX","Docker"]},i=void 0,s={id:"DevOps/NGINX/2020-08-30--nginx-docker-multihost/index",title:"NGINX Docker Multihost",description:"Victoria Harbour, Hong Kong",source:"@site/docs/DevOps/NGINX/2020-08-30--nginx-docker-multihost/index.md",sourceDirName:"DevOps/NGINX/2020-08-30--nginx-docker-multihost",slug:"/DevOps/NGINX/2020-08-30--nginx-docker-multihost/2020-08-30",permalink:"/docs/DevOps/NGINX/2020-08-30--nginx-docker-multihost/2020-08-30",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/NGINX/2020-08-30--nginx-docker-multihost/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"NGINX",permalink:"/docs/tags/nginx"},{label:"Docker",permalink:"/docs/tags/docker"}],version:"current",sidebarPosition:9010,frontMatter:{sidebar_position:9010,slug:"2020-08-30",title:"NGINX Docker Multihost",authors:"mpolinowski",tags:["LINUX","NGINX","Docker"]},sidebar:"tutorialSidebar",previous:{title:"NGINX Docker Ingress for your Gatsby Build",permalink:"/docs/DevOps/NGINX/2021-02-22-nginx-docker-ingress/2021-02-22"},next:{title:"NGINX Docker with Certbot",permalink:"/docs/DevOps/NGINX/2020-08-28--nginx-docker-certbot/2020-08-27"}},d={},c=[{value:"Frontend Container",id:"frontend-container",level:2},{value:"Container Network",id:"container-network",level:2},{value:"Configuring the Docker Ingress",id:"configuring-the-docker-ingress",level:2},{value:"Gatsby App",id:"gatsby-app",level:2}];function p(e){const r={a:"a",blockquote:"blockquote",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{alt:"Victoria Harbour, Hong Kong",src:n(145504).A+"",width:"1500",height:"509"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#frontend-container",children:"Frontend Container"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#container-network",children:"Container Network"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#configuring-the-docker-ingress",children:"Configuring the Docker Ingress"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#gatsby-app",children:"Gatsby App"})}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["I do have 3 frontend containers - running ",(0,t.jsx)(r.a,{href:"https://wiki.instar.com/",children:"node/express frontend applications in different languages"}),". Instead of running all of them on different domains I want to have them running on sub-domains:"]}),"\n",(0,t.jsx)(r.p,{children:"Current State:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"https://wiki.instar.com/\r\nhttps://wiki.instar.de/\r\nhttps://wiki.instar.fr/\n"})}),"\n",(0,t.jsx)(r.p,{children:"Wanted State:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"https://wiki.instar.com/en/\r\nhttps://wiki.instar.com/de/\r\nhttps://wiki.instar.com/fr/\n"})}),"\n",(0,t.jsx)(r.h2,{id:"frontend-container",children:"Frontend Container"}),"\n",(0,t.jsx)(r.p,{children:"Pull your frontend container:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"docker login -u me@email-address.com gitlab.example.com:34578\r\ndocker pull gitlab.example.com:34578/wiki/wiki-instar-en-docker:latest\r\ndocker pull gitlab.example.com:34578/wiki/wiki-instar-de-docker:latest\r\ndocker pull gitlab.example.com:34578/wiki/wiki-instar-fr-docker:latest\n"})}),"\n",(0,t.jsx)(r.p,{children:"And start them:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"docker run -d --name wiki-instar-en gitlab.example.com:34578/wiki/wiki-instar-en-docker:latest\r\ndocker run -d --name wiki-instar-de gitlab.example.com:34578/wiki/wiki-instar-de-docker:latest\r\ndocker run -d --name wiki-instar-fr gitlab.example.com:34578/wiki/wiki-instar-fr-docker:latest\n"})}),"\n",(0,t.jsx)(r.p,{children:"All apps provide their own express webserver that is hosting static page content on a unique port like 8081, 8082 and 8083. Since we did not forward this port the web applications are now trapped inside the docker network."}),"\n",(0,t.jsx)(r.h2,{id:"container-network",children:"Container Network"}),"\n",(0,t.jsx)(r.p,{children:"Now we have 3 containers running with no exposed ports to the client, but we need to get them to communicate with each other. In order to do that we need to be able to put them all under the same network. Let\u2019s create our network:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"docker network create wikinet\n"})}),"\n",(0,t.jsx)(r.p,{children:"Now add the container by their name:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"docker network connect wikinet wiki-instar-en\r\ndocker network connect wikinet wiki-instar-de\r\ndocker network connect wikinet wiki-instar-fr\n"})}),"\n",(0,t.jsx)(r.p,{children:"Let\u2019s see if they have been added:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"docker network inspect wikinet\n"})}),"\n",(0,t.jsx)(r.p,{children:"The output show us that all 3 apps have been added successfully:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'[\r\n  {\r\n    "Name": "wikinet",\r\n    "Id": "1c5dac2e9a7496340a316c1d65f9768ed475547af6c3b7a46662d5aaedad288a",\r\n    "Created": "2020-09-03T12:35:31.598865218Z",\r\n    "Scope": "local",\r\n    "Driver": "bridge",\r\n    "EnableIPv6": false,\r\n    "IPAM": {\r\n      "Driver": "default",\r\n      "Options": {},\r\n      "Config": [\r\n        {\r\n          "Subnet": "172.19.0.0/16",\r\n          "Gateway": "172.19.0.1"\r\n        }\r\n      ]\r\n    },\r\n    "Internal": false,\r\n    "Attachable": false,\r\n    "Ingress": false,\r\n    "ConfigFrom": {\r\n      "Network": ""\r\n    },\r\n    "ConfigOnly": false,\r\n    "Containers": {\r\n      "0114e569753277d3f9a6087515e5bec428cdc6088c312e112a8b34e04e08de43": {\r\n        "Name": "wiki-instar-fr",\r\n        "EndpointID": "befe819138c011efd0761e6cfe0daf10b70d05911034c61367b76aa3c8b6e561",\r\n        "MacAddress": "02:42:ac:13:00:04",\r\n        "IPv4Address": "172.19.0.4/16",\r\n        "IPv6Address": ""\r\n      },\r\n      "1e14d78240c8ff11e0cd18424fb05d7f35e95d8194dfc7b2e4eba83ecee6558e": {\r\n        "Name": "wiki-instar-en",\r\n        "EndpointID": "8d16f5fe96448d08f995c4f67c9947e25fe56b4edcae48ad9b8b2ac1995ef8a8",\r\n        "MacAddress": "02:42:ac:13:00:02",\r\n        "IPv4Address": "172.19.0.2/16",\r\n        "IPv6Address": ""\r\n      },\r\n      "cb68e1b721b4bd90b4176c6ffe67f87f0aa38f8bc8affeab15502abd7c708bd7": {\r\n        "Name": "wiki-instar-de",\r\n        "EndpointID": "75ba745de043af8224954593a24f1ce431f9b5cc0569aa8a8d6e0ee70e30c7c0",\r\n        "MacAddress": "02:42:ac:13:00:03",\r\n        "IPv4Address": "172.19.0.3/16",\r\n        "IPv6Address": ""\r\n      }\r\n    },\r\n    "Options": {},\r\n    "Labels": {}\r\n  }\r\n]\n'})}),"\n",(0,t.jsx)(r.p,{children:"Docker provides a DNS service to resolve IP address inside it's virtual networks. This means we should now be able to load the web content from one container by sending a wget or curl command from another. Let's try this by entering one of our containers:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"docker exec -ti wiki-instar-en /bin/bash\n"})}),"\n",(0,t.jsx)(r.p,{children:"Once we are in we can request the web content from another container:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"curl localhost:8081\r\ncurl wiki-instar-de:8082\r\ncurl wiki-instar-fr:8083\n"})}),"\n",(0,t.jsx)(r.h2,{id:"configuring-the-docker-ingress",children:"Configuring the Docker Ingress"}),"\n",(0,t.jsx)(r.p,{children:"I am going to use the NGINX reversed proxy to build an ingress to the virtual network. We could create the ingress by spawning a container from the default NGINX image and then editing the configuration file inside the container:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"docker run -p 80:80 --network=wikinet --name ingress nginx:stable-alpine\n"})}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["Depending on how you configure your cluster and Gatsby there might be some differences in how you have to configure NGINX to work as a proxy here. I just tried to use the following configuration in a different build and ran into some difficulties with changes I made in Gatsby. Please also check out the ",(0,t.jsx)(r.a,{href:"/docs/DevOps/NGINX/2021-02-22-nginx-docker-ingress/2021-02-22",children:"NGINX Docker Ingress"})," article if you have problems here as well!"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["But we can also create the configuration file on our host system and then mount it into the container ",(0,t.jsx)(r.code,{children:"/etc/nginx/conf.d/default.conf"})," to persist it. We can start by modifying the default config file that comes with NGINX:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cfg",children:"server {\r\n    listen       80;\r\n    listen  [::]:80;\r\n    server_name  localhost;\r\n\r\n    #charset koi8-r;\r\n    #access_log  /var/log/nginx/host.access.log  main;\r\n\r\n    location / {\r\n        root   /usr/share/nginx/html;\r\n        index  index.html index.htm;\r\n    }\r\n\r\n    #error_page  404              /404.html;\r\n\r\n    # redirect server error pages to the static page /50x.html\r\n    #\r\n    error_page   500 502 503 504  /50x.html;\r\n    location = /50x.html {\r\n        root   /usr/share/nginx/html;\r\n    }\r\n\r\n    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\r\n    #\r\n    #location ~ \\.php$ {\r\n    #    proxy_pass   http://127.0.0.1;\r\n    #}\r\n\r\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\r\n    #\r\n    #location ~ \\.php$ {\r\n    #    root           html;\r\n    #    fastcgi_pass   127.0.0.1:9000;\r\n    #    fastcgi_index  index.php;\r\n    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\r\n    #    include        fastcgi_params;\r\n    #}\r\n\r\n    # deny access to .htaccess files, if Apache's document root\r\n    # concurs with nginx's one\r\n    #\r\n    #location ~ /\\.ht {\r\n    #    deny  all;\r\n    #}\r\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Create a folder on your host system and create the ",(0,t.jsx)(r.code,{children:"default.conf"})," file:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"mkdir /opt/docker_ingress\r\nnano default.conf\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cfg",children:"server {\r\n    listen       80;\r\n    listen  [::]:80;\r\n    server_name  localhost;\r\n\r\n    location /en {\r\n        proxy_pass http://wiki-instar-en:7777/;\r\n    }\r\n\r\n    location /fr {\r\n        proxy_pass http://wiki-instar-fr:7778/;\r\n    }\r\n\r\n    location /de {\r\n         proxy_pass http://wiki-instar-de:7779/;\r\n    }\r\n\r\n    # redirect server error pages to the static page /50x.html\r\n    #\r\n    error_page   500 502 503 504  /50x.html;\r\n    location = /50x.html {\r\n        root   /usr/share/nginx/html;\r\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"We can now start the NGINX ingress with the configuration file:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"docker run -d -p 80:80 -p 443:443 -v /opt/nginx_docker_ingress:/etc/nginx --network=wikinet --name ingress nginx:alpine\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Verify that the ingress is running and that you can now finally access your apps from outside of the docker virtual network. You can test it by accessing the docker host IP address followed by the language prefix we defined in NGINX: ",(0,t.jsx)(r.code,{children:"/en"}),", ",(0,t.jsx)(r.code,{children:"/de"}),", ",(0,t.jsx)(r.code,{children:"/fr"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:["We can also add the following rewrite location block to automatically forward traffic that enters through the root URL to ",(0,t.jsx)(r.code,{children:"/en/"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cfg",children:"location / {\r\n    rewrite   ^/(.*)$  /en/$1  permanent;\r\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"We can now add some web proxy seasoning to optimize everything:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cfg",children:'server {\r\n    listen       80;\r\n    listen  [::]:80;\r\n    server_name  localhost;\r\n\r\n    charset koi8-r;\r\n\r\n    # Gzip Compression\r\n        gzip                                    on;\r\n        gzip_disable                            "MSIE [1-6]\\.(?!.*SV1)";\r\n        gzip_proxied                            no-cache no-store private expired;\r\n        gzip_buffers                            16 8k;\r\n        gzip_comp_level                         6;\r\n        gzip_types                              text/plain application/javascript application/x-javascript text/javascript text/xml text/css;\r\n        gzip_vary                               on;\r\n\r\n\r\n    location / {\r\n        rewrite   ^/(.*)$  /en/$1  permanent;\r\n    }\r\n\r\n    location /en/ {\r\n        proxy_set_header                        X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header                        X-NginX-Proxy true;\r\n        proxy_set_header                        X-Real-IP $remote_addr;\r\n        proxy_set_header                        X-Forwarded-Proto http;\r\n        proxy_hide_header                       X-Frame-Options;\r\n        proxy_set_header                        Accept-Encoding "";\r\n        proxy_http_version                      1.1;\r\n        proxy_set_header                        Upgrade $http_upgrade;\r\n        proxy_set_header                        Connection "upgrade";\r\n        proxy_set_header                        Host $host;\r\n        proxy_cache_bypass                      $http_upgrade;\r\n        proxy_max_temp_file_size                0;\r\n        proxy_redirect                          off;\r\n        proxy_read_timeout                      240s;\r\n        proxy_pass                              http://127.0.0.1:7777/en/;\r\n    }\r\n\r\n    location /fr {\r\n        proxy_set_header                        X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header                        Host $http_host;\r\n        proxy_set_header                        X-NginX-Proxy true;\r\n        proxy_hide_header                       X-Frame-Options;\r\n        proxy_http_version                      1.1;\r\n        proxy_set_header                        Upgrade $http_upgrade;\r\n        proxy_set_header                        Connection "upgrade";\r\n        proxy_max_temp_file_size                0;\r\n        proxy_redirect                          off;\r\n        proxy_read_timeout                      240s;\r\n        proxy_pass                              http://wiki-instar-fr:7778/;\r\n    }\r\n\r\n    location /de {\r\n        proxy_set_header                        X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header                        Host $http_host;\r\n        proxy_set_header                        X-NginX-Proxy true;\r\n        proxy_hide_header                       X-Frame-Options;\r\n        proxy_http_version                      1.1;\r\n        proxy_set_header                        Upgrade $http_upgrade;\r\n        proxy_set_header                        Connection "upgrade";\r\n        proxy_max_temp_file_size                0;\r\n        proxy_redirect                          off;\r\n        proxy_read_timeout                      240s;\r\n        proxy_pass                              http://wiki-instar-de:7779/;\r\n    }\r\n\r\n    # All static files should be cached forever.\r\n        location ~* \\.(jpg|png|ico)$ {\r\n        add_header                                  Cache-Control "public, max-age=31536000, immutable";\r\n        access_log                              off;\r\n        log_not_found                           off;\r\n        }\r\n\r\n    # JS, CSS and HTML files should never be cached.\r\n        location ~* \\.(css|js|html)$ {\r\n                add_header                      Cache-Control  "public, must-revalidate, proxy-revalidate, max-age=0";\r\n    }\r\n\r\n    # this prevents hidden files (beginning with a period) from being served\r\n    location ~ /\\. {\r\n        access_log                              off;\r\n        log_not_found                           off;\r\n        deny                                    all;\r\n    }\r\n\r\n    error_page  404              /404.html;\r\n\r\n    # redirect server error pages to the static page /50x.html\r\n    #\r\n    error_page   500 502 503 504  /50x.html;\r\n    location = /50x.html {\r\n        root   /usr/share/nginx/html;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"gatsby-app",children:"Gatsby App"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"docker run -d -p 80:80 -p 443:443 -v /opt/nginx_docker_ingress:/etc/nginx --network=wikinet --name nginx nginx:alpine\r\n\r\ndocker run -d --network host -v /opt/hapi-container-en/public:/wiki_en_ssr/public --name wiki_en wiki-instar-com\r\n\r\ndocker run -d --network host -v /opt/hapi-container-de/public:/wiki_de_ssr/public --name wiki_de wiki-instar-de\r\n\r\ndocker run -d --network host -v /opt/hapi-container-fr/public:/wiki_fr_ssr/public --name wiki_fr wiki-instar-fr\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cfg",children:'server {\r\n    listen       80;\r\n    listen  [::]:80;\r\n    server_name  localhost;\r\n\r\n    charset koi8-r;\r\n\r\n    # Gzip Compression\r\n        gzip                                    on;\r\n        gzip_disable                            "MSIE [1-6]\\.(?!.*SV1)";\r\n        gzip_proxied                            no-cache no-store private expired;\r\n        gzip_buffers                            16 8k;\r\n        gzip_comp_level                         6;\r\n        gzip_types                              text/plain application/javascript application/x-javascript text/javascript text/xml text/css;\r\n        gzip_vary                               on;\r\n\r\n\r\n    location / {\r\n        rewrite   ^/(.*)$  /en/$1  permanent;\r\n    }\r\n\r\n    location /en/ {\r\n        proxy_set_header                        X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header                        X-NginX-Proxy true;\r\n        proxy_set_header                        X-Real-IP $remote_addr;\r\n        proxy_set_header                        X-Forwarded-Proto http;\r\n        proxy_hide_header                       X-Frame-Options;\r\n        proxy_set_header                        Accept-Encoding "";\r\n        proxy_http_version                      1.1;\r\n        proxy_set_header                        Upgrade $http_upgrade;\r\n        proxy_set_header                        Connection "upgrade";\r\n        proxy_set_header                        Host $host;\r\n        proxy_cache_bypass                      $http_upgrade;\r\n        proxy_max_temp_file_size                0;\r\n        proxy_redirect                          off;\r\n        proxy_read_timeout                      240s;\r\n        proxy_pass                              http://127.0.0.1:7777/en/;\r\n\t    root\t\t\t\t\t\t\t\t\t/opt/docker_ingress/app;\r\n    }\r\n\r\n    location /fr/ {\r\n        proxy_set_header                        X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header                        X-NginX-Proxy true;\r\n        proxy_set_header                        X-Real-IP $remote_addr;\r\n        proxy_set_header                        X-Forwarded-Proto http;\r\n        proxy_hide_header                       X-Frame-Options;\r\n        proxy_set_header                        Accept-Encoding "";\r\n        proxy_http_version                      1.1;\r\n        proxy_set_header                        Upgrade $http_upgrade;\r\n        proxy_set_header                        Connection "upgrade";\r\n        proxy_set_header                        Host $host;\r\n        proxy_cache_bypass                      $http_upgrade;\r\n        proxy_max_temp_file_size                0;\r\n        proxy_redirect                          off;\r\n        proxy_read_timeout                      240s;\r\n        proxy_pass                              http://127.0.0.1:7778/;\r\n\t    root\t\t\t\t\t\t\t\t\t/opt/docker_ingress/app;\r\n    }\r\n\r\n    location /de/ {\r\n        proxy_set_header                        X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header                        X-NginX-Proxy true;\r\n        proxy_set_header                        X-Real-IP $remote_addr;\r\n        proxy_set_header                        X-Forwarded-Proto http;\r\n        proxy_hide_header                       X-Frame-Options;\r\n        proxy_set_header                        Accept-Encoding "";\r\n        proxy_http_version                      1.1;\r\n        proxy_set_header                        Upgrade $http_upgrade;\r\n        proxy_set_header                        Connection "upgrade";\r\n        proxy_set_header                        Host $host;\r\n        proxy_cache_bypass                      $http_upgrade;\r\n        proxy_max_temp_file_size                0;\r\n        proxy_redirect                          off;\r\n        proxy_read_timeout                      240s;\r\n        proxy_pass                              http://127.0.0.1:7779/;\r\n\t    root\t\t\t\t\t\t\t\t\t/opt/docker_ingress/app;\r\n    }\r\n\r\n    # All static files should be cached forever.\r\n        location ~* \\.(jpg|png|ico)$ {\r\n        add_header                                  Cache-Control "public, max-age=31536000, immutable";\r\n        access_log                              off;\r\n        log_not_found                           off;\r\n        }\r\n\r\n    # JS, CSS and HTML files should never be cached.\r\n        location ~* \\.(css|js|html)$ {\r\n                add_header                      Cache-Control  "public, must-revalidate, proxy-revalidate, max-age=0";\r\n    }\r\n\r\n    # this prevents hidden files (beginning with a period) from being served\r\n    location ~ /\\. {\r\n        access_log                              off;\r\n        log_not_found                           off;\r\n        deny                                    all;\r\n    }\r\n\r\n    error_page  404              /404.html;\r\n\r\n    # redirect server error pages to the static page /50x.html\r\n    #\r\n    error_page   500 502 503 504  /50x.html;\r\n    location = /50x.html {\r\n        root   /usr/share/nginx/html;\r\n    }\r\n}\n'})})]})}function l(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},145504:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-b57dcf7a42ddd712383aadde6d3ef4c8.jpg"},28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>s});var t=n(296540);const o={},a=t.createContext(o);function i(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);