"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[11964],{419927:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var s=r(785893),i=r(603905);const t={sidebar_position:5050,slug:"2022-01-26",title:"DNS Over TLS Using BIND And Nginx",authors:"mpolinowski",tags:["LINUX"]},a=void 0,o={id:"DevOps/Provisioning/2022-01-26--dns-over-TLS-docker/index",title:"DNS Over TLS Using BIND And Nginx",description:"Shenzhen, China",source:"@site/docs/DevOps/Provisioning/2022-01-26--dns-over-TLS-docker/index.md",sourceDirName:"DevOps/Provisioning/2022-01-26--dns-over-TLS-docker",slug:"/DevOps/Provisioning/2022-01-26--dns-over-TLS-docker/2022-01-26",permalink:"/docs/DevOps/Provisioning/2022-01-26--dns-over-TLS-docker/2022-01-26",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Provisioning/2022-01-26--dns-over-TLS-docker/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:5050,frontMatter:{sidebar_position:5050,slug:"2022-01-26",title:"DNS Over TLS Using BIND And Nginx",authors:"mpolinowski",tags:["LINUX"]},sidebar:"tutorialSidebar",previous:{title:"Bind9 Server Configuration",permalink:"/docs/DevOps/Provisioning/2022-01-27--bind9-configuration/2022-01-27"},next:{title:"Running a DNS Server with Docker",permalink:"/docs/DevOps/Provisioning/2022-01-25--installing-bind9-docker/2022-01-25"}},c={},d=[{value:"Test Run",id:"test-run",level:2},{value:"Deploying a Simple DoT-DNS Gateway",id:"deploying-a-simple-dot-dns-gateway",level:3},{value:"Gateway Container",id:"gateway-container",level:3},{value:"Testing",id:"testing",level:3},{value:"Bind9 in Docker",id:"bind9-in-docker",level:2},{value:"Gateway Configuration",id:"gateway-configuration",level:3},{value:"Testing",id:"testing-1",level:3},{value:"DNSUtils",id:"dnsutils",level:4},{value:"Knot DNSUtils",id:"knot-dnsutils",level:4},{value:"Docker-Compose",id:"docker-compose",level:2}];function l(n){const e={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.ah)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{alt:"Shenzhen, China",src:r(494417).Z+"",width:"1500",height:"671"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"#test-run",children:"Test Run"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#deploying-a-simple-dot-dns-gateway",children:"Deploying a Simple DoT-DNS Gateway"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#gateway-container",children:"Gateway Container"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#testing",children:"Testing"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"#bind9-in-docker",children:"Bind9 in Docker"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#gateway-configuration",children:"Gateway Configuration"})}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"#testing-1",children:"Testing"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#dnsutils",children:"DNSUtils"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#knot-dnsutils",children:"Knot DNSUtils"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#docker-compose",children:"Docker-Compose"})}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"test-run",children:"Test Run"}),"\n",(0,s.jsx)(e.h3,{id:"deploying-a-simple-dot-dns-gateway",children:"Deploying a Simple DoT-DNS Gateway"}),"\n",(0,s.jsxs)(e.p,{children:["The NGINX Stream (TCP/UDP) module supports SSL termination, and so it\u2019s actually really simple to set up a DoT service. You can create a simple DoT gateway in just a few lines of NGINX configuration. You need an ",(0,s.jsx)(e.code,{children:"upstream"})," block for your DNS servers - I am using the default Google DNS ",(0,s.jsx)(e.code,{children:"8.8.8.8"})," for now - and a server block for TLS termination."]}),"\n",(0,s.jsxs)(e.p,{children:["I am using a modified version of the ",(0,s.jsx)(e.a,{href:"https://github.com/mpolinowski/nginx_docker_ingress",children:"Docker NGINX Ingress"})," that already has a self-signed certificate I can use:"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"nginx.conf"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-conf",children:"user  nginx;\r\nworker_processes  auto;\r\nworker_rlimit_nofile  15000;\r\npid  /var/run/nginx.pid;\r\ninclude /usr/share/nginx/modules/*.conf;\r\n\r\nevents {\r\n    worker_connections  2048;\r\n    multi_accept on;\r\n    use epoll;\r\n}\r\n\r\nstream {\r\n    # DNS upstream pool\r\n    upstream dns {\r\n        zone dns 64k;\r\n        server 8.8.8.8:53;\r\n    }\r\n\r\n    # DoT server for decryption\r\n    server {\r\n        listen 853 ssl;\r\n        # ssl_certificate /etc/nginx/ssl/certs/doh.local.pem;\r\n        # ssl_certificate_key /etc/nginx/ssl/private/doh.local.pem;\r\n        proxy_pass dns;\r\n        \r\n        include self-signed.conf;\r\n        include ssl-params.conf;\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"self-signed.conf"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-conf",children:"ssl_certificate /etc/nginx/conf.d/ssl/certs/nginx-selfsigned.crt;\r\nssl_certificate_key /etc/nginx/conf.d/ssl/private/nginx-selfsigned.key;\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"ssl-params.conf"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-conf",children:"ssl_protocols TLSv1.3;\r\nssl_prefer_server_ciphers on;\r\nssl_dhparam /etc/nginx/conf.d/ssl/private/dhparam.pem;\r\nssl_ciphers ECDH+AESGCM:ECDH+CHACHA20:ECDH+AES256:ECDH+AES128:!aNULL:!SHA1:!AESCCM;\r\nssl_conf_command Options PrioritizeChaCha;\r\nssl_conf_command Ciphersuites TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256;\r\nssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0\r\nssl_session_timeout  10m;\r\nssl_session_cache shared:SSL:10m;\r\nssl_session_tickets off; # Requires nginx >= 1.5.9\n"})}),"\n",(0,s.jsx)(e.h3,{id:"gateway-container",children:"Gateway Container"}),"\n",(0,s.jsx)(e.p,{children:"Start the docker container with:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"docker network create --subnet=172.24.0.0/16 instar-net\r\ndocker pull nginx:alpine\r\n\r\ndocker run -d \\\r\n  --rm \\\r\n  --name=gateway \\\r\n  --net=instar-net \\\r\n  --ip=172.24.0.16 \\\r\n  -p 853:853 \\\r\n  -v /opt/bind9/gateway/nginx.conf:/etc/nginx/nginx.conf \\\r\n  -v /opt/bind9/gateway/self-signed.conf:/etc/nginx/self-signed.conf \\\r\n  -v /opt/bind9/gateway/ssl-params.conf:/etc/nginx/ssl-params.conf \\\r\n  -v /opt/bind9/gateway/ssl:/etc/nginx/conf.d/ssl \\\r\n  nginx:alpine\n"})}),"\n",(0,s.jsx)(e.h3,{id:"testing",children:"Testing"}),"\n",(0,s.jsxs)(e.p,{children:["Verify that the TLS service is available - the IPv4 address ",(0,s.jsx)(e.code,{children:"16.132.12.32"}),", in the following command is the IP address of my Docker host server that is running the gateway:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"openssl s_client -host 16.132.12.32 -port 853 -showcerts\r\n\r\nCONNECTED(00000003)\r\nCan't use SSL_get_servername\r\ndepth=0 C = AU, ST = Some-State, O = Internet Widgits Pty Ltd, CN = 16.132.12.32\r\nverify error:num=18:self signed certificate\r\nverify return:1\r\ndepth=0 C = AU, ST = Some-State, O = Internet Widgits Pty Ltd, CN = 16.132.12.32\r\nverify return:1\r\n\r\n...\n"})}),"\n",(0,s.jsxs)(e.p,{children:["I am going to use the ",(0,s.jsx)(e.a,{href:"https://getdnsapi.net/blog/getdns_query/",children:"getDNS Utilities"})," to test the Gateway:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"apt install getdns-utils\n"})}),"\n",(0,s.jsxs)(e.p,{children:["First I try a run without TLS - ",(0,s.jsx)(e.em,{children:"which cannot work"}),". The IPv4 address ",(0,s.jsx)(e.code,{children:"16.132.12.32"}),", in the following command is the IP address of my Docker host server that is running the gateway:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'getdns_query @16.132.12.32 -s -a -A www.instar.com\r\n\r\n{\r\n  "answer_type": GETDNS_NAMETYPE_DNS,\r\n  "canonical_name": <bindata for www.instar.com.>,\r\n  "just_address_answers": [],\r\n  "replies_full": [],\r\n  "replies_tree": [],\r\n  "status": GETDNS_RESPSTATUS_ALL_TIMEOUT\r\n}\r\nAn error occurred: The callback got a callback_type of 702. Exiting.\r\nError : \'The requested action timed out; response is filled in with empty structures\'\n'})}),"\n",(0,s.jsx)(e.p,{children:"And now to TLS:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'getdns_query @16.132.12.32 -s -a -A  -l L www.instar.com\r\n\r\n{\r\n  "answer_ipv4_address": <bindata for 16.132.12.32>,\r\n  "answer_type": GETDNS_NAMETYPE_DNS,\r\n  "canonical_name": <bindata for www.instar.com.>,\r\n  "just_address_answers":\r\n  [\r\n    {\r\n      "address_data": <bindata for 49.12.0.118>,\r\n      "address_type": <bindata of "IPv4">\r\n    }\r\n  ],\r\n  \r\n  ...\r\n\r\n  "status": GETDNS_RESPSTATUS_GOOD\r\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["The IP address ",(0,s.jsx)(e.code,{children:"49.12.0.118"})," is successfully resolved for ",(0,s.jsx)(e.code,{children:"www.instar.com"}),"."]}),"\n",(0,s.jsx)(e.h2,{id:"bind9-in-docker",children:"Bind9 in Docker"}),"\n",(0,s.jsxs)(e.p,{children:["I am going to use my ",(0,s.jsx)(e.a,{href:"/docs/DevOps/Provisioning/2022-01-25--installing-bind9-docker/2022-01-25",children:"Bind9 Docker Container"})," and run it inside the same Docker network ",(0,s.jsx)(e.code,{children:"instar-net"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"docker network create --subnet=172.24.0.0/16 instar-net\r\ndocker run -d --rm --name=ddns-master --net=instar-net --ip=172.24.0.2 ddns-master\n"})}),"\n",(0,s.jsx)(e.h3,{id:"gateway-configuration",children:"Gateway Configuration"}),"\n",(0,s.jsxs)(e.p,{children:["Now I can replace the ",(0,s.jsx)(e.code,{children:"8.8.8.8"})," Google DNS Server and replace it with the Bind9 Docker container IP ",(0,s.jsx)(e.code,{children:"172.24.0.2"})," or the container name ",(0,s.jsx)(e.code,{children:"ddns-master"}),". I am also adding a stream for port ",(0,s.jsx)(e.code,{children:"53"})," so I don't have to expose any ports from the Bind9 container:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-conf",children:"user  nginx;\r\nworker_processes  auto;\r\nworker_rlimit_nofile  15000;\r\npid  /var/run/nginx.pid;\r\ninclude /usr/share/nginx/modules/*.conf;\r\n\r\n\r\nevents {\r\n    worker_connections  2048;\r\n    multi_accept on;\r\n    use epoll;\r\n}\r\n\r\nstream {\r\n    # DNS Upstream\r\n    upstream dns {\r\n        zone dns 64k;\r\n        server ddns-master:53;\r\n    }\r\n\r\n    # DNS Ingress\r\n    server {\r\n        listen 53 udp reuseport;\r\n        proxy_timeout 20s;\r\n        proxy_pass dns;\r\n    }\r\n\r\n    # DoT Ingress TLS Endpoint\r\n    server {\r\n        listen 853 ssl;\r\n        # ssl_certificate /etc/nginx/ssl/certs/doh.local.pem;\r\n        # ssl_certificate_key /etc/nginx/ssl/private/doh.local.pem;\r\n        proxy_timeout 20s;\r\n        proxy_pass dns;\r\n\r\n        include self-signed.conf;\r\n        include ssl-params.conf;\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"docker run -d \\\r\n  --rm \\\r\n  --name=gateway \\\r\n  --net=instar-net \\\r\n  --ip=172.24.0.16 \\\r\n  -p 853:853/tcp \\\r\n  -p 53:53/udp \\\r\n  -v /opt/bind9/gateway/nginx.conf:/etc/nginx/nginx.conf \\\r\n  -v /opt/bind9/gateway/self-signed.conf:/etc/nginx/self-signed.conf \\\r\n  -v /opt/bind9/gateway/ssl-params.conf:/etc/nginx/ssl-params.conf \\\r\n  -v /opt/bind9/gateway/ssl:/etc/nginx/conf.d/ssl \\\r\n  nginx:alpine\n"})}),"\n",(0,s.jsx)(e.h3,{id:"testing-1",children:"Testing"}),"\n",(0,s.jsx)(e.p,{children:"Without TLS:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'getdns_query @16.132.12.32 -s -a -A service2.instar-net.io                                                            \r\n{\r\n  "answer_ipv4_address": <bindata for 16.132.12.32>,\r\n  "answer_type": GETDNS_NAMETYPE_DNS,\r\n  "canonical_name": <bindata for service2.instar-net.io.>,\r\n  "just_address_answers":\r\n  [\r\n    {\r\n      "address_data": <bindata for 172.24.0.4>,\r\n      "address_type": <bindata of "IPv4">\r\n    }\r\n  ],\r\n  ...\r\n\r\n  "status": GETDNS_RESPSTATUS_GOOD\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"But I am seeing an error message when switching to TLS:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'getdns_query @16.132.12.32 -s -a -A  -l L service2.instar-net.io\r\n\r\n{\r\n  "answer_ipv4_address": <bindata for 16.132.12.32>,\r\n  "answer_type": GETDNS_NAMETYPE_DNS,\r\n  "canonical_name": <bindata for service2.instar-net.io.>,\r\n  "just_address_answers": [],\r\n\r\n  ...\r\n\r\n  "status": GETDNS_RESPSTATUS_NO_NAME\r\n}\r\nAn error occurred: The callback got a callback_type of 702. Exiting.\r\nError : \'The requested action timed out; response is filled in with empty structures\'\r\n\n'})}),"\n",(0,s.jsx)(e.h4,{id:"dnsutils",children:"DNSUtils"}),"\n",(0,s.jsxs)(e.p,{children:["I am able to resolve the IP of my service as defined in Bind9 using ",(0,s.jsx)(e.code,{children:"nslookup"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"apt-get install dnsutils\r\n\r\nnslookup service2.instar-net.io 16.132.12.32\r\n\r\nServer:         16.132.12.32\r\nAddress:        16.132.12.32#53\r\n\r\nName:   service2.instar-net.io\r\nAddress: 172.24.0.4\n"})}),"\n",(0,s.jsx)(e.p,{children:"But there is no way to check the TLS connecting through the gateway proxy."}),"\n",(0,s.jsx)(e.h4,{id:"knot-dnsutils",children:"Knot DNSUtils"}),"\n",(0,s.jsxs)(e.p,{children:["That is where ",(0,s.jsx)(e.a,{href:"https://www.knot-dns.cz/docs/2.4/html/man_kdig.html",children:"kdig"})," comes in:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"apt-get install knot-dnsutils\n"})}),"\n",(0,s.jsx)(e.p,{children:"Without TLS:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"kdig service1.instar-net.io -t A @16.132.12.32\r\n\r\n;; TLS session (TLS1.3)-(ECDHE-SECP384R1)-(RSA-PSS-RSAE-SHA256)-(AES-256-GCM)\r\n;; ->>HEADER<<- opcode: QUERY; status: NOERROR; id: 17361\r\n;; Flags: qr aa rd ra; QUERY: 1; ANSWER: 1; AUTHORITY: 0; ADDITIONAL: 1\r\n\r\n;; EDNS PSEUDOSECTION:\r\n;; Version: 0; flags: ; UDP size: 1232 B; ext-rcode: NOERROR\r\n                                                                       \r\n;; ->>HEADER<<- opcode: QUERY; status: NOERROR; id: 16017\r\n;; Flags: qr aa rd ra; QUERY: 1; ANSWER: 1; AUTHORITY: 0; ADDITIONAL: 0\r\n\r\n;; QUESTION SECTION:\r\n;; service2.instar-net.io.              IN      A\r\n\r\n;; ANSWER SECTION:\r\nservice2.instar-net.io. 86400   IN      A       172.24.0.4\r\n\r\n;; Received 56 B\r\n;; Time 2022-03-10 08:31:07 CET\r\n;; From 1.2.3.4@53(UDP) in 0.0 ms\n"})}),"\n",(0,s.jsxs)(e.p,{children:["And here it also seems to be working over TLS - I am getting the ",(0,s.jsx)(e.code,{children:"172.24.0.3"})," resolution for Service1, as expected:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"kdig +tcp +tls -p 853 service1.instar-net.io -t A @16.132.12.32\r\n                                                        \r\n;; TLS session (TLS1.3)-(ECDHE-SECP384R1)-(RSA-PSS-RSAE-SHA256)-(AES-256-GCM)\r\n;; ->>HEADER<<- opcode: QUERY; status: NOERROR; id: 57694\r\n;; Flags: qr aa rd ra; QUERY: 1; ANSWER: 1; AUTHORITY: 0; ADDITIONAL: 1\r\n\r\n;; EDNS PSEUDOSECTION:\r\n;; Version: 0; flags: ; UDP size: 1232 B; ext-rcode: NOERROR\r\n\r\n;; QUESTION SECTION:\r\n;; service1.instar-net.io.              IN      A\r\n\r\n;; ANSWER SECTION:\r\nservice1.instar-net.io. 86400   IN      A       172.24.0.3\r\n\r\n;; Received 67 B\r\n;; Time 2022-03-09 13:33:15 CET\r\n;; From 16.132.12.32@853(TCP) in 1.4 ms\n"})}),"\n",(0,s.jsx)(e.p,{children:"And the forwarder is working as well:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"kdig +tcp +tls -p 853 www.instar.com -t A @16.132.12.32\r\n\r\n;; TLS session (TLS1.3)-(ECDHE-SECP384R1)-(RSA-PSS-RSAE-SHA256)-(AES-256-GCM)\r\n;; ->>HEADER<<- opcode: QUERY; status: NOERROR; id: 22289\r\n;; Flags: qr rd ra; QUERY: 1; ANSWER: 1; AUTHORITY: 0; ADDITIONAL: 1\r\n\r\n;; EDNS PSEUDOSECTION:\r\n;; Version: 0; flags: ; UDP size: 1232 B; ext-rcode: NOERROR\r\n\r\n;; QUESTION SECTION:\r\n;; www.instar.com.              IN      A\r\n\r\n;; ANSWER SECTION:\r\nwww.instar.com.         600     IN      A       49.12.0.118\r\n\r\n;; Received 59 B\r\n;; Time 2022-03-10 04:34:23 CET\r\n;; From 16.132.12.32@853(TCP) in 41.4 ms\n"})}),"\n",(0,s.jsx)(e.h2,{id:"docker-compose",children:"Docker-Compose"}),"\n",(0,s.jsx)(e.p,{children:"Wrapping everything up into a compose file:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yml",children:'version: "3.9"\r\n\r\nservices:\r\n  bind:\r\n    build:\r\n      context: .\r\n      dockerfile: Dockerfile\r\n    image: dns-master:latest\r\n    networks:\r\n      bindnet:\r\n        ipv4_address: 172.24.0.2\r\n          \r\n\r\n  gateway:\r\n    image: nginx:alpine\r\n    ports:\r\n      - "53:53/udp"\r\n      - "853:853/tcp"\r\n    networks:\r\n      bindnet:\r\n        ipv4_address: 172.24.0.16\r\n    volumes:\r\n      - /opt/bind9/gateway/nginx.conf:/etc/nginx/nginx.conf\r\n      - /opt/bind9/gateway/self-signed.conf:/etc/nginx/self-signed.conf\r\n      - /opt/bind9/gateway/ssl-params.conf:/etc/nginx/ssl-params.conf\r\n      - /opt/bind9/gateway/ssl:/etc/nginx/conf.d/ssl\r\n\r\nnetworks:\r\n  bindnet:\r\n    driver: bridge\r\n    ipam:\r\n      driver: default\r\n      config:\r\n      - subnet:  172.24.0.0/16\n'})}),"\n",(0,s.jsxs)(e.p,{children:["To execute the compose file first run ",(0,s.jsx)(e.code,{children:"docker-compose build"})," to build the Bind9 Docker container - the ",(0,s.jsx)(e.a,{href:"/docs/DevOps/Provisioning/2022-01-25--installing-bind9-docker/2022-01-25",children:"Dockerfile and all dependencies"})," have to be in the same directory as the compose file:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yml",children:'FROM internetsystemsconsortium/bind9:9.18\r\n\r\nRUN apt update \\\r\n  && apt install -y \\\r\n  bind9-doc \\\r\n  dnsutils \\\r\n  geoip-bin \\\r\n  mariadb-server \\\r\n  net-tools\r\n\r\n# Copy configuration files\r\nCOPY configuration/named.conf.options /etc/bind/\r\nCOPY configuration/named.conf.local /etc/bind/\r\nCOPY configuration/db.instar-net.io /etc/bind/zones/\r\n\r\n# Expose Ports\r\nEXPOSE 53/tcp\r\nEXPOSE 53/udp\r\nEXPOSE 953/tcp\r\n\r\n# Start the Name Service\r\nCMD ["/usr/sbin/named", "-g", "-c", "/etc/bind/named.conf", "-u", "bind"]\n'})})]})}function h(n={}){const{wrapper:e}={...(0,i.ah)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}},603905:(n,e,r)=>{r.d(e,{ah:()=>d});var s=r(667294);function i(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function t(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,s)}return r}function a(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?t(Object(r),!0).forEach((function(e){i(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function o(n,e){if(null==n)return{};var r,s,i=function(n,e){if(null==n)return{};var r,s,i={},t=Object.keys(n);for(s=0;s<t.length;s++)r=t[s],e.indexOf(r)>=0||(i[r]=n[r]);return i}(n,e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);for(s=0;s<t.length;s++)r=t[s],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(i[r]=n[r])}return i}var c=s.createContext({}),d=function(n){var e=s.useContext(c),r=e;return n&&(r="function"==typeof n?n(e):a(a({},e),n)),r},l={inlineCode:"code",wrapper:function(n){var e=n.children;return s.createElement(s.Fragment,{},e)}},h=s.forwardRef((function(n,e){var r=n.components,i=n.mdxType,t=n.originalType,c=n.parentName,h=o(n,["components","mdxType","originalType","parentName"]),p=d(r),g=i,u=p["".concat(c,".").concat(g)]||p[g]||l[g]||t;return r?s.createElement(u,a(a({ref:e},h),{},{components:r})):s.createElement(u,a({ref:e},h))}));h.displayName="MDXCreateElement"},494417:(n,e,r)=>{r.d(e,{Z:()=>s});const s=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-bac99ee9472bf0354e396ff811a46d92.jpg"}}]);