"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[86788],{898930:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var o=t(785893),i=t(603905);const r={sidebar_position:5990,slug:"2022-10-30",title:"WebRTC Introduction - Client Side Signalling",authors:"mpolinowski",tags:["Javascript","WebRTC"],description:"Signalling intend from the web client"},c=void 0,s={id:"Development/Javascript/2022-10-30-webrtc-introduction-video-chat-part1/index",title:"WebRTC Introduction - Client Side Signalling",description:"Signalling intend from the web client",source:"@site/docs/Development/Javascript/2022-10-30-webrtc-introduction-video-chat-part1/index.md",sourceDirName:"Development/Javascript/2022-10-30-webrtc-introduction-video-chat-part1",slug:"/Development/Javascript/2022-10-30-webrtc-introduction-video-chat-part1/2022-10-30",permalink:"/docs/Development/Javascript/2022-10-30-webrtc-introduction-video-chat-part1/2022-10-30",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Javascript/2022-10-30-webrtc-introduction-video-chat-part1/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"},{label:"WebRTC",permalink:"/docs/tags/web-rtc"}],version:"current",sidebarPosition:5990,frontMatter:{sidebar_position:5990,slug:"2022-10-30",title:"WebRTC Introduction - Client Side Signalling",authors:"mpolinowski",tags:["Javascript","WebRTC"],description:"Signalling intend from the web client"},sidebar:"tutorialSidebar",previous:{title:"WebRTC Introduction - Interactive Connectivity Establishment",permalink:"/docs/Development/Javascript/2022-11-10-webrtc-introduction-video-chat-part2/2022-11-10"},next:{title:"WebRTC Introduction - Realtime Chat",permalink:"/docs/Development/Javascript/2022-10-29-webrtc-introduction-realtime-chat/2022-10-29"}},a={},l=[{value:"Get Video Source",id:"get-video-source",level:2},{value:"Signalling with Websockets",id:"signalling-with-websockets",level:2},{value:"Scaffolding the Signalling Server",id:"scaffolding-the-signalling-server",level:2},{value:"Client Side Signalling Events",id:"client-side-signalling-events",level:2},{value:"Created, Joined and Occupied",id:"created-joined-and-occupied",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.ah)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Shenzhen, China",src:t(133072).Z+"",width:"2208",height:"757"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#get-video-source",children:"Get Video Source"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#signalling-with-websockets",children:"Signalling with Websockets"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#scaffolding-the-signalling-server",children:"Scaffolding the Signalling Server"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#client-side-signalling-events",children:"Client Side Signalling Events"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#created-joined-and-occupied",children:"Created, Joined and Occupied"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"WIP"})," "]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/Development/Javascript/2022-10-29-webrtc-introduction-realtime-chat/2022-10-29",children:"WebRTC Introduction - Websockets"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/Development/Javascript/2022-10-30-webrtc-introduction-video-chat-part1/2022-10-30",children:"WebRTC Introduction - Client Side Signalling"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/Development/Javascript/2022-11-10-webrtc-introduction-video-chat-part2/2022-11-10",children:"WebRTC Introduction - Interactive Connectivity Establishment"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Resources:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://webrtcforthecurious.com",children:"WebRTC for the Curious"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://web.dev/webrtc-basics/#toc-rtcpeerconnection",children:"WebRTC Basics"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://webrtc.github.io/samples/src/content/peerconnection/munge-sdp/",children:"WebRTC Sample"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"WebRTC Introduction - Video Chat",src:t(667606).Z+"",width:"1019",height:"771"})}),"\n",(0,o.jsx)(n.h2,{id:"get-video-source",children:"Get Video Source"}),"\n",(0,o.jsxs)(n.p,{children:["Get Video from Webcam with ",(0,o.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia",children:"getUserMedia()"}),":"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"chat.js"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const chatLobby = document.getElementById('chat-lobby')\nconst chatRoom = document.getElementById('room-name')\nconst chatJoin = document.getElementById('join')\nconst chatLocal = document.getElementById('video-local')\n\nlet constraints = {\n    audio: false,\n    video: { width: 320, height: 180 },\n}\n\nconst browserSupportsMedia = () => {\n    return navigator.mediaDevices.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.mzGetUserMedia\n}\n\nconst fetchLocalStream = () => {\n    navigator.mediaDevices\n    .getUserMedia(constraints)\n    .then(function (stream) {\n      userStream = stream;\n      chatLobby.style = \"display:none\";\n      chatLocal.srcObject = stream;\n      chatLocal.onloadedmetadata = function (e) {\n        chatLocal.play();\n      }\n    })\n    .catch(function (err) {\n      /* handle the error */\n      alert('ERROR ::  ' + error.name);\n    })\n}\n\nchatJoin.addEventListener('click', function() {\n    if (chatRoom.value == \"\") {\n        alert('INFO :: Please enter a room name first!')\n    } else {\n        fetchLocalStream()\n    }\n})\n"})}),"\n",(0,o.jsx)(n.h2,{id:"signalling-with-websockets",children:"Signalling with Websockets"}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"socket.io"})," to manage connections:"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"index.js"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const express = require("express");\nconst socket = require("socket.io");\n\nconst port = 6969\n\nvar app = express();\n\nvar server = app.listen(port, function () {\n    console.log(\'INFO :: Webserver is running on ::  http://localhost:\' + port)\n});\n\napp.use(express.static("public"));\n\nvar io = socket(server);\n\nio.on("connection", function (socket) {\n  console.log("INFO :: Websocket connection established :: ", socket.id)\n\n  socket.on("join", function (roomName) {\n    // check if is already full = 2 participants\n    let rooms = io.sockets.adapter.rooms;\n    let room = rooms.get(roomName);\n    // if room doesn\'t exists create it\n    if(room == undefined) {\n      socket.join(roomName)\n      console.log(\'INFO :: Participant created room ::\', roomName)\n      // if room exists and only has 1 participant - join\n    } else if(room.size == 1) {\n      socket.join(roomName)\n      console.log(\'INFO :: Participant joined room ::\', roomName)\n    } else {\n      console.log(\'WARNING :: Room\', roomName, \'is full!\')\n    }\n  })\n});\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Use the websocket connection to emit the ",(0,o.jsx)(n.code,{children:"join"})," event when a user clicked the join button:"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"chat.js"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const socket = io.connect("http://localhost:6969")\n\nchatJoin.addEventListener(\'click\', function() {\n    if (chatRoom.value == "") {\n        alert(\'INFO :: Please enter a room name first!\')\n    } else {\n        socket.emit("join", chatRoom.value)\n        fetchLocalStream()\n    }\n})\n'})}),"\n",(0,o.jsx)(n.p,{children:"Start the application and open the application frontend from three different devices:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm start\n\n> webrtc-intro@1.0.0 start\n> node index.js\n\nINFO :: Webserver is running on ::  http://localhost:6969\nINFO :: Websocket connection established ::  _I-Guhml-JEa9VJwAAAF\nINFO :: Participant created room :: test\nINFO :: Websocket connection established ::  TAaYXAYJDbm4lDP5AAAH\nINFO :: Participant joined room :: test\nINFO :: Websocket connection established ::  lAgg07QE2DSltIwsAAAJ\nWARNING :: Room test is full!\n"})}),"\n",(0,o.jsx)(n.h2,{id:"scaffolding-the-signalling-server",children:"Scaffolding the Signalling Server"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"index.js"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"io.on(\"connection\", function (socket) {\n  console.log(\"INFO :: Websocket connection established :: \", socket.id)\n\n  socket.on(\"join\", function (roomName) {\n    // check if is already full = 2 participants\n    let rooms = io.sockets.adapter.rooms;\n    let room = rooms.get(roomName);\n    // if room doesn't exists create it\n    if(room == undefined) {\n      socket.join(roomName)\n      socket.emit('created')\n    } else if(room.size == 1) {\n      socket.join(roomName)\n      socket.emit('joined')\n    } else {\n      socket.emit('occupied')\n    }\n  })\n\n  // emit ready state to room when created\n  socket.on('ready', function(roomName) {\n    socket.broadcast.to(roomName).emit('ready')\n    console.log('INFO :: Room is ready')\n  })\n\n  // establish connection between candidates (ICE)\n  socket.on('candidate', function(candidate, roomName) {\n    socket.broadcast.to(roomName).emit('candidate', candidate)\n    console.log('INFO :: Candidate ready to establish connection')\n  })\n\n  // make offer to other participant\n  socket.on('offer', function(offer, roomName) {\n    socket.broadcast.to(roomName).emit('offer', offer)\n    console.log('INFO :: Offer to establish connection')\n  })\n\n  // send answer to connection offer\n  socket.on('answer', function(answer, roomName) {\n    socket.broadcast.to(roomName).emit('answer', answer)\n    console.log('INFO :: Answer to connection offer')\n  })\n\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"client-side-signalling-events",children:"Client Side Signalling Events"}),"\n",(0,o.jsx)(n.p,{children:"The server now emits each of those events through the websocket connection. We now need to handle those events on the client side:"}),"\n",(0,o.jsx)(n.h3,{id:"created-joined-and-occupied",children:"Created, Joined and Occupied"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"chat.js"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"let creator = false\n\nchatJoin.addEventListener('click', function() {\n    if (chatRoom.value == \"\") {\n        alert('INFO :: Please enter a room name first!')\n    } else {\n        socket.emit(\"join\", chatRoom.value)\n    }\n})\n\n// Room created event -> fetch video\nsocket.on('created', function() {\n  creator = true\n  fetchLocalStream()\n})\n\n// Room joined event -> fetch video\nsocket.on('joined', function() {\n  creator = false\n  fetchLocalStream()\n})\n\n// Room is full event\nsocket.on('occupied', function() {\n  alert(\"WARNING :: Room occupied. Please try again later.\")\n})\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.ah)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},603905:(e,n,t)=>{t.d(n,{ah:()=>l});var o=t(667294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a=o.createContext({}),l=function(e){var n=o.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,a=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),m=l(t),p=i,u=m["".concat(a,".").concat(p)]||m[p]||d[p]||r;return t?o.createElement(u,c(c({ref:n},h),{},{components:t})):o.createElement(u,c({ref:n},h))}));h.displayName="MDXCreateElement"},667606:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/WebRTC_Introduction_01-5c9421fc49f5a418ead7adf1d356b1bd.png"},133072:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-e38404fdf0e14587f660e537829bfab5.jpg"}}]);