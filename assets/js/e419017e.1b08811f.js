"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[94514],{491986:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var s=r(785893),t=r(603905);const o={sidebar_position:4680,slug:"2023-02-19",title:"Tensorflow 2 - An (Re)Introduction 2023",authors:"mpolinowski",tags:["Python","Machine Learning","Tensorflow"],description:"Tensor Constants, Variables and Attributes"},a=void 0,i={id:"IoT-and-Machine-Learning/ML/2023-02-19-tensorflow-introduction/index",title:"Tensorflow 2 - An (Re)Introduction 2023",description:"Tensor Constants, Variables and Attributes",source:"@site/docs/IoT-and-Machine-Learning/ML/2023-02-19-tensorflow-introduction/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2023-02-19-tensorflow-introduction",slug:"/IoT-and-Machine-Learning/ML/2023-02-19-tensorflow-introduction/2023-02-19",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-02-19-tensorflow-introduction/2023-02-19",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2023-02-19-tensorflow-introduction/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Tensorflow",permalink:"/docs/tags/tensorflow"}],version:"current",sidebarPosition:4680,frontMatter:{sidebar_position:4680,slug:"2023-02-19",title:"Tensorflow 2 - An (Re)Introduction 2023",authors:"mpolinowski",tags:["Python","Machine Learning","Tensorflow"],description:"Tensor Constants, Variables and Attributes"},sidebar:"tutorialSidebar",previous:{title:"Tensorflow 2 - An (Re)Introduction 2023 (2)",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-02-21-tensorflow-tensors-2/2023-02-21"},next:{title:"Keras for Tensorflow - VGG16 Network Architecture",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-02-18-keras-introduction-vgg16/2023-02-18"}},l={},d=[{value:"Tensorflow Fundamentals",id:"tensorflow-fundamentals",level:2},{value:"Installing Tensorflow and CUDA on Arch Linux",id:"installing-tensorflow-and-cuda-on-arch-linux",level:3},{value:"Tensor Constants",id:"tensor-constants",level:3},{value:"Tensor Variables",id:"tensor-variables",level:3},{value:"Random Tensors",id:"random-tensors",level:3},{value:"Numpy Arrays and Tensors",id:"numpy-arrays-and-tensors",level:3},{value:"Tensor Attributes",id:"tensor-attributes",level:3}];function c(n){const e={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.ah)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{alt:"Mong Kok, Hong Kong",src:r(233167).Z+"",width:"2830",height:"1272"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"#tensorflow-fundamentals",children:"Tensorflow Fundamentals"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#installing-tensorflow-and-cuda-on-arch-linux",children:"Installing Tensorflow and CUDA on Arch Linux"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#tensor-constants",children:"Tensor Constants"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#tensor-variables",children:"Tensor Variables"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#random-tensors",children:"Random Tensors"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#numpy-arrays-and-tensors",children:"Numpy Arrays and Tensors"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#tensor-attributes",children:"Tensor Attributes"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://github.com/mpolinowski/tf-2023",children:"Github Repository"})}),"\n",(0,s.jsx)(e.p,{children:"I have been entering the ML/AI field from the DevOps side - deploying pre-trained models using MLOps/AIOps toolchains. This allowed me to skip most of the basics like how to choose a pre-trained model (or build one yourself) and how to optimize prediction models when their performance start to vain in face of incoming fresh data? I would like to remedy that now."}),"\n",(0,s.jsxs)(e.p,{children:["I already ",(0,s.jsx)(e.a,{href:"https://mpolinowski.github.io/docs/IoT-and-Machine-Learning/ML/2023-02-14-keras-introduction/2023-02-14",children:"looked into Keras"}),". Which became an integral part of Tensorflow with the ",(0,s.jsx)(e.code,{children:"2.0"})," update and is essential for building quick prototypes based on default pre-trained models and datasets. Now I am looking into Tensorflow itself - coding through ",(0,s.jsx)(e.a,{href:"https://tensorflow.google.cn",children:"docs"})," & ",(0,s.jsx)(e.a,{href:"https://github.com/mrdbourke/tensorflow-deep-learning",children:"tutorials"})," and example projects online."]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"See also:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Fun, fun, tensors: ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-19-tensorflow-introduction/2023-02-19",children:"Tensor Constants, Variables and Attributes"}),", ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-21-tensorflow-tensors-2/2023-02-21",children:"Tensor Indexing, Expanding and Manipulations"}),", ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-22-tensorflow-tensors-3/2023-02-22",children:"Matrix multiplications, Squeeze, One-hot and Numpy"})]}),"\n",(0,s.jsxs)(e.li,{children:["Tensorflow 2 - Neural Network Regression: ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-23-tensorflow-neural-network-regression/2023-02-23",children:"Building a Regression Model"}),", ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-24-tensorflow-neural-network-regression-evaluation/2023-02-24",children:"Model Evaluation"}),", ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-25-tensorflow-neural-network-regression-experiments/2023-02-25",children:"Model Optimization"}),", ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-26-tensorflow-neural-network-regression-real-dataset/2023-02-26",children:'Working with a "Real" Dataset'}),", ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-26-tensorflow-neural-network-regression-data-preprocessing/2023-02-26",children:"Feature Scaling"})]}),"\n",(0,s.jsxs)(e.li,{children:["Tensorflow 2 - Neural Network Classification: ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-27-tensorflow-neural-network-classification/2023-02-27",children:"Non-linear Data and Activation Functions"}),", ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-28-tensorflow-neural-network-classification-model-evaluation/2023-02-28",children:"Model Evaluation and Performance Improvement"}),", ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-02-tensorflow-neural-network-multi-classification/2023-03-02",children:"Multiclass Classification Problems"})]}),"\n",(0,s.jsxs)(e.li,{children:["Tensorflow 2 - Convolutional Neural Networks: ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-03-tensorflow-convolutional-neural-network-binary-classifications/2023-03-03",children:"Binary Image Classification"}),", ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-05-tensorflow-convolutional-neural-network-multiclass-classifications/2023-03-05",children:"Multiclass Image Classification"})]}),"\n",(0,s.jsxs)(e.li,{children:["Tensorflow 2 - Transfer Learning: ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-06-tensorflow-transfer-learning-feature-extraction/2023-03-06",children:"Feature Extraction"}),", ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-11-tensorflow-transfer-learning-fine-tuning/2023-03-11",children:"Fine-Tuning"}),", ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-16-tensorflow-transfer-learning-scaling/2023-03-16",children:"Scaling"})]}),"\n",(0,s.jsxs)(e.li,{children:["Tensorflow 2 - Unsupervised Learning: ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-24-tensorflow-unsupervised-learning-autoencoders/2023-03-24",children:"Autoencoder Feature Detection"}),", ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-26-tensorflow-unsupervised-learning-autoencoders-super-resolution/2023-03-26",children:"Autoencoder Super-Resolution"}),", ",(0,s.jsx)(e.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-26-tensorflow-unsupervised-learning-generative-adversial-networks/2023-03-26",children:"Generative Adverserial Networks"})]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"tensorflow-fundamentals",children:"Tensorflow Fundamentals"}),"\n",(0,s.jsx)(e.h3,{id:"installing-tensorflow-and-cuda-on-arch-linux",children:"Installing Tensorflow and CUDA on Arch Linux"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"sudo pacman -S cuda cudnn python-tensorflow-opt-cuda\n"})}),"\n",(0,s.jsx)(e.p,{children:"That's it!"}),"\n",(0,s.jsx)(e.h3,{id:"tensor-constants",children:"Tensor Constants"}),"\n",(0,s.jsxs)(e.p,{children:["Creating Tensors with ",(0,s.jsx)(e.a,{href:"https://www.tensorflow.org/api_docs/python/tf/constant",children:"tf.Constant()"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Scalar"}),": Value"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Vector"}),": Value with a direction"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Matrix"}),": 2d number array"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Tensor"}),": nd number array"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"import tensorflow as tf\n# print(tf.__version__)\n# 2.11.0\n\n# create tensors with tf.constant()\nscalar = tf.constant(88, name='scalar')\nprint(scalar)\n# tf.Tensor(88, shape=(), dtype=int32)\nprint(scalar.ndim)\n# 0 dimensions\n\nvector = tf.constant([44, 88], name='vector')\nprint(vector)\n# tf.Tensor([44 88], shape=(2,), dtype=int32)\nprint(vector.ndim)\n# 1 dimensions\n\nmatrix = tf.constant([[44., 88.], [33., 55.]], shape=(2, 2), dtype=tf.float16, name='matrix')\nprint(matrix)\n# tf.Tensor(\n# [[44. 88.]\n#  [33. 55.]], shape=(2, 2), dtype=float16)\nprint(matrix.ndim)\n# 2 dimensions\n\ntensor = tf.constant([[[44, 88, 22, 66],\n                     [666, 222, 999, 333]],\n                     [[33, 11, 55, 77],\n                     [111, 888, 444, 111]]], shape=(4, 2, 2), dtype=tf.int16, name='tensor')\nprint(tensor)\n# tf.Tensor(\n# [[[ 44  88]\n#   [ 22  66]]\n\n#  [[666 222]\n#   [999 333]]\n\n#  [[ 33  11]\n#   [ 55  77]]\n\n#  [[111 888]\n#   [444 111]]], shape=(4, 2, 2), dtype=int16)\nprint(tensor.ndim)\n# 3 dimensions\n"})}),"\n",(0,s.jsx)(e.h3,{id:"tensor-variables",children:"Tensor Variables"}),"\n",(0,s.jsxs)(e.p,{children:["Creating Tensors with ",(0,s.jsx)(e.a,{href:"https://tensorflow.google.cn/api_docs/python/tf/Variable",children:"tf.Variable()"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"# create tensors with tf.Variable()\nconstant_tensor = tf.constant([44, 88], name='constant')\nprint(constant_tensor)\n# tf.Tensor([44 88], shape=(2,), dtype=int32)\n\nvariable_tensor = tf.Variable([44, 88], name='variable')\nprint(variable_tensor)\n# <tf.Variable 'variable:0' shape=(2,) dtype=int32, numpy=array([44, 88], dtype=int32)>\n\n## change values in tensor\nvariable_tensor[0].assign(77)\nprint(variable_tensor)\n# <tf.Variable 'variable:0' shape=(2,) dtype=int32, numpy=array([77, 88], dtype=int32)>\n\n# constant_tensor[0].assign(77)\n# AttributeError: 'tensorflow.python.framework.ops.EagerTensor' object has no attribute 'assign'\n"})}),"\n",(0,s.jsx)(e.h3,{id:"random-tensors",children:"Random Tensors"}),"\n",(0,s.jsxs)(e.p,{children:["Tensorflow initializes its weights with ",(0,s.jsx)(e.a,{href:"https://www.tensorflow.org/api_docs/python/tf/random/uniform",children:"Random Tensors"}),". During a model training those tensors are then fitted to better represent the given dataset."]}),"\n",(0,s.jsxs)(e.p,{children:["The following two examples generate values from a ",(0,s.jsx)(e.strong,{children:"Normal"})," and a ",(0,s.jsx)(e.strong,{children:"Uniform Distribution"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"# create random tensors with tf.random()\n## fixed seed for reproducibility\nrandom_tensor_normal = tf.random.Generator.from_seed(42)\n## Output 2x2 matrix of random values from a normal distribution\nrandom_tensor_normal = random_tensor_normal.normal(shape=(2, 2))\nprint(random_tensor_normal)\n# tf.Tensor(\n# [[-0.7565803  -0.06854702]\n#  [ 0.07595026 -1.2573844 ]], shape=(2, 2), dtype=float32)\n\n\n## fixed seed for reproducibility\nrandom_tensor_uniform = tf.random.Generator.from_seed(42)\n## Output 2x2 matrix of random values from a uniform distribution\nrandom_tensor_uniform = random_tensor_uniform.uniform(shape=(2, 2))\nprint(random_tensor_uniform)\n# tf.Tensor(\n# [[0.7493447  0.73561966]\n#  [0.45230794 0.49039817]], shape=(2, 2), dtype=float32)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Those values are ",(0,s.jsx)(e.em,{children:"pseudo random"})," since we are using a ",(0,s.jsx)(e.strong,{children:"fixed seed"})," of ",(0,s.jsx)(e.code,{children:"42"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"## prove pseudo-randomness\nrandom_tensor_1 = tf.random.Generator.from_seed(42)\nrandom_tensor_1 = random_tensor_1.normal(shape=(2, 2))\nrandom_tensor_2 = tf.random.Generator.from_seed(42)\nrandom_tensor_2 = random_tensor_2.normal(shape=(2, 2))\nprint(random_tensor_1 == random_tensor_2)\n# tf.Tensor(\n# [[ True  True]\n#  [ True  True]], shape=(2, 2), dtype=bool)\n"})}),"\n",(0,s.jsx)(e.p,{children:"But it is possible to shuffle the order of those values within the tensor. This is generally used in data pre-processing when you need to make sure that your training/testing dataset is not in any particular order that might create an overfitting problem."}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"tf.random.shuffle()"})," shuffles the values of a tensor around its first dimension:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"## shuffle order of generated values\nconstant_matrix = tf.constant([[44, 88],\n                       [77, 55],\n                       [1, 3]], name='constant')\n\nprint(constant_matrix)\n# tf.Tensor(\n# [[44 88]\n#  [77 55]\n#  [ 1  3]], shape=(3, 2), dtype=int32)\n\n## shuffle derives seed from both global and operation level\n## you have to set both to get the same shuffle on every run\n## tf.random.set_seed(42)\nshuffled_matrix = tf.random.shuffle(constant_matrix, seed=42, name='shuffled')\n                       \nprint(shuffled_matrix)\n# tf.Tensor(\n# [[ 1  3]\n#  [77 55]\n#  [44 88]], shape=(3, 2), dtype=int32)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"numpy-arrays-and-tensors",children:"Numpy Arrays and Tensors"}),"\n",(0,s.jsxs)(e.p,{children:["Tensorflow has very similar function to Numpy. E.g. generating matrices with fixed ",(0,s.jsx)(e.code,{children:"1"})," or ",(0,s.jsx)(e.code,{children:"0"})," values can be done directly in Tensorflow:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"# creating tensors with numpy\n## return tensors with `1` values\ntensor_one = tf.ones([3, 4], dtype=tf.int16)\nprint(tensor_one)\n# tf.Tensor(\n# [[1 1 1 1]\n#  [1 1 1 1]\n#  [1 1 1 1]], shape=(3, 4), dtype=int16)\n\n## return tensors with `0` values\ntensor_zero = tf.zeros([3, 4], dtype=tf.int16)\nprint(tensor_zero)\n# tf.Tensor(\n# [[0 0 0 0]\n#  [0 0 0 0]\n#  [0 0 0 0]], shape=(3, 4), dtype=int16)\n"})}),"\n",(0,s.jsx)(e.p,{children:"But sometimes you will need Numpy to preprocess your dataset. Once you have your data inside a Numpy array you will have to transform it into a Tensorflow tensor to proceed (the tensor can be processed on your GPU!):"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"## turn numpy array into tensor\nnumpy_array = np.arange(1, 25, dtype=np.int16)\nprint(numpy_array)\n# [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24]\n\ntf_vector = tf.constant(numpy_array)\nprint(tf_vector)\n# tf.Tensor([ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24], shape=(24,), dtype=int16)\n\ntf_tensor = tf.constant(numpy_array, shape=(2, 3, 4))\nprint(tf_tensor)\n# tf.Tensor(\n# [[[ 1  2  3  4]\n#   [ 5  6  7  8]\n#   [ 9 10 11 12]]\n\n#  [[13 14 15 16]\n#   [17 18 19 20]\n#   [21 22 23 24]]], shape=(2, 3, 4), dtype=int16)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"tensor-attributes",children:"Tensor Attributes"}),"\n",(0,s.jsx)(e.p,{children:"Tensors are described by:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Shape (",(0,s.jsx)(e.code,{children:"tensor.shape"}),")"]}),"\n",(0,s.jsxs)(e.li,{children:["Rank (",(0,s.jsx)(e.code,{children:"tensor.ndim"}),")"]}),"\n",(0,s.jsxs)(e.li,{children:["Axis or Dimension (",(0,s.jsx)(e.code,{children:"tensor[0]"}),", ",(0,s.jsx)(e.code,{children:"tensor[:, 1]"}),", ...)"]}),"\n",(0,s.jsxs)(e.li,{children:["Size (",(0,s.jsx)(e.code,{children:"tf.size(tensor)"}),")"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"# getting tensor attributes\n## rank\n### number of tensor dimensions\n### example: create a rank 4 tensor\nrank_4_tensor = tf.zeros(shape=[2, 2, 2, 2])\nprint(rank_4_tensor)\n# tf.Tensor(\n# [[[[0. 0.]\n#    [0. 0.]]\n\n#   [[0. 0.]\n#    [0. 0.]]]\n\n\n#  [[[0. 0.]\n#    [0. 0.]]\n\n#   [[0. 0.]\n#    [0. 0.]]]], shape=(2, 2, 2, 2), dtype=float32)\nprint(rank_4_tensor.ndim)\n# 4\n\n## shape\n### number of elements of each dimension\nprint(rank_4_tensor.shape)\n# (2, 2, 2, 2)\n\n## axis\n### a selected dimension\nprint(rank_4_tensor[0])\n# tf.Tensor(\n# [[[0. 0.]\n#   [0. 0.]]\n\n#  [[0. 0.]\n#   [0. 0.]]], shape=(2, 2, 2), dtype=float32)\n\n## size\n### total number of items\nprint(tf.size(rank_4_tensor))\n# tf.Tensor(16, shape=(), dtype=int32)\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:'## bringing it all together:\nprint("INFO :: Datatype of every element:", rank_4_tensor.dtype)\nprint("INFO :: Number of dimensions (Rank):", rank_4_tensor.ndim)\nprint("INFO :: Number of Elements in Tensor:", tf.size(rank_4_tensor).numpy())\nprint("INFO :: Tensor shape:", rank_4_tensor.shape)\nprint("INFO :: Elements along 0 Axis:", rank_4_tensor.shape[0])\nprint("INFO :: Elements along last Axis:", rank_4_tensor.shape[-1])\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"INFO :: Datatype of every element: <dtype: 'float32'>\nINFO :: Number of dimensions (Rank): 4\nINFO :: Number of Elements in Tensor: 16\nINFO :: Tensor shape: (2, 2, 2, 2)\nINFO :: Elements along 0 Axis: 2\nINFO :: Elements along last Axis: 2\n"})})]})}function h(n={}){const{wrapper:e}={...(0,t.ah)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},603905:(n,e,r)=>{r.d(e,{ah:()=>d});var s=r(667294);function t(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function o(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,s)}return r}function a(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){t(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function i(n,e){if(null==n)return{};var r,s,t=function(n,e){if(null==n)return{};var r,s,t={},o=Object.keys(n);for(s=0;s<o.length;s++)r=o[s],e.indexOf(r)>=0||(t[r]=n[r]);return t}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(s=0;s<o.length;s++)r=o[s],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(t[r]=n[r])}return t}var l=s.createContext({}),d=function(n){var e=s.useContext(l),r=e;return n&&(r="function"==typeof n?n(e):a(a({},e),n)),r},c={inlineCode:"code",wrapper:function(n){var e=n.children;return s.createElement(s.Fragment,{},e)}},h=s.forwardRef((function(n,e){var r=n.components,t=n.mdxType,o=n.originalType,l=n.parentName,h=i(n,["components","mdxType","originalType","parentName"]),f=d(r),p=t,u=f["".concat(l,".").concat(p)]||f[p]||c[p]||o;return r?s.createElement(u,a(a({ref:e},h),{},{components:r})):s.createElement(u,a({ref:e},h))}));h.displayName="MDXCreateElement"},233167:(n,e,r)=>{r.d(e,{Z:()=>s});const s=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-f80e63ee872dae25129198058ac93b4e.jpg"}}]);