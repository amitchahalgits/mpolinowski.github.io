"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[49611],{677115:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var o=r(785893),t=r(603905);const s={sidebar_position:5060,slug:"2022-05-24",title:"Hashicorp Nomad for NGINX Web Proxies",description:"",authors:"mpolinowski",tags:["Nomad","LINUX","NGINX"]},a=void 0,i={id:"DevOps/Hashicorp/2022-05-24-hashicorp-nomad-with-nginx/index",title:"Hashicorp Nomad for NGINX Web Proxies",description:"",source:"@site/docs/DevOps/Hashicorp/2022-05-24-hashicorp-nomad-with-nginx/index.md",sourceDirName:"DevOps/Hashicorp/2022-05-24-hashicorp-nomad-with-nginx",slug:"/DevOps/Hashicorp/2022-05-24-hashicorp-nomad-with-nginx/2022-05-24",permalink:"/docs/DevOps/Hashicorp/2022-05-24-hashicorp-nomad-with-nginx/2022-05-24",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-05-24-hashicorp-nomad-with-nginx/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"LINUX",permalink:"/docs/tags/linux"},{label:"NGINX",permalink:"/docs/tags/nginx"}],version:"current",sidebarPosition:5060,frontMatter:{sidebar_position:5060,slug:"2022-05-24",title:"Hashicorp Nomad for NGINX Web Proxies",description:"",authors:"mpolinowski",tags:["Nomad","LINUX","NGINX"]},sidebar:"tutorialSidebar",previous:{title:"App Deployment with Hashicorp Nomad from Gitlab",permalink:"/docs/DevOps/Hashicorp/2022-05-25-hashicorp-nomad-with-gitlab/2022-05-25"},next:{title:"Hashicorp Nomad with Consul II - The Reckoning",permalink:"/docs/DevOps/Hashicorp/2022-05-22-hashicorp-dojo-nomad-consul-part-2/2022-05-22"}},c={},d=[{value:"Configure NGINX Reverse Proxy for the Nomad / Consul Web UI",id:"configure-nginx-reverse-proxy-for-the-nomad--consul-web-ui",level:2},{value:"Security",id:"security",level:3},{value:"Restricting Access with HTTP Basic Authentication",id:"restricting-access-with-http-basic-authentication",level:4},{value:"Test Run",id:"test-run",level:3},{value:"Create a Nomad Job to set up the NGINX Proxy",id:"create-a-nomad-job-to-set-up-the-nginx-proxy",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.ah)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Shen Zhen, China",src:r(919487).Z+"",width:"2230",height:"839"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#configure-nginx-reverse-proxy-for-the-nomad--consul-web-ui",children:"Configure NGINX Reverse Proxy for the Nomad / Consul Web UI"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#security",children:"Security"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#restricting-access-with-http-basic-authentication",children:"Restricting Access with HTTP Basic Authentication"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#test-run",children:"Test Run"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#create-a-nomad-job-to-set-up-the-nginx-proxy",children:"Create a Nomad Job to set up the NGINX Proxy"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"NGINX can be used to reverse proxy web services and balance load across multiple instances of the same service. A reverse proxy has the added benefits of enabling multiple web services to share a single, memorable domain and authentication to view internal systems."}),"\n",(0,o.jsx)(n.h2,{id:"configure-nginx-reverse-proxy-for-the-nomad--consul-web-ui",children:"Configure NGINX Reverse Proxy for the Nomad / Consul Web UI"}),"\n",(0,o.jsx)(n.p,{children:"To ensure every feature in the Nomad UI remains fully functional, you must properly configure your reverse proxy to meet Nomad's specific networking requirements."}),"\n",(0,o.jsxs)(n.p,{children:["Create a basic NGINX configuration file to reverse proxy the Web UI. It is important to name the NGINX configuration file ",(0,o.jsx)(n.code,{children:"/opt/ingress/nginx.conf"})," otherwise the file will not bind correctly:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-conf",children:'# /opt/ingress/nginx.conf\nevents {}\n\nhttp {\n  # Since WebSockets are stateful connections but Nomad has multiple\n  # server nodes, an upstream with ip_hash declared is required to ensure\n  # that connections are always proxied to the same server node when possible.\n  upstream nomad {\n    ip_hash;\n    server localhost:4646;\n  }\n  upstream consul {\n    server localhost:8501;\n  }\n  server {\n    listen 8080;\n    server_name 0.0.0.0;\n    location / {\n      proxy_pass https://nomad;\n      proxy_ssl_server_name on;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      # Nomad blocking queries will remain open for a default of 5 minutes.\n      # Increase the proxy timeout to accommodate this timeout with an\n      # additional grace period.\n      proxy_read_timeout 310s;\n      # Nomad log streaming uses streaming HTTP requests. In order to\n      # synchronously stream logs from Nomad to NGINX to the browser\n      # proxy buffering needs to be turned off.\n      proxy_buffering off;\n      # The Upgrade and Connection headers are used to establish\n      # a WebSockets connection.\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection "upgrade";\n\n      # The default Origin header will be the proxy address, which\n      # will be rejected by Nomad. It must be rewritten to be the\n      # host address instead.\n      proxy_set_header Origin "${scheme}://${proxy_host}";\n    }\n  }\n  server {\n    listen 8081;\n    server_name 0.0.0.0;\n    location / {\n      proxy_pass https://consul;\n      proxy_ssl_server_name on;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_read_timeout 310s;\n      proxy_buffering off;\n    }\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note"})," that this takes the ",(0,o.jsx)(n.strong,{children:"HTTPS"})," connection from the Nomad (and Consul) and forwards it using ",(0,o.jsx)(n.strong,{children:"HTTP"}),". You basically downgrade attacking yourself. ",(0,o.jsx)(n.em,{children:"TODO"})," need to add ",(0,o.jsx)(n.a,{href:"https://nginx.org/en/docs/http/ngx_http_ssl_module.html",children:"TLS to NGINX"}),"!"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"security",children:"Security"}),"\n",(0,o.jsx)(n.h4,{id:"restricting-access-with-http-basic-authentication",children:"Restricting Access with HTTP Basic Authentication"}),"\n",(0,o.jsxs)(n.p,{children:["You can restrict access to your website or some parts of it by implementing a username/password authentication. Usernames and passwords are taken from a file created and populated by a password file creation tool, for example such as ",(0,o.jsx)(n.code,{children:"apt install apache2-utils"})," (Debian, Ubuntu) or ",(0,o.jsx)(n.code,{children:"yum install httpd-tools"})," (RHEL/CentOS/Oracle Linux)."]}),"\n",(0,o.jsxs)(n.p,{children:["Run the ",(0,o.jsx)(n.code,{children:"htpasswd"})," utility with the ",(0,o.jsx)(n.code,{children:"-c"})," flag (to create a new file), the file pathname as the first argument, and the username as the second argument:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"htpasswd -c /opt/ingress/.htpasswd myuser\n"})}),"\n",(0,o.jsxs)(n.p,{children:["We can limit access to the whole website with basic authentication by adding ",(0,o.jsx)(n.code,{children:"auth_basic"})," to the server block but still make some website areas public by specifying ",(0,o.jsx)(n.code,{children:"auth_basic off;"})," in specific location blocks. Or just add ",(0,o.jsx)(n.code,{children:"auth_basic"})," to every location block you want to lock down:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-conf",children:'# /opt/ingress/nginx.conf\nevents {}\n\nhttp {\n  upstream nomad {\n    ip_hash;\n    server localhost:4646;\n  }\n  upstream consul {\n    server localhost:8501;\n  }\n  server {\n    listen 8080;\n    server_name 0.0.0.0;\n    auth_basic "Administrator\u2019s Area";\n    auth_basic_user_file /etc/nginx/.htpasswd; \n    location / {\n      proxy_pass https://nomad;\n      proxy_ssl_server_name on;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_read_timeout 310s;\n      proxy_buffering off;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection "upgrade";\n      proxy_set_header Origin "${scheme}://${proxy_host}";\n    }\n  }\n  server {\n    listen 8081;\n    server_name 0.0.0.0;\n    auth_basic "Administrator\u2019s Area";\n    auth_basic_user_file /etc/nginx/.htpasswd; \n    location / {\n      proxy_pass https://consul;\n      proxy_ssl_server_name on;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_read_timeout 310s;\n      proxy_buffering off;\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"test-run",children:"Test Run"}),"\n",(0,o.jsx)(n.p,{children:"Next in a new terminal session, start NGINX in Docker using this configuration file:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker run --name ingress \\\n    --rm \\\n    --network host \\\n    --mount type=bind,source=/opt/ingress/nginx.conf,target=/etc/nginx/nginx.conf \\\n    --mount type=bind,source=/opt/ingress/.htpasswd,target=/etc/nginx/.htpasswd \\\n    nginx:1.23.0-alpine\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The Nomad UI is now being proxied on your server IP with port ",(0,o.jsx)(n.code,{children:"8080"})," and Consul's UI on port ",(0,o.jsx)(n.code,{children:"8081"})," - use your user login to access them:"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Hashicorp Nomad for NGINX Web Proxies",src:r(117838).Z+"",width:"1193",height:"460"})}),"\n",(0,o.jsx)(n.h2,{id:"create-a-nomad-job-to-set-up-the-nginx-proxy",children:"Create a Nomad Job to set up the NGINX Proxy"}),"\n",(0,o.jsxs)(n.p,{children:["I thought that I could now use Nomad to deploy the web proxy on the Nomad Master server. But apparently this is not the way... (why can't you reach out to master servers?). Anyway, as a proof of concept I will now spawn two web services on one of the minion servers on ports ",(0,o.jsx)(n.code,{children:"44555"})," and ",(0,o.jsx)(n.code,{children:"55444"})," and use Nomad to provide the web proxy for those services:"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"/etc/nomad.d/jobs/nginx_ingress.nomad"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'locals {\n  ports = [\n    {\n      port_label = "nomad"\n      port       = 8080\n    },\n    {\n      port_label = "consul"\n      port       = 8081\n    }\n  ]\n}\n\njob "nginx" {\n  datacenters = ["dc1"]\n\n  group "nginx" {\n    count = 1\n\n    network {\n      mode = "host"\n      dynamic "port" {\n        for_each = local.ports\n        labels   = [port.value.port_label]\n\n        content {\n          to = port.value.port\n        }\n      }\n    }\n\n    service {\n      name = "nginx"\n    }\n\n    task "nginx" {\n      driver = "docker"\n\n      config {\n        network_mode = "host"\n        image = "nginx:1.23.0-alpine"\n        ports = ["nomad","consul"]\n        volumes = [\n          "local/conf/nginx.conf:/etc/nginx/nginx.conf",\n          "local/conf/.htpasswd:/etc/nginx/conf.d/.htpasswd",\n        ]\n      }\n\n      template {\n        data = <<EOF\nevents {}\n\nhttp {\n  upstream nomad {\n    ip_hash;\n    server localhost:55444;\n  }\n  upstream consul {\n    server localhost:44555;\n  }\n  server {\n    listen 8080;\n    server_name 0.0.0.0;\n    auth_basic "Administrator\u2019s Area";\n    auth_basic_user_file /etc/nginx/conf.d/.htpasswd; \n    location / {\n      proxy_pass http://nomad;\n      proxy_ssl_server_name on;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_read_timeout 310s;\n      proxy_buffering off;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection "upgrade";\n      proxy_set_header Origin "${scheme}://${proxy_host}";\n    }\n  }\n  server {\n    listen 8081;\n    server_name 0.0.0.0;\n    auth_basic "Administrator\u2019s Area";\n    auth_basic_user_file /etc/nginx/conf.d/.htpasswd; \n    location / {\n      proxy_pass http://consul;\n      proxy_ssl_server_name on;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_read_timeout 310s;\n      proxy_buffering off;\n    }\n  }\n}\nEOF\n\n        destination   = "local/conf/nginx.conf"\n        change_mode   = "signal"\n        change_signal = "SIGHUP"\n      }\n\n      template {\n        data = <<EOF\nmyuser:%dsFdsfg4a$#@cch#$%IvNykKW3d/\nEOF\n\n        destination   = "local/conf/.htpasswd"\n        change_mode   = "signal"\n        change_signal = "SIGHUP"\n      }\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'nomad plan /etc/nomad.d/jobs/nginx_ingress.nomad                                                        \n+ Job: "nginx"\n+ Task Group: "nginx" (1 create)\n  + Task: "nginx" (forces create)\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nJob Modify Index: 34024\nTo submit the job with version verification run:\n\nnomad job run -check-index 34024 /etc/nomad.d/jobs/nginx_ingress.nomad\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Hashicorp Nomad for NGINX Web Proxies",src:r(680389).Z+"",width:"1078",height:"365"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"nomad status nginx                                                                                                   \nID            = nginx\nName          = nginx\nSubmit Date   = 2022-07-09T10:03:46+02:00\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created     Modified\nc92a039c  005f708b  nginx       4        run      running  20s ago     6s ago\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"nomad alloc logs c92a039c                                                                                            \n/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\n/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\n10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf\n10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh\n/docker-entrypoint.sh: Configuration complete; ready for start up\n"})}),"\n",(0,o.jsxs)(n.p,{children:["I now have both my web services on port ",(0,o.jsx)(n.code,{children:"55444"})," and ",(0,o.jsx)(n.code,{children:"44555"})," proxied through ports ",(0,o.jsx)(n.code,{children:"8080"})," and ",(0,o.jsx)(n.code,{children:"8081"})," with the user login provided in ",(0,o.jsx)(n.code,{children:".htpasswd"})]})]})}function h(e={}){const{wrapper:n}={...(0,t.ah)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>d});var o=r(667294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,o,t=function(e,n){if(null==e)return{};var r,o,t={},s=Object.keys(e);for(o=0;o<s.length;o++)r=s[o],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)r=s[o],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var c=o.createContext({}),d=function(e){var n=o.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},l={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var r=e.components,t=e.mdxType,s=e.originalType,c=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),p=d(r),u=t,m=p["".concat(c,".").concat(u)]||p[u]||l[u]||s;return r?o.createElement(m,a(a({ref:n},h),{},{components:r})):o.createElement(m,a({ref:n},h))}));h.displayName="MDXCreateElement"},680389:(e,n,r)=>{r.d(n,{Z:()=>o});const o=r.p+"assets/images/NGINX_Proxy_with_Nomad_01-631c46d53490a33884cb513ad349abc9.png"},117838:(e,n,r)=>{r.d(n,{Z:()=>o});const o=r.p+"assets/images/Nomad_NGINX_Proxy_01-c341567ab8160b5616e0c199caee019b.png"},919487:(e,n,r)=>{r.d(n,{Z:()=>o});const o=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"}}]);