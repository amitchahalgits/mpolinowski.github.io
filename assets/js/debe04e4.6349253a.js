"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[26238],{784392:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var s=r(474848),o=r(28453);const i={sidebar_position:4830,slug:"2023-01-01",title:"Tensorflow Docker Model Server",authors:"mpolinowski",tags:["Python","Machine Learning"],description:"Use Tensorflow Serving to Provision your ML Model"},t=void 0,l={id:"IoT-and-Machine-Learning/AIOps/2023-01-01-tf-model-server/index",title:"Tensorflow Docker Model Server",description:"Use Tensorflow Serving to Provision your ML Model",source:"@site/docs/IoT-and-Machine-Learning/AIOps/2023-01-01-tf-model-server/index.md",sourceDirName:"IoT-and-Machine-Learning/AIOps/2023-01-01-tf-model-server",slug:"/IoT-and-Machine-Learning/AIOps/2023-01-01-tf-model-server/2023-01-01",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-01-01-tf-model-server/2023-01-01",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/AIOps/2023-01-01-tf-model-server/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"}],version:"current",sidebarPosition:4830,frontMatter:{sidebar_position:4830,slug:"2023-01-01",title:"Tensorflow Docker Model Server",authors:"mpolinowski",tags:["Python","Machine Learning"],description:"Use Tensorflow Serving to Provision your ML Model"},sidebar:"tutorialSidebar",previous:{title:"Tensorflow Serving REST API",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-01-02-tf-serve-own-models/2023-01-02"},next:{title:"Automation, Deep Vision and Robotics",permalink:"/docs/category/automation-deep-vision-and-robotics"}},a={},d=[{value:"TensorFlow Serving with Docker",id:"tensorflow-serving-with-docker",level:2},{value:"Serving with Docker using your GPU",id:"serving-with-docker-using-your-gpu",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Guangzhou, China",src:r(148558).A+"",width:"1500",height:"662"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#tensorflow-serving-with-docker",children:"TensorFlow Serving with Docker"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#serving-with-docker-using-your-gpu",children:"Serving with Docker using your GPU"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.tensorflow.org/tfx/guide/serving",children:"TensorFlow Serving"})," is a flexible, high-performance serving system for machine learning models, designed for production environments. TensorFlow Serving makes it easy to deploy new algorithms and experiments, while keeping the same server architecture and APIs. TensorFlow Serving provides out-of-the-box integration with TensorFlow models, but can be easily extended to serve other types of models and data."]}),"\n",(0,s.jsx)(n.h2,{id:"tensorflow-serving-with-docker",children:"TensorFlow Serving with Docker"}),"\n",(0,s.jsxs)(n.p,{children:["The serving server can be pulled from ",(0,s.jsx)(n.a,{href:"https://hub.docker.com/r/tensorflow/serving/tags/",children:"Docker Hub"})," and is available with and without ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2022-11-27-containerized-deep-learning/2022-11-27",children:"GPU support"})," - pick the one you need:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker pull tensorflow/serving:latest-gpu\ndocker pull tensorflow/serving:latest\n"})}),"\n",(0,s.jsx)(n.p,{children:"The serving images (both CPU and GPU) have the following properties:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Port ",(0,s.jsx)(n.code,{children:"8500"})," exposed for ",(0,s.jsx)(n.em,{children:"gRPC"})]}),"\n",(0,s.jsxs)(n.li,{children:["Port ",(0,s.jsx)(n.code,{children:"8501"})," exposed for the ",(0,s.jsx)(n.em,{children:"REST API"})]}),"\n",(0,s.jsxs)(n.li,{children:["Optional environment variable ",(0,s.jsx)(n.strong,{children:"MODEL_NAME"})," (defaults to ",(0,s.jsx)(n.code,{children:"mode"}),"l)"]}),"\n",(0,s.jsxs)(n.li,{children:["Optional environment variable ",(0,s.jsx)(n.strong,{children:"MODEL_BASE_PATH"})," (defaults to ",(0,s.jsx)(n.code,{children:"/models"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://github.com/tensorflow/serving",children:"Tensorflow Serving Repository"})," already provides a ",(0,s.jsx)(n.a,{href:"https://github.com/tensorflow/serving/tree/master/tensorflow_serving/servables/tensorflow/testdata",children:"few models for testing"})," that we can use:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/tensorflow/serving\ncd ./serving\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now we can run the docker container and mount one of those models:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'docker run -t --rm -p 8501:8501 \\\n    -v "$(pwd)/tensorflow_serving/servables/tensorflow/testdata/saved_model_half_plus_two_gpu:/models/half_plus_two" \\\n    -e MODEL_NAME=half_plus_two \\\n    tensorflow/serving:latest-gpu\n'})}),"\n",(0,s.jsx)(n.p,{children:"This will run the docker container, launch the TensorFlow Serving Model Server, bind the REST API port 8501, and map our desired model from our host to where models are expected in the container. We also pass the name of the model as an environment variable, which will be important when we query the model."}),"\n",(0,s.jsxs)(n.p,{children:["Even though I already installed ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2022-11-27-containerized-deep-learning/2022-11-27",children:"Nvidias GPU support for Docker"})," I am still getting an error message here:"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Failed to start server. Error: UNKNOWN: 1 servable(s) did not become available: {{{name: half_plus_two version: 123} due to error: INVALID_ARGUMENT: Cannot assign a device for operation a: {{node a}} was explicitly assigned to /device:GPU:0 but available devices are [ /job:localhost/replica:0/task:0/device:CPU:0 ]. Make sure the device specification refers to a valid device"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"serving-with-docker-using-your-gpu",children:"Serving with Docker using your GPU"}),"\n",(0,s.jsx)(n.p,{children:"Before serving with a GPU, in addition to installing Docker, you will need:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"NVIDIA drivers"})," for your system"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"nvidia-docker"}),": ",(0,s.jsx)(n.a,{href:"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker",children:"can follow the installation instructions here"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nvidia-smi\n\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 525.60.11    Driver Version: 525.60.11    CUDA Version: 12.0     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  NVIDIA GeForce ...  Off  | 00000000:01:00.0  On |                  N/A |\n|  0%   56C    P0    29W / 130W |    780MiB /  6144MiB |      4%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Rerunning the GPU image - it seems all that I was missing was the ",(0,s.jsx)(n.strong,{children:"GPU flag"})," ",(0,s.jsx)(n.code,{children:"--gpus all"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker run --gpus all -p 8501:8501 \\\n--mount type=bind,source=$(pwd)/tensorflow_serving/servables/tensorflow/testdata/saved_model_half_plus_two_gpu,target=/models/half_plus_two \\\n-e MODEL_NAME=half_plus_two -t tensorflow/serving:latest-gpu &\n"})}),"\n",(0,s.jsx)(n.p,{children:"And this time we have lift-off:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"I tensorflow_serving/model_servers/server_core.cc:486] Finished adding/updating models\nI tensorflow_serving/model_servers/server.cc:118] Using InsecureServerCredentials\nI tensorflow_serving/model_servers/server.cc:383] Profiler service is enabled\nI tensorflow_serving/model_servers/server.cc:409] Running gRPC ModelServer at 0.0.0.0:8500 ...\nI tensorflow_serving/model_servers/server.cc:430] Exporting HTTP/REST API at:localhost:8501 ...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The Half Plus Two model generates ",(0,s.jsx)(n.code,{children:"0.5 * x + 2"})," for the values of x we provide for prediction. This model will now have ops bound to the GPU device, and will not run on the CPU. We can now make a prediction using the Tensorflow Serving REST API. When sending the values for ",(0,s.jsx)(n.code,{children:"x"})," 1,2 and 5 I expect a returned prediction of 2.5, 3.5 and 4.5:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -d '{\"instances\": [1.0, 2.0, 5.0]}' \\\n  -X POST http://localhost:8501/v1/models/half_plus_two:predict\n"})}),"\n",(0,s.jsx)(n.p,{children:"Taaadaa:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "predictions": [2.5, 3.0, 4.5]\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},148558:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-296769d73822f07b0ac5dc952f56bfa1.jpg"},28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var s=r(296540);const o={},i=s.createContext(o);function t(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);