"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[58180],{148573:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=r(474848),i=r(28453);const a={sidebar_position:6e3,slug:"2022-02-17",title:"Yolo App - Pipeline Predictions",authors:"mpolinowski",tags:["Tensorflow","Machine Learning","Python","YOLO"]},t=void 0,s={id:"IoT-and-Machine-Learning/ML/2022-02-17--yolo-app-prediction-pipeline/index",title:"Yolo App - Pipeline Predictions",description:"Shenzhen, China",source:"@site/docs/IoT-and-Machine-Learning/ML/2022-02-17--yolo-app-prediction-pipeline/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2022-02-17--yolo-app-prediction-pipeline",slug:"/IoT-and-Machine-Learning/ML/2022-02-17--yolo-app-prediction-pipeline/2022-02-17",permalink:"/docs/IoT-and-Machine-Learning/ML/2022-02-17--yolo-app-prediction-pipeline/2022-02-17",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2022-02-17--yolo-app-prediction-pipeline/index.md",tags:[{label:"Tensorflow",permalink:"/docs/tags/tensorflow"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Python",permalink:"/docs/tags/python"},{label:"YOLO",permalink:"/docs/tags/yolo"}],version:"current",sidebarPosition:6e3,frontMatter:{sidebar_position:6e3,slug:"2022-02-17",title:"Yolo App - Pipeline Predictions",authors:"mpolinowski",tags:["Tensorflow","Machine Learning","Python","YOLO"]},sidebar:"tutorialSidebar",previous:{title:"Yolo App - Tesseract Optical Character Recognition",permalink:"/docs/IoT-and-Machine-Learning/ML/2022-02-18--yolo-app-ocr/2022-02-18"},next:{title:"Yolo App - Train a Model with Tensorflow",permalink:"/docs/IoT-and-Machine-Learning/ML/2022-02-16--yolo-app-tensorflow-model/2022-02-16"}},d={},l=[{value:"Model Predictions",id:"model-predictions",level:2},{value:"Loading the Model",id:"loading-the-model",level:3},{value:"Load a Test Image",id:"load-a-test-image",level:3},{value:"Predict Number Plate Coordinates",id:"predict-number-plate-coordinates",level:3},{value:"Detection Pipeline",id:"detection-pipeline",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Shenzhen, China",src:r(612307).A+"",width:"1500",height:"688"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2022-02-15--yolo-app-get-data/2022-02-15",children:"Prepare your Images and get Data"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2022-02-16--yolo-app-tensorflow-model/2022-02-16",children:"Train your Tensorflow Model"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2022-02-17--yolo-app-prediction-pipeline/2022-02-17",children:"Use your Model to do Predictions"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2022-02-18--yolo-app-ocr/2022-02-18",children:"Use Tesseract to Read Number Plates"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2022-02-19--yolo-app-flask/2022-02-19",children:"Flask Web Application"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2022-02-20--yolo-app-yolov5-data-prep/2022-02-20",children:"Yolo v5 - Data Prep"})}),"\n"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#model-predictions",children:"Model Predictions"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#loading-the-model",children:"Loading the Model"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#load-a-test-image",children:"Load a Test Image"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#predict-number-plate-coordinates",children:"Predict Number Plate Coordinates"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#detection-pipeline",children:"Detection Pipeline"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"model-predictions",children:"Model Predictions"}),"\n",(0,o.jsx)(n.h3,{id:"loading-the-model",children:"Loading the Model"}),"\n",(0,o.jsx)(n.p,{children:"I can now load the trained model and try to run a prediction:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"import numpy as np\r\nimport cv2\r\nimport matplotlib.pyplot as plt\r\nimport tensorflow as tf\r\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\r\n\r\n# Load the trained model\r\nmodel = tf.keras.models.load_model('../models/object_detection.h5')\r\nprint('[INFO] object detection model loaded')\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://stackoverflow.com/questions/44232898/memoryerror-in-tensorflow-and-successful-numa-node-read-from-sysfs-had-negativ",children:"Memory Error in Tensorflow"}),": ",(0,o.jsx)(n.code,{children:"I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:936] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero"})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Running the following command from my console to set each device to ",(0,o.jsx)(n.code,{children:"0"})," got rid of the warning:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"for a in /sys/bus/pci/devices/*; do echo 0 | sudo tee -a $a/numa_node; done\n"})}),"\n",(0,o.jsx)(n.h3,{id:"load-a-test-image",children:"Load a Test Image"}),"\n",(0,o.jsx)(n.p,{children:"I now need to pick an image the model was not trained on to check to models accuracy:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"# Pick a test image that your model was not trained on\r\npath = './test_images/index5.jpg'\r\nimage = load_img(path) # PIL object\r\n\r\n# convert into array and get the normalized output\r\nimage = np.array(image,dtype=np.uint8) # 8 bit array (0,255)\r\nimage1 = load_img(path,target_size=(224,224))\r\nimage_arr_224 = img_to_array(image1)/255.0\r\n\r\n# Get size of the orginal image\r\nh,w,d = image.shape\r\nprint('Image height:',h)\r\nprint('Image width:',w)\r\n\r\n# Show selected image\r\nplt.figure(figsize=(10,8))\r\nplt.imshow(image)\r\nplt.show()\n"})}),"\n",(0,o.jsx)(n.h3,{id:"predict-number-plate-coordinates",children:"Predict Number Plate Coordinates"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"# Check if dimensions are OK\r\nimage_arr_224.shape\r\n\r\n# Add index number colume to shape\r\ntest_arr = image_arr_224.reshape(1,224,224,3)\r\ntest_arr.shape\r\n\r\n# Use trained model to predict \r\n# number plate location\r\ncoords = model.predict(test_arr)\r\ncoords\r\n\r\n# Denormalize output\r\ndenorm = np.array([w,w,h,h])\r\ncoords = (coords * denorm).astype(np.int32)\r\ncoords\r\n\r\n# Daw bounding on top the image\r\nxmin, xmax,ymin,ymax = coords[0]\r\npt1 =(xmin,ymin)\r\npt2 =(xmax,ymax)\r\nprint(pt1, pt2)\r\ncv2.rectangle(image,pt1,pt2,(0,255,0),3)\r\n\r\nplt.figure(figsize=(10,8))\r\nplt.imshow(image)\r\nplt.show()\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Tensorflow Predictions",src:r(812024).A+"",width:"1070",height:"661"})}),"\n",(0,o.jsx)(n.h2,{id:"detection-pipeline",children:"Detection Pipeline"}),"\n",(0,o.jsx)(n.p,{children:"I can now wrap everything into a single function:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"# Wrap all steps into a function\r\ndef object_detection(path):\r\n    # Read image\r\n    image = load_img(path) # PIL object\r\n    image = np.array(image,dtype=np.uint8) # 8 bit array (0,255)\r\n    image1 = load_img(path,target_size=(224,224))\r\n    # Data preprocessing\r\n    image_arr_224 = img_to_array(image1)/255.0  # convert into array and get the normalized output\r\n    h,w,d = image.shape\r\n    test_arr = image_arr_224.reshape(1,224,224,3)\r\n    # Make predictions\r\n    coords = model.predict(test_arr)\r\n    # Denormalize the values\r\n    denorm = np.array([w,w,h,h])\r\n    coords = coords * denorm\r\n    coords = coords.astype(np.int32)\r\n    # Draw bounding on top the image\r\n    xmin, xmax,ymin,ymax = coords[0]\r\n    pt1 =(xmin,ymin)\r\n    pt2 =(xmax,ymax)\r\n    print(pt1, pt2)\r\n    cv2.rectangle(image,pt1,pt2,(0,255,0),3)\r\n    return image, coords\n"})}),"\n",(0,o.jsx)(n.p,{children:"I can test the function on another image:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"# Select another test image\r\npath = './test_images/index3.jpg'\r\n# Use function to select number plate\r\nimage, cods = object_detection(path)\r\n\r\nplt.figure(figsize=(10,8))\r\nplt.imshow(image)\r\nplt.show()\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Tensorflow Predictions",src:r(123987).A+"",width:"1073",height:"550"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},812024:(e,n,r)=>{r.d(n,{A:()=>o});const o=r.p+"assets/images/Yolo_App_TF_Predictions_01-f89d2a0225a615abdfe7b1d7049a6c18.png"},123987:(e,n,r)=>{r.d(n,{A:()=>o});const o=r.p+"assets/images/Yolo_App_TF_Predictions_02-c7f008d70b246f0aa472c9f4c5a81563.png"},612307:(e,n,r)=>{r.d(n,{A:()=>o});const o=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-ffe80356d19fb4b090a3bef79b45aab3.jpg"},28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>s});var o=r(296540);const i={},a=o.createContext(i);function t(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);