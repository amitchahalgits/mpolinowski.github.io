"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[34045],{288305:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=t(785893),r=t(603905);const s={sidebar_position:8080,slug:"2020-06-23",title:"Saltstack Refresh Course 2: Salt Mines",authors:"mpolinowski",tags:["LINUX","Salt"]},i=void 0,l={id:"DevOps/Salt/2020-06-23--saltestack-refresh-course-4-salt-mine/index",title:"Saltstack Refresh Course 2: Salt Mines",description:"Cheung Chau, Hong Kong",source:"@site/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-4-salt-mine/index.md",sourceDirName:"DevOps/Salt/2020-06-23--saltestack-refresh-course-4-salt-mine",slug:"/DevOps/Salt/2020-06-23--saltestack-refresh-course-4-salt-mine/2020-06-23",permalink:"/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-4-salt-mine/2020-06-23",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-4-salt-mine/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Salt",permalink:"/docs/tags/salt"}],version:"current",sidebarPosition:8080,frontMatter:{sidebar_position:8080,slug:"2020-06-23",title:"Saltstack Refresh Course 2: Salt Mines",authors:"mpolinowski",tags:["LINUX","Salt"]},sidebar:"tutorialSidebar",previous:{title:"Salt Orchestration for Docker Containers",permalink:"/docs/DevOps/Salt/2020-06-25--salt-orchestration-for-docker-containers/2020-06-25"},next:{title:"Saltstack Refresh Course 2: Highstate",permalink:"/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-3-highstate/2020-06-23"}},o={},c=[{value:"Salt Mine Setup",id:"salt-mine-setup",level:2},{value:"Using Mine Data with JinJa",id:"using-mine-data-with-jinja",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.ah)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Cheung Chau, Hong Kong",src:t(562251).Z+"",width:"1500",height:"587"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#salt-mine-setup",children:"Salt Mine Setup"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#using-mine-data-with-jinja",children:"Using Mine Data with JinJa"})}),"\n"]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.mine.html#module-salt.modules.mine",children:"salt.modules.mine"}),": The function cache system allows for data to be stored on the master so it can be easily read by other minions"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"salt-mine-setup",children:"Salt Mine Setup"}),"\n",(0,a.jsx)(n.p,{children:"We can configure the value that we want to mine from our minion inside it's configuration file. For testing I want to read my minions IP address and make it available to my other minions through a salt mine. The salt command to get your minions LAN IP address is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"salt '*' network.ip_addrs 'enp*'\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Where the globbing in the end takes care of the fact that the primary LAN port is now no longer called ",(0,a.jsx)(n.code,{children:"eth0"})," but can have the ID's ",(0,a.jsx)(n.code,{children:"enp2s0"}),", ",(0,a.jsx)(n.code,{children:"enp3s0"}),", etc. To mine this value we can now add the following configuration to our minion servers - make sure that you choose the right interface here by first checking ",(0,a.jsx)(n.code,{children:"ip a"}),":"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"/etc/salt/minion.d/mine.conf"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yml",children:"mine_interval: 60\r\nmine_functions:\r\n  network.ip_addrs ['enp2s0']\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now you have to restart your minion services:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pkill -9 salt-minion\r\nsalt-minion -d\n"})}),"\n",(0,a.jsx)(n.p,{children:"You can test your mine now by asking one of your minions for the IPv4 address of all your other minions (that configured above):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"salt salt-minion mine.get '*' network.ip_addrs\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yml",children:"salt-minion:\r\n    ----------\r\n    salt-master_minion:\r\n        - 172.17.0.1\r\n        - 192.168.2.110\r\n    salt-minion:\r\n        - 172.17.0.1\r\n        - 192.168.2.111\n"})}),"\n",(0,a.jsx)(n.h2,{id:"using-mine-data-with-jinja",children:"Using Mine Data with JinJa"}),"\n",(0,a.jsxs)(n.p,{children:["I want to use the mined data inside my Apache web service using a Jinja template. For this I just need to modify my Apache state by adding the line ",(0,a.jsx)(n.code,{children:"template: jinja"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yml",children:"install_apache:\r\n  pkg.installed:\r\n    - pkgs:\r\n      - apache2\r\n\r\nindex_html:\r\n  file.managed:\r\n    - name: /var/www/html/index.html\r\n    - source: salt://apache/templates/index.html\r\n    - template: jinja\r\n    - user: www-data\r\n    - group: www-data\r\n    - mode: 644\r\n\r\napache_service:\r\n  service.running:\r\n    - name: apache2\r\n    - enable: True\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now I am able to use Jinja to get access to the mined data inside ",(0,a.jsx)(n.code,{children:"salt://apache/templates/index.html"}),":"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"/srv/salt/states/base/apache/templates/index.html"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:"<!doctype html>\r\n\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n\r\n  <title>Salty Dayz, Sailor!</title>\r\n  <meta name=\"description\" content=\"Salt Apache Template\">\r\n</head>\r\n\r\n<body>\r\n  \r\n  {% set minion_ips = salt['mine.get']('salt-master_minion', 'network.ip_addrs') %}\r\n  <strong>Salt Master:</strong>{{ minion_ips['salt-master_minion'][-1] }}\r\n\r\n  <br/>\r\n  \r\n  {% set minion_ips = salt['mine.get']('salt-minion', 'network.ip_addrs') %}\r\n  <strong>Salt Minion:</strong> {{ minion_ips['salt-minion'][-1] }}\r\n\r\n</body>\r\n</html>\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Jinja Script in words:"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Create a variable ",(0,a.jsx)(n.code,{children:"minion_ips"})]}),"\n",(0,a.jsxs)(n.li,{children:["Set this variable to the mined value of ",(0,a.jsx)(n.code,{children:"network.ip_addrs"})," that you get from your minions."]}),"\n",(0,a.jsxs)(n.li,{children:["Call the value of the variable ",(0,a.jsx)(n.code,{children:"minion_ips"})," and display the ",(0,a.jsx)(n.code,{children:"-1"})," index - which is the last value in the list - the IP that starts with ",(0,a.jsx)(n.code,{children:"192.168.2*"})," see above."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Now apply the updated state to your web server minion and check the Apache webpage output:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"salt salt-minion state.apply\n"})}),"\n",(0,a.jsx)(n.p,{children:"The output should read:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:"Salt Master:192.168.2.110\r\nSalt Minion: 192.168.2.111\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.ah)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},603905:(e,n,t)=>{t.d(n,{ah:()=>c});var a=t(667294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),c=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),m=c(t),p=r,u=m["".concat(o,".").concat(p)]||m[p]||d[p]||s;return t?a.createElement(u,i(i({ref:n},h),{},{components:t})):a.createElement(u,i({ref:n},h))}));h.displayName="MDXCreateElement"},562251:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-2d980c8e8e8c8e283eb880d538a3c754.jpg"}}]);