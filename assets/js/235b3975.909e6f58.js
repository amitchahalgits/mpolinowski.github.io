"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[35103],{305576:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var i=e(474848),o=e(28453);const s={sidebar_position:8870,slug:"2023-05-07",title:"A little bit of SciPy...",authors:"mpolinowski",tags:["Python","Cheating"],description:"A quick introduction to Scientific Python"},a="SciPy Introduction",l={id:"Development/Python/2023-05-07-python-scipy-introduction/index",title:"A little bit of SciPy...",description:"A quick introduction to Scientific Python",source:"@site/docs/Development/Python/2023-05-07-python-scipy-introduction/index.md",sourceDirName:"Development/Python/2023-05-07-python-scipy-introduction",slug:"/Development/Python/2023-05-07-python-scipy-introduction/2023-05-07",permalink:"/docs/Development/Python/2023-05-07-python-scipy-introduction/2023-05-07",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Python/2023-05-07-python-scipy-introduction/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Cheating",permalink:"/docs/tags/cheating"}],version:"current",sidebarPosition:8870,frontMatter:{sidebar_position:8870,slug:"2023-05-07",title:"A little bit of SciPy...",authors:"mpolinowski",tags:["Python","Cheating"],description:"A quick introduction to Scientific Python"},sidebar:"tutorialSidebar",previous:{title:"Seaborn Cheat Sheet 2023",permalink:"/docs/Development/Python/2023-05-07-python-seaborn-cheat-sheet/2023-05-07"},next:{title:"Matplotlib Pyplot Cheat Sheet 2023",permalink:"/docs/Development/Python/2023-05-03-python-matplotlib-cheat-sheet/2023-05-03"}},r={},c=[{value:"Global Minimum and Maximum",id:"global-minimum-and-maximum",level:2},{value:"BFGS (Broyden-Fletcher-Goldfarb-Shanno Algorithm)",id:"bfgs-broyden-fletcher-goldfarb-shanno-algorithm",level:3},{value:"Basin-Hopping Algorithm",id:"basin-hopping-algorithm",level:3},{value:"Curve Fitting",id:"curve-fitting",level:2}];function d(n){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Sham Sui Po, Hong Kong",src:e(126222).A+"",width:"1500",height:"548"})}),"\n",(0,i.jsx)(t.h1,{id:"scipy-introduction",children:"SciPy Introduction"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://github.com/mpolinowski/python-scipy-intro",children:"Github Repository"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"#scipy-introduction",children:"SciPy Introduction"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"#global-minimum-and-maximum",children:"Global Minimum and Maximum"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#bfgs-broyden-fletcher-goldfarb-shanno-algorithm",children:"BFGS (Broyden-Fletcher-Goldfarb-Shanno Algorithm)"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#basin-hopping-algorithm",children:"Basin-Hopping Algorithm"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#curve-fitting",children:"Curve Fitting"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"import matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.optimize as opt\n"})}),"\n",(0,i.jsx)(t.h2,{id:"global-minimum-and-maximum",children:"Global Minimum and Maximum"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"def f(x):\n    return x**2 + 10*np.sin(x) + 2*x\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"x = np.linspace(-10,10,51)\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"y = f(x)\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"fig = plt.figure(figsize=(10,5))\n\nplt.plot(x,y)\n\nplt.title('f(x)=x\xb2 + 10*sin(x) + 2*x')\nplt.grid()\n\nfig.savefig('assets/SciPy_Introduction_00.webp', bbox_inches='tight')\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"SciPy Introduction",src:e(622821).A+"",width:"831",height:"451"})}),"\n",(0,i.jsx)(t.h3,{id:"bfgs-broyden-fletcher-goldfarb-shanno-algorithm",children:"BFGS (Broyden-Fletcher-Goldfarb-Shanno Algorithm)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# start searching for a local minimum at x0=0\nx0 = 0\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# use BFGS (Broyden-Fletcher-Goldfarb-Shanno Algorithm)\n[xopt, fopt, gopt, Bodpt, func_calls, grad_calls, warnflags] = opt.fmin_bfgs(\n    f, x0=x0,\n    maxiter=2000,\n    full_output=True\n)\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Optimization terminated successfully.\n         Current function value: -10.728527\n         Iterations: 5\n         Function evaluations: 12\n         Gradient evaluations: 6\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"fig = plt.figure(figsize=(10,5))\n\nplt.plot(x,y, c='fuchsia')\n# start point f(x) = -10.728527\nplt.plot([x0], [f(x0)], 'o', c='dodgerblue')\n# found minimum @[xopt, fopt]\nplt.plot([xopt], [fopt], 'x', c='indigo')\nplt.title('Global Minimum from x0=0')\nplt.grid()\n\nfig.savefig('assets/SciPy_Introduction_01.webp', bbox_inches='tight')\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"SciPy Introduction",src:e(551322).A+"",width:"831",height:"451"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# start searching for a local minimum at x0=7.5\nx0 = 7.5\n\n# use BFGS (Broyden-Fletcher-Goldfarb-Shanno Algorithm)\n[xopt, fopt, gopt, Bodpt, func_calls, grad_calls, warnflags] = opt.fmin_bfgs(\n    f, x0=x0,\n    maxiter=2000,\n    full_output=True\n)\n\nfig = plt.figure(figsize=(10,5))\n\nplt.plot(x,y, c='fuchsia')\n# start point [x0, f(x0)]\nplt.plot([x0], [f(x0)], 'o', c='dodgerblue')\n# found minimum @[xopt, fopt]\nplt.plot([xopt], [fopt], 'x', c='indigo')\nplt.title('Local Minimum from x0=7.5')\nplt.grid()\n\nfig.savefig('assets/SciPy_Introduction_02.webp', bbox_inches='tight')\n"})}),"\n",(0,i.jsx)(t.p,{children:"The algorithm stops searching for a global minimum after finding the first local minimum:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Optimization terminated successfully.\n         Current function value: 15.730518\n         Iterations: 5\n         Function evaluations: 22\n         Gradient evaluations: 11\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"SciPy Introduction",src:e(138171).A+"",width:"831",height:"451"})}),"\n",(0,i.jsx)(t.h3,{id:"basin-hopping-algorithm",children:"Basin-Hopping Algorithm"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# start searching for a local minimum at x0=7.5\nx0 = 7.5\n\n# the bh algo requiers a max number of jumps it should perform niter\n# and a temperature parameter T that allows for larger jumps to be able\n# to hop over local minimums with a maximum step size of stepsize\nresults = opt.basinhopping(f, x0 = x0, niter=3, T=1, stepsize=2)\nresults\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"                        fun: -10.728527164657866\n lowest_optimization_result:       fun: -10.728527164657866\n hess_inv: array([[0.08364616]])\n      jac: array([-2.38418579e-07])\n  message: 'Optimization terminated successfully.'\n     nfev: 10\n      nit: 3\n     njev: 5\n   status: 0\n  success: True\n        x: array([-1.47554364])\n                    message: ['requested number of basinhopping iterations completed successfully']\n      minimization_failures: 0\n                       nfev: 64\n                        nit: 3\n                       njev: 32\n                    success: True\n                          x: array([-1.47554364])\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"fig = plt.figure(figsize=(10,5))\n\nplt.plot(x,y, c='fuchsia')\n# start point [x0, f(x0)]\nplt.plot([x0], [f(x0)], 'o', c='dodgerblue')\n# found minimum @[xopt, fopt]\nplt.plot([results.x], [results.fun], 'x', c='indigo')\nplt.title('Local Minimum from x0=7.5')\nplt.grid()\n\nfig.savefig('assets/SciPy_Introduction_03.webp', bbox_inches='tight')\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"SciPy Introduction",src:e(361720).A+"",width:"831",height:"451"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# start searching for a local minimum at x0=7.5\nx0 = 7.5\n\n# increase temperature and max allowed stepsize to 3\nresults = opt.basinhopping(f, x0 = x0, niter=3, T=2, stepsize=3)\n\nfig = plt.figure(figsize=(10,5))\n\nplt.plot(x,y, c='fuchsia')\n# start point [x0, f(x0)]\nplt.plot([x0], [f(x0)], 'o', c='dodgerblue')\n# found minimum @[xopt, fopt]\nplt.plot([results.x], [results.fun], 'x', c='indigo')\nplt.title('Global Minimum from x0=7.5')\nplt.grid()\n\nfig.savefig('assets/SciPy_Introduction_04.webp', bbox_inches='tight')\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"SciPy Introduction",src:e(70289).A+"",width:"831",height:"451"})}),"\n",(0,i.jsx)(t.h2,{id:"curve-fitting",children:"Curve Fitting"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# generate noisy data based on function above\ny_noisy = f(x) + 7*np.random.randn(x.size)\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"fig = plt.figure(figsize=(10,5))\n\nplt.plot(x,y_noisy, 'o', c='dodgerblue', markersize=1.5, label='noisy data')\nplt.plot(x,y, c='mediumseagreen', linewidth=0.2, label='ground truth')\n\nplt.title('f(x)=x\xb2 + 10*sin(x) + 2*x (Noisy)')\nplt.legend()\nplt.grid()\n\nfig.savefig('assets/SciPy_Introduction_05.webp', bbox_inches='tight')\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"SciPy Introduction",src:e(813014).A+"",width:"833",height:"451"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# find optimum for variables in f(x)=ax\xb2 + b*sin(x) + c*x\n# to find a best fit to noisy data\ndef f_guess(x, a, b, c):\n    return a*x**2 + b*np.sin(x) + c*x\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# start guessing with a to c = 2\nstart_values = [2,2,2]\n\nparams, cov = opt.curve_fit(f_guess, x, y_noisy, start_values)\nparams\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"array([ 0.97651997, 10.38400783,  2.06441947])"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"def f_fitted(x, a_fit, b_fit, c_fit):\n    return a_fit * x**2 + b_fit * np.sin(x) + c_fit * x\n\ny_fitted=f_fitted(\n    x,\n    a_fit=params[0],\n    b_fit=params[1],\n    c_fit=params[2]\n)\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"fig = plt.figure(figsize=(10,5))\n\nplt.plot(x,y_noisy, 'o', c='dodgerblue', markersize=1.5, label='noisy data')\nplt.plot(x,y_fitted, c='fuchsia', linewidth=1.5, label='fitted function')\n\nplt.title('f(x)=a*x\xb2 + b*sin(x) + c*x (Fitted)')\nplt.legend()\nplt.grid()\n\nfig.savefig('assets/SciPy_Introduction_06.webp', bbox_inches='tight')\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"SciPy Introduction",src:e(434039).A+"",width:"833",height:"451"})})]})}function p(n={}){const{wrapper:t}={...(0,o.R)(),...n.components};return t?(0,i.jsx)(t,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},622821:(n,t,e)=>{e.d(t,{A:()=>i});const i=e.p+"assets/images/SciPy_Introduction_00-1fb453c98c6111715da91825cf2e551a.webp"},551322:(n,t,e)=>{e.d(t,{A:()=>i});const i=e.p+"assets/images/SciPy_Introduction_01-bbf0296cae7c9ea3dcf57db8366f49db.webp"},138171:(n,t,e)=>{e.d(t,{A:()=>i});const i=e.p+"assets/images/SciPy_Introduction_02-5aeb87be813babe57096ca70a36e8a44.webp"},361720:(n,t,e)=>{e.d(t,{A:()=>i});const i=e.p+"assets/images/SciPy_Introduction_03-5aeb87be813babe57096ca70a36e8a44.webp"},70289:(n,t,e)=>{e.d(t,{A:()=>i});const i=e.p+"assets/images/SciPy_Introduction_04-439f0af305bf9910e81896ef13740c71.webp"},813014:(n,t,e)=>{e.d(t,{A:()=>i});const i=e.p+"assets/images/SciPy_Introduction_05-a85f66efff73de402c42280d8b5c1bdc.webp"},434039:(n,t,e)=>{e.d(t,{A:()=>i});const i=e.p+"assets/images/SciPy_Introduction_06-0fd35a01f261e436b0cf8c894eb90bcb.webp"},126222:(n,t,e)=>{e.d(t,{A:()=>i});const i=e.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-5f44d483789c3ce79f05418f930f5cd2.jpg"},28453:(n,t,e)=>{e.d(t,{R:()=>a,x:()=>l});var i=e(296540);const o={},s=i.createContext(o);function a(n){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function l(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),i.createElement(s.Provider,{value:t},n.children)}}}]);