"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[38632],{140678:(r,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var e=t(474848),a=t(28453);const o={sidebar_position:9050,slug:"2021-09-11",title:"Golang Refresher :: url & http",authors:"mpolinowski",tags:["Go"]},s=void 0,i={id:"Development/Go/2021-09-11--golang-refresher-network/index",title:"Golang Refresher :: url & http",description:"Guangzhou, China",source:"@site/docs/Development/Go/2021-09-11--golang-refresher-network/index.md",sourceDirName:"Development/Go/2021-09-11--golang-refresher-network",slug:"/Development/Go/2021-09-11--golang-refresher-network/2021-09-11",permalink:"/docs/Development/Go/2021-09-11--golang-refresher-network/2021-09-11",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Go/2021-09-11--golang-refresher-network/index.md",tags:[{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:9050,frontMatter:{sidebar_position:9050,slug:"2021-09-11",title:"Golang Refresher :: url & http",authors:"mpolinowski",tags:["Go"]},sidebar:"tutorialSidebar",previous:{title:"Getting started with Go and React - Webservice, Routing and Status Log",permalink:"/docs/Development/Go/2021-09-21--golang-react-starter-part-i/2021-09-21"},next:{title:"Golang Refresher :: math & os",permalink:"/docs/Development/Go/2021-09-11--golang-refresher-math-os/2021-09-11"}},l={},c=[{value:"The Go Standard Library",id:"the-go-standard-library",level:2},{value:"url|http|encoding-json|encoding-xml :: Networking and data processing",id:"urlhttpencoding-jsonencoding-xml--networking-and-data-processing",level:3},{value:"Working with URLs",id:"working-with-urls",level:4},{value:"HTTP GET",id:"http-get",level:4},{value:"HTTP POST with Basic Auth",id:"http-post-with-basic-auth",level:4},{value:"HTTP POST with JSON Request Body",id:"http-post-with-json-request-body",level:4},{value:"Encode Go Sructs to JSON",id:"encode-go-sructs-to-json",level:4},{value:"Decode JSON",id:"decode-json",level:4}];function d(r){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...r.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{alt:"Guangzhou, China",src:t(114636).A+"",width:"1500",height:"560"})}),"\n",(0,e.jsx)(n.h2,{id:"the-go-standard-library",children:"The Go Standard Library"}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:"/docs/Development/Go/2021-09-11--golang-refresher-fmt-strings/2021-09-11",children:"Part I"})}),"\n",(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:"/docs/Development/Go/2021-09-11--golang-refresher-math-os/2021-09-11",children:"Part II"})}),"\n",(0,e.jsx)(n.li,{children:"Part III"}),"\n"]}),"\n",(0,e.jsx)(n.h3,{id:"urlhttpencoding-jsonencoding-xml--networking-and-data-processing",children:"url|http|encoding-json|encoding-xml :: Networking and data processing"}),"\n",(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.a,{href:"https://pkg.go.dev/net/url",children:"Package url"})," parses URLs and implements query escaping."]}),"\n",(0,e.jsx)(n.h4,{id:"working-with-urls",children:"Working with URLs"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"fmt"\r\n\t"net/url"\r\n)\r\n\r\nfunc main() {\r\n\t\r\n\t// Define a url\r\n\tu := "https://mpolinowski.github.io:80/?chapter_filter=%22Dev+Notes%22&type_filter=%22Note%22&q=%22Golang%22&tag_filter=%5B%22Golang%22%5D"\r\n\r\n\t// Parse url into it\'s parts\r\n\tresult, _ := url.Parse(u)\r\n\tfmt.Println(result.Scheme)\r\n\tfmt.Println(result.Host)\r\n\tfmt.Println(result.Path)\r\n\tfmt.Println(result.Port())\r\n\tfmt.Println(result.RawQuery)\r\n\r\n\t// Extract query\'s into variables\r\n\tval := result.Query()\r\n\tfmt.Println("Search:", val["q"])\r\n\tfmt.Println("Tags:", val["tag_filter"])\r\n\tfmt.Println("Types:", val["type_filter"])\r\n\tfmt.Println("Chapters:", val["chapter_filter"])\r\n\r\n\t// Create URL from components\r\n\tnewURL := &url.URL {\r\n\t\tScheme: "https",\r\n\t\tHost: "mpolinowski.github.io",\r\n\t\tPath: "/devnotes",\r\n\t\tRawQuery: "usr=admin&pwd=password",\r\n\t}\r\n\r\n\t// Print created url\r\n\ts := newURL.String()\r\n\tfmt.Println(s)\r\n\t// Modify url\r\n\tnewURL.RawQuery = "usr=user&pwd=1234"\r\n\ts = newURL.String()\r\n\tfmt.Println(s)\r\n\r\n\t// Generate new url queries\r\n\tnewvals := url.Values{}\r\n\tnewvals.Add("pwd", "nopwd")\r\n\tnewvals.Add("usr", "visitor")\r\n\r\n\tnewURL.RawQuery = newvals.Encode()\r\n\ts = newURL.String()\r\n\tfmt.Println(s)\r\n\t\r\n}\n'})}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-bash",children:'go run .\\main.go\r\nhttps\r\nmpolinowski.github.io:80\r\n/\r\n80\r\nchapter_filter=%22Dev+Notes%22&type_filter=%22Note%22&q=%22Golang%22&tag_filter=%5B%22Golang%22%5D\r\nSearch: ["Golang"]\r\nTags: [["Golang"]]\r\nTypes: ["Note"]\r\nChapters: ["Dev Notes"]\r\nhttps://mpolinowski.github.io/devnotes?usr=admin&pwd=password\r\nhttps://mpolinowski.github.io/devnotes?usr=user&pwd=1234\r\nhttps://mpolinowski.github.io/devnotes?pwd=nopwd&usr=visitor\n'})}),"\n",(0,e.jsx)(n.h4,{id:"http-get",children:"HTTP GET"}),"\n",(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.a,{href:"https://pkg.go.dev/net/http",children:"Package http"})," provides HTTP client and server implementations. Get, Head, Post, and PostForm make HTTP (or HTTPS) requests."]}),"\n",(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:"Example"}),": Read the INSTAR IP camera state through it's HTTP REST API."]}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"fmt"\r\n\t"io/ioutil"\r\n\t"net/http"\r\n\t"strings"\r\n)\r\n\r\nfunc main() {\r\n\t\r\n\t// Define API endpoint - get the PIR motion sensor state:\r\n\tconst cameraAPI = "http://192.168.2.77:8090/param.cgi?cmd=getpirattr&usr=admin&pwd=instar"\r\n\r\n\t// Make GET request\r\n\tresp, err := http.Get(cameraAPI)\r\n\tif err != nil {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Closing response\r\n\tdefer resp.Body.Close()\r\n\r\n\t// Splitting up the response\r\n\tfmt.Println("Status:", resp.Status)\r\n\tfmt.Println("Status Code:", resp.StatusCode)\r\n\tfmt.Println("Protocol:", resp.Proto)\r\n\tfmt.Println("Content Length:", resp.ContentLength)\r\n\r\n\t// Build content from received bytes\r\n\tvar sb strings.Builder\r\n\tcontent, _ := ioutil.ReadAll(resp.Body)\r\n\tbytecount, _ := sb.Write(content)\r\n\t// Format the output\r\n\tfmt.Println(bytecount, sb.String())\r\n\r\n\t\r\n}\n'})}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-bash",children:'go run .\\main.go\r\nStatus: 200 OK\r\nStatus Code: 200\r\nProtocol: HTTP/1.1\r\nContent Length: 40\r\n40 var pir_enable="1";\r\nvar pir_flag="0";\n'})}),"\n",(0,e.jsx)(n.h4,{id:"http-post-with-basic-auth",children:"HTTP POST with Basic Auth"}),"\n",(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:"Example"}),": Send a post request with basic authentication to switch on your INSTAR IP cameras PIR sensor."]}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"fmt"\r\n\t"net/http"\r\n\t"time"\r\n)\r\n\r\nvar (\r\n\t// Camera admin login\r\n\tusername = "admin"\r\n\tpassword = "instar"\r\n\t// API endpoint to activate the PIR sensor\r\n\tcameraAPI = "http://192.168.2.77:8090/param.cgi?cmd=setpirattr&-pir_enable=1"\r\n)\r\n\r\nfunc main() {\r\n\tpostCommand(cameraAPI, "POST")\r\n}\r\n\r\nfunc postCommand(url, method string) error {\r\n\t// Send request and catch error\r\n\tclient := &http.Client{\r\n\t\tTimeout: time.Second * 10,\r\n\t}\r\n\treq, err := http.NewRequest(method, url, nil)\r\n\tif err != nil {\r\n\t\treturn fmt.Errorf("Got error %s", err.Error())\r\n\t}\r\n\t// Authenticate and catch error\r\n\treq.SetBasicAuth(username, password)\r\n\tresponse, err := client.Do(req)\r\n\tif err != nil {\r\n\t\treturn fmt.Errorf("Got error %s", err.Error())\r\n\t}\r\n\tdefer response.Body.Close()\r\n\treturn nil\r\n}\n'})}),"\n",(0,e.jsx)(n.h4,{id:"http-post-with-json-request-body",children:"HTTP POST with JSON Request Body"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"fmt"\r\n\t"io/ioutil"\r\n\t"net/http"\r\n\t"net/url"\r\n\t"strings"\r\n)\r\n\r\nfunc main() {\r\n\t\r\n\t// Define API endpoint - activate the PIR sensor\r\n\tconst httpbin = "https://httpbin.org/post"\r\n\r\n\t// Make a POST request\r\n\t// creat the JSON request body:\r\n\treqBody := strings.NewReader(`\r\n\t\t{\r\n\t\t\t"val": "this is a value",\r\n\t\t\t"num": 42\r\n\t\t}\r\n\t`)\r\n\r\n\t// post the generated request body to the camera API\r\n\tresp, err := http.Post(httpbin, "application/json", reqBody)\r\n\tif err != nil {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Read the response\r\n\tcontent, _ := ioutil.ReadAll(resp.Body)\r\n\t// Format the output\r\n\tfmt.Printf("%s\\n", content)\r\n\r\n\r\n\t// Closing response\r\n\tdefer resp.Body.Close()\r\n\r\n\t// Post form data\r\n\tdata := url.Values{}\r\n\tdata.Add("formField1", "Content of form field 1")\r\n\tdata.Add("formField2", "Content of form field 2")\r\n\trespForm, err := http.PostForm(httpbin, data)\r\n\tcontentForm, _ := ioutil.ReadAll(respForm.Body)\r\n\tdefer respForm.Body.Close()\r\n\tfmt.Printf("%s\\n", contentForm)\r\n}\n'})}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-bash",children:'go run .\\main.go\r\n{\r\n  "args": {},\r\n  "data": "\\n\\t\\t{\\n\\t\\t\\t\\"val\\": \\"this is a value\\",\\n\\t\\t\\t\\"num\\": 42\\n\\t\\t}\\n\\t", \r\n  "files": {},\r\n  "form": {},\r\n  "headers": {\r\n    "Accept-Encoding": "gzip",\r\n    "Content-Length": "52",\r\n    "Content-Type": "application/json",\r\n    "Host": "httpbin.org",\r\n    "User-Agent": "Go-http-client/2.0",\r\n    "X-Amzn-Trace-Id": "Root=1-615bcc9f-17ca354f4b8b8ec705a75dcf"\r\n  },\r\n  "json": {\r\n    "num": 42,\r\n    "val": "this is a value"\r\n  },\r\n  "origin": "103.125.234.111",\r\n  "url": "https://httpbin.org/post"\r\n}\r\n\r\n{\r\n  "args": {},\r\n  "data": "",\r\n  "files": {},\r\n  "form": {\r\n    "formField1": "Content of form field 1",\r\n    "formField2": "Content of form field 2"\r\n  },\r\n  "headers": {\r\n    "Accept-Encoding": "gzip",\r\n    "Content-Length": "69",\r\n    "Content-Type": "application/x-www-form-urlencoded",\r\n    "Host": "httpbin.org",\r\n    "User-Agent": "Go-http-client/2.0",\r\n    "X-Amzn-Trace-Id": "Root=1-615bcc9f-71f982c9376e6bef4abb92b7"\r\n  },\r\n  "json": null,\r\n  "origin": "103.125.234.111",\r\n  "url": "https://httpbin.org/post"\r\n}\n'})}),"\n",(0,e.jsx)(n.h4,{id:"encode-go-sructs-to-json",children:"Encode Go Sructs to JSON"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"encoding/json"\r\n\t"fmt"\r\n)\r\n\r\n// Set types and assign the keys that should be used e.g. Characters -> char\r\n// Omit empty fields and don\'t use actor names\r\ntype person struct {\r\n\tCharacter\t\tstring\t`json:"char"`\r\n\tActor\t\t\tstring\t`json:"-"`\r\n\tPlaceOfBirth\tstring\t`json:"loc"`\r\n\tSeasons\t\t\t[]int\t`json:"s,omitempty"`\r\n}\r\n\r\nfunc encodeJSON() {\r\n\t// Create JSON data\r\n\tpeople := []person {\r\n\t\t{"Joe Miller", "Thomas Jane", "Ceres", []int{1,2,3,4} },\r\n\t\t{"James Holden", "Steven Strait", "Earth", []int{1,2,3,4,5,6} },\r\n\t\t{"Bobbie Draper", "Frankie Adams", "Mars", []int{2,3,4,5,6} },\r\n\t\t{"Camina Drummer", "Cara Gee", "Tycho Station", []int{4,5,6} },\r\n\t\t{"Jean-Luc Picard", "Patrick Stewart", "Earth", nil },\r\n\t}\r\n\r\n\t// Use Marshal to convert data structure to JSON\r\n\tresult, err := json.Marshal(people)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tfmt.Printf("%s\\n", result)\r\n\r\n\t// Use MarshalIndent to convert data structure to formatted JSON\r\n\tresultFormatted, err := json.MarshalIndent(people, "", "\\t")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tfmt.Printf("%s\\n", resultFormatted)\r\n\r\n}\r\n\r\nfunc main() {\r\n\t\r\n\tencodeJSON()\r\n\r\n\t\r\n}\n'})}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-bash",children:'go run .\\main.go\r\n[{"char":"Joe Miller","loc":"Ceres","s":[1,2,3,4]},{"char":"James Holden","loc":"Earth","s":[1,2,3,4,5,6]},{"char":"Bobbie Draper","loc":"Mars","s":[2,3,4,5,6]},{"char":"Camina Drummer","loc":"Tycho Station","s":[4,5,6]},{"char":"Jean Luc Picard","loc":"Earth"}]\r\n[\r\n        {\r\n                "char": "Joe Miller",\r\n                "loc": "Ceres",      \r\n                "s": [\r\n                        1,\r\n                        2,\r\n                        3,\r\n                        4\r\n                ]\r\n        },\r\n        {\r\n                "char": "James Holden",\r\n                "loc": "Earth",\r\n                "s": [\r\n                        1,\r\n                        2,\r\n                        3,\r\n                        4,\r\n                        5,\r\n                        6\r\n                ]\r\n        },\r\n        {\r\n                "char": "Bobbie Draper",\r\n                "loc": "Mars",\r\n                "s": [\r\n                        2,\r\n                        3,\r\n                        4,\r\n                        5,\r\n                        6\r\n                ]\r\n        },\r\n        {\r\n                "char": "Camina Drummer",\r\n                "loc": "Tycho Station",\r\n                "s": [\r\n                        4,\r\n                        5,\r\n                        6\r\n                ]\r\n        },\r\n        {\r\n                "char": "Jean Luc Picard",\r\n                "loc": "Earth"\r\n        }\r\n]\n'})}),"\n",(0,e.jsx)(n.h4,{id:"decode-json",children:"Decode JSON"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"encoding/json"\r\n\t"fmt"\r\n)\r\n\r\n// Set types and assign the keys that should be used e.g. Characters -> char\r\n// Omit empty fields and don\'t use actor names\r\ntype person struct {\r\n\tCharacter\t\tstring\t`json:"char"`\r\n\tActor\t\t\tstring\t`json:"-"`\r\n\tPlaceOfBirth\tstring\t`json:"loc"`\r\n\tSeasons\t\t\t[]int\t`json:"s,omitempty"`\r\n}\r\n\r\nfunc decodeJSON() {\r\n\t// Declare JSON data to decode\r\n\tdata := []byte(`\r\n\t\t{\r\n\t\t\t"char": "Joe Miller",\r\n\t\t\t"actor": "Thomas Jane",\r\n\t\t\t"loc": "Ceres",\r\n\t\t\t"s": [1,2,3,4]\r\n\t\t}\r\n\t`)\r\n\r\n\t// Declare person struct of type person for the JSON data\r\n\tvar p person\r\n\t// Check if JSON is valid and un-marshal\r\n\tvalid := json.Valid(data)\r\n\tif valid {\r\n\t\tjson.Unmarshal(data, &p)\r\n\t\tfmt.Printf("%#v\\n", p)\r\n\t}\r\n\r\n}\r\n\r\nfunc mapJSON() {\r\n\r\n\t// Declare JSON data to decode\r\n\tdataMap := []byte(`\r\n\t\t{\r\n\t\t\t"char": "Camina Drummer",\r\n\t\t\t"actor": "Cara Gee",\r\n\t\t\t"loc": "Tycho Station",\r\n\t\t\t"s": [4,5,6]\r\n\t\t}\r\n\t`)\r\n\t// Decode JSON into a map structure\r\n\tvar m map[string]interface{}\r\n\tjson.Unmarshal(dataMap, &m)\r\n\tfmt.Printf("%#v\\n", m)\r\n\r\n\t// Iterate over map entries\r\n\tfor k,v := range m {\r\n\t\tfmt.Printf("key (%v), value (%T : %v)\\n", k, v, v)\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\t\r\n\tdecodeJSON()\r\n\tmapJSON()\r\n\t\r\n}\n'})}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-bash",children:'go run .\\main.go\r\nmain.person{Character:"Joe Miller", Actor:"", PlaceOfBirth:"Ceres", Seasons:[]int{1, 2, 3, 4}}\r\nmap[string]interface {}{"actor":"Cara Gee", "char":"Camina Drummer", "loc":"Tycho Station", "s":[]interface {}{4, 5, 6}}\r\nkey (s), value ([]interface {} : [4 5 6])\r\nkey (char), value (string : Camina Drummer)\r\nkey (actor), value (string : Cara Gee)\r\nkey (loc), value (string : Tycho Station)\n'})})]})}function h(r={}){const{wrapper:n}={...(0,a.R)(),...r.components};return n?(0,e.jsx)(n,{...r,children:(0,e.jsx)(d,{...r})}):d(r)}},114636:(r,n,t)=>{t.d(n,{A:()=>e});const e=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-88971fd9c1b188353d6b4c2b974194a5.jpg"},28453:(r,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var e=t(296540);const a={},o=e.createContext(a);function s(r){const n=e.useContext(o);return e.useMemo((function(){return"function"==typeof r?r(n):{...n,...r}}),[n,r])}function i(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(a):r.components||a:s(r.components),e.createElement(o.Provider,{value:n},r.children)}}}]);