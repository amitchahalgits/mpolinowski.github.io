"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[28201],{819650:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var o=t(785893),i=t(603905);const s={sidebar_position:4060,slug:"2022-10-21",title:"Hashicorp Nomad to set up an OSTicket Helpdesk - Part I",authors:"mpolinowski",tags:["Nomad","Consul","LINUX","osTicket"],description:"Porting a OSTicket/MariaDB helpdesk service from Docker-Compose to Nomad"},r=void 0,a={id:"DevOps/Hashicorp/2022-10-21-hashicorp-nomad-for-osticket-part-i/index",title:"Hashicorp Nomad to set up an OSTicket Helpdesk - Part I",description:"Porting a OSTicket/MariaDB helpdesk service from Docker-Compose to Nomad",source:"@site/docs/DevOps/Hashicorp/2022-10-21-hashicorp-nomad-for-osticket-part-i/index.md",sourceDirName:"DevOps/Hashicorp/2022-10-21-hashicorp-nomad-for-osticket-part-i",slug:"/DevOps/Hashicorp/2022-10-21-hashicorp-nomad-for-osticket-part-i/2022-10-21",permalink:"/docs/DevOps/Hashicorp/2022-10-21-hashicorp-nomad-for-osticket-part-i/2022-10-21",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-10-21-hashicorp-nomad-for-osticket-part-i/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Consul",permalink:"/docs/tags/consul"},{label:"LINUX",permalink:"/docs/tags/linux"},{label:"osTicket",permalink:"/docs/tags/os-ticket"}],version:"current",sidebarPosition:4060,frontMatter:{sidebar_position:4060,slug:"2022-10-21",title:"Hashicorp Nomad to set up an OSTicket Helpdesk - Part I",authors:"mpolinowski",tags:["Nomad","Consul","LINUX","osTicket"],description:"Porting a OSTicket/MariaDB helpdesk service from Docker-Compose to Nomad"},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Nomad Sidecar Pattern",permalink:"/docs/DevOps/Hashicorp/2022-10-22-hashicorp-nomad-sidecar-pattern/2022-10-22"},next:{title:"NGINX Ingress with Nomad",permalink:"/docs/DevOps/Hashicorp/2022-09-24--nomad-nginx-ingress/2022-09-24"}},c={},l=[{value:"Data Persistence",id:"data-persistence",level:2},{value:"Client Configuration",id:"client-configuration",level:3},{value:"Job Specification",id:"job-specification",level:3},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Run the Job File",id:"run-the-job-file",level:2},{value:"Complete Job File (Part I)",id:"complete-job-file-part-i",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.ah)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Shen Zhen, China",src:t(852341).Z+"",width:"2230",height:"839"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#data-persistence",children:"Data Persistence"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#client-configuration",children:"Client Configuration"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#job-specification",children:"Job Specification"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#environment-variables",children:"Environment Variables"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#run-the-job-file",children:"Run the Job File"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#complete-job-file-part-i",children:"Complete Job File (Part I)"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/mpolinowski/osticket-nomad",children:"Github Repository"})}),"\n",(0,o.jsxs)(n.p,{children:["I now have a ",(0,o.jsx)(n.a,{href:"/docs/DevOps/Provisioning/2022-10-16--os-ticket-docker/2022-10-16#docker-compose",children:"Docker-Compose File"})," that allows me to provision an instance of the OSTicket Helpdesk with a MariaDB backend. Now I need to get this into my Nomad/Consul cluster."]}),"\n",(0,o.jsx)(n.h2,{id:"data-persistence",children:"Data Persistence"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"docker-compose.yml"})," adds a volumen mount to the MariaDB container to make sure that the generated database is not destroyed when the container is shut down."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yml",children:"volumes:\n  - /opt/osticket/db:/var/lib/mysql\n"})}),"\n",(0,o.jsx)(n.p,{children:"In Nomad we will have to define this volume mount in the Nomad client configuration."}),"\n",(0,o.jsx)(n.h3,{id:"client-configuration",children:"Client Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["First we need to create a volume that allows us to persist the data that MariaDB is going to generate. Add the following configs in your ",(0,o.jsx)(n.code,{children:"client.hcl"})," file [",(0,o.jsx)(n.a,{href:"https://www.nomadproject.io/docs/drivers/docker#client-requirements",children:"Plugin Stanza"})," | ",(0,o.jsx)(n.a,{href:"https://www.nomadproject.io/docs/configuration/client#host_volume-stanza",children:"Host Volume Stanza"}),"]:"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"nano /etc/nomad.d/client.hcl"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'\nclient {\n  enabled = true\n  servers = ["myhost:port"]\n  host_volume "letsencrypt" {\n    path = "/etc/letsencrypt"\n    read_only = false\n  }\n  host_volume "osticket_db" {\n    path = "/opt/osticket/db"\n    read_only = false\n  }\n}\n\n# Docker Configuration\nplugin "docker" {\n\n  volumes {\n    enabled      = true\n    selinuxlabel = "z"\n  }\n\n  allow_privileged = false\n  allow_caps       = ["chown", "net_raw"]\n\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This client already uses a volume to allow containers access to the Let's Encrypt generated TLS certificates. I can add the database volume below. And make sure that the directory you define here as a volume does exist ",(0,o.jsx)(n.code,{children:"mkdir -p /opt/osticket/db"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Restart the service ",(0,o.jsx)(n.code,{children:"service nomad restart"})," and verify that the volume was picked up:"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Nomad for Elasticsearch",src:t(640261).Z+"",width:"1169",height:"383"})}),"\n",(0,o.jsx)(n.h3,{id:"job-specification",children:"Job Specification"}),"\n",(0,o.jsxs)(n.p,{children:["And then in the job specifications, inside the ",(0,o.jsx)(n.strong,{children:"Group Stanza"})," define the ",(0,o.jsx)(n.a,{href:"https://www.nomadproject.io/docs/job-specification/volume#volume-interpolation",children:"volume"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'volume "osticket_db" {\n    type      = "host"\n    read_only = false\n    source    = "osticket_db"\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["and then finally add following in the ",(0,o.jsx)(n.strong,{children:"Task Stanza"})," use the defined volume:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'volume_mount {\n    volume      = "osticket_db"\n    destination = "/var/lib/mysql" #<-- in the container\n    read_only   = false\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The OSTicket frontend does not need any persistence or volume mounts in general since I already ",(0,o.jsx)(n.a,{href:"/docs/DevOps/Provisioning/2022-10-16--os-ticket-docker/2022-10-16",children:"added all customized files to the docker file"})," itself."]}),"\n",(0,o.jsx)(n.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,o.jsxs)(n.p,{children:["The only thing missing now are the environment variables that allow our two containers - frontend and database - to connect. These have to be placed inside the corresponding ",(0,o.jsx)(n.strong,{children:"Task Stanza"}),":"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"MariaDB"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'env {\n    MYSQL_ROOT_PASSWORD = "secret"\n    MYSQL_USER = "osticket"\n    MYSQL_PASSWORD = "secret"\n    MYSQL_DATABASE = "osticket"\n    CONTAINER_NAME = "osticket-db"\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"OSTicket"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'env {\n    CONTAINER_NAME = "osticket"\n    MYSQL_USER = "osticket"\n    MYSQL_HOST = "osticket-db"\n    MYSQL_PASSWORD = "secret"\n    MYSQL_DATABASE = "osticket"\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"run-the-job-file",children:"Run the Job File"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'nomad plan osticket.tf\n\n+ Job: "osticket"\n+ Task Group: "docker" (1 create)\n  + Task: "osticket-container" (forces create)\n  + Task: "osticket-db-container" (forces create)\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nJob Modify Index: 0\nTo submit the job with version verification run:\n\nnomad job run -check-index 0 osticket.tf\n'})}),"\n",(0,o.jsx)(n.p,{children:"Running the job looks good - the ERROR logs remain empty:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Nomad for Elasticsearch",src:t(11095).Z+"",width:"1188",height:"631"})}),"\n",(0,o.jsxs)(n.p,{children:["After a little tweaking I now have the following ",(0,o.jsx)(n.a,{href:"#complete-job-file-part-i",children:"Nomad job file"})," that brings up both services:"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Nomad for Elasticsearch",src:t(37925).Z+"",width:"922",height:"520"})}),"\n",(0,o.jsx)(n.p,{children:"But when I bring the services up I am getting the error message that OSTicket cannot find my database. So eventually the deployment fails because the frontend never reaches a healthy state. So this is what I have to look into next:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Nomad for Elasticsearch",src:t(242495).Z+"",width:"928",height:"406"})}),"\n",(0,o.jsx)(n.h2,{id:"complete-job-file-part-i",children:"Complete Job File (Part I)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'job "osticket" {\n  datacenters = ["mydatacenter"]\n    type = "service"\n\n    group "osticket-db" {\n        count = 1\n        \n        network {\n            mode = "host"\n            port "tcp" {\n                static = 3306\n                to = 3306\n            }\n        }\n\n        update {\n            max_parallel = 1\n            min_healthy_time  = "10s"\n            healthy_deadline  = "5m"\n            progress_deadline = "10m"\n            auto_revert = true\n            auto_promote = true\n            canary = 1\n        }\n\n        volume "osticket_db" {\n            type      = "host"\n            read_only = false\n            source    = "osticket_db"\n        }\n\n        restart {\n            attempts = 10\n            interval = "5m"\n            delay    = "25s"\n            mode     = "delay"\n        }\n\n        task "osticket-db-container" {\n            driver = "docker"\n\n            config {\n                image = "mariadb:latest"\n                ports = ["tcp"]\n                network_mode = "host"\n                force_pull = false\n            }\n\n            volume_mount {\n                volume      = "osticket_db"\n                destination = "/var/lib/mysql" #<-- in the container\n                read_only   = false\n            }\n\n            env {\n                MYSQL_ROOT_PASSWORD = "secret"\n                MYSQL_USER = "osticket"\n                MYSQL_PASSWORD = "secret"\n                MYSQL_DATABASE = "osticket"\n                # CONTAINER_NAME = "osticket-db"\n            }\n        }\n    }\n\n    group "osticket-frontend" {\n        count = 1\n        \n        network {\n            mode = "host"\n            port "http" {\n                static = 8080\n                to = 80\n            }\n        }\n\n        update {\n            max_parallel = 1\n            min_healthy_time  = "10s"\n            healthy_deadline  = "5m"\n            progress_deadline = "10m"\n            auto_revert = true\n            auto_promote = true\n            canary = 1\n        }\n\n        service {\n            name = "osticket-frontend"\n            port = "http"\n            tags = [\n                "frontend"\n            ]\n\n            check {\n                name     = "HTTP Health"\n                path     = "/"\n                type     = "http"\n                protocol = "http"\n                interval = "10s"\n                timeout  = "2s"\n            }\n        }\n\n        task "osticket-container" {\n            driver = "docker"\n\n            config {\n                image = "my.gitlab.com:12345/server/osticket-docker:latest"\n                ports = ["http"]\n                network_mode = "host"\n                force_pull = false\n\n                auth {\n                    username = "myuser"\n                    password = "secret"\n                }\n            }\n\n            env {\n                CONTAINER_NAME = "osticket"\n                MYSQL_USER = "osticket"\n                MYSQL_HOST = "osticket-db"\n                MYSQL_PASSWORD = "secret"\n                MYSQL_DATABASE = "osticket"\n            }\n        }\n    }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.ah)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},603905:(e,n,t)=>{t.d(n,{ah:()=>l});var o=t(667294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,h=a(e,["components","mdxType","originalType","parentName"]),p=l(t),m=i,u=p["".concat(c,".").concat(m)]||p[m]||d[m]||s;return t?o.createElement(u,r(r({ref:n},h),{},{components:t})):o.createElement(u,r({ref:n},h))}));h.displayName="MDXCreateElement"},640261:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/Hashicorp-Nomad-for-OSTicket_01-54ef1c6a1dc10b824b903fbde42504c5.png"},11095:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/Hashicorp-Nomad-for-OSTicket_02-b1668115e39e2243dcfe1080e1106a7a.png"},37925:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/Hashicorp-Nomad-for-OSTicket_03-a13d427e3a1e66be60101fe006110a21.png"},242495:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/Hashicorp-Nomad-for-OSTicket_04-1d2f46d6793ea983467e1ad1d204e140.png"},852341:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"}}]);