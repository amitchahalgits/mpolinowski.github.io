"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[25725],{999451:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var r=n(785893),s=n(603905);const t={sidebar_position:9020,slug:"2019-01-08",title:"Sensors Data and Grafana",authors:"mpolinowski",tags:["LINUX","IoT","Databases"]},i=void 0,o={id:"DevOps/Provisioning/2019-01-08--creating-a-grafana-dashboard/index",title:"Sensors Data and Grafana",description:"Hongkong",source:"@site/docs/DevOps/Provisioning/2019-01-08--creating-a-grafana-dashboard/index.mdx",sourceDirName:"DevOps/Provisioning/2019-01-08--creating-a-grafana-dashboard",slug:"/DevOps/Provisioning/2019-01-08--creating-a-grafana-dashboard/2019-01-08",permalink:"/docs/DevOps/Provisioning/2019-01-08--creating-a-grafana-dashboard/2019-01-08",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Provisioning/2019-01-08--creating-a-grafana-dashboard/index.mdx",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"IoT",permalink:"/docs/tags/io-t"},{label:"Databases",permalink:"/docs/tags/databases"}],version:"current",sidebarPosition:9020,frontMatter:{sidebar_position:9020,slug:"2019-01-08",title:"Sensors Data and Grafana",authors:"mpolinowski",tags:["LINUX","IoT","Databases"]},sidebar:"tutorialSidebar",previous:{title:"Installing Discourse on Centos 8",permalink:"/docs/DevOps/Provisioning/2019-06-15--installing-discourse-on-centos8/2019-06-15"},next:{title:"Red Hat Certified Specialist in Containerized Application Development",permalink:"/docs/DevOps/Provisioning/2018-12-27--red-hat-containerized-application-development-rhcs/2018-12-27"}},d={},c=[{value:"Installing Grafana",id:"installing-grafana",level:2}];function l(e){const a={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Hongkong",src:n(226144).Z+"",width:"1500",height:"739"})}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.a,{href:"#installing-grafana",children:"Installing Grafana"})}),"\n"]}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.a,{href:"https://grafana.com/grafana",children:"Grafana"})," allows you to query, visualize, alert on and understand your metrics no matter where they are stored. Create, explore, and share dashboards with your team and foster a data driven culture. The Grafana project can also be found on ",(0,r.jsx)(a.a,{href:"https://github.com/grafana/grafana",children:"Github"}),"."]}),"\n",(0,r.jsx)(a.h2,{id:"installing-grafana",children:"Installing Grafana"}),"\n",(0,r.jsxs)(a.p,{children:["Since I am working on a Raspberry Pi 2 (the same would be true for a v3) with Raspbian installed I will grab the ",(0,r.jsx)(a.a,{href:"https://grafana.com/grafana/download?platform=arm",children:"download link"})," for Grafana for ",(0,r.jsx)(a.a,{href:"https://grafana.com/docs/installation/debian/",children:"Ubuntu & Debian(ARMv7)"}),":"]}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Correction I seemed to be using a single core version of the Raspberry Pi 2 that requires the ARMv6 build - see below"})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",children:"wget https://dl.grafana.com/oss/release/grafana_6.1.6_armhf.deb\r\nsudo apt-get install -y adduser libfontconfig1\r\nsudo dpkg -i grafana_6.1.6_armhf.deb \n"})}),"\n",(0,r.jsxs)(a.p,{children:["In my case ",(0,r.jsx)(a.em,{children:"libfontconfig1"})," was missing dependencies after the installation and and the installation of Grafana failed - I was able to fix this issue by running ",(0,r.jsx)(a.code,{children:"sudo apt --fix-broken install"})," and restart the Grafana installation."]}),"\n",(0,r.jsx)(a.p,{children:"We can use SystemD to start the Grafana Service:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",children:"sudo systemctl daemon-reload\r\nsudo systemctl start grafana-server\r\nsudo systemctl status grafana-server\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Unfortunately I am seeing error messages here - and as stated above, I was ",(0,r.jsx)(a.a,{href:"https://community.grafana.com/t/grafana-wont-start-on-raspberry-pi/8525/3",children:"using the wrong build of Grafana"}),"..."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",children:"09:11:51 raspberrypi systemd[1]: Stopped Grafana instance.\r\n09:11:51 raspberrypi systemd[1]: grafana-server.service: Start request repeated too quickly.\r\n09:11:51 raspberrypi systemd[1]: Failed to start Grafana instance.\r\n09:11:51 raspberrypi systemd[1]: grafana-server.service: Unit entered failed state.\r\n09:11:51 raspberrypi systemd[1]: grafana-server.service: Failed with result \u2018signal\u2019.\n"})}),"\n",(0,r.jsxs)(a.p,{children:["So once again, with more feeling (and the correct version ",(0,r.jsx)(a.a,{href:"https://grafana.com/grafana/download?platform=arm",children:"Ubuntu & Debian(ARMv6)"}),"):"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bash",children:"sudo systemctl stop grafana-server\r\nsudo apt-get remove --auto-remove grafana\r\n\r\nwget https://dl.grafana.com/oss/release/grafana-rpi_6.1.6_armhf.deb\r\nsudo apt-get install -y adduser libfontconfig1\r\nsudo dpkg -i grafana-rpi_6.1.6_armhf.deb\r\n\r\nsudo /bin/systemctl daemon-reload\r\nsudo /bin/systemctl enable grafana-server\r\nsudo /bin/systemctl start grafana-server\n"})}),"\n",(0,r.jsx)(a.p,{children:"This time everything worked as planned:"}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Grafana",src:n(665681).Z+"",width:"800",height:"253"})}),"\n",(0,r.jsxs)(a.p,{children:["I had to wait for a few minutes for the service to come online - on a RasPi v3 this should be less of an issue... I am now able to access the Grafana frontend on the IP address of my Pi and the port 3000 - ",(0,r.jsx)(a.code,{children:"http://192.168.2.64:3000/login"}),". The default login is ",(0,r.jsx)(a.strong,{children:"user = admin"})," and ",(0,r.jsx)(a.strong,{children:"password = admin"})," - but you will be asked to change this right away:"]}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Grafana",src:n(225744).Z+"",width:"800",height:"550"})}),"\n",(0,r.jsxs)(a.p,{children:["We are greeted by a wizard that leads us through the initial set up process - we have to start by adding a data source. I am going to use the data I started storing inside a ",(0,r.jsx)(a.a,{href:"/docs/IoT-and-Machine-Learning/Home_Automation/2019-01-05--zigbee2mqtt-xiaomi-fhem/2019-01-05#adding-sql-logging",children:"MariaDB database in another article"})," and choose MySQL:"]}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Grafana",src:n(616411).Z+"",width:"800",height:"654"})}),"\n",(0,r.jsxs)(a.p,{children:["For this project I created a database called ",(0,r.jsx)(a.code,{children:"fhem"}),". MariaDB is running on the same Pi and can be accessed over ",(0,r.jsx)(a.code,{children:"localhost:3306"})," by the user ",(0,r.jsx)(a.code,{children:"fhemuser"})," with the password ",(0,r.jsx)(a.code,{children:"instar"}),". Clicking on ",(0,r.jsx)(a.strong,{children:"Save & Test"})," at the bottom of the page tells me that the ",(0,r.jsx)(a.strong,{children:"Database Connection is OK"}),":"]}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Grafana",src:n(418514).Z+"",width:"800",height:"390"})}),"\n",(0,r.jsxs)(a.p,{children:["Back to the ",(0,r.jsx)(a.strong,{children:"Home Screen"})," I now click on ",(0,r.jsx)(a.strong,{children:"New Dashboard"}),":"]}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Grafana",src:n(601861).Z+"",width:"800",height:"353"})}),"\n",(0,r.jsxs)(a.p,{children:["Here I can choose a ",(0,r.jsx)(a.strong,{children:"Visualization"})," and select a ",(0,r.jsx)(a.strong,{children:"Graph"}),". On the empty coordinate system I can click on the ",(0,r.jsx)(a.strong,{children:"Panel Title"})," to add a data source for the graph:"]}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Grafana",src:n(48667).Z+"",width:"800",height:"501"})}),"\n",(0,r.jsxs)(a.p,{children:["My ",(0,r.jsx)(a.a,{href:"/docs/IoT-and-Machine-Learning/Home_Automation/2019-01-05--zigbee2mqtt-xiaomi-fhem/2019-01-05#adding-sql-logging",children:"database has two tables"})," - one with the ",(0,r.jsx)(a.strong,{children:"current values"})," and one table that collects the ",(0,r.jsx)(a.strong,{children:"historic values"})," for all readings. And both have 7 rows - ",(0,r.jsx)(a.code,{children:"TIMESTAMP"}),", ",(0,r.jsx)(a.code,{children:"DEVICE"}),", ",(0,r.jsx)(a.code,{children:"TYPE"}),", ",(0,r.jsx)(a.code,{children:"EVENT"}),", ",(0,r.jsx)(a.code,{children:"READING"}),", ",(0,r.jsx)(a.code,{children:"VALUE"}),", ",(0,r.jsx)(a.code,{children:"UNIT"}),":"]}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Grafana",src:n(335504).Z+"",width:"800",height:"521"})}),"\n",(0,r.jsxs)(a.p,{children:["For my graph I am interested in the ",(0,r.jsx)(a.strong,{children:"history table"})," and I want to begin to create a plot of the ",(0,r.jsx)(a.em,{children:"Temperature Sensor Reading"})," from the ",(0,r.jsx)(a.code,{children:"temp_hum_sensor"})," device. Grafana helps with creating the corresponding SQL query. But I am receiving an error because the numeric reading is stored as ",(0,r.jsx)(a.em,{children:"type string"}),":"]}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Grafana",src:n(587611).Z+"",width:"800",height:"313"})}),"\n",(0,r.jsxs)(a.p,{children:["But we can re-write the SQL query using ",(0,r.jsx)(a.strong,{children:"CAST"})," to convert the data type of our ",(0,r.jsx)(a.code,{children:"VALUES"})," to ",(0,r.jsx)(a.code,{children:"DECIMAL"}),":"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"SELECT\r\n  UNIX_TIMESTAMP(`TIMESTAMP`) as time_sec,\r\n  CAST(`VALUE` AS DECIMAL(10, 6)) as value,\r\n  'temperature' as metric\r\nFROM `history`\r\nWHERE $__timeFilter(`TIMESTAMP`) AND `DEVICE` = 'temp_hum_sensor' AND `READING` = 'temperature'\r\nORDER BY `TIMESTAMP` ASC\n"})}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Grafana",src:n(259879).Z+"",width:"800",height:"559"})}),"\n",(0,r.jsx)(a.p,{children:"Continuing through the wizard on the left allows me to further customize the graph:"}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Grafana",src:n(429438).Z+"",width:"800",height:"599"})}),"\n",(0,r.jsx)(a.p,{children:"Now we can return to the home screen and save our first dashboard:"}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Grafana",src:n(117881).Z+"",width:"988",height:"427"})})]})}function h(e={}){const{wrapper:a}={...(0,s.ah)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},603905:(e,a,n)=>{n.d(a,{ah:()=>c});var r=n(667294);function s(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){s(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,r,s=function(e,a){if(null==e)return{};var n,r,s={},t=Object.keys(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||(s[n]=e[n]);return s}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var d=r.createContext({}),c=function(e){var a=r.useContext(d),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},l={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},h=r.forwardRef((function(e,a){var n=e.components,s=e.mdxType,t=e.originalType,d=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),g=c(n),p=s,f=g["".concat(d,".").concat(p)]||g[p]||l[p]||t;return n?r.createElement(f,i(i({ref:a},h),{},{components:n})):r.createElement(f,i({ref:a},h))}));h.displayName="MDXCreateElement"},665681:(e,a,n)=>{n.d(a,{Z:()=>r});const r=n.p+"assets/images/grafana_01-b43e5f6f50f6f62b8da9839323e9592b.png"},225744:(e,a,n)=>{n.d(a,{Z:()=>r});const r=n.p+"assets/images/grafana_02-d8cd47dd06e09681167b59865376cde0.png"},616411:(e,a,n)=>{n.d(a,{Z:()=>r});const r=n.p+"assets/images/grafana_03-e3718245b01f5aaa5a7130cd9b2a0d94.png"},418514:(e,a,n)=>{n.d(a,{Z:()=>r});const r=n.p+"assets/images/grafana_04-5a77971a8aa51caf3c36ec3a35f4c40a.png"},601861:(e,a,n)=>{n.d(a,{Z:()=>r});const r=n.p+"assets/images/grafana_05-3ed57b3d78d9b552f71b340de6dd774b.png"},48667:(e,a,n)=>{n.d(a,{Z:()=>r});const r=n.p+"assets/images/grafana_06-53cfb0a2e15b282b2b0b7ecfdca3d7be.png"},335504:(e,a,n)=>{n.d(a,{Z:()=>r});const r=n.p+"assets/images/grafana_07-929e58c4acc0a3c5c162cfb5a1849dda.png"},587611:(e,a,n)=>{n.d(a,{Z:()=>r});const r=n.p+"assets/images/grafana_08-9201fb39a92734a8bd949ab9a147ddd1.png"},259879:(e,a,n)=>{n.d(a,{Z:()=>r});const r=n.p+"assets/images/grafana_09-34b033153f7f252ec55eec1bbc643eb8.png"},429438:(e,a,n)=>{n.d(a,{Z:()=>r});const r=n.p+"assets/images/grafana_10-82aca217bc2c08433b817c00855ff026.png"},117881:(e,a,n)=>{n.d(a,{Z:()=>r});const r=n.p+"assets/images/grafana_11-626087dd74d74267ee6a0084d798a71d.png"},226144:(e,a,n)=>{n.d(a,{Z:()=>r});const r=n.p+"assets/images/photo-19453645663_6dzgdxff_o-f7d9afeb977fffbf986b40d25fe317f2.png"}}]);