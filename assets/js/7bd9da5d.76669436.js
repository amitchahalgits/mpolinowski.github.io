"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[17479],{886460:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var t=r(785893),a=r(603905);const i={sidebar_position:5080,slug:"2022-02-19",title:"Yolo App - Flask Web Application",authors:"mpolinowski",tags:["Machine Learning","Python","YOLO","Tensorflow"]},l=void 0,o={id:"IoT-and-Machine-Learning/ML/2022-02-19--yolo-app-flask/index",title:"Yolo App - Flask Web Application",description:"Shenzhen, China",source:"@site/docs/IoT-and-Machine-Learning/ML/2022-02-19--yolo-app-flask/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2022-02-19--yolo-app-flask",slug:"/IoT-and-Machine-Learning/ML/2022-02-19--yolo-app-flask/2022-02-19",permalink:"/docs/IoT-and-Machine-Learning/ML/2022-02-19--yolo-app-flask/2022-02-19",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2022-02-19--yolo-app-flask/index.md",tags:[{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Python",permalink:"/docs/tags/python"},{label:"YOLO",permalink:"/docs/tags/yolo"},{label:"Tensorflow",permalink:"/docs/tags/tensorflow"}],version:"current",sidebarPosition:5080,frontMatter:{sidebar_position:5080,slug:"2022-02-19",title:"Yolo App - Flask Web Application",authors:"mpolinowski",tags:["Machine Learning","Python","YOLO","Tensorflow"]},sidebar:"tutorialSidebar",previous:{title:"Yolo App - YOLOv5 Data Preparation",permalink:"/docs/IoT-and-Machine-Learning/ML/2022-02-20--yolo-app-yolov5-data-prep/2022-02-20"},next:{title:"Yolo App - Tesseract Optical Character Recognition",permalink:"/docs/IoT-and-Machine-Learning/ML/2022-02-18--yolo-app-ocr/2022-02-18"}},s={},d=[{value:"Setting Up Flask",id:"setting-up-flask",level:2},{value:"Hello World",id:"hello-world",level:3},{value:"Rendering HTML Templates",id:"rendering-html-templates",level:3},{value:"Template Inheritance",id:"template-inheritance",level:3},{value:"Create an Image File Upload",id:"create-an-image-file-upload",level:3},{value:"Number Plate Detection",id:"number-plate-detection",level:2},{value:"Integrating the Tensorflow Model",id:"integrating-the-tensorflow-model",level:3},{value:"Integrating Tesseract OCR",id:"integrating-tesseract-ocr",level:3},{value:"Use Detection in Flask",id:"use-detection-in-flask",level:3},{value:"Display Results on Page",id:"display-results-on-page",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.ah)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Shenzhen, China",src:r(47819).Z+"",width:"1500",height:"688"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2022-02-15--yolo-app-get-data/2022-02-15",children:"Prepare your Images and get Data"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2022-02-16--yolo-app-tensorflow-model/2022-02-16",children:"Train your Tensorflow Model"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2022-02-17--yolo-app-prediction-pipeline/2022-02-17",children:"Use your Model to do Predictions"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2022-02-18--yolo-app-ocr/2022-02-18",children:"Use Tesseract to Read Number Plates"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2022-02-19--yolo-app-flask/2022-02-19",children:"Flask Web Application"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2022-02-20--yolo-app-yolov5-data-prep/2022-02-20",children:"Yolo v5 - Data Prep"})}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#setting-up-flask",children:"Setting Up Flask"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#hello-world",children:"Hello World"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#rendering-html-templates",children:"Rendering HTML Templates"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#template-inheritance",children:"Template Inheritance"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#create-an-image-file-upload",children:"Create an Image File Upload"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#number-plate-detection",children:"Number Plate Detection"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#integrating-the-tensorflow-model",children:"Integrating the Tensorflow Model"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#integrating-tesseract-ocr",children:"Integrating Tesseract OCR"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#use-detection-in-flask",children:"Use Detection in Flask"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#display-results-on-page",children:"Display Results on Page"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-flask",children:"Setting Up Flask"}),"\n",(0,t.jsx)(n.h3,{id:"hello-world",children:"Hello World"}),"\n",(0,t.jsx)(n.p,{children:"Install Flask using PIP:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip install flask \n"})}),"\n",(0,t.jsx)(n.p,{children:"And create a simple Flask app:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'from flask import Flask\r\n\r\n# Create flask app\r\napp = Flask(__name__)\r\n\r\n# Add app routes\r\n@app.route(\'/\')\r\n\r\n# Create server response\r\ndef index():\r\n    return "Hi"\r\n\r\n\r\nif __name__ == "__main__":\r\n    app.run()\n'})}),"\n",(0,t.jsx)(n.p,{children:"Run the app from your console:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'python app.py\r\n\r\n * Serving Flask app "app" (lazy loading)\r\n * Environment: production\r\n   WARNING: This is a development server. Do not use it in a production deployment.\r\n   Use a production WSGI server instead.\r\n * Debug mode: off\r\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Verify that the app is running:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl http://127.0.0.1:5000/\r\nHi\n"})}),"\n",(0,t.jsx)(n.h3,{id:"rendering-html-templates",children:"Rendering HTML Templates"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir templates\r\nnano layout.html\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html lang="">\r\n  <head>\r\n    <meta charset="utf-8">\r\n    <title>Numberplate OCR App</title>\r\n  </head>\r\n  <body>\r\n    <header>\r\n      <h1>Numberplate Reader</h1>\r\n    </header>\r\n    <main></main>\r\n    <footer></footer>\r\n  </body>\r\n</html>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Add an import for ",(0,t.jsx)(n.code,{children:"render_template"})," and a route for your template HTML:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"from flask import Flask, render_template\r\n\r\n...\r\n\r\n@app.route('/app')\r\ndef application():\r\n    return render_template('layout.html')\r\n\r\n...\r\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"Restart the web app and verify that the HTML is served by Flask:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'curl http://127.0.0.1:5000/app\r\n\r\n<!DOCTYPE html>\r\n<html lang="">\r\n  <head>\r\n    <meta charset="utf-8">\r\n    <title>Numberplate OCR</title>\r\n  </head>\r\n  <body>\r\n    <header>\r\n      <h1>Numberplate Reader</h1>\r\n    </header>\r\n    <main></main>\r\n    <footer></footer>\r\n  </body>\r\n</html>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"template-inheritance",children:"Template Inheritance"}),"\n",(0,t.jsxs)(n.p,{children:["I now want to use this layout file as a parent component for my later HTML content. I will create another HTML file inside the ",(0,t.jsx)(n.code,{children:"templates"})," folder that should be loaded as a block into the layout page - we can add this to the layout using the JinJa templating engine:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"<main>\r\n\r\n  {% block body %}\r\n\r\n\r\n  {% endblock %}\r\n\r\n</main>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In my child page I can now extend this ",(0,t.jsx)(n.code,{children:"body"})," section of the layout:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"{% extends 'layout.html' %}\r\n\r\n{% block body %}\r\n  <div class=\"container is-fluid\">\r\n    <h1>Body Content</h1>\r\n  </div>\r\n{% endblock %}\n"})}),"\n",(0,t.jsx)(n.p,{children:"In our app we now have to call the child component that is extending the layout instead of the layout itself:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"@app.route('/')\r\ndef application():\r\n    return render_template('index.html')\n"})}),"\n",(0,t.jsx)(n.h3,{id:"create-an-image-file-upload",children:"Create an Image File Upload"}),"\n",(0,t.jsxs)(n.p,{children:["To upload a file to our Flask server I need to add a form element that allows me to choose a file, assigned a file name of ",(0,t.jsx)(n.code,{children:"image_name"}),", and a submit button that uses the ",(0,t.jsx)(n.strong,{children:"POST"})," method to submit this file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<form action="#" method="POST" enctype="multipart/form-data">\r\n  <input class="file-input" type="file" name="image_name" required>\r\n  <a class="button is-info" type="submit" value="Upload">\r\n    Submit\r\n  </a>\r\n</form>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Now I need a handler for the ",(0,t.jsx)(n.strong,{children:"POST"})," method in the app route that takes the file and saves it inside an upload directory:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"BASE_PATH = os.getcwd()\r\nUPLOAD_PATH = os.path.join(BASE_PATH, 'static/upload')\r\n\r\n@app.route('/', methods=['GET', 'POST'])\r\ndef application():\r\n    if request.method == 'POST':\r\n        upload_file = request.file['image_name']\r\n        filename = upload_file.filename\r\n        path_save = os.path.join(UPLOAD_PATH, filename)\r\n        upload_file.save(path_save)\r\n\r\n        return render_template('index.html')\r\n\r\n    return render_template('index.html')\n"})}),"\n",(0,t.jsx)(n.h2,{id:"number-plate-detection",children:"Number Plate Detection"}),"\n",(0,t.jsx)(n.h3,{id:"integrating-the-tensorflow-model",children:"Integrating the Tensorflow Model"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"model = tf.keras,models.load_model('./static/models/number_plate_detection.h5')\r\n\r\ndef plate_detection(path, filename):\r\n    # Read image\r\n    image = load_img(path) # PIL object\r\n    image = np.array(image,dtype=np.uint8) # 8 bit array (0,255)\r\n    image1 = load_img(path,target_size=(224,224))\r\n    # Data preprocessing\r\n    image_arr_224 = img_to_array(image1)/255.0  # convert into array and get the normalized output\r\n    h,w,d = image.shape\r\n    test_arr = image_arr_224.reshape(1,224,224,3)\r\n    # Make predictions\r\n    coords = model.predict(test_arr)\r\n    # De-normalize the values\r\n    denorm = np.array([w,w,h,h])\r\n    coords = (coords * denorm).astype(np.int32)\r\n    # Draw bounding on top the image\r\n    xmin, xmax,ymin,ymax = coords[0]\r\n    pt1 =(xmin,ymin)\r\n    pt2 =(xmax,ymax)\r\n    print(pt1, pt2)\r\n    cv2.rectangle(image,pt1,pt2,(0,255,0),3)\r\n    # Convert into BGR\r\n    image_bgr = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)\r\n    # Save to prediction folder\r\n    cv2.imwrite('./static/predictions/{}'.format(filename), image_bgr)\r\n\r\n    return coords\n"})}),"\n",(0,t.jsx)(n.h3,{id:"integrating-tesseract-ocr",children:"Integrating Tesseract OCR"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"def OCR(path, filename):\r\n    # Read image\r\n    img = np.array(load_img(path))\r\n    # Run plate detection\r\n    coords = plate_detection(path, filename)\r\n    # Extract bounding box coordinates\r\n    xmin ,xmax,ymin,ymax = cods[0]\r\n    # Define bounding box\r\n    roi = img[ymin:ymax,xmin:xmax]\r\n    # Convert into BGR\r\n    roi_bgr = cv2.cvtColor(roi, cv2.COLOR_RGB2BGR)\r\n\r\n    # Turn grayscale\r\n    gray_roi = cv2.cvtColor(roi_bgr, cv2.COLOR_BGR2GRAY)\r\n    gray_roi = cv2.bitwise_not(gray_roi)\r\n\r\n    # threshold the image, setting all foreground pixels to\r\n    # 255 and all background pixels to 0 (invert)\r\n    thresh_roi = cv2.threshold(gray_roi, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]\r\n\r\n    # Save cut outs to roi folder\r\n    #cv2.imwrite('./static/roi/{}'.format(filename), roi_bgr)\r\n    cv2.imwrite('./static/roi/{}'.format(filename), thresh_roi)\r\n\r\n    # OCR the ROI using Tesseract\r\n    text_roi = pt.image_to_string(roi_bgr)\r\n    print('Original:',text_roi)\r\n    text_thresh = pt.image_to_string(thresh_roi)\r\n    print('Threshold:',text_thresh)\r\n\r\n    return text_roi, text_thresh\n"})}),"\n",(0,t.jsx)(n.h3,{id:"use-detection-in-flask",children:"Use Detection in Flask"}),"\n",(0,t.jsxs)(n.p,{children:["Now I can import the ",(0,t.jsx)(n.strong,{children:"OCR function"})," and call it from my app route:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"from tf_detection import OCR\r\n\r\n@app.route('/', methods=['GET', 'POST'])\r\ndef application():\r\n    if request.method == 'POST':\r\n        # Take uploaded image\r\n        upload_file = request.files['image_name']\r\n        filename = str(nowTime) + '_' + upload_file.filename\r\n        path_save = os.path.join(UPLOAD_PATH, filename)\r\n        # Store image in upload directory\r\n        upload_file.save(path_save)\r\n        # Take image and perform OCR\r\n        text_roi, text_thresh = OCR(path_save, filename)\r\n        print(text_roi + '\\n' + text_thresh)\r\n\r\n        return render_template('index.html', upload = True, upload_image = filename)\r\n\r\n    return render_template('index.html', upload = False)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Plate Detection Flask App",src:r(651398).Z+"",width:"1484",height:"624"})}),"\n",(0,t.jsx)(n.h3,{id:"display-results-on-page",children:"Display Results on Page"}),"\n",(0,t.jsxs)(n.p,{children:["In the IF statement above I am setting ",(0,t.jsx)(n.code,{children:"upload = True"})," if an upload was processed and ",(0,t.jsx)(n.code,{children:"upload_image"})," is defined. I can now use this variable in the Jinja Template to display the results on my index page."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'  {% if upload %}\r\n\r\n    <div class="container">\r\n      <br/><br/>\r\n      <table>\r\n        <tr>\r\n          <td>\r\n            <img class="float-left img-fluid" src="/static/upload/{{ upload_image }}" alt="Source Image" />\r\n          </td>\r\n          <td>\r\n            <img class="float-right img-fluid" src="/static/predictions/{{ upload_image }}" alt="Prediction Image" />\r\n          </td>\r\n        </tr>\r\n      </table>\r\n      <table>\r\n        <tr>\r\n          <th>Region of Interest</th>\r\n          <th>Detected Text</th>\r\n          <th>Region of Interest (Threshold)</th>\r\n          <th>Detected Text</th>\r\n        </tr>\r\n        <tr>\r\n          <td>\r\n            <img class="float-left img-fluid" src="/static/roi/{{ upload_image + \'_roi\'}} " alt="Region of Interest" />\r\n          </td>\r\n          <td>\r\n            <h3>{{ ocr_roi }}</h3>\r\n          </td>\r\n          <td>\r\n            <img class="float-left img-fluid" src="/static/roi/{{ upload_image + \'_threshroi\'}} " alt="Region of Interest" />\r\n          </td>\r\n          <td>\r\n            <h3>{{ ocr_thresh }}</h3>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n\r\n  {% endif %}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Plate Detection Flask App",src:r(754375).Z+"",width:"1067",height:"546"})})]})}function p(e={}){const{wrapper:n}={...(0,a.ah)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>d});var t=r(667294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),d=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),h=d(r),m=a,g=h["".concat(s,".").concat(m)]||h[m]||c[m]||i;return r?t.createElement(g,l(l({ref:n},p),{},{components:r})):t.createElement(g,l({ref:n},p))}));p.displayName="MDXCreateElement"},651398:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/Plate_Detection_Flask_App_01-ae7889bb85c928d4ac36b540938e1a82.png"},754375:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/Plate_Detection_Flask_App_02-e68e7c222e96636093580512cf96d4f1.png"},47819:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-ffe80356d19fb4b090a3bef79b45aab3.jpg"}}]);