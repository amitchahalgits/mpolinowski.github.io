"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[71642],{413118:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>a,toc:()=>o});var s=t(474848),i=t(28453);const d={sidebar_position:4640,slug:"2023-06-17",title:"Serving your SciKit Learn Model as a Prediction API",authors:"mpolinowski",tags:["Python","Machine Learning","SKlearn","Flask"],description:"Use Flask, Docker and React.js to Deploy your ML Model to the Web"},r="Serving your SciKit Learn Model as a Prediction API",a={id:"IoT-and-Machine-Learning/AIOps/2023-06-17-scikit-learn-model-deployment/index",title:"Serving your SciKit Learn Model as a Prediction API",description:"Use Flask, Docker and React.js to Deploy your ML Model to the Web",source:"@site/docs/IoT-and-Machine-Learning/AIOps/2023-06-17-scikit-learn-model-deployment/index.md",sourceDirName:"IoT-and-Machine-Learning/AIOps/2023-06-17-scikit-learn-model-deployment",slug:"/IoT-and-Machine-Learning/AIOps/2023-06-17-scikit-learn-model-deployment/2023-06-17",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-06-17-scikit-learn-model-deployment/2023-06-17",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/AIOps/2023-06-17-scikit-learn-model-deployment/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"SKlearn",permalink:"/docs/tags/s-klearn"},{label:"Flask",permalink:"/docs/tags/flask"}],version:"current",sidebarPosition:4640,frontMatter:{sidebar_position:4640,slug:"2023-06-17",title:"Serving your SciKit Learn Model as a Prediction API",authors:"mpolinowski",tags:["Python","Machine Learning","SKlearn","Flask"],description:"Use Flask, Docker and React.js to Deploy your ML Model to the Web"},sidebar:"tutorialSidebar",previous:{title:"AutoML with AutoGluon for Tabular Data",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-06-18-automl-with-autogluon-tabular-data/2023-06-18"},next:{title:"Deploying Prediction APIs",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-03-27-deploying-prediction-apis-with-flask/2023-03-27"}},l={},o=[{value:"Preparing the ML Model",id:"preparing-the-ml-model",level:2},{value:"Data Preprocessing",id:"data-preprocessing",level:3},{value:"Model Training",id:"model-training",level:3},{value:"Model Validation",id:"model-validation",level:4},{value:"Model Testing",id:"model-testing",level:4},{value:"Model Saving",id:"model-saving",level:3},{value:"Model Loading",id:"model-loading",level:3},{value:"Preparing the Model API",id:"preparing-the-model-api",level:2},{value:"Containerizing the Application",id:"containerizing-the-application",level:2},{value:"Preparations",id:"preparations",level:3},{value:"Building the Docker Image",id:"building-the-docker-image",level:3},{value:"Running the Docker Container",id:"running-the-docker-container",level:3},{value:"React.js Frontend",id:"reactjs-frontend",level:2},{value:"Adding the Frontend",id:"adding-the-frontend",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"TST, HongKong",src:t(852444).A+"",width:"1500",height:"512"})}),"\n",(0,s.jsx)(n.h1,{id:"serving-your-scikit-learn-model-as-a-prediction-api",children:"Serving your SciKit Learn Model as a Prediction API"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/mpolinowski/sklearn-model-deployment",children:"Github Repository"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#serving-your-scikit-learn-model-as-a-prediction-api",children:"Serving your SciKit Learn Model as a Prediction API"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#preparing-the-ml-model",children:"Preparing the ML Model"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#data-preprocessing",children:"Data Preprocessing"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#model-training",children:"Model Training"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#model-validation",children:"Model Validation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#model-testing",children:"Model Testing"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#model-saving",children:"Model Saving"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#model-loading",children:"Model Loading"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#preparing-the-model-api",children:"Preparing the Model API"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#containerizing-the-application",children:"Containerizing the Application"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#preparations",children:"Preparations"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#building-the-docker-image",children:"Building the Docker Image"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#running-the-docker-container",children:"Running the Docker Container"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#reactjs-frontend",children:"React.js Frontend"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#adding-the-frontend",children:"Adding the Frontend"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"preparing-the-ml-model",children:"Preparing the ML Model"}),"\n",(0,s.jsx)(n.h3,{id:"data-preprocessing",children:"Data Preprocessing"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.kaggle.com/datasets/ashydv/advertising-dataset",children:"Advertisement Dataset"}),": Use the advertising dataset given in ISLR and analyse the relationship between advertisement channels and sales."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import joblib\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom sklearn.model_selection import train_test_split\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"SEED = 42\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"adv_df = pd.read_csv('dataset/advertising.csv')\nadv_df.head(5)\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{children:"TV"}),(0,s.jsx)(n.th,{children:"Radio"}),(0,s.jsx)(n.th,{children:"Newspaper"}),(0,s.jsx)(n.th,{children:"Sales"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"230.1"}),(0,s.jsx)(n.td,{children:"37.8"}),(0,s.jsx)(n.td,{children:"69.2"}),(0,s.jsx)(n.td,{children:"22.1"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"44.5"}),(0,s.jsx)(n.td,{children:"39.3"}),(0,s.jsx)(n.td,{children:"45.1"}),(0,s.jsx)(n.td,{children:"10.4"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"17.2"}),(0,s.jsx)(n.td,{children:"45.9"}),(0,s.jsx)(n.td,{children:"69.3"}),(0,s.jsx)(n.td,{children:"9.3"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"151.5"}),(0,s.jsx)(n.td,{children:"41.3"}),(0,s.jsx)(n.td,{children:"58.5"}),(0,s.jsx)(n.td,{children:"18.5"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"180.8"}),(0,s.jsx)(n.td,{children:"10.8"}),(0,s.jsx)(n.td,{children:"58.4"}),(0,s.jsx)(n.td,{children:"12.9"})]})]})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"adv_df.describe()\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{children:"TV"}),(0,s.jsx)(n.th,{children:"Radio"}),(0,s.jsx)(n.th,{children:"Newspaper"}),(0,s.jsx)(n.th,{children:"Sales"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"count"}),(0,s.jsx)(n.td,{children:"200.000000"}),(0,s.jsx)(n.td,{children:"200.000000"}),(0,s.jsx)(n.td,{children:"200.000000"}),(0,s.jsx)(n.td,{children:"200.000000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"mean"}),(0,s.jsx)(n.td,{children:"147.042500"}),(0,s.jsx)(n.td,{children:"23.264000"}),(0,s.jsx)(n.td,{children:"30.554000"}),(0,s.jsx)(n.td,{children:"14.022500"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"std"}),(0,s.jsx)(n.td,{children:"85.854236"}),(0,s.jsx)(n.td,{children:"14.846809"}),(0,s.jsx)(n.td,{children:"21.778621"}),(0,s.jsx)(n.td,{children:"5.217457"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"min"}),(0,s.jsx)(n.td,{children:"0.700000"}),(0,s.jsx)(n.td,{children:"0.000000"}),(0,s.jsx)(n.td,{children:"0.300000"}),(0,s.jsx)(n.td,{children:"1.600000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"25%"}),(0,s.jsx)(n.td,{children:"74.375000"}),(0,s.jsx)(n.td,{children:"9.975000"}),(0,s.jsx)(n.td,{children:"12.750000"}),(0,s.jsx)(n.td,{children:"10.375000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"50%"}),(0,s.jsx)(n.td,{children:"149.750000"}),(0,s.jsx)(n.td,{children:"22.900000"}),(0,s.jsx)(n.td,{children:"25.750000"}),(0,s.jsx)(n.td,{children:"12.900000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"75%"}),(0,s.jsx)(n.td,{children:"218.825000"}),(0,s.jsx)(n.td,{children:"36.525000"}),(0,s.jsx)(n.td,{children:"45.100000"}),(0,s.jsx)(n.td,{children:"17.400000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"max"}),(0,s.jsx)(n.td,{children:"296.400000"}),(0,s.jsx)(n.td,{children:"49.600000"}),(0,s.jsx)(n.td,{children:"114.000000"}),(0,s.jsx)(n.td,{children:"27.000000"})]})]})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# features / labels split\nX = adv_df.drop('Sales', axis=1)\ny = adv_df['Sales']\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# train, validation and test split\nX_train, X_temp, y_train, y_temp = train_test_split(\n    X, y, test_size=0.3, random_state=SEED\n)\n\nX_val, X_test, y_val, y_test = train_test_split(\n    X_temp, y_temp, test_size=0.5, random_state=SEED\n)\n\nprint(len(X), len(X_train), len(X_val), len(X_test))\n# 200 140 30 30\n"})}),"\n",(0,s.jsx)(n.h3,{id:"model-training",children:"Model Training"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"model = RandomForestRegressor(\n    n_estimators=3,\n    random_state=SEED\n)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"model.fit(X_train, y_train)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"model-validation",children:"Model Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# validate model performance and tune hyper parameter\nval_preds = model.predict(X_val)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"print(mean_absolute_error(y_val, val_preds))\nprint(mean_squared_error(y_val, val_preds)**0.5)\n# 0.7566666666666663 MAE should be small compared to MEAN 14.022500\n# 0.9330753611738063 RMSE should be small compared to STD 5.217457\nadv_df.describe()['Sales']\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"count"}),(0,s.jsx)(n.td,{children:"200.000000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"mean"}),(0,s.jsx)(n.td,{children:"14.022500"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"std"}),(0,s.jsx)(n.td,{children:"5.217457"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"min"}),(0,s.jsx)(n.td,{children:"1.600000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"25%"}),(0,s.jsx)(n.td,{children:"10.375000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"50%"}),(0,s.jsx)(n.td,{children:"12.900000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"75%"}),(0,s.jsx)(n.td,{children:"17.400000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"max"}),(0,s.jsx)(n.td,{children:"27.000000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.em,{children:"Name: Sales, dtype: float64"})}),(0,s.jsx)(n.td,{})]})]})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# try to improve the model by adding estimators\nmodel2 = RandomForestRegressor(\n    n_estimators=30,\n    random_state=SEED\n)\nmodel2.fit(X_train, y_train)\nval_preds2 = model2.predict(X_val)\n\nprint(mean_absolute_error(y_val, val_preds2))\nprint(mean_squared_error(y_val, val_preds2)**0.5)\n# 0.483111111111111 MAE should be small compared to MEAN 14.022500\n# 0.6177971619660723 RMSE should be small compared to STD 5.217457\n"})}),"\n",(0,s.jsx)(n.h4,{id:"model-testing",children:"Model Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# retest the optimized model on unseen data\ntest_preds = model2.predict(X_test)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"print(mean_absolute_error(y_test, test_preds))\nprint(mean_squared_error(y_test, test_preds)**0.5)\n# 0.5649999999999998 MAE should be small compared to MEAN 14.022500\n# 0.6758333675845999 RMSE should be small compared to STD 5.217457\n"})}),"\n",(0,s.jsx)(n.h3,{id:"model-saving",children:"Model Saving"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"production_model = RandomForestRegressor(\n    n_estimators=30,\n    random_state= SEED\n)\n\n# fit production model to entire dataset\nproduction_model.fit(X, y)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# save model for deployment\njoblib.dump(production_model, 'models/production_model.pkl')\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"list(X.columns)\n# ['TV', 'Radio', 'Newspaper']\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"joblib.dump(list(X.columns), 'models/production_model_column_names.pkl')\n"})}),"\n",(0,s.jsx)(n.h3,{id:"model-loading",children:"Model Loading"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"column_names = joblib.load('models/production_model_column_names.pkl')\ncolumn_names\n# ['TV', 'Radio', 'Newspaper']\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"loaded_model = joblib.load('models/production_model.pkl')\nprint(loaded_model.predict([X.iloc[42]]))\nprint(loaded_model.predict([[180.8, 10.8, 58.4]]))\n# [20.68666667] TRUE 20.7\n#[13.28] TRUE 12.9\n"})}),"\n",(0,s.jsx)(n.h2,{id:"preparing-the-model-api",children:"Preparing the Model API"}),"\n",(0,s.jsx)(n.p,{children:"Install Flask:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install flask\n"})}),"\n",(0,s.jsx)(n.p,{children:"And prepare the prediction API route:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Prediction_API.py"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"from flask import Flask, request, jsonify\nimport joblib\nimport pandas as pd\n\nmodel = joblib.load('models/production_model.pkl')\ncol_names = joblib.load('models/production_model_column_names.pkl')\n\napp = Flask(__name__)\n\n# wait for json post request and return prediction\n@app.route('/api', methods=['POST'])\ndef predict():\n    req_data = request.json\n    df = pd.DataFrame(req_data).reindex(columns=col_names)\n\n    prediction = list(model.predict(df))\n\n    return jsonify({'prediction': str(prediction)})\n\n# load the model and start web api\nif __name__ == 'main':\n    app.run()\n"})}),"\n",(0,s.jsx)(n.p,{children:"Start the application by running:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"export FLASK_ENV=development\nexport FLASK_APP=Prediction_API\nflask run \n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Serving your SciKit Learn Model as a Prediction API",src:t(514279).A+"",width:"1130",height:"171"})}),"\n",(0,s.jsxs)(n.p,{children:["We can now use ",(0,s.jsx)(n.a,{href:"https://www.postman.com/downloads/",children:"Postman"})," to POST 3 datapoints from our dataset to the API endpoint:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n    {"TV":180.8, "Radio":10.8, "Newspaper":58.4},\n    {"TV":44.5, "Radio":39.3, "Newspaper":45.1},\n    {"TV":17.2, "Radio":45.9, "Newspaper":69.3}\n]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["As they are from our labelled dataset we know that the prediction response should be around ",(0,s.jsx)(n.code,{children:"12.9"}),", ",(0,s.jsx)(n.code,{children:"10.4"})," and ",(0,s.jsx)(n.code,{children:"9.3"})," for those 3 datapoints:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "prediction": "[13.279999999999996, 10.389999999999997, 8.99666666666667]"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Serving your SciKit Learn Model as a Prediction API",src:t(129452).A+"",width:"1280",height:"581"})}),"\n",(0,s.jsx)(n.h2,{id:"containerizing-the-application",children:"Containerizing the Application"}),"\n",(0,s.jsx)(n.h3,{id:"preparations",children:"Preparations"}),"\n",(0,s.jsx)(n.p,{children:"Prepare the necessary files:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:".\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 models\n\u2502\xa0\xa0 \u251c\u2500\u2500 production_model_column_names.pkl\n\u2502\xa0\xa0 \u2514\u2500\u2500 production_model.pkl\n\u2514\u2500\u2500 requirements.txt\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Take the latest pickle files from your model training and copy the Flask app into ",(0,s.jsx)(n.em,{children:"app.py"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"from flask import Flask, request, jsonify\nimport joblib\nimport pandas as pd\n\nmodel = joblib.load('models/production_model.pkl')\ncol_names = joblib.load('models/production_model_column_names.pkl')\n\napp = Flask(__name__)\n\n# wait for json post request and return prediction\n@app.route('/api', methods=['POST'])\ndef predict():\n    req_data = request.json\n    df = pd.DataFrame(req_data).reindex(columns=col_names)\n\n    prediction = list(model.predict(df))\n\n    return jsonify({'prediction': str(prediction)})\n\n# load the model and start web api\nif __name__ == 'main':\n    app.run()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Define all the Python dependencies that need to be installed inside the container for the app to work in ",(0,s.jsx)(n.em,{children:"requirements.txt"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"blinker==1.6.2\nclick==8.1.3\njoblib==1.2.0\nFlask==2.3.2\nitsdangerous==2.1.2\nJinja2==3.1.2\nMarkupSafe==2.1.2\nnumpy==1.25.0\npandas==2.0.2\nscikit-learn==1.2.2\nWerkzeug==2.3.6\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And the ",(0,s.jsx)(n.em,{children:"Dockerfile"})," to build the container with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Dockerfile",children:'# base image to use\nFROM python:3.10-slim-bookworm\n# dir name inside the container used for your app\nWORKDIR /opt/python_app\n# copy all files into the work dir\nCOPY . .\n# install python dependencies\nRUN pip install --upgrade pip\nRUN pip install -r requirements.txt\n# execute the app when container starts\nEXPOSE 5000/tcp\nCMD [ "python", "-m" , "flask", "--app", "app", "run", "--host=0.0.0.0"] \n'})}),"\n",(0,s.jsx)(n.h3,{id:"building-the-docker-image",children:"Building the Docker Image"}),"\n",(0,s.jsxs)(n.p,{children:["You can simply run ",(0,s.jsx)(n.code,{children:"docker build --tag flask-app ."})," to build the container using Docker. But I started getting deprecation warnings on the ",(0,s.jsx)(n.code,{children:"build"})," command and that it is going to be replaced by ",(0,s.jsx)(n.code,{children:"buildx"})," and the installation guide for this still feels a bit flaky..."]}),"\n",(0,s.jsxs)(n.p,{children:["But I wanted to use ",(0,s.jsx)(n.a,{href:"https://podman-desktop.io/",children:"Podman Desktop"})," for a while. So let's give that a try then :)"]}),"\n",(0,s.jsxs)(n.p,{children:["Install the package from ",(0,s.jsx)(n.a,{href:"https://flathub.org/apps/details/io.podman_desktop.PodmanDesktop",children:"Flathub"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"flatpak install flathub io.podman_desktop.PodmanDesktop\n"})}),"\n",(0,s.jsx)(n.p,{children:"And run the application using:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"flatpak run io.podman_desktop.PodmanDesktop\n"})}),"\n",(0,s.jsxs)(n.p,{children:["After clicking on ",(0,s.jsx)(n.strong,{children:"Create Container"})," and selecting ",(0,s.jsx)(n.em,{children:"from Dockerfile"}),":"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Serving your SciKit Learn Model as a Prediction API",src:t(212341).A+"",width:"1042",height:"287"})}),"\n",(0,s.jsxs)(n.p,{children:["I ran into my first issue - which, I am sure, is actually a Flatpack issue. You have to point the builder to your ",(0,s.jsx)(n.strong,{children:"Dockerfile"}),". But since the file is then copied into a temp directory that the Flatpack app is allowed to access you then also have to point to the ",(0,s.jsx)(n.strong,{children:"Build Context Directory"})," to the containing folder. This will copy everything inside this folder into ",(0,s.jsx)(n.strong,{children:"a different temp folder"}),". Otherwise the build will fail because it cannot find the ",(0,s.jsx)(n.code,{children:"requirements.txt"})," file:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Serving your SciKit Learn Model as a Prediction API",src:t(354394).A+"",width:"1044",height:"411"})}),"\n",(0,s.jsxs)(n.p,{children:["Click on ",(0,s.jsx)(n.strong,{children:"Build"})," and wait for the process to finish:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Serving your SciKit Learn Model as a Prediction API",src:t(59619).A+"",width:"1032",height:"240"})}),"\n",(0,s.jsx)(n.h3,{id:"running-the-docker-container",children:"Running the Docker Container"}),"\n",(0,s.jsxs)(n.p,{children:["To run the container in Docker we just need to make sure that the API port is exposed. In the code above By default Flask uses port ",(0,s.jsx)(n.code,{children:"5000"})," and the Dockerfile above exposed this port when building the Docker image. So all I need to do is to run:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker run -P flask-api\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This exposes the REST API to a random outer port ",(0,s.jsx)(n.code,{children:"32773"})," - which is what you want in a cloud-native environment:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Serving your SciKit Learn Model as a Prediction API",src:t(722760).A+"",width:"1206",height:"52"})}),"\n",(0,s.jsxs)(n.p,{children:["To get more control you can override the default port by - e.g. setting the outer port to ",(0,s.jsx)(n.code,{children:"8080"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker run -d --rm -p 8080:5000 flask-api\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Serving your SciKit Learn Model as a Prediction API",src:t(962705).A+"",width:"1135",height:"49"})}),"\n",(0,s.jsx)(n.p,{children:"Or going back to Podman Desktop:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Serving your SciKit Learn Model as a Prediction API",src:t(451222).A+"",width:"1049",height:"674"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Serving your SciKit Learn Model as a Prediction API",src:t(229311).A+"",width:"1050",height:"191"})}),"\n",(0,s.jsxs)(n.p,{children:["With those settings the API is now exposed on it's native port ",(0,s.jsx)(n.code,{children:"5000"})," and can be tested using Postman:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Serving your SciKit Learn Model as a Prediction API",src:t(245337).A+"",width:"1277",height:"581"})}),"\n",(0,s.jsx)(n.h2,{id:"reactjs-frontend",children:"React.js Frontend"}),"\n",(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.a,{href:"/docs/Development/Javascript/2023-04-01-reactjs-2023/2023-04-01",children:"Vite"})," to scaffold a basic React frontend:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm create vite@latest\ncd into/directory\nnpm install\nnpm run dev\n"})}),"\n",(0,s.jsx)(n.p,{children:"Add a component that fetches the prediction from your backend API and import it to your page:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import React, { useState } from \'react\';\n\nconst apiUrl = \'http://localhost:5000/api\'\nconst method = \'POST\'\nconst mode = \'cors\'\nconst headers = {\n    \'content-type\': \'application/json\'\n}\n\nconst jsonData = [ {"TV":17.2, "Radio":45.9, "Newspaper":69.3} ]\n\n\nconst makeRequest = async (data) => {\n\n    const res = await fetch(apiUrl, {\n      method: method,\n      mode: mode,\n      cache: "no-cache",\n      credentials: "same-origin",\n      headers: headers,\n      body: JSON.stringify(data)\n    });\n    const response = await res.json();\n    return response;\n  };\n\n  export default function App() {\n    const [answer, setAnswer] = useState();\n\n    const submit = async () => {\n      const res = await makeRequest(jsonData);\n      setAnswer(parseFloat(res.prediction.replace("[", "").replace("]", "")));\n    };\n  \n    return (\n      <>\n        <button onClick={submit}>Send</button>\n        <div><p>Sales: {JSON.stringify(answer)}</p></div>\n      </>\n    );\n  }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The frontend takes the hard coded values ",(0,s.jsx)(n.code,{children:'[{"TV":17.2, "Radio":45.9, "Newspaper":69.3}]'})," and requests a prediction on them when the button is pressed."]}),"\n",(0,s.jsx)(n.p,{children:"Now we are only missing an input field that allows the user to send a custom request:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import React, { useId, useState } from \'react\';\n\n// prepare request\nconst apiUrl = \'http://localhost:5000/api\'\nconst method = \'POST\'\nconst mode = \'cors\'\nconst cache = "no-cache"\nconst credentials = "same-origin"\nconst headers = {\n    \'content-type\': \'application/json\'\n}\n\n// default request data\nconst jsonData = [{"TV":17.2,"Radio":45.9,"Newspaper":69.3}]\nconst stringData = JSON.stringify(jsonData)\n\n// make request when submit button is pressed\nconst makeRequest = async (data) => {\n    const res = await fetch(apiUrl, {\n      method: method,\n      mode: mode,\n      cache: cache,\n      credentials: credentials,\n      headers: headers,\n      body: JSON.stringify(data)\n    });\n    const response = await res.json();\n    return response;\n};\n\nexport default function App(props) {\n    // get input field value\n    const id = useId();\n    const [input, setInput] = useState(props?.value ?? \'\');\n    // store api response\n    const [answer, setAnswer] = useState();\n    // handle submit button press\n    const submit = async () => {\n      const res = await makeRequest(JSON.parse(input) || jsonData);\n      setAnswer(parseFloat(res.prediction.replace("[", "").replace("]", "")));\n      console.log(JSON.parse(input))\n    };\n  \n    return (\n      <>\n        <h1>Sales Predictions</h1>\n        <form>\n        <fieldset>\n          <label>\n            <h3>Expenditures for Adverts</h3>\n            <p>Please specify the advertisement budget for <strong>TV</strong>, <strong>Radio</strong> and <strong>Newspaper</strong> adverts:</p>\n            <label htmlFor={id}><strong>Input JSON Data:</strong> </label>\n            <input\n                id={id}\n                value={input}\n                placeholder=\'  [{"TV":17.2,"Radio":45.9,"Newspaper":69.3}]\'\n                className="form-control"\n                type="json"\n                size="32"\n                onInput={e => setInput(e.target.value)}\n              /><br/>\n              <em>Example: <code>{stringData}</code></em>\n          </label>\n        </fieldset>\n        </form>\n        <div>\n        <button type=\'submit\' onClick={submit}>Send</button>\n          <h5>Revenue Prediction:</h5>\n          <p>{JSON.stringify(answer)}</p>\n        </div>\n      </>\n    );\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Serving your SciKit Learn Model as a Prediction API",src:t(321407).A+"",width:"876",height:"447"})}),"\n",(0,s.jsx)(n.h2,{id:"adding-the-frontend",children:"Adding the Frontend"}),"\n",(0,s.jsx)(n.p,{children:"Starting the backend separately from the frontend is a bit inconvenient. Instead we can pre-render the frontend and add it into the backend container. Run a Vite.js build to generate the static frontend with the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run build\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The static files will be generated in ",(0,s.jsx)(n.code,{children:"./dist"}),". Copy them into the ",(0,s.jsx)(n.code,{children:"index.html"})," file into a folder named ",(0,s.jsx)(n.code,{children:"templates"})," in your Flask app root and rename to ",(0,s.jsx)(n.code,{children:"sales.html"}),". Static JS, CSS and image files need to go into the ",(0,s.jsx)(n.code,{children:"static"})," folder:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:".\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 models\n\u2502\xa0\xa0 \u251c\u2500\u2500 production_model_column_names.pkl\n\u2502\xa0\xa0 \u2514\u2500\u2500 production_model.pkl\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 static\n\u2502\xa0\xa0 \u251c\u2500\u2500 assets\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 index-bf239c1f.js\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 index-d526a0c5.css\n\u2502\xa0\xa0 \u2514\u2500\u2500 favicon.ico\n\u2514\u2500\u2500 templates\n    \u2514\u2500\u2500 sales.html\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Unfortunately, we need to edit the links for those static files in ",(0,s.jsx)(n.code,{children:"sales.html"})," by adding the ",(0,s.jsx)(n.code,{children:"/static/"})," prefix:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <link rel="icon" type="image/svg+xml" href="/static/favicon.ico" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Sales Prediction API</title>\n    <script type="module" crossorigin src="/static/assets/index-bf239c1f.js"><\/script>\n    <link rel="stylesheet" href="/static/assets/index-d526a0c5.css">\n  </head>\n  <body>\n    <div id="root"></div>\n    \n  </body>\n</html>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Now add the static route to ",(0,s.jsx)(n.code,{children:"app.py"})," that will serve this page for us on ",(0,s.jsx)(n.code,{children:"/sales/"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"from flask import Flask, request, jsonify, render_template\nimport joblib\nimport pandas as pd\n\nmodel = joblib.load('models/production_model.pkl')\ncol_names = joblib.load('models/production_model_column_names.pkl')\n\napp = Flask(__name__, static_folder='static')\n\n# serve html frontend\n@app.route('/sales/')\n@app.route('/sales/<name>')\ndef sales(name=None):\n    return render_template('sales.html', name=name)\n\n\n# wait for json post request and return prediction\n@app.route('/api', methods=['POST'])\ndef predict():\n    req_data = request.json\n    df = pd.DataFrame(req_data).reindex(columns=col_names)\n\n    prediction = list(model.predict(df))\n\n    return jsonify({'prediction': str(prediction)})\n\n# load the model and start web api\nif __name__ == 'main':\n    app.run()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Rebuild the Docker image and restart the container. It should now serve the frontend on ",(0,s.jsx)(n.code,{children:"/sales/"})," connecting to the backend on ",(0,s.jsx)(n.code,{children:"/api/"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"http://localhost:5000/sales/"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"http://localhost:5000/api/"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},514279:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/SciKit_Learn_Model_API_01-1eb6477acb34b2cad928b09d85fae280.png"},129452:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/SciKit_Learn_Model_API_02-c8720462dff42551aaf555225db233d9.png"},212341:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/SciKit_Learn_Model_API_03-169dd617e134a1accc735d713fd74490.png"},354394:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/SciKit_Learn_Model_API_04-33e8f7ab49e40c982f893a4a4ab0bc6b.png"},59619:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/SciKit_Learn_Model_API_05-4ff577e98f6edc052cadac5d93d56198.png"},722760:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/SciKit_Learn_Model_API_06-6efb01223160005d5d0488b1b46ae844.png"},962705:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/SciKit_Learn_Model_API_07-9383162564bc0d4b4c777139f44ce2ae.png"},451222:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/SciKit_Learn_Model_API_08-dd60e307bf44f9a7a627641804a577b1.png"},229311:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/SciKit_Learn_Model_API_09-094447ceadc63f6c7a997641076e1658.png"},245337:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/SciKit_Learn_Model_API_10-26c4a30f4b29b9123441d8cda255b4bb.png"},321407:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/SciKit_Learn_Model_API_11-0fc2880ea43c43b1a6e2c70fe7bcf70d.gif"},852444:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-c77de99ac2aaaf4bfc10d6424f4476da.jpg"},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(296540);const i={},d=s.createContext(i);function r(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);