"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[34376],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=s,k=c["".concat(l,".").concat(m)]||c[m]||u[m]||a;return n?r.createElement(k,o(o({ref:t},d),{},{components:n})):r.createElement(k,o({ref:t},d))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},74918:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(87462),s=(n(67294),n(3905));const a={sidebar_position:5900,slug:"2023-06-04",title:"Node / Express with Typescript - (Re)Introduction 2023",authors:"mpolinowski",tags:["Javascript","Cheating"],description:"Part 1 - Building a Node.js, Express.js App with a MySQL Backend."},o=void 0,i={unversionedId:"Development/Javascript/2023-06-04-nodejs-typescript-sql/index",id:"Development/Javascript/2023-06-04-nodejs-typescript-sql/index",title:"Node / Express with Typescript - (Re)Introduction 2023",description:"Part 1 - Building a Node.js, Express.js App with a MySQL Backend.",source:"@site/docs/Development/Javascript/2023-06-04-nodejs-typescript-sql/index.md",sourceDirName:"Development/Javascript/2023-06-04-nodejs-typescript-sql",slug:"/Development/Javascript/2023-06-04-nodejs-typescript-sql/2023-06-04",permalink:"/docs/Development/Javascript/2023-06-04-nodejs-typescript-sql/2023-06-04",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Javascript/2023-06-04-nodejs-typescript-sql/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"},{label:"Cheating",permalink:"/docs/tags/cheating"}],version:"current",sidebarPosition:5900,frontMatter:{sidebar_position:5900,slug:"2023-06-04",title:"Node / Express with Typescript - (Re)Introduction 2023",authors:"mpolinowski",tags:["Javascript","Cheating"],description:"Part 1 - Building a Node.js, Express.js App with a MySQL Backend."},sidebar:"tutorialSidebar",previous:{title:"Javascript",permalink:"/docs/category/javascript"},next:{title:"React.js 2023 - A (Re)Introduction",permalink:"/docs/Development/Javascript/2023-04-01-reactjs-2023/2023-04-01"}},l={},p=[{value:"Getting Started",id:"getting-started",level:2},{value:"Node.js",id:"nodejs",level:3},{value:"Typescript",id:"typescript",level:3},{value:"Nodemon",id:"nodemon",level:3},{value:"Webserver",id:"webserver",level:2},{value:"Express.js",id:"expressjs",level:3},{value:"Express Router",id:"express-router",level:3},{value:"Request Validation",id:"request-validation",level:3},{value:"Database",id:"database",level:2},{value:"SQL Database",id:"sql-database",level:3},{value:"MySQL Connector",id:"mysql-connector",level:3},{value:"Authentication",id:"authentication",level:2},{value:"Registering Users",id:"registering-users",level:3},{value:"Users Login",id:"users-login",level:3},{value:"JSON Web Tokens",id:"json-web-tokens",level:3},{value:"Authenticate Users",id:"authenticate-users",level:3},{value:"Deauthenticate Users",id:"deauthenticate-users",level:3},{value:"Dotenv",id:"dotenv",level:3},{value:"Verify Auth Status Middleware",id:"verify-auth-status-middleware",level:3},{value:"Update User Info",id:"update-user-info",level:3},{value:"User Administration",id:"user-administration",level:3},{value:"Get all Users",id:"get-all-users",level:4},{value:"Get User by ID",id:"get-user-by-id",level:4},{value:"Create User",id:"create-user",level:4},{value:"Update User",id:"update-user",level:4},{value:"Delete User",id:"delete-user",level:4},{value:"User Role Model",id:"user-role-model",level:3},{value:"User Permissions",id:"user-permissions",level:4},{value:"Pre-Seeding Roles and Permissions",id:"pre-seeding-roles-and-permissions",level:4},{value:"Permissions Controller",id:"permissions-controller",level:4},{value:"Role Controller",id:"role-controller",level:4},{value:"Manually Adding Roles",id:"manually-adding-roles",level:5},{value:"Get Permissions for a Role",id:"get-permissions-for-a-role",level:5},{value:"Update Permissions for a Role",id:"update-permissions-for-a-role",level:5},{value:"Manually Deleting Roles",id:"manually-deleting-roles",level:5},{value:"Products",id:"products",level:2},{value:"Product Controller",id:"product-controller",level:3},{value:"Product Entity",id:"product-entity",level:3},{value:"Pre-Seeding Products",id:"pre-seeding-products",level:4},{value:"Pagination",id:"pagination",level:3},{value:"File Uploads",id:"file-uploads",level:3},{value:"Static Routes",id:"static-routes",level:4},{value:"Orders",id:"orders",level:2},{value:"Pre-Seeding Orders",id:"pre-seeding-orders",level:3},{value:"Order Controller",id:"order-controller",level:3},{value:"Exporting Order to CSV",id:"exporting-order-to-csv",level:4},{value:"Charting Order Data",id:"charting-order-data",level:4},{value:"Route Permissions",id:"route-permissions",level:2},{value:"Update Role Seed",id:"update-role-seed",level:3},{value:"Permission Middleware",id:"permission-middleware",level:3}],d={toc:p};function u(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"TST, Hongkong",src:n(19885).Z,width:"2359",height:"864"})),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#getting-started"},"Getting Started"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#nodejs"},"Node.js")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#typescript"},"Typescript")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#nodemon"},"Nodemon")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#webserver"},"Webserver"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#expressjs"},"Express.js")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#express-router"},"Express Router")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#request-validation"},"Request Validation")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#database"},"Database"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#sql-database"},"SQL Database")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#mysql-connector"},"MySQL Connector")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#authentication"},"Authentication"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#registering-users"},"Registering Users")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#users-login"},"Users Login")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#json-web-tokens"},"JSON Web Tokens")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#authenticate-users"},"Authenticate Users")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#deauthenticate-users"},"Deauthenticate Users")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#dotenv"},"Dotenv")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#verify-auth-status-middleware"},"Verify Auth Status Middleware")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#update-user-info"},"Update User Info")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#user-administration"},"User Administration"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#get-all-users"},"Get all Users")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#get-user-by-id"},"Get User by ID")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#create-user"},"Create User")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#update-user"},"Update User")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#delete-user"},"Delete User")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#user-role-model"},"User Role Model"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#user-permissions"},"User Permissions")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#pre-seeding-roles-and-permissions"},"Pre-Seeding Roles and Permissions")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#permissions-controller"},"Permissions Controller")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#role-controller"},"Role Controller"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#manually-adding-roles"},"Manually Adding Roles")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#get-permissions-for-a-role"},"Get Permissions for a Role")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#update-permissions-for-a-role"},"Update Permissions for a Role")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#manually-deleting-roles"},"Manually Deleting Roles")))))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#products"},"Products"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#product-controller"},"Product Controller")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#product-entity"},"Product Entity"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#pre-seeding-products"},"Pre-Seeding Products")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#pagination"},"Pagination")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#file-uploads"},"File Uploads"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#static-routes"},"Static Routes")))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#orders"},"Orders"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#pre-seeding-orders"},"Pre-Seeding Orders")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#order-controller"},"Order Controller"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#exporting-order-to-csv"},"Exporting Order to CSV")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#charting-order-data"},"Charting Order Data")))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#route-permissions"},"Route Permissions"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#update-role-seed"},"Update Role Seed")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#permission-middleware"},"Permission Middleware"))))),(0,s.kt)("h2",{id:"getting-started"},"Getting Started"),(0,s.kt)("h3",{id:"nodejs"},"Node.js"),(0,s.kt)("p",null,"Install the ",(0,s.kt)("a",{parentName:"p",href:"https://nodejs.org/en"},"latest version of Node.js")," and create a new Node project using npm:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir hello-next && cd hello-next\nnpm init -y\n")),(0,s.kt)("p",null,"Test your Node.js installation by creating a hello world js file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"nano ./index.js\n")),(0,s.kt)("p",null,"with the following content:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"console.log('Hello from Node.js') \n")),(0,s.kt)("p",null,"Add a start script to ",(0,s.kt)("inlineCode",{parentName:"p"},"./package.json")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},' "scripts": {\n    "start": "node index.js"\n  },\n')),(0,s.kt)("p",null,"And execute it using npm:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"}," npm start\n\n> hello-next@1.0.0 start\n> node index.js\n\nHello from Node.js\n")),(0,s.kt)("h3",{id:"typescript"},"Typescript"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"sudo npm install -g typescript \nnpm install -D typescript ts-node nodemon\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"tsc --init\n\nCreated a new tsconfig.json with:\n\nTS\n  target: es2016\n  module: commonjs\n  strict: true\n  esModuleInterop: true\n  skipLibCheck: true\n  forceConsistentCasingInFileNames: true\n")),(0,s.kt)("p",null,"Move the index file into a src sub-directory and rename the file to ",(0,s.kt)("inlineCode",{parentName:"p"},"index.ts")," and change the npm script to ",(0,s.kt)("inlineCode",{parentName:"p"},'"start": "ts-node src/index.ts"'),". Verify that everything still works:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm start\n\n> hello-next@1.0.0 start\n> ts-node index.ts\n\nHello from Node.js\n")),(0,s.kt)("h3",{id:"nodemon"},"Nodemon"),(0,s.kt)("p",null,"For development we can use ",(0,s.kt)("inlineCode",{parentName:"p"},'"dev": "nodemon src/index.ts"')," to get live reloading with the following configuration:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"nano nodemon.json\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ignore": [\n        ".git",\n        "node_modules/",\n        "dist/",\n        "coverage/"\n    ],\n    "watch": [\n        "src/*"\n    ],\n    "ext": "js, json, ts"\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n\n> hello-next@1.0.0 dev\n> nodemon src/index.ts\n\n[nodemon] 2.0.22\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): src/**/*\n[nodemon] watching extensions: js,json,ts\n[nodemon] starting `ts-node src/index.ts`\nHello from Node.js\n[nodemon] clean exit - waiting for changes before restart\n")),(0,s.kt)("h2",{id:"webserver"},"Webserver"),(0,s.kt)("h3",{id:"expressjs"},"Express.js"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install express cors\nnpm install -D @types/express @types/cors\n")),(0,s.kt)("p",null,"Clean out the index file and replace it with the Express boilerplate:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import express, {Request, Response} from 'express'\nimport cors from 'cors'\n\nconst expressPort = 8888;\nconst app = express();\n\n// use json for API routes\napp.use(express.json());\n// cors for api address/port\napp.use(cors({\n    credentials: true,\n    origin: [\"http://localhost:3000\"]\n}));\n\napp.get('/', (req: Request, res: Response) => {\n    res.send('INFO :: Root route called');\n});\n\napp.listen(expressPort, () => {\n    console.log('INFO :: Webserver started on port ' + expressPort)\n});\n")),(0,s.kt)("p",null,"Test that the root route is working:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl localhost:8888\nINFO :: Root route called\n")),(0,s.kt)("h3",{id:"express-router"},"Express Router"),(0,s.kt)("p",null,"Above we created a route inside the index file. But Express allows us to export routes as well as controller functions - e.g. authentication - from separate files to keep things tidy:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"nano src/routes.ts\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Router } from 'express';\nimport { Register } from './controller/auth.controller'\n\nexport const routes = (router: Router) => {\n    router.post('/api/register', Register)\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"nano src/controller/auth.controller.ts\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Request, Response } from 'express';\n\nexport const Register = (req: Request, res: Response) => {\n    res.send(req.body);\n};\n")),(0,s.kt)("p",null,"The routes can now be imported into your index file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { routes } from './routes';\n\n// import routes from router\nroutes(app)\n")),(0,s.kt)("p",null,"We can now test the registration URL:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl --header "Content-Type: application/json" \\\n  --request POST \\\n  --data \'{"username":"itsme","password":"secret"}\' \\\n  http://localhost:8888/api/register\n')),(0,s.kt)("p",null,"This returns the JSON body ",(0,s.kt)("inlineCode",{parentName:"p"},'{"username":"itsme","password":"secret"}')," as configured."),(0,s.kt)("h3",{id:"request-validation"},"Request Validation"),(0,s.kt)("p",null,"Use the express request-validation inside your authentication controller to verify that an incoming request is valid:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install express-validation\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"nano ./src/validation/register.validation.ts\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Joi } from 'express-validation';\n\nexport const registerValidation = Joi.object({\n    firstName: Joi.string().required(),\n    lastName: Joi.string().required(),\n    email: Joi.string().email().required(),\n    password: Joi.string().required(),\n    passwordConfirm: Joi.string().required(),\n})\n")),(0,s.kt)("p",null,"The validation can now be imported into the auth controller to return an error message if the validation fails:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/auth.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Request, Response } from 'express';\nimport { registerValidation } from '../validation/register.validation';\n\nexport const Register = (req: Request, res: Response) => {\n    const body = req.body;\n\n    const { error } = registerValidation.validate(body);\n\n    if (error) {\n        return res.status(400).send(error.details);\n    }\n\n    if (body.password !== body.passwordConfirm){\n        return res.status(400).send({\n            message: 'ERROR :: Passwords do not match!'\n        });\n    }\n")),(0,s.kt)("p",null,"Test the validation with missing data and a valid request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl --header "Content-Type: application/json" \\\n  --request POST \\\n  --data \'{"firstName":"its","lastName":"me","email":"me@email.com","password":"secret"}\' \\\n  http://localhost:8888/api/register\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'[{"message":"\\"passwordConfirm\\" is required","path":["passwordConfirm"],"type":"any.required","context":{"label":"passwordConfirm","key":"passwordConfirm"}}]\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl --header "Content-Type: application/json" \\\n  --request POST \\\n  --data \'{"firstName":"its","lastName":"me","email":"me@email.com","password":"secret","passwordConfirm":"secret"}\' \\\n  http://localhost:8888/api/register\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'{"firstName":"its","lastName":"me","email":"me@email.com","password":"secret","passwordConfirm":"secret"}\n')),(0,s.kt)("h2",{id:"database"},"Database"),(0,s.kt)("h3",{id:"sql-database"},"SQL Database"),(0,s.kt)("p",null,"Bring up an SQL database to handle your app data, e.g. with Docker-Compose:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"./src/docker/docker-compose.yml")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"version: '3'\n\nservices:\n\n  db:\n    image: mariadb\n    restart: always\n    ports:\n      - 3306:3306\n    environment:\n      MARIADB_ROOT_PASSWORD: secretpassword\n      MARIADB_DATABASE: react-app\n      MARIADB_USER: app-user\n      MARIADB_PASSWORD: secretpassword\n\n  adminer:\n    image: adminer\n    restart: always\n    ports:\n      - 8080:8080\n")),(0,s.kt)("p",null,"You can login on port ",(0,s.kt)("inlineCode",{parentName:"p"},"8080")," to verify that MariaDB is up and the app database was created:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(96324).Z,width:"915",height:"338"})),(0,s.kt)("h3",{id:"mysql-connector"},"MySQL Connector"),(0,s.kt)("p",null,"Now we need to connect the app to freshly created database:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install typeorm reflect-metadata @types/node mysql2 bcryptjs @types/bcryptjs\n")),(0,s.kt)("p",null,"To keep things simple we can move the entire DB logic into it's own file:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"./src/db-connector.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { DataSource } from \"typeorm\";\nconst dataSourceOptions = require('../dataSourceOptions.json')\n\nexport const dataSource = new DataSource(dataSourceOptions);\n\nexport const Manager = dataSource.manager\n// export const UserRepository = dataSource.getRepository(User)\n\ndataSource\n    .initialize()\n    .then(() => {\n        console.log('INFO :: Data Source has been initialized');\n    })\n    .catch((err) => {\n        console.error('ERROR :: Data Source initialization error', err);\n    })\n\nexport default dataSource;\n")),(0,s.kt)("p",null,"The database configuration is exported into a separate JSON file for convenience:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"./dataSourceOptions.json")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "mysql",\n    "host": "localhost",\n    "port": 3306,\n    "username": "app-user",\n    "password": "secretpassword",\n    "database": "react-app",\n    "entities": [\n        "src/entities/*.ts"\n    ],\n    "logging": false,\n    "synchronize": true\n}\n')),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("strong",{parentName:"p"},"NOTE")," that the configuration here has to match up with the configuration set inside the Docker-Compose file you used to start your instance of MariaDB!")),(0,s.kt)("p",null,"The connector can be imported into the index file before calling the Express app - to make sure that the DB connection is establish before the app starts:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"./src/index.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// Import DB config\nimport dataSource from "./db-connector";\n// Create connection with DB\ndataSource\n')),(0,s.kt)("p",null,'The connector now only connects us to our database. To have actually do something we have to add "entities" in the configured entity folder ',(0,s.kt)("inlineCode",{parentName:"p"},"src/entities/*.ts"),":"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"./src/entities/user.entity.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import { Column, PrimaryGeneratedColumn, Entity } from "typeorm";\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    firstName: string;\n\n    @Column()\n    lastName: string;\n\n    @Column({\n        unique: true\n    })\n    email: string;\n\n    @Column()\n    password: string;\n\n}\n')),(0,s.kt)("p",null,"This will make sure that the user table is generated as soon as the app is restarted:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(890).Z,width:"1190",height:"566"})),(0,s.kt)("h2",{id:"authentication"},"Authentication"),(0,s.kt)("h3",{id:"registering-users"},"Registering Users"),(0,s.kt)("p",null,"To be able to populate the User table with user logins we now have to add a function to the auth controller:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/auth.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// REGISTER USER\nexport const Register = async (req: Request, res: Response) => {\n    const body = req.body;\n\n    // check if all infos were send\n    const { error } = registerValidation.validate(body);\n    // break if something is missing\n    if (error) {\n        return res.status(400).send(error.details);\n    }\n    // verify that password is confirmed\n    if (body.password !== body.passwordConfirm){\n        return res.status(400).send({\n            message: 'ERROR :: Passwords do not match!'\n        });\n    }\n    // save password to database\n    const { password, ...user } = await repository.save({\n        firstName: body.firstName,\n        lastName: body.lastName,\n        email: body.email,\n        password: await bcryptjs.hash(body.password, 10)\n    })\n\n    res.send(user);\n};\n")),(0,s.kt)("p",null,"Here I am using bcryptjs to make sure that the password is not stored in plain text. The user registration can be tested using curl:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl --header "Content-Type: application/json" \\\n  --request POST \\\n  --data \'{"firstName":"Mike","lastName":"Polinowski","email":"me@email.com","password":"secret","passwordConfirm":"secret"}\' \\\n  http://localhost:8888/api/register\n')),(0,s.kt)("p",null,"Note that the password in the returned body is hashed and also received an ID - the first user registered in the User table:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'{"firstName":"Mike","lastName":"Polinowski","email":"me@email.com","password":"$2a$10$6LKB6iIhOjzK7TK3kv1qeOOYkds6mvh1JENfzJDFqtnY3wR999Ue2","id":1}\n')),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(74930).Z,width:"1184",height:"412"})),(0,s.kt)("h3",{id:"users-login"},"Users Login"),(0,s.kt)("p",null,"Create a login route that points to a function called Login in the auth controller:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"./src/routes.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Router } from 'express';\nimport { Register, Login } from './controller/auth.controller'\n\nexport const routes = (router: Router) => {\n    router.post('/api/register', Register)\n    router.post('/api/login', Login)\n}\n")),(0,s.kt)("p",null,"And create the login function:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"./src/controller/auth.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// LOGIN USER\nexport const Login = async (req: Request, res: Response) => {\n    // check if user exists in db\n    const user = await repository.findOneBy(\n            {\n                email: req.body.email\n            }\n        )\n    \n    // if does not exists break\n    if(!user){\n        return res.status(404).send({\n            message: 'ERROR :: User does not exists!'\n        })\n    }\n\n    // if exists but password is wrong break\n    if(!await bcryptjs.compare(req.body.password, user.password)) {\n        return res.status(404).send({\n            message: 'ERROR :: Invalid credentials!'\n        })\n    }\n\n    // don't return password after successful login\n    const { password, ...data } = user;\n    res.send(user);\n}\n")),(0,s.kt)("p",null,"Again, we can test the user login with curl:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl --header "Content-Type: application/json" \\\n  --request POST \\\n  --data \'{"email":"me@email.com","password":"secret"}\' \\\n  http://localhost:8888/api/login\n\n{"id":1,"firstName":"Mike","lastName":"Polinowski","email":"me@email.com"}\n')),(0,s.kt)("h3",{id:"json-web-tokens"},"JSON Web Tokens"),(0,s.kt)("p",null,"Return a JWT to keep users authenticated after a successful login:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install jsonwebtoken @types/jsonwebtoken cookie-parser @types/cookie-parser\n")),(0,s.kt)("p",null,"Instead of returning the user we now need to return a JWT in Login function:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"./src/controller/auth.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// return JWT to authenticated user\nconst payload = { id: user.id }\nconst token = sign(payload, 'secretkey')\n\n// don't return password after successful login\n// const { password, ...data } = user;\nres.send(token);\n")),(0,s.kt)("p",null,"Test that the login now returns the token:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl --header "Content-Type: application/json" \\\n  --request POST \\\n  --data \'{"email":"me@email.com","password":"secret"}\' \\\n  http://localhost:8888/api/login\n\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjg1ODkwNjIxfQ.W8D81og0GuWZ8Q8Nvp1XDpqK0XwDFXy0qYgjXxP8uno\n')),(0,s.kt)("p",null,"Write token to HTTP cookie instead of returning it directly:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// return JWT to authenticated user\nconst token = sign(\n    {\n        id: user.id\n    }, 'secretkey'\n)\n\nres.cookie('jwt', token, {\n    // keep cookie in node.js backend\n    httpOnly: true,\n    maxAge: 24*60*60*1000 //1day\n})\n\nres.send({\n    message: 'INFO :: Successfully logged in.'\n})\n")),(0,s.kt)("p",null,"Try the login again:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl --header "Content-Type: application/json" \\\n  --request POST \\\n  --data \'{"email":"me@email.com","password":"secret"}\' \\\n  http://localhost:8888/api/login\n\n{"message":"INFO :: Successfully logged in."}\n')),(0,s.kt)("h3",{id:"authenticate-users"},"Authenticate Users"),(0,s.kt)("p",null,"Start by creating a route for returning the authenticated user:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"./src/routes.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Router } from 'express';\nimport { Register, Login, AuthenticatedUser } from './controller/auth.controller'\n\nexport const routes = (router: Router) => {\n    // register new user\n    router.post('/api/register', Register)\n    // login known user\n    router.post('/api/login', Login)\n    // get authenticated user from jwt\n    router.get('/api/user', AuthenticatedUser)\n}\n")),(0,s.kt)("p",null,"Then create the referenced function for this route:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"./src/controller/auth.controller")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const AuthenticatedUser = async (req: Request, res: Response) => {\n    // get cookie from authenticated user\n    const jwt = req.cookies['jwt'];\n    // get user id from jwt\n    const payload: any = verify(jwt, secret)\n\n    if(!payload) {\n        return res.status(401).send({\n            message: 'ERROR :: User unauthenticated!'\n        })\n    }\n    // return user info  for user id\n    const {password, ...user} = await repository.findOneBy(payload.id)\n\n    res.send(user)\n}\n")),(0,s.kt)("p",null,"We can test the function in Postman by first logging in:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(16672).Z,width:"894",height:"561"})),(0,s.kt)("p",null,"And then calling the ",(0,s.kt)("inlineCode",{parentName:"p"},"/api/user")," route with the received web token:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(32434).Z,width:"888",height:"604"})),(0,s.kt)("p",null,"Our web token contained our user id that the backend could use to identify the authenticated user and return the user information."),(0,s.kt)("h3",{id:"deauthenticate-users"},"Deauthenticate Users"),(0,s.kt)("p",null,"Once logged in we need to provide a function that allows us to remove the web token and log out the user. Start by providing a route:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Router } from 'express';\nimport { Register, Login, AuthenticatedUser, Logout } from './controller/auth.controller'\n\nexport const routes = (router: Router) => {\n    // register new user\n    router.post('/api/register', Register)\n    // login known user\n    router.post('/api/login', Login)\n    // get authenticated user from jwt\n    router.get('/api/user', AuthenticatedUser)\n    // force expire jwt to log out\n    router.post('/api/logout', Logout)\n}\n")),(0,s.kt)("p",null,"To logout we need to expire the active JWT:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"./src/controller/auth.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const Logout = async (req: Request, res: Response) => {\n    res.cookie('jwt', '',  {maxAge: 0})\n\n    res.send({\n        message: 'INFO :: Successfully logged out.'\n    })\n}\n")),(0,s.kt)("p",null,"The function can be verified with Postman:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(70335).Z,width:"898",height:"554"})),(0,s.kt)("h3",{id:"dotenv"},"Dotenv"),(0,s.kt)("p",null,"Using dot environment variables to pass in global variables like the JWT ",(0,s.kt)("inlineCode",{parentName:"p"},"secretkey"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install dotenv @types/dotenv\n")),(0,s.kt)("p",null,"Collect all global variables in a dotenv file:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"./.env")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# Express webfrontend port\nWEB_PORT = 8888\n# JWT secret key \nSECRET_KEY = 'secretkey'\n# API url for CORS\nAPI_URL = 'http://localhost:3000'\n# Datasource options for TypeORM\nDS_HOST = 'localhost'\nDS_USER = 'app-user'\nDS_PASS = 'secretpassword'\nDS_DB = 'react-app'\nDS_ENTITIES = 'src/entities/*.ts'\n")),(0,s.kt)("p",null,"And require the configuration file ",(0,s.kt)("strong",{parentName:"p"},"ON TOP")," of your index file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"require('dotenv').config();\n")),(0,s.kt)("p",null,"Now you are able to use these variables in your entire app:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"./src/index.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const apiUrl = process.env.API_URL;\nconst expressPort = process.env.WEB_PORT || 8080;\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"./src/db-connector.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const dataSource = new DataSource({\n    type: 'mariadb',\n    host: process.env.DS_HOST,\n    port: 3306,\n    username: process.env.DS_USER,\n    password: process.env.DS_PASS,\n    database: process.env.DS_DB,\n    entities: [process.env.DS_ENTITIES],\n    logging: false,\n    synchronize: true\n  });\n")),(0,s.kt)("h3",{id:"verify-auth-status-middleware"},"Verify Auth Status Middleware"),(0,s.kt)("p",null,"Move the auth status check into middleware to simplify the ",(0,s.kt)("strong",{parentName:"p"},"AuthenticatedUser")," function that should only return the user details of authenticated users:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/middleware/auth.middleware.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Request, Response } from 'express';\nimport { verify } from 'jsonwebtoken';\n\nimport Manager from '../db-connector';\nimport { User } from '../entities/user.entity';\nconst secret = process.env.SECRET_KEY\n\nconst repository = Manager.getRepository(User);\n\nexport const CheckAuthState = async (req: Request, res: Response, next: Function) => {\n    \n        try {\n            // get cookie from authenticated user\n            const jwt = req.cookies['jwt'];\n            // get user id from jwt\n            const payload: any = verify(jwt, secret)\n\n            if(!payload) {\n                return res.status(401).send({\n                    message: 'ERROR :: User unauthenticated!'\n                })\n            }\n            // return user info  for user id\n            req['user'] = await repository.findOneBy(payload.id)\n\n            next();\n\n        } catch (e) {\n            return res.status(401).send({\n                message: 'ERROR :: User unauthenticated!'\n        })\n    }\n}\n")),(0,s.kt)("p",null,"The entire verification logic now moved into the middleware. By adding it to our user and logout route we can now directly request the user details inside the auth controller:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/routes.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Router } from 'express';\nimport { Register, Login, AuthenticatedUser, Logout } from './controller/auth.controller'\nimport { CheckAuthState } from './middleware/auth.middleware'\n\nexport const routes = (router: Router) => {\n    // register new user\n    router.post('/api/register', Register)\n    // login known user\n    router.post('/api/login', Login)\n    // get authenticated user from jwt\n    router.get('/api/user', CheckAuthState, AuthenticatedUser)\n    // force expire jwt to log out\n    router.post('/api/logout', CheckAuthState, Logout)\n}\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/auth.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// RETURN USER DATA BY JWT ID\nexport const AuthenticatedUser = async (req: Request, res: Response) => {\n    const {password, ...user} = req['user']\n    res.send(user);\n}\n")),(0,s.kt)("h3",{id:"update-user-info"},"Update User Info"),(0,s.kt)("p",null,"Add two more routes to update the user name and password:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/routes.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Router } from 'express';\nimport { Register, Login, AuthenticatedUser, Logout, UpdateUserInfo, UpdateUserPass } from './controller/auth.controller'\nimport { CheckAuthState } from './middleware/auth.middleware'\n\nexport const routes = (router: Router) => {\n    // register new user\n    router.post('/api/register', Register)\n    // login known user\n    router.post('/api/login', Login)\n    // get authenticated user from jwt\n    router.get('/api/user', CheckAuthState, AuthenticatedUser)\n    // force expire jwt to log out\n    router.post('/api/logout', CheckAuthState, Logout)\n    // update user info\n    router.put('/api/users/info', CheckAuthState, UpdateUserInfo)\n    // update user password\n    router.put('/api/users/pass', CheckAuthState, UpdateUserPass)\n}\n")),(0,s.kt)("p",null,"And add the corresponding controller functions:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/auth.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// UPDATE USER INFO\nexport const UpdateUserInfo = async (req: Request, res: Response) => {\n\n    const user = req['user'];\n\n    await repository.update(user.id, req.body)\n\n    const { password, ...data } = await repository.findOneBy(user.id)\n\n    res.send({data})\n}\n\n// UPDATE USER PASSWORD\nexport const UpdateUserPass = async (req: Request, res: Response) => {\n\n    const user = req['user'];\n\n    // verify that password is confirmed\n    if (req.body.password !== req.body.passwordConfirm){\n        return res.status(400).send({\n            message: 'ERROR :: Passwords do not match!'\n        });\n    }\n\n    await repository.update(user.id, {\n        password: await bcryptjs.hash(req.body.password, 10)\n    })\n\n    const { password, ...data } = await repository.findOneBy(user.id)\n\n    res.send({data})\n}\n")),(0,s.kt)("p",null,"Use the ",(0,s.kt)("inlineCode",{parentName:"p"},"/api/users/info")," route to update the user name and email:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(70294).Z,width:"894",height:"687"})),(0,s.kt)("p",null,"And ",(0,s.kt)("inlineCode",{parentName:"p"},"/api/users/pass")," to update the user password:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(94444).Z,width:"893",height:"689"})),(0,s.kt)("h3",{id:"user-administration"},"User Administration"),(0,s.kt)("p",null,"The admin user has to be able to administer other users. Start by creating routes that:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"fetch all registered users"),(0,s.kt)("li",{parentName:"ul"},"fetch user by ID"),(0,s.kt)("li",{parentName:"ul"},"create new users"),(0,s.kt)("li",{parentName:"ul"},"update user"),(0,s.kt)("li",{parentName:"ul"},"delete user")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/routes.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const routes = (router: Router) => {\n\n    // register new user\n    router.post('/api/register', Register)\n    // login known user\n    router.post('/api/login', Login)\n    // get authenticated user from jwt\n    router.get('/api/user', CheckAuthState, AuthenticatedUser)\n    // force expire jwt to log out\n    router.post('/api/logout', CheckAuthState, Logout)\n    // update user info\n    router.put('/api/users/info', CheckAuthState, UpdateUserInfo)\n    // update user password\n    router.put('/api/users/pass', CheckAuthState, UpdateUserPass)\n\n    // user administration - get all users\n    router.get('/api/users', CheckAuthState, GetUsers)\n    // user administration - get user by ID\n    router.get('/api/users/:id', CheckAuthState, GetUser)\n    // user administration - create new user\n    router.put('/api/users/:id', CheckAuthState, UpdateUser)\n    // user administration - create new user\n    router.post('/api/users', CheckAuthState, CreateUser)\n    // user administration - delete user\n    router.delete('/api/users/:id', CheckAuthState, DeleteUser)\n}\n")),(0,s.kt)("h4",{id:"get-all-users"},"Get all Users"),(0,s.kt)("p",null,"The administration functions are collected in the user controller. The GetUsers function selects the user table and returns everything:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/controller.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import { Request, Response } from "express";\n\n\nimport Manager from "../db-connector";\nimport { User } from \'../entities/user.entity\';\nconst repository = Manager.getRepository(User);\n\n\nexport const GetUsers = async (req: Request, res: Response) => {\n    const users = await repository.find()\n\n    res.send(\n        users.map(user => {\n            //remove password\n            const { password, ...data} = user\n            return data\n        })\n    )\n}\n')),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(77970).Z,width:"892",height:"700"})),(0,s.kt)("h4",{id:"get-user-by-id"},"Get User by ID"),(0,s.kt)("p",null,"To fetch the a single user we can add the user ID as request param:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/controller.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const GetUser = async (req: Request, res: Response) => {\n    const {password, ...user} = await repository.findOne({ where: { id: req.params.id } })\n    \n    res.send(user)\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(99058).Z,width:"886",height:"607"})),(0,s.kt)("h4",{id:"create-user"},"Create User"),(0,s.kt)("p",null,"I already created the POST route to create new users in the previous step. Now the function for it is still missing:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/controller.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const CreateUser = async (req: Request, res: Response) => {\n    const { role_id, ...body } = req.body;\n    const hashedPassword = await bcryptjs.hash('pass1234', 10);\n    const { password, ...user} = await repository.save({\n        ...body,\n        password: hashedPassword\n    })\n\n    res.status(201).send(user)\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(24348).Z,width:"906",height:"564"})),(0,s.kt)("h4",{id:"update-user"},"Update User"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/controller.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const UpdateUser = async (req: Request, res: Response) => {\n    const { role_id, ...body } = req.body;\n    const update = await repository.update(req.params.id, body)\n    \n    res.status(202).send(update)\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(54424).Z,width:"891",height:"602"})),(0,s.kt)("h4",{id:"delete-user"},"Delete User"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/controller.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const DeleteUser = async (req: Request, res: Response) => {\n    const deleteUser = await repository.delete(req.params.id)\n    \n    res.status(204).send(deleteUser)\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(55490).Z,width:"891",height:"547"})),(0,s.kt)("h3",{id:"user-role-model"},"User Role Model"),(0,s.kt)("p",null,"Create a new database table to define user roles:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/entities/role.entity.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import { BaseEntity, Column, Entity, PrimaryGeneratedColumn } from "typeorm";\n\n@Entity ()\nexport class Role extends BaseEntity {\n    @PrimaryGeneratedColumn()\n    id: any;\n\n    @Column()\n    name: string;\n\n}\n')),(0,s.kt)("p",null,"And link this role into the User table:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/entities/role.entity.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"@Entity ()\nexport class User extends BaseEntity {\n    @PrimaryGeneratedColumn()\n    id: any;\n\n    @Column()\n    firstName: string;\n\n    @Column()\n    lastName: string;\n\n    @Column({ unique: true })\n    email: string;\n\n    @Column()\n    password: string;\n\n    @ManyToOne(() => Role)\n    @JoinColumn({name: 'role_id'})\n    role: Role;\n\n}\n")),(0,s.kt)("p",null,"For testing we can manually add an ",(0,s.kt)("inlineCode",{parentName:"p"},"Admin")," role to the table:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(25467).Z,width:"962",height:"464"})),(0,s.kt)("p",null,"And assign this role to existing users in the ",(0,s.kt)("inlineCode",{parentName:"p"},"User")," table:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(50054).Z,width:"1227",height:"512"})),(0,s.kt)("p",null,"Add ",(0,s.kt)("inlineCode",{parentName:"p"},"role")," to the output of the ",(0,s.kt)("inlineCode",{parentName:"p"},"GetUsers")," function:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/user.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const GetUsers = async (req: Request, res: Response) => {\n    const users = await repository.find({\n        relations: ['role']\n    })\n\n    res.send(\n        users.map(user => {\n            const { password, ...data} = user\n            return data\n        })\n    )\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(53317).Z,width:"898",height:"604"})),(0,s.kt)("p",null,"As well as to the ",(0,s.kt)("inlineCode",{parentName:"p"},"CreateUser")," function:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/user.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const CreateUser = async (req: Request, res: Response) => {\n    const { role_id, ...body } = req.body;\n    const hashedPassword = await bcryptjs.hash('pass1234', 10);\n    const { password, ...user} = await repository.save({\n        ...body,\n        password: hashedPassword,\n        role: {\n            id: role_id\n        }\n    })\n\n    res.status(201).send(user)\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(63316).Z,width:"895",height:"691"})),(0,s.kt)("p",null,"And to the ",(0,s.kt)("inlineCode",{parentName:"p"},"GetUser")," function:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/user.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const GetUser = async (req: Request, res: Response) => {\n    const {password, ...user} = await repository.findOne({\n        where: { id: req.params.id }, relations: ['role']\n    })\n    \n    res.send(user)\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(64534).Z,width:"888",height:"554"})),(0,s.kt)("p",null,"And to the ",(0,s.kt)("inlineCode",{parentName:"p"},"UpdateUser")," function:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/user.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const UpdateUser = async (req: Request, res: Response) => {\n    const { role_id, ...body } = req.body;\n\n    await repository.update(req.params.id, {\n        ...body,\n        role: {\n            id: role_id\n        }\n    });\n\n    const {password, ...user} = await repository.findOne({\n            where: { id: req.params.id }, relations: ['role']\n        });\n    \n    res.status(202).send(user)\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(88422).Z,width:"896",height:"694"})),(0,s.kt)("h4",{id:"user-permissions"},"User Permissions"),(0,s.kt)("p",null,"Create a new database table to define user permissions:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/entities/permission.entity.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import { BaseEntity, Column, Entity, PrimaryGeneratedColumn } from "typeorm";\n\n@Entity ()\nexport class Permission extends BaseEntity {\n    @PrimaryGeneratedColumn()\n    id: any;\n\n    @Column()\n    name: string;\n\n}\n')),(0,s.kt)("p",null,"Permissions are not directly linked to a user but to it's role:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/entities/role.entity.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { BaseEntity, Column, Entity, JoinTable, ManyToMany, PrimaryGeneratedColumn } from \"typeorm\";\nimport { Permission } from \"./permission.entity\";\n\n@Entity ()\nexport class Role extends BaseEntity {\n    @PrimaryGeneratedColumn()\n    id: any;\n\n    @Column()\n    name: string;\n\n    @ManyToMany(() => Permission)\n    @JoinTable({\n        name: 'role_permissions',\n        joinColumn: {\n            name: 'role_id',\n            referencedColumnName: 'id'\n        },\n        inverseJoinColumn: {\n            name: 'permission_id',\n            referencedColumnName: 'id'\n        }\n    })\n    permissions: Permission[];\n\n}\n")),(0,s.kt)("p",null,"TypeORM will automatically create a new table ",(0,s.kt)("inlineCode",{parentName:"p"},"role_permissions")," for us:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(27806).Z,width:"1012",height:"609"})),(0,s.kt)("h4",{id:"pre-seeding-roles-and-permissions"},"Pre-Seeding Roles and Permissions"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Please check out the ",(0,s.kt)("a",{parentName:"p",href:"#update-role-seed"},"Update Role Seed")," below... the function following here is not working.")),(0,s.kt)("p",null,"We can add the permissions we want to be able to assign to user roles when the DB connection is established:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/db-connector.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"dataSource\n    .initialize()\n    .then( async () => {\n\n        // create role permissions\n        const permissionRepository = Manager.getRepository(Permission)\n\n        const perms = [\n            'view_users',\n            'edit_users',\n            'view_roles',\n            'edit_roles',\n            'view_products',\n            'edit_products',\n            'view_orders',\n            'edit_orders'\n        ]\n\n        let permissions = []\n\n        // insert permissions into Permission table\n        for (let i = 0; i< perms.length; i++){\n            permissions.push(\n                // use upsert instead of save\n                await permissionRepository.upsert(\n                    { name: perms[i] },\n                    // if name exists only update else insert\n                    ['name']\n                )\n            )\n        }\n        \n        console.log('INFO :: Data Source has been initialized');\n    })\n    .catch((err) => {\n        console.error('ERROR :: Data Source initialization error', err);\n    })\n")),(0,s.kt)("p",null,"After app reloaded the permissions are now added:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(37445).Z,width:"925",height:"598"})),(0,s.kt)("p",null,"In the same function we can now add the assignment of permissions to their respective roles:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/db-connector.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// assign permissions to roles\nconst roleRepository = Manager.getRepository(Role)\n// admin can do it all\n// insert or update\nawait roleRepository.upsert({ name: 'Admin', permissions }, ['name'])\n\n// editor can do all but to edit roles\ndelete permissions[3]\n// insert or update\nawait roleRepository.upsert({ name: 'Editor', permissions }, ['name'])\n    \n// viewer cannot edit anything\ndelete permissions[1]\ndelete permissions[5]\ndelete permissions[7]\n// insert or update\nawait roleRepository.upsert({ name: 'Viewer', permissions }, ['name'])\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(53377).Z,width:"1011",height:"466"})),(0,s.kt)("h4",{id:"permissions-controller"},"Permissions Controller"),(0,s.kt)("p",null,"Check permissions for active user:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/routes.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"router.get('/api/permissions', CheckAuthState, Permissions)\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/permission.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import { Request, Response } from "express";\nimport { Permission } from "../entities/permission.entity";\nimport Manager from "../db-connector";\n\nconst repository = Manager.getRepository(Permission);\n\nexport const Permissions = async (req: Request, res: Response) => {\n    res.send(await repository.find())\n}\n')),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(61660).Z,width:"898",height:"559"})),(0,s.kt)("h4",{id:"role-controller"},"Role Controller"),(0,s.kt)("p",null,"Get all available roles:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/routes.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"router.get('/api/roles', CheckAuthState, Roles)\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/roles.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import { Request, Response } from "express";\nimport { Roles } from "../entities/roles.entity";\nimport Manager from "../db-connector";\n\nconst repository = Manager.getRepository(Roles);\n\nexport const Roles = async (req: Request, res: Response) => {\n    res.send(await repository.find())\n}\n')),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(5788).Z,width:"893",height:"511"})),(0,s.kt)("h5",{id:"manually-adding-roles"},"Manually Adding Roles"),(0,s.kt)("p",null,"Create a new role:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/routes.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"router.post('/api/roles', CheckAuthState, CreateRole)\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/roles.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const CreateRole = async (req: Request, res: Response) => {\n    const { name, permissions } = req.body;\n    const role = await repository.save({\n        name,\n        permissions: permissions.map( id => {\n            return {\n                id: id\n            }\n        })\n    })\n\n    res.send(role)\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(56428).Z,width:"893",height:"521"})),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(27045).Z,width:"927",height:"486"})),(0,s.kt)("h5",{id:"get-permissions-for-a-role"},"Get Permissions for a Role"),(0,s.kt)("p",null,"Return all permissions for a specified role:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/routes.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"router.get('/api/roles/:id', CheckAuthState, CreateRole)\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/roles.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const GetRole = async (req: Request, res: Response) => {\n    res.send(await repository.findOne({\n        where: { id: req.params.id }, relations: ['permissions']\n    })\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(76579).Z,width:"885",height:"530"})),(0,s.kt)("h5",{id:"update-permissions-for-a-role"},"Update Permissions for a Role"),(0,s.kt)("p",null,"Add permissions for a specified role:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/routes.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"router.post('/api/roles/:id', CheckAuthState, CreateRole)\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/roles.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const UpdateRole = async (req: Request, res: Response) => {\n    const { name, permissions } = req.body;\n    const role = await repository.save({\n        id: parseInt(req.params.id),\n        name,\n        permissions: permissions.map( id => {\n            return {\n                id: id\n            }\n        })\n    })\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(86400).Z,width:"896",height:"513"})),(0,s.kt)("h5",{id:"manually-deleting-roles"},"Manually Deleting Roles"),(0,s.kt)("p",null,"Delete an existing role:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/routes.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"router.delete('/api/roles/:id', CheckAuthState, DeleteRole)\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/roles.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const DeleteRole = async (req: Request, res: Response) => {\n    const deleteRole = await repository.delete(req.params.id)\n\n    res.status(204).send(deleteRole)\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(81827).Z,width:"892",height:"486"})),(0,s.kt)("h2",{id:"products"},"Products"),(0,s.kt)("p",null,"Create a table for items to be displayed on the web frontend:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/entities/product.entity.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { BaseEntity, Column, Entity, Unique, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity ()\n@Unique('constraint_name', ['title'])\nexport class User extends BaseEntity {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({ unique: true })\n    title: string;\n\n    @Column()\n    description: string;\n\n    @Column()\n    image: string;\n\n    @Column()\n    price: number;\n}\n")),(0,s.kt)("h3",{id:"product-controller"},"Product Controller"),(0,s.kt)("p",null,"The Product routes and  the controller is basically identical to the User pendants:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/routes.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// product administration - get all products\nrouter.get('/api/products', CheckAuthState, GetProducts)\n// product administration - get product by ID\nrouter.get('/api/products/:id', CheckAuthState, GetProduct)\n// product administration - create new product\nrouter.put('/api/products/:id', CheckAuthState, UpdateProduct)\n// product administration - create new product\nrouter.post('/api/products', CheckAuthState, CreateProduct)\n// product administration - delete product\nrouter.delete('/api/products/:id', CheckAuthState, DeleteProduct)\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/product.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"\nexport const GetProducts = async (req: Request, res: Response) => {\n    const products = await repository.find()\n\n    res.send(products)\n}\n\n\nexport const CreateProduct = async (req: Request, res: Response) => {\n    const product = await repository.save(req.body)\n\n    res.status(201).send(product)\n}\n\n\nexport const GetProduct = async (req: Request, res: Response) => {\n    res.send(await repository.findOne({\n        where: { id: parseInt(req.params.id) }\n    })\n)}\n\nexport const UpdateProduct = async (req: Request, res: Response) => {\n    await repository.update(parseInt(req.params.id), req.body);\n    \n    res.status(202).send(await repository.findOne({\n        where: { id: parseInt(req.params.id) }\n    }))\n}\n\n\nexport const DeleteProduct = async (req: Request, res: Response) => {\n    const deleteProduct = await repository.delete(req.params.id)\n    \n    res.status(204).send(deleteProduct)\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(34028).Z,width:"893",height:"620"})),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(31854).Z,width:"895",height:"651"})),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(6365).Z,width:"892",height:"623"})),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(56849).Z,width:"886",height:"621"})),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(40979).Z,width:"896",height:"518"})),(0,s.kt)("h3",{id:"product-entity"},"Product Entity"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/entities/product.entity.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { BaseEntity, Column, Entity, Unique, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity ()\n@Unique('constraint_name', ['title'])\nexport class Product extends BaseEntity {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({ unique: true })\n    title: string;\n\n    @Column()\n    description: string;\n\n    @Column()\n    image: string;\n\n    @Column()\n    price: number;\n}\n")),(0,s.kt)("h4",{id:"pre-seeding-products"},"Pre-Seeding Products"),(0,s.kt)("p",null,"Use ",(0,s.kt)("inlineCode",{parentName:"p"},"faker")," to generate items:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @faker-js/faker\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/seeds/product.seed.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { faker } from '@faker-js/faker'\nimport { Product } from '../entities/product.entity'\nimport { Manager } from '../db-connector'\n\nexport const productSeed = async () => {\n\n    // create role permissions\n    const productRepository = Manager.getRepository(Product)\n    \n    // generate 30 fake items\n    for (let i = 0; i< 30; i++){\n        // use upsert instead of save\n        await productRepository.upsert(\n            {\n                title: faker.lorem.words(2),\n                description: faker.lorem.words(10),\n                image: faker.image.url({ width: 200, height: 200 }),\n                price: parseInt(faker.finance.amount({ min: 500, max: 1000, dec: 2 }))\n            },\n            // if name exists only update else insert\n            ['title']\n        )\n    }\n}\n")),(0,s.kt)("p",null,"And use the data source initialization to trigger the seed:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/db-connector.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"dataSource\n    .initialize()\n    .then( () => {\n        roleSeed()\n        productSeed()\n\n        console.log('INFO :: Data Source has been initialized');\n    })\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(18040).Z,width:"1320",height:"797"})),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(62802).Z,width:"897",height:"605"})),(0,s.kt)("h3",{id:"pagination"},"Pagination"),(0,s.kt)("p",null,"Edit the Product Controller to paginate on getProducts:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/product.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const GetProducts = async (req: Request, res: Response) => {\n    // pagination\n    // only retrieve 15 items per page\n    const take = 15\n    const page = parseInt(req.query.page as string || '1')\n    // find 'take' number of items starting from zero or (page-1)*take\n    const [data, total] = await repository.findAndCount({\n        take: take,\n        skip: ( page - 1 ) * take\n    })\n\n    res.send({\n        data: data,\n        // also return active page, last page and total number of items\n        meta: {\n            total,\n            page,\n            last_page: Math.ceil(total / take)\n        }\n    })\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(85709).Z,width:"888",height:"693"})),(0,s.kt)("p",null,"And the same edit for the user table:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/user.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const GetUsers = async (req: Request, res: Response) => {\n    // pagination\n    // only retrieve 15 items per page\n    const take = 15\n    const page = parseInt(req.query.page as string || '1')\n    // find 'take' number of items starting from zero or (page-1)*take\n    const [data, total] = await repository.findAndCount({\n        take: take,\n        skip: ( page - 1 ) * take,\n        relations: ['role']\n    })\n\n    res.send({\n        data: data.map(user => {\n            const { password, ...data} = user\n            return data\n        }),\n        // also return active page, last page and total number of items\n        meta: {\n            total,\n            page,\n            last_page: Math.ceil(total / take)\n        }\n    })\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(38161).Z,width:"896",height:"692"})),(0,s.kt)("h3",{id:"file-uploads"},"File Uploads"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install multer @types/multer\n")),(0,s.kt)("p",null,"Add multer middleware to upload route:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/role.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// image upload\nrouter.post('/api/upload', CheckAuthState, FileUpload)\n")),(0,s.kt)("p",null,"Add a controller for the file upload:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/upload.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Request, Response } from \"express\";\nimport multer from 'multer';\nimport { extname } from 'path';\n\n\nexport const FileUpload = async (req: Request, res: Response)  => {\n    const storage = multer.diskStorage({\n        destination: './uploads',\n        filename(_, file, cb){\n            const randomName = Math.random().toString(20).substring(2, 12)\n            return cb(null, `${randomName}${extname(file.originalname)}`)\n        }\n    })\n\n    const upload = multer({ storage }).single('image')\n\n    upload(req, res, (err) => {\n        \n        if(err){\n            return res.send(400).send(err)\n        }\n\n        res.send({\n            url: `http://localhost:8080/api/uploads/${req.file.filename}`\n        })\n    })\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(11993).Z,width:"895",height:"479"})),(0,s.kt)("h4",{id:"static-routes"},"Static Routes"),(0,s.kt)("p",null,"To be able to access the uploaded files we need to add static routes:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/role.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// image upload\nrouter.post('/api/upload', CheckAuthState, FileUpload)\n// make upload route public\nrouter.use('/api/uploads', express.static('./uploads'))\n")),(0,s.kt)("h2",{id:"orders"},"Orders"),(0,s.kt)("p",null,"Create tables for incoming order:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/entities/order.entity.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { BaseEntity, Column, Entity, Unique, PrimaryGeneratedColumn, CreateDateColumn, OneToMany } from \"typeorm\";\nimport { OrderItem } from \"./order-item.entity\";\n\n@Entity ()\n@Unique('constraint_name', ['email'])\nexport class Order extends BaseEntity {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    first_name: string;\n\n    @Column()\n    last_name: string;\n\n    @Column()\n    email: string;\n\n    @CreateDateColumn()\n    created_at: string;\n\n    @OneToMany( () => OrderItem, OrderItem => OrderItem.order)\n    order_items: OrderItem[];\n\n}\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/entities/order-item.entity.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { BaseEntity, Column, Entity, Unique, PrimaryGeneratedColumn, ManyToOne, JoinColumn } from \"typeorm\";\nimport { Order } from \"./order.entity\";\n\n@Entity ()\n@Unique('constraint_name', ['product_title'])\nexport class OrderItem extends BaseEntity {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    product_title: string;\n\n    @Column()\n    price: number;\n\n    @Column()\n    quantity: number;\n\n    @ManyToOne( () => Order)\n    @JoinColumn({ name: 'order_id' })\n    order: Order\n}\n")),(0,s.kt)("h3",{id:"pre-seeding-orders"},"Pre-Seeding Orders"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/seeds/order.seed.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { faker } from '@faker-js/faker';\nimport { Manager } from '../db-connector'\nimport { Order } from '../entities/order.entity';\nimport { randomInt } from 'crypto';\nimport { OrderItem } from '../entities/order-item.entity';\n\nexport const orderSeed = async () => {\n    \n    const orderRepository = Manager.getRepository(Order)\n    const orderItemsRepository = Manager.getRepository(OrderItem)\n    \n    // generate 30 fake orders\n    for (let i = 0; i< 30; i++){\n        const order = await orderRepository.save(\n            {\n                first_name: faker.person.firstName(),\n                last_name: faker.person.lastName(),\n                email: faker.internet.email(),\n                created_at: faker.date.recent({ days: 10, refDate: '2023-06-10T00:00:00.000Z' })\n            }\n        );\n        console.log(order)\n        // add number of items in order\n        for(let j = 0; j < randomInt(1,5); j++) {\n            await orderItemsRepository.save(\n                {\n                    product_title: faker.lorem.words(2),\n                    price: parseInt(faker.finance.amount({ min: 500, max: 1000, dec: 2 })),\n                    quantity: parseInt(faker.finance.amount({ min: 1, max: 5, dec: 0 })),\n                    order: order\n                }\n            )\n        }\n    }\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(19412).Z,width:"1015",height:"795"})),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(21177).Z,width:"899",height:"792"})),(0,s.kt)("h3",{id:"order-controller"},"Order Controller"),(0,s.kt)("p",null,"Add a route:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/routes.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// get all orders\nrouter.get('/api/orders', CheckAuthState, GetOrders)\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/order.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Request, Response } from \"express\";\n\nimport Manager from \"../db-connector\";\nimport { Order } from \"../entities/order.entity\";\nconst repository = Manager.getRepository(Order);\n\n\nexport const GetOrders = async (req: Request, res: Response) => {\n    // pagination\n    // only retrieve 15 items per page\n    const take = 15\n    const page = parseInt(req.query.page as string || '1')\n    // find 'take' number of items starting from zero or (page-1)*take\n    const [data, total] = await repository.findAndCount({\n        take: take,\n        skip: ( page - 1 ) * take,\n        relations: ['order_items']\n    })\n\n    res.send({\n        data: data.map((Order) => ({\n            id: Order.id,\n            name: Order.name,\n            email: Order.email,\n            total: Order.total,\n            created_at: Order.created_at,\n            order_items: Order.order_items\n        })),\n        // also return active page, last page and total number of items\n        meta: {\n            total,\n            page,\n            last_page: Math.ceil(total / take)\n        }\n    })\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(46042).Z,width:"898",height:"686"})),(0,s.kt)("h4",{id:"exporting-order-to-csv"},"Exporting Order to CSV"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install json2csv @types/json2csv @types/json2csv\n")),(0,s.kt)("p",null,"Add a route:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/routes.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// export orders\nrouter.post('/api/orders/export/csv', CheckAuthState, ExportCsv)\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/order.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const ExportCsv = async (req: Request, res: Response) => {\n    const parser = new Parser({\n        fields: ['ID', 'Name', 'Email', 'Product', 'Price', 'Quantity']\n    })\n\n    const orders = await repository.find({relations: ['order_items']})\n\n    const json = []\n\n    orders.forEach((order:Order) => {\n        json.push({\n            ID: order.id,\n            Name: order.name,\n            Email: order.email,\n            Product: '',\n            Price: '',\n            Quantity: ''\n        })\n\n        order.order_items.forEach((item: OrderItem) => {\n            json.push({\n                ID: '',\n                Name: '',\n                Email: '',\n                Product: item.product_title,\n                Price: item.price,\n                Quantity: item.quantity\n            })\n        })\n    })\n\n    const csv = parser.parse(json)\n\n    res.header('Content-Type', 'text/csv')\n    res.attachment('orders.csv')\n    res.send(csv)\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(71322).Z,width:"895",height:"692"})),(0,s.kt)("h4",{id:"charting-order-data"},"Charting Order Data"),(0,s.kt)("p",null,"Add a route:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/routes.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// order chart data\nrouter.get('/api/orders/chart', CheckAuthState, ChartData)\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/controller/order.controller.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const ChartData = async (req: Request, res: Response) => {\n    const result = await Manager.query(`\n        SELECT DATE_FORMAT(o.created_at, '%Y-%m-%d') as date, SUM(oi.price * oi.quantity) as sum\n        FROM \\`order\\` o\n            JOIN order_item oi\n        on o.id = oi.order_id\n        GROUP BY date\n    `)\n\n    res.send(result)\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(54114).Z,width:"895",height:"691"})),(0,s.kt)("h2",{id:"route-permissions"},"Route Permissions"),(0,s.kt)("h3",{id:"update-role-seed"},"Update Role Seed"),(0,s.kt)("p",null,"I noticed that the ",(0,s.kt)("inlineCode",{parentName:"p"},"upsert")," pre-seed created here -> ",(0,s.kt)("a",{parentName:"p",href:"#pre-seeding-roles-and-permissions"},"Pre-Seeding Roles and Permissions")," did not create the role permissions. Which meant that the roles were being created but none of the roles had any permissions assigned to them. Unfortunately, I am not sure where the issue is. So I replace the ",(0,s.kt)("inlineCode",{parentName:"p"},"upsert")," with a ",(0,s.kt)("inlineCode",{parentName:"p"},"save")," - and now everything works as expected. With the caveat that you have to make sure that this function is only ever executed once!"),(0,s.kt)("p",null,"To make sure I created a new file for this function:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/seeds/role.preseed.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Request, Response } from 'express';\nimport { Permission } from '../entities/permission.entity'\nimport { Role } from '../entities/role.entity'\nimport { Manager } from '../db-connector'\n\n\nexport const roleSeed = async (req: Request, res: Response) => {\n\n    // create role permissions\n    const permissionRepository = Manager.getRepository(Permission)\n\n    const perms = [\n        'view_users',\n        'edit_users',\n        'view_roles',\n        'edit_roles',\n        'view_products',\n        'edit_products',\n        'view_orders',\n        'edit_orders'\n    ]\n\n    let permissions = []\n    \n    // insert permissions into Permission table\n    for (let i = 0; i< perms.length; i++){\n        permissions.push(\n            await permissionRepository.save(\n                { name: perms[i] }\n            )\n        )\n    }\n\n    // assign permissions to roles\n    const roleRepository = Manager.getRepository(Role)\n    // admin gets all the permissions\n    await roleRepository.save({\n        name: 'Admin',\n        permissions: permissions\n    })\n\n    // editor is not allowed to edit roles\n    delete permissions[3];\n\n    await roleRepository.save({\n        name: 'Editor',\n        permissions: permissions\n    })\n\n    // viewer cannot edit at all\n    delete permissions[1];\n    delete permissions[5];\n    delete permissions[7];\n\n    await roleRepository.save({\n        name: 'Viewer',\n        permissions: permissions\n    })\n\n    // // debug\n    // console.log(permissions[0].identifiers)\n    // console.log(permissions.map(id => {\n    //     return {\n    //         id: id.raw[0].id\n    //     }}))\n    \n    res.status(201).send({\n        message: 'default user roles created'\n    })\n}\n")),(0,s.kt)("p",null,"And assigned it to a route so that it can be triggered manually once by visiting the route:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/routes.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// pre-seed roles\nrouter.put('/api/preseed/roles', roleSeed)\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(19296).Z,width:"895",height:"471"})),(0,s.kt)("p",null,"Now the insert works perfectly and all roles have their permissions attached... if you know why ",(0,s.kt)("inlineCode",{parentName:"p"},"upsert")," don't work the same way (and how I could have fixed that) please let me know..."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(61070).Z,width:"873",height:"799"})),(0,s.kt)("h3",{id:"permission-middleware"},"Permission Middleware"),(0,s.kt)("p",null,"With the role permissions fixed now back to actually implementing the restrictions for every route. Add ",(0,s.kt)("inlineCode",{parentName:"p"},"CheckPermissions")," function to every route and provide the class ",(0,s.kt)("inlineCode",{parentName:"p"},"users"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"orders"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"products"),", etc. - e.g.:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"router.get('/api/users', CheckAuthState, CheckPermissions('users'), GetUsers)\n")),(0,s.kt)("p",null,"Create the ",(0,s.kt)("inlineCode",{parentName:"p"},"CheckPermissions")," function to check if it is a GET route (which only requires ",(0,s.kt)("inlineCode",{parentName:"p"},"view")," rights) and verify that the users has the corresponding permission. Else ",(0,s.kt)("inlineCode",{parentName:"p"},"edit")," rights are required:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"src/middleware/permission.middleware.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Request, Response } from 'express';\nimport { User } from '../entities/user.entity';\n\nexport const CheckPermissions = (access: string) => {\n    return (req: Request, res: Response, next: Function) => {\n        const user: User = req['user'];\n        \n        // debug\n        // console.log(user[0].role.permissions)\n\n        // get permissions array\n        const permissions = user[0].role.permissions\n\n        // loop though array of objects and get permClasses\n        const permClasses = []\n\n        for (let i = 0; i < permissions.length; i++) {\n            permClasses.push(permissions[i].name)\n          }\n\n        // debug\n        // console.log(permClasses)\n\n        // if route is GET require `view_` or `edit_` perm else you need `edit_`\n        if  (req.method === 'GET') {\n            if(!permClasses.includes('view_' + access) || !permClasses.includes('edit_' + access)) {\n                return res.status(401).send({\n                    message: 'ERROR :: Unauthorized!'\n                })\n        } else {\n            if(!permClasses.includes('edit_' + access)) {\n                return res.status(401).send({\n                    message: 'ERROR :: Unauthorized!'\n                })\n            }\n        }}\n\n        next()\n    }\n}\n")),(0,s.kt)("p",null,"Create a user that has the rights to view a given route and one that has not - verify that the latter is blocked from access:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Node.js 2023",src:n(98465).Z,width:"902",height:"466"})))}u.isMDXComponent=!0},96324:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_01-7a92758efc74eac0e643f1af094d9d66.png"},890:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_02-7579ffc8c50c6149661a4b609c488bd5.png"},74930:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_03-bfdce0e8e02828c90b1615835918b9c7.png"},16672:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_04-0cf473d017775ee2d864e5efd36a712f.png"},32434:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_05-31b698ea2ccd28cc159a12ddfc174e1b.png"},70335:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_06-86f94341683f7ec15c27efec2686bcc7.png"},70294:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_07-8a61d67e410b0f3236f8297549e2025f.png"},94444:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_08-96a85fdcad601e2ebe03df6dbe1c3aad.png"},77970:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_09-cbff2f1b7564467f8594fc3f7fffb977.png"},24348:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_10-1a91e089d38af33cfa5a8f43d56315e4.png"},99058:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_11-3b079824ce755ce678025f3897f4f867.png"},54424:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_12-e94e45dbba62c1124258682649ad7fbd.png"},55490:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_13-d90abfd4b23ba0dc78d8dedc597b70c8.png"},25467:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_14-0fbba619789fae869f526c140663e4b0.png"},50054:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_15-f197b5b7e69e0482c205850aa03fa633.png"},53317:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_16-0e3cda486a992b44c94c87e3a1d2eb7c.png"},63316:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_17-44ba166242f39e5a40d79830a0db2368.png"},64534:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_18-5a364106dbdaa237b2c8a16ae118c202.png"},88422:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_19-b62d3c3de7d083be62f8ef20b55ad156.png"},27806:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_20-282245cce16e9c18ea1bf26882da1064.png"},37445:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_21-685a58ea9b6fd3f04c611f15be8d39d4.png"},53377:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_22-5186f73512b95c0bc2540ba1a7298219.png"},61660:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_23-7aef14598e37a57c5e126f5cbc7db5a0.png"},5788:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_24-56c9fe19f2ab1e8996ad3115ef1483a2.png"},56428:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_25-9c262dd4c0b5ec97abc26c31b60a59e0.png"},27045:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_26-820af782c3397255d26841d8319315a2.png"},76579:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_27-79e19b3d770843a37ed095b0a8e59384.png"},86400:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_28-06ac4180586df1c5018af119b2e7fc9f.png"},81827:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_29-bb6809a1629198da414ef9048d4d102b.png"},34028:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_30-c5fe3f410ed067f4e1fe7840ad6608a0.png"},31854:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_31-ab1b1d8af868a9e47b6a9dd5d4ad2623.png"},6365:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_32-ae751f6df766e76c652ce445c692be05.png"},56849:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_33-17436ffff2ad2008a6e580db12fcd9cb.png"},40979:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_34-5b9e47509ecafed98edc6f9ef30efe37.png"},18040:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_35-b9f87058347dbf9a5723d6ad395e4db2.png"},62802:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_36-baeab54b0104073280dccde7c6fc16c7.png"},85709:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_37-8055aeda7e102fb628b51349cc9eb341.png"},38161:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_38-8120c30e79cc78f13de3e04c59106eaf.png"},11993:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_39-09c38bcda00e87228460f1a4ccbc9681.png"},19412:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_40-08f54f6099c0cff38622688e114d1be9.png"},21177:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_41-155302793c6a02e31060669196d31ad0.png"},46042:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_42-9a20f8caab5303ea402edb255c39b160.png"},71322:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_43-7e7ecba4370da53e811f9a90a53708f3.png"},54114:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_44-91b99c3bb0dce37713fb487be40c9d0b.png"},19296:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_45-6537e89cbb36d55ab2df8160c1131240.png"},61070:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_46-e90bc5c4137fcdd3e854deba313f37dc.png"},98465:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Nodejs_Express_2023_47-e921e7ca13a752a649868736e650f083.png"},19885:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-c3aedc7eed015cc5372c21f9c394693d.jpg"}}]);