"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[66147],{511468:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var i=n(785893),o=n(603905);const a={slug:"continuous-integration",title:"What is meant by CI/CD?",authors:["mpolinowski"],tags:["DevOps"]},s=void 0,r={permalink:"/blog/continuous-integration",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-06-01-continuous_integration_deployment/index.md",source:"@site/blog/2019-06-01-continuous_integration_deployment/index.md",title:"What is meant by CI/CD?",description:"What is meant by CI/CD?",date:"2019-06-01T00:00:00.000Z",formattedDate:"June 1, 2019",tags:[{label:"DevOps",permalink:"/blog/tags/dev-ops"}],readingTime:4.76,hasTruncateMarker:!0,authors:[{name:"Mike Polinowski",title:"CTO INSTAR Deutschland GmbH",url:"https://github.com/mpolinowski",imageURL:"https://github.com/mpolinowski.png",key:"mpolinowski"}],frontMatter:{slug:"continuous-integration",title:"What is meant by CI/CD?",authors:["mpolinowski"],tags:["DevOps"]},unlisted:!1,prevItem:{title:"GitLab CI/CD",permalink:"/blog/typical_ci_process"},nextItem:{title:"Application Development and Server Operation",permalink:"/blog/devops-introduction"}},l={authorsImageUrls:[void 0]},c=[{value:"What is meant by CI/CD?",id:"what-is-meant-by-cicd",level:2},{value:"What is the difference between CI and CD (and the other CD)?",id:"what-is-the-difference-between-ci-and-cd-and-the-other-cd",level:3},{value:"CI/CD Pipeline",id:"cicd-pipeline",level:2},{value:"Continuous Integration",id:"continuous-integration",level:2},{value:"Technical Details",id:"technical-details",level:2},{value:"Continuous Delivery",id:"continuous-delivery",level:3},{value:"Continuous Deployment",id:"continuous-deployment",level:3}];function d(e){const t={a:"a",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",ul:"ul",...(0,o.ah)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"what-is-meant-by-cicd",children:"What is meant by CI/CD?"}),"\n",(0,i.jsx)(t.p,{children:'This is a method of regularly delivering apps to customers and automating all phases of application development. The main concepts of CI/CD are Continuous Integration, Continuous Delivery and Continuous Deployment. CI/CD solves the problems that integrating new code can cause for DevOps teams (also known as "integration hell").'}),"\n",(0,i.jsx)(t.p,{children:'In particular, CI/CD ensures continuous automation and monitoring throughout the entire app lifecycle, from the integration and testing to the deployment and implementation phase. These interrelated practices are often referred to as the "CI/CD pipeline" and are supported by agile collaboration between DevOps teams.'}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"#what-is-meant-by-cicd",children:"What is meant by CI/CD?"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#what-is-the-difference-between-ci-and-cd-and-the-other-cd",children:"What is the difference between CI and CD (and the other CD)?"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#cicd-pipeline",children:"CI/CD Pipeline"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#continuous-integration",children:"Continuous Integration"})}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"#technical-details",children:"Technical Details"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#continuous-delivery",children:"Continuous Delivery"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#continuous-deployment",children:"Continuous Deployment"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"what-is-the-difference-between-ci-and-cd-and-the-other-cd",children:"What is the difference between CI and CD (and the other CD)?"}),"\n",(0,i.jsx)(t.p,{children:'The abbreviation CI/CD has different meanings. "CI" means Continuous Integration, i.e. the automation process for developers. In a successful CI, new code changes for apps are regularly developed, checked and merged in a common repository. This is intended to prevent the conflict that too many branches of an app can cause if they are developed simultaneously.'}),"\n",(0,i.jsx)(t.p,{children:'"CD" means Continuous Delivery or Continuous Deployment. These are related concepts that are sometimes used synonymously. Although both concepts deal with the automation of further phases of the pipeline, the terms are sometimes used differently to illustrate the extent of automation.'}),"\n",(0,i.jsx)(t.p,{children:"Continuous delivery typically means that a developer's app changes are automatically tested for bugs and uploaded to a repository (such as GitHub or a container registry) from where they can be deployed by the operations team in a live production environment. This process is the answer to transparency and communication problems between dev and business teams. It is designed to ensure that new code can be implemented with minimal effort."}),"\n",(0,i.jsx)(t.p,{children:'Continuous Deployment (the other "CD") can refer to the automatic release of developer changes from the repository to the production phase, where they can be used directly by the customer. This process is intended to counteract the overload of operations teams during manual processes that slow down application deployment. Continuous Development extends the benefits of continuous delivery by automating the next phase of the pipeline.'}),"\n",(0,i.jsx)(t.h2,{id:"cicd-pipeline",children:"CI/CD Pipeline"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"CI/CD Pipeline",src:n(787772).Z+"",width:"826",height:"218"})}),"\n",(0,i.jsx)(t.p,{children:"Sometimes CI/CD refers only to the interrelated practices of Continuous Integration and Continuous Delivery, but sometimes it also refers to all three concepts of Continuous Integration, Continuous Delivery and Continuous Deployment. The whole thing is further complicated by the fact that Continuous Delivery sometimes also refers to the processes of Continuous Deployment."}),"\n",(0,i.jsx)(t.p,{children:"Ultimately, however, these details do not get us anywhere. Just think of CI/CD as a process that is often visualized as a pipeline and that involves a high degree of continuous automation and monitoring in application development. Depending on the case, the interpretation of the term depends on the degree of automation of the CI/CD pipeline. Many companies initially work with CI and later continue the process with automated deployment and implementation, e.g. for cloudnative apps."}),"\n",(0,i.jsx)(t.h2,{id:"continuous-integration",children:"Continuous Integration"}),"\n",(0,i.jsx)(t.p,{children:'In modern application development, several developers work on different features of the same app. The simultaneous merging of all source code branches in one day (also known as "Merge Day") can be a huge amount of work and time. The reason for this is that application changes made by developers working separately can conflict with each other if they are performed simultaneously. This problem can be aggravated if each developer defines his own local Integrated Development Environment (IDE) instead of creating a common cloud-based IDE as a team.'}),"\n",(0,i.jsx)(t.p,{children:'Continuous Integration (CI) allows developers to merge their code changes into a common "branch" or "trunk" of the application much more frequently, sometimes even daily. Once a developer\'s changes are merged, they are validated in automated app builds and different levels of automation testing (typically unit and integration testing). This ensures that functionality has not been compromised. All classes and functions up to the various modules of the app must be tested. If the automated test detects conflicts between current and new code, CI can help resolve them more quickly and frequently.'}),"\n",(0,i.jsx)(t.h2,{id:"technical-details",children:"Technical Details"}),"\n",(0,i.jsx)(t.h3,{id:"continuous-delivery",children:"Continuous Delivery"}),"\n",(0,i.jsx)(t.p,{children:"After automating builds and unit and integration testing for the CI, continuous delivery also automatically releases the validated code to a repository. Therefore, to ensure an efficient continuous delivery process, the CI must already be integrated into your development pipeline. The goal of continuous delivery is a code base that can be made available in a production environment at any time."}),"\n",(0,i.jsx)(t.p,{children:"With continuous delivery, every phase - from merging code changes to delivering production-ready builds - includes automated testing and code releases. At the end of this process, the operations team can quickly and easily deploy an app into production."}),"\n",(0,i.jsx)(t.h3,{id:"continuous-deployment",children:"Continuous Deployment"}),"\n",(0,i.jsx)(t.p,{children:"The final phase of the CI/CD pipeline is Continuous Deployment. As an extension of Continuous Delivery, in which production-ready builds are automatically released to a code repository, Continuous Deployment also automates the release of an app into the production phase. Because the production phase in the pipeline is not preceded by a manual gate, automated testing must always be well thought through in continuous deployment."}),"\n",(0,i.jsx)(t.p,{children:"In practice, continuous deployment means that a developer's app changes can go live within minutes of their creation (provided they pass the automated test). This makes continuous integration of user feedback much easier. All these interrelated CI/CD practices make an application implementation less risky because changes are released in parts rather than all at once. However, the up-front investment is considerable, since automatic tests must be written for the various test and release phases in the CI/CD pipeline."})]})}function u(e={}){const{wrapper:t}={...(0,o.ah)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},603905:(e,t,n)=>{n.d(t,{ah:()=>c});var i=n(667294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),h=c(n),p=o,m=h["".concat(l,".").concat(p)]||h[p]||d[p]||a;return n?i.createElement(m,s(s({ref:t},u),{},{components:n})):i.createElement(m,s({ref:t},u))}));u.displayName="MDXCreateElement"},787772:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/ci-cd-pipeline-9c85177895b9fbefdad1e4135d64445c.png"}}]);