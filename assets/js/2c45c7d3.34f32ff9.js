"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[60642],{257629:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>o});var t=r(474848),s=r(28453);const i={sidebar_position:8010,slug:"2022-12-27",title:"Go Data Structures",authors:"mpolinowski",tags:["Go"],description:"Available data representations in the Go programming language"},l="Go Data Structures",a={id:"Development/Go/2022-12-27-go-data-structures/index",title:"Go Data Structures",description:"Available data representations in the Go programming language",source:"@site/docs/Development/Go/2022-12-27-go-data-structures/index.md",sourceDirName:"Development/Go/2022-12-27-go-data-structures",slug:"/Development/Go/2022-12-27-go-data-structures/2022-12-27",permalink:"/docs/Development/Go/2022-12-27-go-data-structures/2022-12-27",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Go/2022-12-27-go-data-structures/index.md",tags:[{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:8010,frontMatter:{sidebar_position:8010,slug:"2022-12-27",title:"Go Data Structures",authors:"mpolinowski",tags:["Go"],description:"Available data representations in the Go programming language"},sidebar:"tutorialSidebar",previous:{title:"Go",permalink:"/docs/category/go"},next:{title:"Go Bubbles",permalink:"/docs/Development/Go/2022-12-27-go-bubbles/2022-12-27"}},u={},o=[{value:"Arrays",id:"arrays",level:2},{value:"Slices",id:"slices",level:2},{value:"Sets",id:"sets",level:2},{value:"Queues",id:"queues",level:2},{value:"Priority Queues",id:"priority-queues",level:2},{value:"Stacks",id:"stacks",level:2},{value:"Linked Lists",id:"linked-lists",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"go-data-structures",children:"Go Data Structures"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Shenzhen, China",src:r(558771).A+"",width:"1500",height:"546"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#go-data-structures",children:"Go Data Structures"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#arrays",children:"Arrays"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#slices",children:"Slices"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#sets",children:"Sets"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#queues",children:"Queues"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#priority-queues",children:"Priority Queues"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#stacks",children:"Stacks"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#linked-lists",children:"Linked Lists"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/mpolinowski/go-data-structures",children:"Github"})}),"\n",(0,t.jsx)(n.h2,{id:"arrays",children:"Arrays"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"fmt"\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println("Arrays as Data Structures")\r\n\r\n\tmyArray := [8]int{1, 2, 3, 4, 5, 6, 7, 8}\r\n\r\n\tfmt.Println("Array: ", myArray)\r\n\r\n\tfmt.Println("First Element: ", myArray[0])\r\n\r\n\tfmt.Println("Last Element: ", myArray[len(myArray)-1])\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Arrays as Data Structures\r\nArray:  [1 2 3 4 5 6 7 8]\r\nFirst Element:  1\r\nLast Element:  8\n"})}),"\n",(0,t.jsx)(n.h2,{id:"slices",children:"Slices"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"fmt"\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println("Slices as Data Structures")\r\n\r\n\t// Slices don\'t have a pre-defined length\r\n\tmySlice := []int{1, 2, 3, 4, 5, 6, 7, 8}\r\n\r\n\tfmt.Println("Slice: ", mySlice)\r\n\r\n\tfmt.Println("First Element: ", mySlice[0])\r\n\r\n\tfmt.Println("Last Element: ", mySlice[len(mySlice)-1])\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Slices as Data Structures\r\nSlice:  [1 2 3 4 5 6 7 8]\r\nFirst Element:  1\r\nLast Element:  8\n"})}),"\n",(0,t.jsx)(n.h2,{id:"sets",children:"Sets"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"errors"\r\n\t"fmt"\r\n)\r\n\r\ntype Set struct {\r\n\tElements map[string]struct{}\r\n}\r\n\r\n// create new set\r\nfunc NewSet() *Set {\r\n\tvar set Set\r\n\tset.Elements = make(map[string]struct{})\r\n\treturn &set\r\n}\r\n\r\n// add elements to set\r\n// sets don\'t have an order - we don\'t need to append\r\n// every element in a set is unique - already existing\r\n// elements will not be duplicated (no checks necessary)\r\nfunc (s *Set) Add(elem string) {\r\n\ts.Elements[elem] = struct{}{}\r\n}\r\n\r\n// remove element from set if exists\r\nfunc (s *Set) Delete(elem string) error {\r\n\t// check if element is present\r\n\tif _, exists := s.Elements[elem]; !exists {\r\n\t\treturn errors.New("Element not present!")\r\n\t}\r\n\t// if present -delete\r\n\tdelete(s.Elements, elem)\r\n\treturn nil\r\n}\r\n\r\n// check if set contains element\r\nfunc (s *Set) Contains(elem string) bool {\r\n\t_, exists := s.Elements[elem]\r\n\treturn exists\r\n}\r\n\r\n// list all elements from set\r\nfunc (s *Set) List() {\r\n\tfor key, _ := range s.Elements {\r\n\t\tfmt.Println(key)\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Println("Sets as Data Structures")\r\n\r\n\t// instantiate / populate set\r\n\tmySet := NewSet()\r\n\tmySet.Add("Eddard Stark")\r\n\tmySet.Add("Jaime Lannister")\r\n\tmySet.Add("Daenerys Targaryen")\r\n\tmySet.Add("Arya Stark")\r\n\tmySet.Add("Sandor Clegane")\r\n\tmySet.Add("Tyrion Lannister")\r\n\r\n\t// delete element\r\n\tmySet.Delete("Eddard Stark")\r\n\r\n\t// find element\r\n\tfmt.Println(mySet.Contains("Jon Snow"))\r\n\tfmt.Println(mySet.Contains("Arya Stark"))\r\n\r\n\t// list all elements\r\n\tmySet.List()\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Sets as Data Structures\r\nfalse\r\ntrue\r\nArya Stark\r\nSandor Clegane\r\nTyrion Lannister\r\nJaime Lannister\r\nDaenerys Targaryen\n"})}),"\n",(0,t.jsx)(n.h2,{id:"queues",children:"Queues"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"errors"\r\n\t"fmt"\r\n)\r\n\r\ntype Queue struct {\r\n\tElements []int\r\n}\r\n\r\n// show length of queue\r\nfunc (q *Queue) Length() int {\r\n\treturn len(q.Elements)\r\n}\r\n\r\n// return true when queue length is zero\r\nfunc (q *Queue) IsEmpty() bool {\r\n\treturn q.Length() == 0\r\n}\r\n\r\n// add element to end of queue\r\nfunc (q *Queue) Enqueue(elem int) {\r\n\tq.Elements = append(q.Elements, elem)\r\n}\r\n\r\n// check first element in que without removing it\r\nfunc (q *Queue) Peek() (int, error) {\r\n\t// test queue not empty\r\n\tif q.IsEmpty() {\r\n\t\treturn 0, errors.New("Empty Queue")\r\n\t}\r\n\treturn q.Elements[0], nil\r\n}\r\n\r\n// remove first element from queue\r\nfunc (q *Queue) Dequeue() (int, error) {\r\n\t// test queue not empty\r\n\tif q.IsEmpty() {\r\n\t\treturn 0, errors.New("Empty Queue")\r\n\t}\r\n\t// drop first element from slice\r\n\tvar firstElement int\r\n\tfirstElement, q.Elements = q.Elements[0], q.Elements[1:]\r\n\treturn firstElement, nil\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Println("Queues as Data Structures")\r\n\r\n\t// instantiate queue and add element\r\n\tvar elem int\r\n\tqueue := Queue{}\r\n\tfmt.Println(queue)\r\n\tqueue.Enqueue(1)\r\n\tqueue.Enqueue(2)\r\n\tqueue.Enqueue(3)\r\n\tfmt.Println(queue)\r\n\r\n\t// drop first item\r\n\telem, _ = queue.Dequeue()\r\n\tfmt.Println(elem)\r\n\tfmt.Println(queue)\r\n\r\n\t// check first item without removing it\r\n\telem, _ = queue.Peek()\r\n\tfmt.Println(elem)\r\n\tfmt.Println(queue)\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Queues as Data Structures\r\n{[]}\r\n{[1 2 3]}\r\n1\r\n{[2 3]}\r\n2\r\n{[2 3]}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"priority-queues",children:"Priority Queues"}),"\n",(0,t.jsx)(n.p,{children:"Priority queues are an extension on regular queues as they have two instead of one channel - one for high and one for low priority elements:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"errors"\r\n\t"fmt"\r\n)\r\n\r\ntype PriorityQueue struct {\r\n\tHigh []int\r\n\tLow  []int\r\n}\r\n\r\n// show length of complete queue\r\nfunc (q *PriorityQueue) Length() int {\r\n\treturn len(q.High) + len(q.Low)\r\n}\r\n\r\n// return true when queue length is zero\r\nfunc (q *PriorityQueue) IsEmpty() bool {\r\n\treturn q.Length() == 0\r\n}\r\n\r\n// add element to end of queue\r\n// differentiate between high/low priority\r\nfunc (q *PriorityQueue) Enqueue(elem int, priority bool) {\r\n\tif priority {\r\n\t\tq.High = append(q.High, elem)\r\n\t} else {\r\n\t\tq.Low = append(q.Low, elem)\r\n\t}\r\n}\r\n\r\n// check first element in que without removing it\r\n// but prefer priority queue\r\nfunc (q *PriorityQueue) Peek() (int, error) {\r\n\t// test queue not empty\r\n\tif len(q.High) != 0 {\r\n\t\treturn q.High[0], nil\r\n\t}\r\n\tif len(q.Low) != 0 {\r\n\t\treturn q.Low[0], nil\r\n\t}\r\n\t// return 0 if both queues are empty\r\n\treturn 0, errors.New("Empty Queues")\r\n}\r\n\r\n// remove first element from queue\r\n// but prefer priority queue\r\nfunc (q *PriorityQueue) Dequeue() (int, error) {\r\n\t// test if priority queue not empty\r\n\t// if true remove first element\r\n\tif len(q.High) != 0 {\r\n\t\tvar firstElement int\r\n\t\tfirstElement, q.High = q.High[0], q.High[1:]\r\n\t\treturn firstElement, nil\r\n\t}\r\n\t// test if regular queue not empty\r\n\t// if true remove first element\r\n\tif len(q.Low) != 0 {\r\n\t\tvar firstElement int\r\n\t\tfirstElement, q.Low = q.Low[0], q.Low[1:]\r\n\t\treturn firstElement, nil\r\n\t}\r\n\t// return 0 if both queues are empty\r\n\treturn 0, errors.New("Empty Queues")\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Println("Priority Queues as Data Structures")\r\n\r\n\t// instantiate queue and add element\r\n\tvar elem int\r\n\tqueue := PriorityQueue{}\r\n\tfmt.Println(queue)\r\n\tqueue.Enqueue(1, true)\r\n\tqueue.Enqueue(2, true)\r\n\tqueue.Enqueue(3, false)\r\n\tqueue.Enqueue(4, false)\r\n\tfmt.Println(queue)\r\n\r\n\t// drop first item\r\n\telem, _ = queue.Dequeue()\r\n\tfmt.Println(elem)\r\n\tfmt.Println(queue)\r\n\r\n\t// check first item without removing it\r\n\telem, _ = queue.Peek()\r\n\tfmt.Println(elem)\r\n\tfmt.Println(queue)\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"All elements from the high priority queue will no be handled first before the low priority queue is started:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Priority Queues as Data Structures\r\n{[] []}\r\n{[1 2] [3 4]}\r\n1\r\n{[2] [3 4]}\r\n2\r\n{[2] [3 4]}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"stacks",children:"Stacks"}),"\n",(0,t.jsxs)(n.p,{children:["Stacks are almost identical to queues but elements here are removed by ",(0,t.jsx)(n.code,{children:"last-in"}),"/",(0,t.jsx)(n.code,{children:"first-out"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"errors"\r\n\t"fmt"\r\n)\r\n\r\ntype Stack struct {\r\n\tElements []int\r\n}\r\n\r\n// check stack size\r\nfunc (s *Stack) Length() int {\r\n\treturn len(s.Elements)\r\n}\r\n\r\n// stack is empty?\r\nfunc (s *Stack) IsEmpty() bool {\r\n\treturn s.Length() == 0\r\n}\r\n\r\n// add an element to top of the stack\r\nfunc (s *Stack) Push(elem int) {\r\n\ts.Elements = append(s.Elements, elem)\r\n}\r\n\r\n// remove top element from stack\r\nfunc (s *Stack) Pop() (int, error) {\r\n\t// check if stack is empty\r\n\tif s.IsEmpty() {\r\n\t\treturn 0, errors.New("Stack is Empty")\r\n\t} else {\r\n\t\tvar lastElement int\r\n\t\tlastElementIndex := len(s.Elements) - 1\r\n\t\tlastElement, s.Elements = s.Elements[lastElementIndex], s.Elements[:lastElementIndex]\r\n\t\treturn lastElement, nil\r\n\t}\r\n}\r\n\r\n// check top element without removing\r\nfunc (s *Stack) Peek() (int, error) {\r\n\t// check if stack is empty\r\n\tif s.IsEmpty() {\r\n\t\treturn 0, errors.New("Stack is Empty")\r\n\t} else {\r\n\t\treturn s.Elements[len(s.Elements)-1], nil\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Println("Stacks as Data Structures")\r\n\r\n\tstack := Stack{}\r\n\tstack.Push(1)\r\n\tstack.Push(2)\r\n\tstack.Push(3)\r\n\r\n\telem1, _ := stack.Pop()\r\n\tfmt.Println(elem1)\r\n\telem2, _ := stack.Pop()\r\n\tfmt.Println(elem2)\r\n\r\n\tpeek3, _ := stack.Peek()\r\n\tfmt.Println(peek3)\r\n\r\n\telem3, _ := stack.Pop()\r\n\tfmt.Println(elem3)\r\n\r\n\tfmt.Println(stack.IsEmpty())\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Stacks as Data Structures\r\n3\r\n2\r\n1\r\n1\r\ntrue\n"})}),"\n",(0,t.jsx)(n.h2,{id:"linked-lists",children:"Linked Lists"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"fmt"\r\n)\r\n\r\ntype LinkedList struct {\r\n\tHead *Node\r\n\tSize int\r\n}\r\n\r\n// nodes are linked elements in list\r\ntype Node struct {\r\n\tValue string\r\n\tNext  *Node\r\n}\r\n\r\n// add new node to head of linked list\r\nfunc (l *LinkedList) Insert(elem string) {\r\n\tnode := Node{\r\n\t\tValue: elem,\r\n\t\tNext:  l.Head,\r\n\t}\r\n\tl.Head = &node\r\n\tl.Size++\r\n}\r\n\r\n// remove first element\r\nfunc (l *LinkedList) DeleteFirst() {\r\n\tl.Head = l.Head.Next\r\n\tl.Size--\r\n}\r\n\r\n// iterate through list and print\r\nfunc (l *LinkedList) List() {\r\n\tcurrent := l.Head\r\n\tfor current != nil {\r\n\t\tfmt.Printf("%+v\\n", current)\r\n\t\tcurrent = current.Next\r\n\t}\r\n}\r\n\r\n// find element in list\r\nfunc (l *LinkedList) Search(elem string) *Node {\r\n\tcurrent := l.Head\r\n\tfor current != nil {\r\n\t\tif current.Value == elem {\r\n\t\t\treturn current\r\n\t\t}\r\n\t\tcurrent = current.Next\r\n\t}\r\n\treturn nil\r\n}\r\n\r\n// delete element\r\nfunc (l *LinkedList) Delete(elem string) {\r\n\tprevious := l.Head\r\n\tcurrent := l.Head\r\n\t// check if element exists\r\n\tfor current != nil {\r\n\t\t// link previous to next to remove current\r\n\t\tif current.Value == elem {\r\n\t\t\tprevious.Next = current.Next\r\n\t\t\tl.Size--\r\n\t\t}\r\n\t\tprevious = current\r\n\t\tcurrent = current.Next\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Println("Linked Lists as Data Structures")\r\n\tvar ll LinkedList\r\n\r\n\tll.Insert("Camina Drummer")\r\n\tll.Insert("Joe Miller")\r\n\tll.Insert("Amos Burton")\r\n\tll.Insert("Chrisjen Avasarala")\r\n\r\n\tll.List()\r\n\tfmt.Println("-----------------------------")\r\n\r\n\tll.DeleteFirst()\r\n\tll.List()\r\n\tfmt.Println("-----------------------------")\r\n\r\n\tif element := ll.Search("Joe Miller"); element != nil {\r\n\t\tfmt.Printf("%+v\\n", element)\r\n\t}\r\n\tfmt.Println("-----------------------------")\r\n\r\n\tll.Delete("Joe Miller")\r\n\tll.List()\r\n\tfmt.Println(ll.Size)\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Linked Lists as Data Structures\r\n&{Value:Chrisjen Avasarala Next:0xc000010060}\r\n&{Value:Amos Burton Next:0xc000010048}\r\n&{Value:Joe Miller Next:0xc000010030}\r\n&{Value:Camina Drummer Next:<nil>}\r\n-----------------------------\r\n&{Value:Amos Burton Next:0xc000010048}\r\n&{Value:Joe Miller Next:0xc000010030}\r\n&{Value:Camina Drummer Next:<nil>}\r\n-----------------------------\r\n&{Value:Joe Miller Next:0xc000010030}\r\n-----------------------------\r\n&{Value:Amos Burton Next:0xc000010030}\r\n&{Value:Camina Drummer Next:<nil>}\r\n2\n"})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},558771:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-0795219c47cded4f1a1480a5f18e4c60.jpg"},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var t=r(296540);const s={},i=t.createContext(s);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);