"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[67858],{851239:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var r=t(785893),i=t(603905);const a={sidebar_position:5888,slug:"2023-12-21",title:"Building a Native Elasticsearch Client in React",authors:"mpolinowski",tags:["Javascript","React","Rust","Elasticsearch"],description:"Use Tauri to build a native application using Vite.js and Tanstack React Query"},s=void 0,c={id:"Development/Javascript/2023-12-21-react-query-tauri-elasticsearch/index",title:"Building a Native Elasticsearch Client in React",description:"Use Tauri to build a native application using Vite.js and Tanstack React Query",source:"@site/docs/Development/Javascript/2023-12-21-react-query-tauri-elasticsearch/index.md",sourceDirName:"Development/Javascript/2023-12-21-react-query-tauri-elasticsearch",slug:"/Development/Javascript/2023-12-21-react-query-tauri-elasticsearch/2023-12-21",permalink:"/docs/Development/Javascript/2023-12-21-react-query-tauri-elasticsearch/2023-12-21",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Javascript/2023-12-21-react-query-tauri-elasticsearch/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"},{label:"React",permalink:"/docs/tags/react"},{label:"Rust",permalink:"/docs/tags/rust"},{label:"Elasticsearch",permalink:"/docs/tags/elasticsearch"}],version:"current",sidebarPosition:5888,frontMatter:{sidebar_position:5888,slug:"2023-12-21",title:"Building a Native Elasticsearch Client in React",authors:"mpolinowski",tags:["Javascript","React","Rust","Elasticsearch"],description:"Use Tauri to build a native application using Vite.js and Tanstack React Query"},sidebar:"tutorialSidebar",previous:{title:"Building a Native IP Camera Client in React",permalink:"/docs/Development/Javascript/2023-12-24-react-query-tauri-iot-ctrl/2023-12-21"},next:{title:"Tanstack React Query AsyncState Management",permalink:"/docs/Development/Javascript/2023-12-20-react-query-typescript/2023-12-20"}},l={},o=[{value:"Scaffolding",id:"scaffolding",level:2},{value:"Create the Vite Frontend",id:"create-the-vite-frontend",level:3},{value:"Create the Rust Project",id:"create-the-rust-project",level:3},{value:"React Query",id:"react-query",level:2},{value:"Building the Elasticsearch Index",id:"building-the-elasticsearch-index",level:3},{value:"Hardcoded Elasticsearch Query",id:"hardcoded-elasticsearch-query",level:3},{value:"Elasticsearch Query Interface",id:"elasticsearch-query-interface",level:3},{value:"ShadCN &amp; Tailwind",id:"shadcn--tailwind",level:2},{value:"Tauri Bundler",id:"tauri-bundler",level:2},{value:"Linux Bundle",id:"linux-bundle",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"TST, Hongkong",src:t(763457).Z+"",width:"2359",height:"864"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/Development/Javascript/2023-12-24-react-query-tauri-iot-ctrl/2023-12-21",children:"Related: Building a Native IP Camera Client in React"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/mpolinowski/rusty-react-query",children:"Github Repository: React-Query Elasticsearch Client"})}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#scaffolding",children:"Scaffolding"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#create-the-vite-frontend",children:"Create the Vite Frontend"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#create-the-rust-project",children:"Create the Rust Project"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#react-query",children:"React Query"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#building-the-elasticsearch-index",children:"Building the Elasticsearch Index"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#hardcoded-elasticsearch-query",children:"Hardcoded Elasticsearch Query"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#elasticsearch-query-interface",children:"Elasticsearch Query Interface"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#shadcn--tailwind",children:"ShadCN & Tailwind"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#tauri-bundler",children:"Tauri Bundler"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#linux-bundle",children:"Linux Bundle"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.a,{href:"https://tauri.app/v1/guides/getting-started/setup/vite",children:"Tauri app"})," using the frontend build tool Vite."]}),"\n",(0,r.jsx)(n.h2,{id:"scaffolding",children:"Scaffolding"}),"\n",(0,r.jsx)(n.h3,{id:"create-the-vite-frontend",children:"Create the Vite Frontend"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm create vite@latest rusty-react-query\n\u2714 Select a framework: \u203a React\n\u2714 Select a variant: \u203a TypeScript + SWC\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd rusty-react-query\nnpm install\nnpm install @tanstack/react-query uuid vite-tsconfig-paths\nnpm install --save-dev @types/uuid @types/node\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"baseURL"})," to be able to work with absolute imports relative to the defined base:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"./tsconfig.json"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "baseUrl": "./src",\n    ...\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"./vite.config.js"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { defineConfig } from 'vite'\nimport tsconfigPaths from 'vite-tsconfig-paths'\nimport react from '@vitejs/plugin-react-swc'\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    tsconfigPaths()\n  ],\n})\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"./src/views/App.tsx"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import HelloWorld from 'components/HelloWorld'\n\nimport 'styles/App.css'\n\nexport default function App() {\n  \n  return (\n    <>\n          <HelloWorld greeting='Hello from React Typescript' />\n    </>\n  )\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"./src/components/HelloWorld.tsx"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import React from 'react'\n\nimport { iHelloWorld } from 'types/interfaces'\n\nexport default function HelloWorld({ greeting }: iHelloWorld): React.JSX.Element {\n    return (\n        <h1>\n            { greeting }\n        </h1>\n    )\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"./src/types/interfaces.ts"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export interface iHelloWorld {\n    greeting: string\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Tanstack React Query Tauri App",src:t(674413).Z+"",width:"787",height:"614"})}),"\n",(0,r.jsx)(n.h3,{id:"create-the-rust-project",children:"Create the Rust Project"}),"\n",(0,r.jsxs)(n.p,{children:["Now customize ",(0,r.jsx)(n.code,{children:"vite.config.ts"})," file to get the best compatibility with Tauri:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"./vite.config.js"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { defineConfig } from 'vite'\nimport tsconfigPaths from 'vite-tsconfig-paths'\nimport react from '@vitejs/plugin-react-swc'\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    tsconfigPaths()\n  ],\n  // prevent vite from obscuring rust errors\n  clearScreen: false,\n  // Tauri expects a fixed port, fail if that port is not available\n  server: {\n    strictPort: true,\n  },\n  // to access the Tauri environment variables set by the CLI with information about the current target\n  envPrefix: ['VITE_', 'TAURI_PLATFORM', 'TAURI_ARCH', 'TAURI_FAMILY', 'TAURI_PLATFORM_VERSION', 'TAURI_PLATFORM_TYPE', 'TAURI_DEBUG'],\n  build: {\n    // Tauri uses Chromium on Windows and WebKit on macOS and Linux\n    target: process.env.TAURI_PLATFORM == 'windows' ? 'chrome105' : 'safari13',\n    // don't minify for debug builds\n    minify: !process.env.TAURI_DEBUG ? 'esbuild' : false,\n    // produce sourcemaps for debug builds\n    sourcemap: !!process.env.TAURI_DEBUG,\n  }\n})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Add the Tauri CLI to your project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @tauri-apps/cli\n"})}),"\n",(0,r.jsx)(n.p,{children:"And add it to your npm scripts:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"./package.json"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"scripts": {\n    "dev": "vite",\n    "build": "tsc && vite build",\n    "rust": "tauri",\n    "preview": "vite preview"\n  },\n'})}),"\n",(0,r.jsx)(n.p,{children:"To scaffold a minimal Rust project that is pre-configured to use Tauri, open a terminal and run the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'npm run rust init\n\n\u2714 What is your app name? \xb7 rusty-react-query\n\u2714 What should the window title be? \u203a Rusty React Query\n\u2714 Where are your web assets (HTML/CSS/JS) located, relative to the "<current dir>/src-tauri/tauri.conf.json" file that will be created? \xb7 ../dist\n\u2714 What is the url of your dev server? \u203a http://localhost:5173\n\u2714 What is your frontend dev command? \xb7 npm run dev\n\u2714 What is your frontend build command? \u203a npm run build\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now you can run the following command in your terminal to start a development build of your app:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run rust dev\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Tanstack React Query Tauri App",src:t(228984).Z+"",width:"930",height:"758"})}),"\n",(0,r.jsx)(n.h2,{id:"react-query",children:"React Query"}),"\n",(0,r.jsx)(n.h3,{id:"building-the-elasticsearch-index",children:"Building the Elasticsearch Index"}),"\n",(0,r.jsx)(n.p,{children:"I am using the following Elasticsearch mapping. Simply edit it according to your API and copy it into Kibana to create the index:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'PUT /cgi_interface_v0\n{\n  "settings": {\n    "analysis": {\n      "analyzer": {\n        "custom_analyzer_en": {\n          "type": "custom",\n          "char_filter": [\n            "symbol",\n            "html_strip"\n          ],\n          "tokenizer": "punctuation",\n          "filter": [\n            "lowercase",\n            "word_delimiter",\n            "english_stop",\n            "english_stemmer"\n          ]\n        },\n        "custom_analyzer_ger": {\n          "type": "custom",\n          "char_filter": [\n            "symbol",\n            "html_strip"\n          ],\n          "tokenizer": "punctuation",\n          "filter": [\n            "lowercase",\n            "word_delimiter",\n            "german_stop",\n            "german_stemmer"\n          ]\n        }\n      },\n      "filter": {\n        "english_stop": {\n          "type": "stop",\n          "stopwords": "_english_ "\n        },\n        "english_stemmer": {\n          "type": "stemmer",\n          "language": "english"\n        },\n        "german_stop": {\n          "type": "stop",\n          "stopwords": "_german_ "\n        },\n        "german_stemmer": {\n          "type": "stemmer",\n          "language": "german"\n        }\n      },\n      "tokenizer": {\n        "punctuation": {\n          "type": "pattern",\n          "pattern": "[.,!?&=_:;\']"\n        }\n      },\n      "char_filter": {\n        "symbol": {\n          "type": "mapping",\n          "mappings": [\n              "& => and",\n              ":) => happy",\n              ":( => unhappy",\n              "+ => plus"\n            ]\n        }\n      }\n    }\n  },\n  "mappings": {\n    "properties": {\n      "title": {\n        "type": "text",\n        "analyzer": "custom_analyzer_en",\n        "index": "true"\n      },\n      "cgi": {\n        "type": "text",\n        "analyzer": "custom_analyzer_en",\n        "index": "true"\n      },\n      "permissions": {\n        "properties": {\n          "get": {\n            "index": "true",\n            "type": "keyword"\n          },\n          "set": {\n            "index": "true",\n            "type": "keyword"\n          }\n        }\n      },\n      "series": {\n        "type": "text",\n        "index": "true",\n        "fields": {\n          "raw": {\n            "type": "keyword"\n          }\n        }\n      },\n      "type": {\n        "type": "text",\n        "index": "true",\n        "fields": {\n          "raw": {\n            "type": "keyword"\n          }\n        }\n      },\n      "date_created": {\n        "type": "date" \n      },\n      "date_modified": {\n        "type": "date" \n      },\n      "description.en": {\n        "type": "text",\n        "analyzer": "custom_analyzer_en",\n        "index": "true"\n      },\n      "description.de": {\n        "type": "text",\n        "analyzer": "custom_analyzer_ger",\n        "index": "true"\n      },\n      "abstract.en": {\n        "type": "text",\n        "analyzer": "custom_analyzer_en",\n        "index": "true"\n      },\n      "abstract.de": {\n        "type": "text",\n        "analyzer": "custom_analyzer_ger",\n        "index": "true"\n      },\n      "chapter.en": {\n        "type": "text",\n        "index": "true",\n        "fields": {\n          "raw": {\n            "type": "keyword"\n          }\n        }\n      },\n      "chapter.de": {\n        "type": "text",\n        "index": "true",\n        "fields": {\n          "raw": {\n            "type": "keyword"\n          }\n        }\n      },\n      "link.en": {\n        "type": "text",\n        "index": "false"\n      },\n      "link.de": {\n        "type": "text",\n        "index": "false"\n      },\n      "tags": {\n        "type": "text",\n        "index": "true",\n        "fields": {\n          "raw": {\n            "type": "keyword"\n          }\n        }\n      },\n      "image": {\n        "type": "text",\n        "index": "false"\n      },\n      "imagesquare": {\n        "type": "text",\n        "index": "false"\n      }\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"With the index in place you can now add entries like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'PUT /cgi_interface_v0/_doc/1440_getnetattr\n{\n    "title": "netattr",\n    "series": ["1440p"],\n    "type": ["wifi", "lan", "poe", "pt", "ptz"],\n    "cgi" : "/param.cgi?cmd=getnetattr",\n    "date_created":"2023-09-28",\n    "date_modified": "2023-09-28",\n\t"permissions": {\n\t    "get" : ["setSystem", "onvifAll", "internal"],\n\t\t"set" : ["setSystem", "onvifAll", "internal"]\n    },\n\t"abstract": {\n\t    "en" : "Camera Network Configuration.",\n\t\t"de" : "Konfiguration des Kameranetzwerkeinstellungen."\n    },\n\t"chapter": {\n\t    "en" : "Network IP Configuration",\n\t\t"de" : "Netzwerk IP Konfiguration"\n    },\n\t"link": {\n\t    "en" : "/en/1440p_Series_CGI_List/Network_Menu/IP_Configuration/",\n\t\t"de" : "/de/1440p_Serie_CGI_Befehle/Netzwerk_Menu/IP_Konfiguration/"\n    },\n    "tags": ["dhcpflag", "ip", "netmask", "gateway", "dnsstat", "fdnsip", "sdnsip", "macaddress", "networktype", "wifi"],\n    "image": "/en/images/Search/AU_SearchThumb_CGICommands_1440p.webp",\n    "imagesquare": "/en/images/Search/TOC_Icons/Wiki_Tiles_Advanced_CGIs-1440p_white.webp",\n\t"description": {\n\t    "en" : "Camera Network Configuration.",\n\t\t"de" : "Konfiguration des Kameranetzwerkeinstellungen."\n    },\n    "parameters": [\n        {\n            "param": "dhcpflag",\n            "val": "[0,1]",\n            "description": {\n                "en": "on: (DHCP enabled), off: (DHCP disabled).",\n                "de": "ein: (DHCP aktiviert), aus: (DHCP deaktiviert)."\n            },\n            "cgi": "/param.cgi?cmd=setnetattr&dhcpflag=1",\n            "mqtt": "network/config/dhcp"\n        },\n        {\n            "param": "ip",\n            "val": "[192.168.178.21]",\n            "description": {\n                "en": "Current LAN IPv4 Address.",\n                "de": "Aktuelle LAN IPv4 Adresse."\n            },\n            "cgi": "/param.cgi?cmd=setnetattr&ip=192.168.178.21",\n            "mqtt": "network/config/dhcp"\n        },\n        {\n            "param": "netmask",\n            "val": "[255.255.255.0]",\n            "description": {\n                "en": "LAN Subnet Mask.",\n                "de": "LAN-Subnetzmaske."\n            },\n            "cgi": "/param.cgi?cmd=setnetattr&netmask=255.255.255.0",\n            "mqtt": "network/config/netmask"\n        },\n        {\n            "param": "gateway",\n            "val": "[192.168.178.1]",\n            "description": {\n                "en": "LAN Gateway.",\n                "de": "LAN Gateway."\n            },\n            "cgi": "/param.cgi?cmd=setnetattr&gateway=192.168.178.1",\n            "mqtt": "network/config/gateway"\n        },\n        {\n            "param": "dnsstat",\n            "val": "[0,1]",\n            "description": {\n                "en": "DNS Status: 0 (manually), 1 (from DHCP Server).",\n                "de": "DNS-Status: 0 (manuell), 1 (vom DHCP-Server)."\n            },\n            "cgi": "/param.cgi?cmd=setnetattr&dnsstat=1",\n            "mqtt": "network/config/dnsstat"\n        },\n        {\n            "param": "fdnsip",\n            "val": "[1,2]",\n            "description": {\n                "en": "Primary DNS.",\n                "de": "Prim\xe4rer DNS Server."\n            },\n            "cgi": "/param.cgi?cmd=setnetattr&fdnsip=1",\n            "mqtt": "network/config/fdnsip"\n        },\n        {\n            "param": "sdnsip",\n            "val": "[1,2]",\n            "description": {\n                "en": "Secondary DNS.",\n                "de": "Sekund\xe4rer DNS Server."\n            },\n            "cgi": "/param.cgi?cmd=setnetattr&sdnsip=1",\n            "mqtt": "network/config/sdnsip"\n        },\n        {\n            "param": "macaddress",\n            "val": "[EA:6D:C8:9C:DF:A7]",\n            "description": {\n                "en": "LAN MAC Address.",\n                "de": "LAN MAC Adresse."\n            },\n            "cgi": "-",\n            "mqtt": "network/config/macaddress"\n        },\n        {\n            "param": "wifi",\n            "val": "[0, 1]",\n            "description": {\n                "en": "Enable / Disable the WiFi module.",\n                "de": "Aktivieren/Deaktivieren Sie das WiFi-Modul."\n            },\n            "cgi": "/param.cgi?cmd=setnetattr&wifi=1",\n            "mqtt": "network/config/wifi"\n        },\n        {\n            "param": "networktype",\n            "val": "[LAN, WLAN]",\n            "description": {\n                "en": "LAN or WiFi - Indicates Type of current connection.",\n                "de": "LAN oder WiFi - Zeigt den Typ der aktuellen Verbindung an."\n            },\n            "cgi": "-",\n            "mqtt": "network/config/macaddress"\n        }\n    ]\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"})," that the index is versioned ",(0,r.jsx)(n.code,{children:"cgi_interface_v0"}),". You can assign an alias to the active version with:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"PUT /cgi_interface_v0/_alias/cgi_interface\n"})}),"\n",(0,r.jsx)(n.p,{children:"And transfer it to future versions to keep your Elasticsearch API immutable:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'POST _aliases\n{\n  "actions": [\n    {\n      "remove": {\n        "index": "cgi_interface_v0",\n        "alias": "cgi_interface"\n      }\n    },\n    {\n      "add": {\n        "index": "cgi_interface_v1",\n        "alias": "cgi_interface"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can test the API using ",(0,r.jsx)(n.code,{children:"curl"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl 'https://my.elasticsearch.server/cgi_interface/_search?q=network'\n"})}),"\n",(0,r.jsx)(n.p,{children:"With that in place let's try to fetch this data in React and embed it in an user interface."}),"\n",(0,r.jsx)(n.h3,{id:"hardcoded-elasticsearch-query",children:"Hardcoded Elasticsearch Query"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"./src/main.tsx"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\nimport App from 'views/App.tsx'\nimport 'styles/index.css'\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 15\n    },\n    mutations: {}\n  }\n})\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <QueryClientProvider client={ queryClient }>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Let's start by sending a hardcoded search query to the Elasticsearch API, e.g. ",(0,r.jsx)(n.code,{children:"getalarmattr"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"./src/views/App.tsx"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import HelloWorld from 'components/HelloWorld'\nimport CGIDoc from 'components/FetchDoc'\n\n\nimport 'styles/App.css'\n\nconst query = 'getalarmattr'\n\nconsole.log('App: '+ query)\n\nexport default function App() {\n  \n  return (\n    <>\n          <HelloWorld greeting='Hello from React Typescript' />\n          <CGIDoc query={query} />\n    </>\n  )\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"./src/components/FetchDoc.tsx"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import React from 'react'\nimport { useQuery, UseQueryResult } from \"@tanstack/react-query\";\n\nimport { iElasticSearchQuery, iElasticSearchResponse } from 'types/interfaces'\n\nconst apiUrl = 'https://my.elastic.server/cgi_interface/_search?q='\n\nconst getData = async({query}: iElasticSearchQuery): Promise<iElasticSearchResponse> => {\n    const response = await fetch(apiUrl+query)\n    console.log(apiUrl+query)\n    if (response.ok) {\n        return response.json()\n    }\n    throw new Error('ERROR :: Data fetching failed!')\n}\n\n// function Debug(query: string) {\n//     console.log('second: ' + query)\n//     return query\n// }\n\nexport default function CGIDoc({query}: iElasticSearchQuery): React.JSX.Element {\n    // const queryClient = useQueryClient()\n    const {\n        isLoading,\n        isError,\n        error,\n        data,\n        isSuccess\n    }: UseQueryResult<iElasticSearchResponse, Error> = useQuery<iElasticSearchResponse, Error>({\n        queryKey: ['mydata'],\n        queryFn: () => getData({query})\n        // debug\n        // queryFn: () => Debug(query),\n    })\n\n    if(isLoading) return <h3>loading...</h3>\n\n    if(isError) return <p>{error.message}</p>\n\n    if(isSuccess) return (\n        <div>\n            {\n                data?.hits.hits.map((result) => {\n                    return(\n                        <div key={result._id}>\n                            <li><strong>Title: </strong>{result._source.abstract.en}</li>\n                            <li><strong>Score: </strong>{result._score}</li>\n                            <li><strong>GET CGI: </strong>{result._source.cgi}</li>\n                            {result?._source.parameters.map(param => (\n                                    <ul key={param.mqtt}>\n                                        <li><strong>SET CGI: </strong>{param.cgi}</li>\n                                        <li><strong>MQTT: </strong>{param.mqtt}</li>\n                                    </ul>\n                            ))}\n                            <hr/>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n\n    else return <h3>...something very strange just happened...</h3>\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Tanstack React Query Tauri App",src:t(672633).Z+"",width:"979",height:"1009"})}),"\n",(0,r.jsx)(n.h3,{id:"elasticsearch-query-interface",children:"Elasticsearch Query Interface"}),"\n",(0,r.jsx)(n.p,{children:"Now that we can contact Elasticsearch and retrieve a JSON object in return for a search query let's replace the hardcoded query with an text input."}),"\n",(0,r.jsx)(n.p,{children:"First, I will remove the props from the App component - as the search query input will be part of the Fetch component:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"./src/views/App.tsx"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import HelloWorld from 'components/HelloWorld'\nimport CGIDoc from 'components/FetchDoc'\n\n\nimport 'styles/App.css'\n\nexport default function App(): JSX.Element {\n  \n  return (\n    <>\n          <HelloWorld greeting='Hello from React Typescript' />\n          <CGIDoc />\n    </>\n  )\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"The Fetch component now takes in the value of the input field to run the search request:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"./src/components/FetchDoc.tsx"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import React, { useState } from 'react'\nimport { useQuery, UseQueryResult } from \"@tanstack/react-query\";\n\nimport { useDebounce } from 'utils/hooks'\nimport { api } from '../../config.ts'\nimport { iElasticSearchResponse } from 'types/interfaces'\n\nconst getData = async(query: string): Promise<iElasticSearchResponse> => {\n    // console.log(api.url+query)\n    const response = await fetch(api.url+query)\n    if (response.ok) {\n        return response.json()\n    }\n    throw new Error('ERROR :: Data fetching failed!')\n}\n\nexport default function CGIDoc(): React.JSX.Element {\n\n    const [search, setSearch] = useState('\u2047')\n    const debounceSearch = useDebounce(search, 500)\n\n    const {\n        isLoading,\n        isError,\n        error,\n        data,\n        isSuccess\n    }: UseQueryResult<iElasticSearchResponse, Error> = useQuery<iElasticSearchResponse, Error>({\n        queryKey: ['elasticresponse', { debounceSearch }],\n        queryFn: () => getData(debounceSearch),\n        staleTime: 1000 * 5,\n        refetchOnMount: true,\n        refetchOnReconnect: true,\n        refetchOnWindowFocus: true,\n        refetchInterval: 1000 * 60,\n        refetchIntervalInBackground: false,\n        retry: true,\n        retryOnMount: true,\n        // retryDelay: 1000 * 5, // default increases exponentially\n    })\n\n    if(isLoading) return <p>loading...</p>\n\n    if(isError) return <p>{error.message}</p>\n\n    if(isSuccess) return (\n        <div>\n\n            <input\n            type='text'\n            onChange={e => (setSearch(e.target.value))}\n            value={search}\n            placeholder='Search'\n            />\n\n            {\n                data?.hits.hits.map((result) => {\n                    return(\n                        <div key={result._id}>\n                            <li><strong>Title: </strong>{result._source.abstract.en}</li>\n                            <li><strong>Score: </strong>{result._score}</li>\n                            <li><strong>GET CGI: </strong>{result._source.cgi}</li>\n                            {result?._source.parameters.map(param => (\n                                    <ul key={param.mqtt}>\n                                        <li><strong>SET CGI: </strong>{param.cgi}</li>\n                                        <li><strong>MQTT: </strong>{param.mqtt}</li>\n                                    </ul>\n                            ))}\n                            <hr/>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n\n    else return <h3>...something very strange happened...</h3>\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Here I am now importing the API url from an separate configuration file:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"../config.ts"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { iElasticApiSearchUrl } from './src/types/interfaces'\n\nexport const api: iElasticApiSearchUrl = {\n    url: 'https://my.elastic.server/cgi_interface/_search?q='\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Since my Elasticsearch cluster will serve different indexes I will also add a type interface to make sure that only valid API endpoints can be specified and we get the sweet Typescript autocompletion:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"./src/types/interfaces.ts"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export interface iElasticApiSearchUrl {\n    url: 'https://my.elastic.server/cgi_interface/_search?q=' | 'https://my.elastic.server/fw_changelog/_search?q='\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Tanstack React Query Tauri App",src:t(413209).Z+"",width:"1026",height:"730"})}),"\n",(0,r.jsx)(n.h2,{id:"shadcn--tailwind",children:"ShadCN & Tailwind"}),"\n",(0,r.jsx)(n.p,{children:"Making things pretty:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn add -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"./tsconfig.json"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "paths": {\n      "@/*": [\n        "./src/*"\n      ]\n    },\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": replace all imports relative to ",(0,r.jsx)(n.code,{children:"./src"})," by adding the ",(0,r.jsx)(n.code,{children:"@/"})," prefix!"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"./vite.config.ts"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import path from \"path\"\nimport { defineConfig } from 'vite'\nimport tsconfigPaths from 'vite-tsconfig-paths'\nimport react from '@vitejs/plugin-react-swc'\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    tsconfigPaths()\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run the shadcn-ui init command to setup your project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx shadcn-ui@latest init\n\n\u2714 Would you like to use TypeScript (recommended) \u203a yes\n\u2714 Which style would you like to use? \u203a New York\n\u2714 Which color would you like to use as base color? \u203a Slate\n\u2714 Where is your global CSS file? \u2026 src/styles/index.css\n\u2714 Would you like to use CSS variables for colors? \u203a yes\n\u2714 Are you using a custom tailwind prefix eg. tw-? (Leave blank if not) \u2026 \n\u2714 Where is your tailwind.config.js located? \u203a tailwind.config.js\n\u2714 Configure the import alias for components: \u203a @/components\n\u2714 Configure the import alias for utils: \u203a @/utils\n\u2714 Are you using React Server Components? \u203a no\n\u2714 Write configuration to components.json. Proceed? \u203a yes\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now we can import our first ",(0,r.jsx)(n.a,{href:"https://ui.shadcn.com/docs/components/input",children:"ShadCN Component"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx shadcn-ui@latest add input\n"})}),"\n",(0,r.jsx)(n.p,{children:"And replace the default input using the ShadCN component:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Input } from \"@/components/ui/input\"\n...\n<Input\n    type='text'\n    onChange={e => (setSearch(e.target.value))}\n    value={search}\n    placeholder='Search'\n/>\n"})}),"\n",(0,r.jsx)(n.p,{children:"And a few minutes later..."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Tanstack React Query Native App",src:t(5094).Z+"",width:"455",height:"343"})}),"\n",(0,r.jsx)(n.h2,{id:"tauri-bundler",children:"Tauri Bundler"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://tauri.app/v1/guides/building/",children:"Tauri Bundler"})," is a Rust harness to compile your binary, package assets, and prepare a final bundle."]}),"\n",(0,r.jsx)(n.p,{children:"It will detect your operating system and build a bundle accordingly. It currently supports:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Windows: ",(0,r.jsx)(n.code,{children:"-setup.exe"}),", ",(0,r.jsx)(n.code,{children:".msi"})]}),"\n",(0,r.jsxs)(n.li,{children:["macOS: ",(0,r.jsx)(n.code,{children:".app"}),", ",(0,r.jsx)(n.code,{children:".dmg"})]}),"\n",(0,r.jsxs)(n.li,{children:["Linux: ",(0,r.jsx)(n.code,{children:".deb"}),", ",(0,r.jsx)(n.code,{children:".appimage"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"linux-bundle",children:"Linux Bundle"}),"\n",(0,r.jsx)(n.p,{children:"Tauri applications for Linux are distributed either with a Debian bundle (.deb file) or an AppImage (.AppImage file). The Tauri CLI automatically bundles your application code in these formats by default. Please note that .deb and .AppImage bundles can only be created on Linux as cross-compilation doesn't work yet."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run rust build\n\n> Error You must change the bundle identifier in `tauri.conf.json > tauri > bundle > identifier`. The default value `com.tauri.dev` is not allowed as it must be unique across applications.\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"identifier"}),": The application identifier in reverse domain name notation (e.g. com.tauri.example). This string must be unique across applications since it is used in system configurations like the bundle ID and path to the webview data directory. This string must contain only alphanumeric characters (A\u2013Z, a\u2013z, and 0\u20139), hyphens (-), and periods (.)."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"./src-tauri/tauri.conf.json"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"bundle": {\n  ...\n  "identifier": "com.instar.dev",\n  ...\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run rust build\n\nFinished 2 bundles at:\n  ./src-tauri/target/release/bundle/deb/rusty-react-query_0.1.0_amd64.deb\n  ./src-tauri/target/release/bundle/appimage/rusty-react-query_0.1.0_amd64.AppImage\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"chmod +x ./src-tauri/target/release/bundle/appimage/rusty-react-query_0.1.0_amd64.AppImage\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"./src-tauri/target/release/bundle/appimage/rusty-react-query_0.1.0_amd64.AppImage\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.ah)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},603905:(e,n,t)=>{t.d(n,{ah:()=>o});var r=t(667294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),o=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=o(t),h=i,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||a;return t?r.createElement(m,s(s({ref:n},p),{},{components:t})):r.createElement(m,s({ref:n},p))}));p.displayName="MDXCreateElement"},674413:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/React-Query-Tauri_01-8a9adab210aec7b8b89c450462639566.png"},228984:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/React-Query-Tauri_02-8d8366d7df6467eeca9137d0517bf657.png"},672633:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/React-Query-Tauri_03-30bbd0a469d486b511489d4b58310cc9.png"},413209:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/React-Query-Tauri_04-7512c2a02b8cbf22bf1b631d6ab6be3e.png"},5094:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/React-Query-Tauri_05-59a8eff4fafed689c3de726b8b4d000d.gif"},763457:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-c3aedc7eed015cc5372c21f9c394693d.jpg"}}]);