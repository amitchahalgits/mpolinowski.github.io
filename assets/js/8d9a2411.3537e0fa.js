"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[74498],{961382:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var t=r(785893),o=r(603905);const i={sidebar_position:7070,slug:"2021-05-07",title:"Electron for Cross Platform Applications",authors:"mpolinowski",tags:["Javascript","Electron"]},a=void 0,l={id:"Development/Javascript/2021-05-07-electron-cross-platform-apps/index",title:"Electron for Cross Platform Applications",description:"Shenzhen, China",source:"@site/docs/Development/Javascript/2021-05-07-electron-cross-platform-apps/index.md",sourceDirName:"Development/Javascript/2021-05-07-electron-cross-platform-apps",slug:"/Development/Javascript/2021-05-07-electron-cross-platform-apps/2021-05-07",permalink:"/docs/Development/Javascript/2021-05-07-electron-cross-platform-apps/2021-05-07",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Javascript/2021-05-07-electron-cross-platform-apps/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"},{label:"Electron",permalink:"/docs/tags/electron"}],version:"current",sidebarPosition:7070,frontMatter:{sidebar_position:7070,slug:"2021-05-07",title:"Electron for Cross Platform Applications",authors:"mpolinowski",tags:["Javascript","Electron"]},sidebar:"tutorialSidebar",previous:{title:"Electron@13 as a Gatsby.js Wrapper",permalink:"/docs/Development/Javascript/2021-05-08-electron13-gatsby-wrapper/2021-05-08"},next:{title:"Next.js in 2021",permalink:"/docs/Development/Javascript/2021-02-14-next-js-2021/2021-02-14"}},s={},d=[{value:"Installation",id:"installation",level:2},{value:"Loading a Webpage",id:"loading-a-webpage",level:3},{value:"Loading a File",id:"loading-a-file",level:3},{value:"Electron BrowserWindow",id:"electron-browserwindow",level:2},{value:"Instance Events",id:"instance-events",level:2},{value:"Working with Multiple Windows",id:"working-with-multiple-windows",level:2},{value:"Window Timing",id:"window-timing",level:2},{value:"ipcMain and ipcRenderer",id:"ipcmain-and-ipcrenderer",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.ah)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Shenzhen, China",src:r(943583).Z+"",width:"1500",height:"479"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#installation",children:"Installation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#loading-a-webpage",children:"Loading a Webpage"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#loading-a-file",children:"Loading a File"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#electron-browserwindow",children:"Electron BrowserWindow"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#instance-events",children:"Instance Events"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#working-with-multiple-windows",children:"Working with Multiple Windows"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#window-timing",children:"Window Timing"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ipcmain-and-ipcrenderer",children:"ipcMain and ipcRenderer"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/mpolinowski/getting-started-with-electron4",children:"Github Repository"})}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsxs)(n.p,{children:["There is already a ",(0,t.jsx)(n.a,{href:"https://www.electronjs.org",children:"version 14 available of Electron"})," - but I am following along a tutorial using Version 4. So for now I will initialize the project and install this specific version:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm init -y\r\nnpm install --save-dev electron@4.1.4\n"})}),"\n",(0,t.jsx)(n.p,{children:"Add the following lines to the scripts section of your package.json to be able to start Electron with npm:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'"scripts": {\r\n    "start": "electron ."\r\n  },\n'})}),"\n",(0,t.jsx)(n.h3,{id:"loading-a-webpage",children:"Loading a Webpage"}),"\n",(0,t.jsxs)(n.p,{children:["Now we need to create a hello world ",(0,t.jsx)(n.code,{children:"index.js"})," file in the root directory of our app:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const { app, BrowserWindow } = require('electron');\r\n\r\nfunction createWindows() {\r\n  let welcomeWindow =  new BrowserWindow();\r\n  welcomeWindow.loadURL('https://wiki.instar.com/de/');\r\n}\r\n\r\napp.on('ready', createWindows);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now all you need to do is to start your application with the npm script we added and your Electron app will come up with a webView of the web content you defined above in the ",(0,t.jsx)(n.code,{children:"createWindow"})," function:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Getting started with Electron4",src:r(804629).Z+"",width:"1142",height:"593"})}),"\n",(0,t.jsx)(n.h3,{id:"loading-a-file",children:"Loading a File"}),"\n",(0,t.jsx)(n.p,{children:"Now we can use Electron as a wrapper for some local content:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const { app, BrowserWindow } = require('electron');\r\n\r\nfunction createWindows() {\r\n  let welcomeWindow =  new BrowserWindow();\r\n  welcomeWindow.loadFile('./public/index.html');\r\n}\r\n\r\napp.on('ready', createWindows);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now create a folder inside the app root called ",(0,t.jsx)(n.code,{children:"public"})," and add a file ",(0,t.jsx)(n.code,{children:"index.html"})," inside it:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html lang="en">\r\n<html>\r\n  <head>\r\n    <meta charset="UTF-8">\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n    <meta http-equiv="X-UA-Compatible" content="ie=edge">\r\n    <title>Hello, World!</title>\r\n  </head>\r\n  <body>\r\n    <h1>Hello, World!</h1>\r\n    <p>Electron File Wrapper</p>\r\n  </body>\r\n</html>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Run ",(0,t.jsx)(n.code,{children:"npm start"})," again - this time you should see the rendered HTML page above."]}),"\n",(0,t.jsx)(n.h2,{id:"electron-browserwindow",children:"Electron BrowserWindow"}),"\n",(0,t.jsxs)(n.p,{children:["I noticed that the default Window that opens up when I start Electron is too small for the content I am loading. The ",(0,t.jsx)(n.a,{href:"https://www.electronjs.org/docs/latest/api/browser-window",children:"BrowserWindow API"})," allows us to configure a lot of things about our app - for example it's width and height:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const { app, BrowserWindow } = require('electron');\r\n\r\nfunction createWindows() {\r\n  let welcomeWindow =  new BrowserWindow(\r\n    {\r\n      width: 1024,\r\n      height: 768,\r\n      center: true,\r\n      resizable: true,\r\n      moveable: true,\r\n      minimizable: true,\r\n      maximizable: true,\r\n      fullscreen: false,\r\n      fullscreenable: true,\r\n      minWidth: 800,\r\n    }\r\n  );\r\n\r\n  welcomeWindow.loadFile('./public/index.html');\r\n}\r\n\r\napp.on('ready', createWindows);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"instance-events",children:"Instance Events"}),"\n",(0,t.jsxs)(n.p,{children:["Objects created with ",(0,t.jsx)(n.a,{href:"https://www.electronjs.org/docs/latest/api/browser-window#instance-events",children:"new BrowserWindow emit the events"})," that we can react to. An example is - we want to wait for our page to load completely before displaying the webView Window. For this we just have to set our window to ",(0,t.jsx)(n.strong,{children:"not show"})," until an ",(0,t.jsx)(n.strong,{children:"eventListener"})," is triggered:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const { app, BrowserWindow } = require('electron');\r\n\r\nfunction createWindows() {\r\n  let welcomeWindow =  new BrowserWindow(\r\n    {\r\n      width: 1024,\r\n      height: 768,\r\n      center: true,\r\n      resizable: true,\r\n      moveable: true,\r\n      minimizable: true,\r\n      maximizable: true,\r\n      fullscreen: false,\r\n      fullscreenable: true,\r\n      minWidth: 800,\r\n      show: false\r\n    }\r\n  );\r\n\r\n  welcomeWindow.loadFile('./public/index.html');\r\n\r\n  welcomeWindow.on('closed', () => {\r\n    welcomeWindow = null\r\n  });\r\n\r\n  welcomeWindow.once('ready-to-show', ()=> {\r\n    welcomeWindow.show();\r\n  });\r\n}\r\n\r\napp.on('ready', createWindows);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This version of our app now also listens for the ",(0,t.jsx)(n.strong,{children:"closed"})," event and will free up all it's memory once the Windows was closed."]}),"\n",(0,t.jsx)(n.h2,{id:"working-with-multiple-windows",children:"Working with Multiple Windows"}),"\n",(0,t.jsxs)(n.p,{children:["I now want to add a second window to my Electron app. Let's say I have a welcome page and from there I want to be able to start a dashboard. I create the ",(0,t.jsx)(n.code,{children:"dashboard.html"})," file inside the ",(0,t.jsx)(n.code,{children:"/public"})," folder:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html lang="en">\r\n<html>\r\n  <head>\r\n    <meta charset="UTF-8">\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n    <meta http-equiv="X-UA-Compatible" content="ie=edge">\r\n    <title>Dashboard</title>\r\n  </head>\r\n  <body>\r\n    <h1>Dashboard</h1>\r\n    <p>This is the Dashboard Page</p>\r\n  </body>\r\n</html>\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now we need to add the function that will add our new browser window:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const { app, BrowserWindow } = require('electron');\r\n\r\nfunction createWindows() {\r\n  let welcomeWindow =  new BrowserWindow(\r\n    {\r\n      width: 600,\r\n      height: 400,\r\n      center: true,\r\n      backgroundColor: '#2f78f9',\r\n      hasShadow: true,\r\n      darkTheme: true,\r\n      resizable: true,\r\n      moveable: true,\r\n      minimizable: true,\r\n      maximizable: true,\r\n      fullscreen: false,\r\n      fullscreenable: true,\r\n      minWidth: 800,\r\n      show: false,\r\n      alwaysOnTop: true\r\n    }\r\n  );\r\n\r\n  welcomeWindow.loadFile('./public/index.html');\r\n\r\n  welcomeWindow.on('closed', () => {\r\n    welcomeWindow = null\r\n  });\r\n\r\n\r\n  let dashboardWindow = new BrowserWindow({\r\n      width: 1024,\r\n      height: 768,\r\n      x: 0,\r\n      y: 0,\r\n      resizable: true,\r\n      moveable: true,\r\n      minimizable: true,\r\n      maximizable: true,\r\n      kiosk : true,\r\n      fullscreenable: true,\r\n      frame: true,\r\n      transparent: false,\r\n      show: false\r\n  });\r\n\r\n  dashboardWindow.loadFile('./public/dashboard.html');\r\n\r\n  welcomeWindow.once('ready-to-show', ()=> {\r\n    welcomeWindow.show();\r\n    dashboardWindow.show();\r\n    dashboardWindow.maximize();\r\n  });\r\n\r\n  dashboardWindow.on('closed', () => {\r\n    dashboardWindow = null\r\n  });\r\n}\r\n\r\napp.on('ready', createWindows);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"window-timing",children:"Window Timing"}),"\n",(0,t.jsx)(n.p,{children:"Set a timer on the welcome screen to have it appear after the dashboard loaded and then have it disappear again after a timeout:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const { app, BrowserWindow } = require('electron');\r\n\r\nfunction createWindows() {\r\n  let welcomeWindow =  new BrowserWindow(\r\n    {\r\n      width: 600,\r\n      height: 400,\r\n      center: true,\r\n      backgroundColor: '#2f78f9',\r\n      hasShadow: true,\r\n      darkTheme: true,\r\n      resizable: true,\r\n      moveable: true,\r\n      minimizable: true,\r\n      maximizable: true,\r\n      fullscreen: false,\r\n      fullscreenable: true,\r\n      minWidth: 800,\r\n      show: false,\r\n      alwaysOnTop: true\r\n    }\r\n  );\r\n\r\n  welcomeWindow.loadFile('./public/index.html');\r\n\r\n  welcomeWindow.on('closed', () => {\r\n    welcomeWindow = null\r\n  });\r\n\r\n\r\n  let dashboardWindow = new BrowserWindow({\r\n      width: 1024,\r\n      height: 768,\r\n      x: 0,\r\n      y: 0,\r\n      resizable: true,\r\n      moveable: true,\r\n      minimizable: true,\r\n      maximizable: true,\r\n      kiosk : true,\r\n      fullscreenable: true,\r\n      frame: true,\r\n      transparent: false,\r\n      show: false\r\n  });\r\n\r\n  dashboardWindow.loadFile('./public/dashboard.html');\r\n\r\n  welcomeWindow.once('ready-to-show', ()=> {\r\n    dashboardWindow.show();\r\n    dashboardWindow.maximize();\r\n\r\n    setTimeout(() => {\r\n      welcomeWindow.show();\r\n          setTimeout(() => {\r\n            welcomeWindow.hide();\r\n          }, 5000);\r\n    }, 1000);\r\n  });\r\n\r\n  dashboardWindow.on('closed', () => {\r\n    dashboardWindow = null\r\n  });\r\n}\r\n\r\napp.on('ready', createWindows);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"ipcmain-and-ipcrenderer",children:"ipcMain and ipcRenderer"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://www.electronjs.org/docs/latest/api/ipc-main",children:"ipcMain module"})," is an Event Emitter. When used in the main process, it handles asynchronous and synchronous messages sent from a renderer process (web page). Messages sent from a renderer will be emitted to this module."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://www.electronjs.org/docs/latest/api/ipc-renderer",children:"ipcRenderer module"})," is an EventEmitter. It provides a few methods so you can send synchronous and asynchronous messages from the render process (web page) to the main process. You can also receive replies from the main process."]}),"\n",(0,t.jsxs)(n.p,{children:["I now want to use the ",(0,t.jsx)(n.strong,{children:"ipcMain"})," module to handle the closing of the welcome screen - before I used the ",(0,t.jsx)(n.code,{children:"setTimeout"})," function. For this I am going to add the following to the ",(0,t.jsx)(n.code,{children:"index.js"})," file and remove the ",(0,t.jsx)(n.code,{children:"welcomeWindow.hide()"})," timer:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const { app, BrowserWindow, ipcMain } = require('electron');\r\n\r\n...\r\n\r\nipcMain.on('closeWelcomeWindow', (event) => {\r\n    welcomeWindow.hide();\r\n  });\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This function will hide the welcome screen when an event with the name ",(0,t.jsx)(n.code,{children:"closeWelcomeWindow"})," is triggered - we will have to add this event to our app."]}),"\n",(0,t.jsx)(n.p,{children:"We also have to add add the Node.js integration to our welcome screen to be able to execute Node.js functions from within this window - like importing Electron code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function createWindows() {\r\n  let welcomeWindow =  new BrowserWindow(\r\n    {\r\n      ...\r\n      webPreferences: {\r\n        nodeIntegration: true\r\n      },\r\n      ...\r\n    }\r\n  );\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now to connect our web content we need to add some javascript to the welcome page:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html lang="en">\r\n<html>\r\n  <head>\r\n    <meta charset="UTF-8">\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n    <meta http-equiv="X-UA-Compatible" content="ie=edge">\r\n    <title>Hello, World!</title>\r\n  </head>\r\n  <body>\r\n    <h1>Hello, World!</h1>\r\n    <p>Electron File Wrapper</p>\r\n    <button class="button" type="button" id="closeButton">\r\n        Close\r\n    </button>\r\n    <script>\r\n      const { ipcRenderer } = require(\'electron\');\r\n      document.querySelector(\'#closeButton\').addEventListener(\'click\', () => {\r\n        ipcRenderer.send(\'closeWelcomeWindow\')\r\n      });\r\n    <\/script>\r\n  </body>\r\n</html>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Now we have a button on our welcome page that, when clicked, will emit the ",(0,t.jsx)(n.code,{children:"closeWelcomeWindow"})," event that our electron process is waiting for to close the welcome screen!"]})]})}function h(e={}){const{wrapper:n}={...(0,o.ah)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>d});var t=r(667294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),d=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),w=d(r),p=o,m=w["".concat(s,".").concat(p)]||w[p]||c[p]||i;return r?t.createElement(m,a(a({ref:n},h),{},{components:r})):t.createElement(m,a({ref:n},h))}));h.displayName="MDXCreateElement"},804629:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/Getting_started_with_Electron4_01-c50e49e186e15e85946b1ad7fbf89630.png"},943583:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/photo-456tdsfggd_67gfh6dgdf4_d-4818a70d2cda9cb1a4a4c2b66118924b.jpg"}}]);