"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[43497],{135973:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(474848),a=n(28453);const o={sidebar_position:9030,slug:"2021-09-22",title:"Getting started with Go and React - API Routes",authors:"mpolinowski",tags:["Go"]},s=void 0,i={id:"Development/Go/2021-09-22--golang-react-starter-part-ii/index",title:"Getting started with Go and React - API Routes",description:"Shenzhen, China",source:"@site/docs/Development/Go/2021-09-22--golang-react-starter-part-ii/index.md",sourceDirName:"Development/Go/2021-09-22--golang-react-starter-part-ii",slug:"/Development/Go/2021-09-22--golang-react-starter-part-ii/2021-09-22",permalink:"/docs/Development/Go/2021-09-22--golang-react-starter-part-ii/2021-09-22",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Go/2021-09-22--golang-react-starter-part-ii/index.md",tags:[{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:9030,frontMatter:{sidebar_position:9030,slug:"2021-09-22",title:"Getting started with Go and React - API Routes",authors:"mpolinowski",tags:["Go"]},sidebar:"tutorialSidebar",previous:{title:"Getting started with Go and React - PostgreSQL",permalink:"/docs/Development/Go/2021-09-23--golang-react-starter-part-iii/2021-09-23"},next:{title:"Getting started with Go and React - Webservice, Routing and Status Log",permalink:"/docs/Development/Go/2021-09-21--golang-react-starter-part-i/2021-09-21"}},d={},c=[{value:"Setting up API Routes",id:"setting-up-api-routes",level:2},{value:"Adding Models",id:"adding-models",level:3},{value:"Handle API JSON Response",id:"handle-api-json-response",level:3},{value:"API for One Camera",id:"api-for-one-camera",level:3}];function l(t){const e={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{alt:"Shenzhen, China",src:n(673459).A+"",width:"1500",height:"441"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Creating an REST API backend in Go and connecting it to a React.js frontend."}),"\n"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#",children:"Part I - Webservice, Routing and Status Log"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#",children:"Part II - API Routes"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#",children:"Part III - PostgreSQL"})}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["I want to prototype a Go backend for a ",(0,r.jsx)(e.strong,{children:"Weather Cam"})," tool. The backend should hold all the information related to all cameras and serve them on different routes. The backend then needs to be connected to a React.js frontend that displays the JSON data that is being served as well as to allow to add / delete cameras."]}),"\n",(0,r.jsx)(e.h2,{id:"setting-up-api-routes",children:"Setting up API Routes"}),"\n",(0,r.jsx)(e.h3,{id:"adding-models",children:"Adding Models"}),"\n",(0,r.jsx)(e.p,{children:"Creating type declarations for our API routes:"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.em,{children:"./models/models.go"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'package models\r\n\r\nimport "time"\r\n\r\ntype Camera struct {\r\n\tID\t\t\t\t\tint\t\t\t`json:"id"`\r\n\tName            \tstring\t\t`json:"name"`\r\n\tUsername        \tstring\t\t`json:"usr"`\r\n\tPassword        \tstring\t\t`json:"pass"`\r\n\tAddress         \tstring\t\t`json:"ip"`\r\n\tCreated\t\t\t\ttime.Time\t`json:"installed"`\r\n\tUpdated\t\t\t\ttime.Time\t`json:"inspected"`\r\n\tRating\t\t\t\tint\t\t\t`json:"rating"`\r\n\t// As soon as we connect our database we will use\r\n\t// a JOIN query to get the location information.\r\n\t// Change the line to `Location []Location `json:"location"``\r\n\t// to display them.\r\n\tLocation\t\t\t[]Location\t`json:"-"`\r\n}\r\n\r\ntype CameraModel struct {\r\n\tID\t\t\t\t\tint\t\t\t`json:"id"`\r\n\tModel\t\t\t\tstring\t\t`json:"model"`\r\n\tLense\t\t\t\tstring\t\t`json:"lense"`\r\n\tResolution\t\t\tstring\t\t`json:"res"`\r\n\tCreated\t\t\t\ttime.Time\t`json:"install"`\r\n\tUpdated\t\t\t\ttime.Time\t`json:"inspect"`\r\n}\r\n\r\ntype Location struct {\r\n\tID              \tint       \t`json:"id"`\r\n\tLocationName\t\tstring\t\t`json:"location"`\r\n\tCameraID           \tstring     \t`json:"cid"`\r\n\tLocationID         \tstring    \t`json:"lid"`\r\n\tModel\t\t\t\tstring\t\t`json:"model"`\r\n\tLense\t\t\t\tstring\t\t`json:"lense"`\r\n\tResolution\t\t\tstring\t\t`json:"res"`\r\n\tCreated \t\t\ttime.Time\t`json:"install"`\r\n\tUpdated\t\t\t\ttime.Time\t`json:"inspect"`\r\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Create the API routes for all cameras and one specific camera:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"net/http"\r\n\r\n\t"github.com/julienschmidt/httprouter"\r\n)\r\n\r\nfunc (app *application) routes() *httprouter.Router {\r\n\trouter := httprouter.New()\r\n\r\n\trouter.HandlerFunc(http.MethodGet, "/status", app.statusHandler)\r\n\r\n\trouter.HandlerFunc(http.MethodGet, "/v1/camera/:id", app.getOneCamera)\r\n\trouter.HandlerFunc(http.MethodGet, "/v1/cameras", app.getAllCameras)\r\n\r\n\treturn router\r\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"handle-api-json-response",children:"Handle API JSON Response"}),"\n",(0,r.jsx)(e.p,{children:"We need to be able to send data in form of JSON to the accessing browser. We can add a utility function that abstracts that part away from our route handler:"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.em,{children:"./src/api/utilities.go"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"encoding/json"\r\n\t"net/http"\r\n)\r\n\r\n// Create a function that takes an input, converts it to JSON\r\n// and sends it to the browser\r\nfunc (app *application) writeJSON(w http.ResponseWriter, status int, data interface{}, wrap string) error {\r\n\t// Create a wrapper that describes the data\r\n\twrapper := make(map[string]interface{})\r\n\t// Wrap data\r\n\twrapper[wrap] = data\r\n\t// Transform to JSON\r\n\tjs, err := json.Marshal(wrapper)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\t// Add headers and send\r\n\tw.Header().Set("Content-Type", "application/json")\r\n\tw.WriteHeader(status)\r\n\tw.Write(js)\r\n\r\n\treturn nil\r\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"api-for-one-camera",children:"API for One Camera"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.em,{children:"./src/api/cameraHandler.go"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"backend/models"\r\n\t"errors"\r\n\t"net/http"\r\n\t"strconv"\r\n\t"time"\r\n\r\n\t"github.com/julienschmidt/httprouter"\r\n)\r\n\r\nfunc (app *application) getOneCamera(w http.ResponseWriter, r *http.Request) {\r\n\t// Get camera id from from the URL param\r\n\tparams := httprouter.ParamsFromContext(r.Context())\r\n\t// Convert id from string to integer\r\n\tid, err := strconv.Atoi(params.ByName("id"))\r\n\tif err != nil {\r\n\t\tapp.logger.Print(errors.New("invalid id parameter"))\r\n\t}\r\n\t// Log id to see if it is working\r\n\tapp.logger.Println("camera id is", id)\r\n\t// Hardcode a camera to get started\r\n\tcamera := models.Camera {\r\n\t\tID: id,\r\n\t\tName: "Mountain View",\r\n\t\tUsername: "admin",\r\n\t\tPassword: "instar",\r\n\t\tAddress: "192.168.2.19",\r\n\t\tRating: 5,\r\n\t\tLocation: "Hongkong",\r\n\t\tInstallationDate: time.Date(2021, 9, 22, 0, 0, 0, 0, time.Local),\r\n\t\tInspectionDate: time.Now(),\r\n\t}\r\n\r\n\terr = app.writeJSON(w, http.StatusOK, camera, "camera")\r\n\tif err != nil {\r\n\t\tapp.logger.Println(err)\r\n\t}\r\n}\r\n\r\nfunc (app *application) getAllCameras(w http.ResponseWriter, r *http.Request) {\r\n\t// TODO\r\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Start the application with:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"go run ./src/api/\n"})}),"\n",(0,r.jsxs)(e.p,{children:["And test the ",(0,r.jsx)(e.code,{children:"url"})," ",(0,r.jsx)(e.code,{children:"http://localhost:4000/v1/camera/123"})," in your browser:"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{alt:"Golang React API",src:n(4732).A+"",width:"1091",height:"274"})})]})}function p(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(l,{...t})}):l(t)}},4732:(t,e,n)=>{n.d(e,{A:()=>r});const r=n.p+"assets/images/Golang_React_API-c81eb3bef796106feef27d84ea25a2d7.png"},673459:(t,e,n)=>{n.d(e,{A:()=>r});const r=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-f4a66dcdd4723b20f63751871edc4e36.jpg"},28453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>i});var r=n(296540);const a={},o=r.createContext(a);function s(t){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:s(t.components),r.createElement(o.Provider,{value:e},t.children)}}}]);