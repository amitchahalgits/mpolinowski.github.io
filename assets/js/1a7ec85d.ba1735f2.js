"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[65567],{211763:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var s=n(474848),a=n(28453);const r={sidebar_position:8030,slug:"2021-03-29",title:"Elasticsearch 7 Data Transformation",authors:"mpolinowski",tags:["LINUX","Elasticsearch"]},i=void 0,o={id:"DevOps/Elasticsearch/2021-03-29-elasticsearch7-data-transformations/index",title:"Elasticsearch 7 Data Transformation",description:"Harbin, China",source:"@site/docs/DevOps/Elasticsearch/2021-03-29-elasticsearch7-data-transformations/index.md",sourceDirName:"DevOps/Elasticsearch/2021-03-29-elasticsearch7-data-transformations",slug:"/DevOps/Elasticsearch/2021-03-29-elasticsearch7-data-transformations/2021-03-29",permalink:"/docs/DevOps/Elasticsearch/2021-03-29-elasticsearch7-data-transformations/2021-03-29",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Elasticsearch/2021-03-29-elasticsearch7-data-transformations/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Elasticsearch",permalink:"/docs/tags/elasticsearch"}],version:"current",sidebarPosition:8030,frontMatter:{sidebar_position:8030,slug:"2021-03-29",title:"Elasticsearch 7 Data Transformation",authors:"mpolinowski",tags:["LINUX","Elasticsearch"]},sidebar:"tutorialSidebar",previous:{title:"Elasticsearch 7 and Filebeats",permalink:"/docs/DevOps/Elasticsearch/2021-03-30-elasticsearch7-and-filebeats/2021-03-30"},next:{title:"Elasticsearch 7 Timeseries",permalink:"/docs/DevOps/Elasticsearch/2021-03-28-elasticsearch7-timeseries/2021-03-28"}},c={},d=[{value:"Preparing the Index",id:"preparing-the-index",level:2},{value:"Creating the Mapping",id:"creating-the-mapping",level:3},{value:"Bulk Data Import",id:"bulk-data-import",level:3},{value:"Transformation",id:"transformation",level:2},{value:"The Kibana Way",id:"the-kibana-way",level:2}];function l(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Harbin, China",src:n(269455).A+"",width:"1500",height:"499"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"#preparing-the-index",children:"Preparing the Index"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#creating-the-mapping",children:"Creating the Mapping"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#bulk-data-import",children:"Bulk Data Import"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#transformation",children:"Transformation"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#the-kibana-way",children:"The Kibana Way"})}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"preparing-the-index",children:"Preparing the Index"}),"\n",(0,s.jsxs)(t.p,{children:["Elastic offers an ",(0,s.jsx)(t.a,{href:"https://raw.githubusercontent.com/elastic/examples/master/Common%20Data%20Formats/nginx_json_logs/nginx_json_logs",children:"NGINX Sample Log"})," that we can use to experiment with:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"wget https://raw.githubusercontent.com/elastic/examples/master/Common%20Data%20Formats/nginx_json_logs/nginx_json_logs\n"})}),"\n",(0,s.jsx)(t.p,{children:"The data is a typical NGINX access log:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'head -n 1 nginx_json_logs\r\n\r\n{"time": "17/May/2015:08:05:32 +0000", "remote_ip": "93.180.71.3", "remote_user": "-", "request": "GET /downloads/product_1 HTTP/1.1", "response": 304, "bytes": 0, "referrer": "-", "agent": "Debian APT-HTTP/1.3 (0.8.16~exp12ubuntu10.21)"}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"creating-the-mapping",children:"Creating the Mapping"}),"\n",(0,s.jsx)(t.p,{children:"We can use the following Elasticsearch mapping to index this data with the Kibana Dev Tools:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'PUT /nginx_log\r\n{\r\n   "settings": {\r\n       "number_of_shards": 1,\r\n       "number_of_replicas": 0\r\n   },\r\n   "mappings": {\r\n       "properties": {\r\n           "time": {"type":"date","format":"dd/MMM/yyyy:HH:mm:ss Z"},\r\n           "remote_ip": {"type":"ip"},\r\n           "remote_user": {"type":"keyword"},\r\n           "request": {"type":"keyword"},\r\n           "response": {"type":"keyword"},\r\n           "bytes": {"type":"long"},\r\n           "referrer": {"type":"keyword"},\r\n           "agent": {"type":"keyword"}\r\n       }\r\n   }\r\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"bulk-data-import",children:"Bulk Data Import"}),"\n",(0,s.jsxs)(t.p,{children:["We can now transform our data so that we are able to insert it into Elasticsearch using the ",(0,s.jsx)(t.strong,{children:"Bulk API"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'awk \'{print "{\\"index\\":{}}\\n" $0}\' nginx_json_logs > nginx_json_logs_bulk\n'})}),"\n",(0,s.jsx)(t.p,{children:"This will add an additional line above every single entry of the document - as needed by the Buld API:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'head -n 2 nginx_json_logs_bulk \r\n\r\n{"index":{}}\r\n{"time": "17/May/2015:08:05:32 +0000", "remote_ip": "93.180.71.3", "remote_user": "-", "request": "GET /downloads/product_1 HTTP/1.1", "response": 304, "bytes": 0, "referrer": "-", "agent": "Debian APT-HTTP/1.3 (0.8.16~exp12ubuntu10.21)"}\n'})}),"\n",(0,s.jsx)(t.p,{children:"We can now ingest the logfile with the following CURL command:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:"curl -H \"Content-Type: application/x-ndjson\" -XPOST 'localhost:9200/nginx_log/_doc/_bulk' --data-binary '@nginx_json_logs_bulk'\n"})}),"\n",(0,s.jsx)(t.p,{children:"And verify that the index was created:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"curl 'localhost:9200/_cat/indices/nginx_log?v'\r\n\r\nhealth status index           uuid                   pri rep docs.count docs.deleted store.size pri.store.size\r\ngreen  open   nginx_log LX1_DwvIQ_2q4nP-YYFYKA   1   0          0            0      1.3mb          1.3mb\n"})}),"\n",(0,s.jsx)(t.p,{children:"We can also check Kibana for our new index:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Elasticsearch and Filebeats",src:n(309378).A+"",width:"1487",height:"679"})}),"\n",(0,s.jsx)(t.h2,{id:"transformation",children:"Transformation"}),"\n",(0,s.jsxs)(t.p,{children:["We can now transform our data by pivoting it around the field ",(0,s.jsx)(t.code,{children:"remote_ip"})," - the command for it can be found ",(0,s.jsx)(t.a,{href:"http://media.sundog-soft.com/es/transforms.txt",children:"here"}),". This transformation will give us:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Average number of bytes for an remote IP"}),"\n",(0,s.jsx)(t.li,{children:"Total sum of the transferred bytes per IP"}),"\n",(0,s.jsx)(t.li,{children:"Total number of requests from that IP"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["And below that, we also calculate the time of the first and last request written in the ",(0,s.jsx)(t.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting-painless.html",children:"Elasticsearch Scripting Language Painless"})," with ",(0,s.jsx)(t.code,{children:"request.first"})," and ",(0,s.jsx)(t.code,{children:"request.last"}),". By sending it to the ",(0,s.jsx)(t.strong,{children:"Preview"})," endpoint we will receive a preview of the transformation:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'curl -H "Content-Type: application/x-ndjson" -XPOST \'http://localhost:9200/_transform/_preview\' \\\r\n--data-raw \'{\r\n   "source": {\r\n       "index": "nginx_log"\r\n   },\r\n   "pivot": {\r\n       "group_by": {\r\n           "ip": {\r\n               "terms": {\r\n                   "field": "remote_ip"\r\n               }\r\n           }\r\n       },\r\n       "aggregations": {\r\n           "bytes.avg": {\r\n               "avg": {\r\n                   "field": "bytes"\r\n               }\r\n           },\r\n           "bytes.sum": {\r\n               "sum": {\r\n                   "field": "bytes"\r\n               }\r\n           },\r\n           "requests.total": {\r\n               "value_count": {\r\n                   "field": "_id"\r\n               }\r\n           },\r\n           "requests.last": {\r\n               "scripted_metric": {\r\n                   "init_script": "state.timestamp = 0L; state.date = \'\\\'\'\'\\\'\'",\r\n                   "map_script": "def doc_date = doc[\'\\\'\'time\'\\\'\'].getValue().toInstant().toEpochMilli();if (doc_date > state.timestamp){state.timestamp = doc_date;state.date = doc[\'\\\'\'time\'\\\'\'].getValue();}",\r\n                   "combine_script": "return state",\r\n                   "reduce_script": "def date = \'\\\'\'\'\\\'\';def timestamp = 0L;for (s in states) {if (s.timestamp > (timestamp)){timestamp = s.timestamp; date = s.date;}} return date"\r\n               }\r\n           },\r\n           "requests.first": {\r\n               "scripted_metric": {\r\n                   "init_script": "state.timestamp = 1609455599000L; state.date = \'\\\'\'\'\\\'\'",\r\n                   "map_script": "def doc_date = doc[\'\\\'\'time\'\\\'\'].getValue().toInstant().toEpochMilli();if (doc_date < state.timestamp){state.timestamp = doc_date;state.date = doc[\'\\\'\'time\'\\\'\'].getValue();}",\r\n                   "combine_script": "return state",\r\n                   "reduce_script": "def date = \'\\\'\'\'\\\'\';def timestamp = 0L;for (s in states) {if (s.timestamp > (timestamp)){timestamp = s.timestamp; date = s.date;}} return date"\r\n               }\r\n           }\r\n       }\r\n   }\r\n}\'\n'})}),"\n",(0,s.jsx)(t.p,{children:"The Output shows us the average bytes per request by an remote IP, the sum of bytes of all request and the last and first time this IP address contacted our web service:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{"preview":[{"bytes":{"avg":2584.0,"sum":5168.0},"ip":"2.84.217.212","requests":{"total":2,"last":"2015-05-17T19:05:40.000Z","first":"2015-05-17T15:05:25.000Z"}}\r\n\r\n...\r\n\n'})}),"\n",(0,s.jsx)(t.p,{children:"We can now prepare the transformation to our data:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'curl -H "Content-Type: application/x-ndjson" -XPUT \'http://localhost:9200/_transform/nginx_log_transform\' \\\r\n--data-raw \'{\r\n   "source": {\r\n       "index": "nginx_log"\r\n   },\r\n   "pivot": {\r\n       "group_by": {\r\n           "ip": {\r\n               "terms": {\r\n                   "field": "remote_ip"\r\n               }\r\n           }\r\n       },\r\n       "aggregations": {\r\n           "bytes.avg": {\r\n               "avg": {\r\n                   "field": "bytes"\r\n               }\r\n           },\r\n           "bytes.sum": {\r\n               "sum": {\r\n                   "field": "bytes"\r\n               }\r\n           },\r\n           "requests.total": {\r\n               "value_count": {\r\n                   "field": "_id"\r\n               }\r\n           },\r\n           "requests.last": {\r\n               "scripted_metric": {\r\n                   "init_script": "state.timestamp = 0L; state.date = \'\\\'\'\'\\\'\'",\r\n                   "map_script": "def doc_date = doc[\'\\\'\'time\'\\\'\'].getValue().toInstant().toEpochMilli();if (doc_date > state.timestamp){state.timestamp = doc_date;state.date = doc[\'\\\'\'time\'\\\'\'].getValue();}",\r\n                   "combine_script": "return state",\r\n                   "reduce_script": "def date = \'\\\'\'\'\\\'\';def timestamp = 0L;for (s in states) {if (s.timestamp > (timestamp)){timestamp = s.timestamp; date = s.date;}} return date"\r\n               }\r\n           },\r\n           "requests.first": {\r\n               "scripted_metric": {\r\n                   "init_script": "state.timestamp = 1609455599000L; state.date = \'\\\'\'\'\\\'\'",\r\n                   "map_script": "def doc_date = doc[\'\\\'\'time\'\\\'\'].getValue().toInstant().toEpochMilli();if (doc_date < state.timestamp){state.timestamp = doc_date;state.date = doc[\'\\\'\'time\'\\\'\'].getValue();}",\r\n                   "combine_script": "return state",\r\n                   "reduce_script": "def date = \'\\\'\'\'\\\'\';def timestamp = 0L;for (s in states) {if (s.timestamp > (timestamp)){timestamp = s.timestamp; date = s.date;}} return date"\r\n               }\r\n           }\r\n       }\r\n   },\r\n   "description": "Transferred bytes to remote IP addresses",\r\n   "dest": {\r\n     "index": "nginx_log_transformed"\r\n     }\r\n}\'\n'})}),"\n",(0,s.jsxs)(t.p,{children:["To start the transformation and write it to a new index called ",(0,s.jsx)(t.code,{children:"nginx_log_transformed"})," run the following command:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"curl -XPOST 'http://localhost:9200/_transform/nginx_log_transform/_start'\n"})}),"\n",(0,s.jsx)(t.p,{children:"And we will end up with the following index:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Elasticsearch and Filebeats",src:n(857561).A+"",width:"1161",height:"565"})}),"\n",(0,s.jsx)(t.p,{children:"Showing the amount of remote IP's accessing our service. Clicking on a a bar in this histogram will list all the IP's and data that was transferred."}),"\n",(0,s.jsx)(t.h2,{id:"the-kibana-way",children:"The Kibana Way"}),"\n",(0,s.jsxs)(t.p,{children:["Access Kibana and open the Management tab. Here you can find the ",(0,s.jsx)(t.strong,{children:"Elastisearch / Transformation"})," interface that now holds all the information from our data transformation above."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Elasticsearch and Filebeats",src:n(260656).A+"",width:"1497",height:"829"})}),"\n",(0,s.jsxs)(t.p,{children:["By clicking on ",(0,s.jsx)(t.strong,{children:"Create Transformation"})," it is also possible to go through the entire steps inside the Kibana interface. Start by selecting the index you want to transform:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Elasticsearch and Filebeats",src:n(703503).A+"",width:"1278",height:"486"})}),"\n",(0,s.jsx)(t.p,{children:"And select your pivot and it's aggregations:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Elasticsearch and Filebeats",src:n(664486).A+"",width:"1263",height:"331"})}),"\n",(0,s.jsx)(t.p,{children:"And assign the index that you want your transformed data to be written to:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Elasticsearch and Filebeats",src:n(705725).A+"",width:"1243",height:"504"})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["In the next step I thought I could postpone the ",(0,s.jsx)(t.strong,{children:"Start"})," and edit the generated JSON instruction directly in Kibana - allowing me to add the Painless scripts we used above. But I could not find a way to do that :( So Painless only seems to be an option when you use CURL (?)."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Hit ",(0,s.jsx)(t.strong,{children:"Start"}),":"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Elasticsearch and Filebeats",src:n(484596).A+"",width:"1255",height:"282"})}),"\n",(0,s.jsx)(t.p,{children:"And wait for the process to finish:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Elasticsearch and Filebeats",src:n(110515).A+"",width:"1192",height:"387"})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},309378:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/Elasticsearch_Data_Transformations_01-9dcaa09796f0a81786ca50d63bd3331f.png"},857561:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/Elasticsearch_Data_Transformations_02-7459200eb9c5ab808bdbff5d56c4b02d.png"},260656:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/Elasticsearch_Data_Transformations_03-a19cd081ba1db6ab8b17252b680c60ed.png"},703503:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/Elasticsearch_Data_Transformations_04-66eb9c77510fca4c99af8f56f6e15d4c.png"},664486:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/Elasticsearch_Data_Transformations_05-cdcac8b5ed3047287cdeb6b98643537a.png"},705725:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/Elasticsearch_Data_Transformations_06-108110bab0c26d2ef2527a304fc7c6a5.png"},484596:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/Elasticsearch_Data_Transformations_07-d1be64a0b025d9b37edad8052d87a0de.png"},110515:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/Elasticsearch_Data_Transformations_08-8d931e41a05ba6fc1b3c4a3c2e9a4842.png"},269455:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/photo-456tdsfggd_67gfh6dgdf4_d-d595d6e8be80f457bb52ce2da71e06c1.jpg"},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(296540);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);