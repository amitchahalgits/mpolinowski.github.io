"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[38124],{89760:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>d});var a=r(785893),s=r(603905);const t={sidebar_position:4640,slug:"2023-02-24",title:"Tensorflow 2 - Neural Network Regression",authors:"mpolinowski",tags:["Python","Machine Learning","Tensorflow"],description:"Visualizing Models and Evaluating Model Performance"},o="Tensorflow Neural Network Regression",i={id:"IoT-and-Machine-Learning/ML/2023-02-24-tensorflow-neural-network-regression-evaluation/index",title:"Tensorflow 2 - Neural Network Regression",description:"Visualizing Models and Evaluating Model Performance",source:"@site/docs/IoT-and-Machine-Learning/ML/2023-02-24-tensorflow-neural-network-regression-evaluation/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2023-02-24-tensorflow-neural-network-regression-evaluation",slug:"/IoT-and-Machine-Learning/ML/2023-02-24-tensorflow-neural-network-regression-evaluation/2023-02-24",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-02-24-tensorflow-neural-network-regression-evaluation/2023-02-24",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2023-02-24-tensorflow-neural-network-regression-evaluation/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Tensorflow",permalink:"/docs/tags/tensorflow"}],version:"current",sidebarPosition:4640,frontMatter:{sidebar_position:4640,slug:"2023-02-24",title:"Tensorflow 2 - Neural Network Regression",authors:"mpolinowski",tags:["Python","Machine Learning","Tensorflow"],description:"Visualizing Models and Evaluating Model Performance"},sidebar:"tutorialSidebar",previous:{title:"Tensorflow 2 - Neural Network Regression",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-02-25-tensorflow-neural-network-regression-experiments/2023-02-25"},next:{title:"Tensorflow 2 - Neural Network Regression",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-02-23-tensorflow-neural-network-regression/2023-02-23"}},l={},d=[{value:"Model Evaluation",id:"model-evaluation",level:2},{value:"Create a new Dataset",id:"create-a-new-dataset",level:3},{value:"Train-Test Datasplit",id:"train-test-datasplit",level:3},{value:"Create the Model",id:"create-the-model",level:3},{value:"Visualize the Model",id:"visualize-the-model",level:4},{value:"Visualize Predictions",id:"visualize-predictions",level:4},{value:"Regression Evaluation Metrics",id:"regression-evaluation-metrics",level:3},{value:"Absolute Error",id:"absolute-error",level:4},{value:"Squared Error",id:"squared-error",level:4}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.ah)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Mong Kok, Hong Kong",src:r(56518).Z+"",width:"2830",height:"1272"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#tensorflow-neural-network-regression",children:"Tensorflow Neural Network Regression"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#model-evaluation",children:"Model Evaluation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#create-a-new-dataset",children:"Create a new Dataset"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#train-test-datasplit",children:"Train-Test Datasplit"})}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#create-the-model",children:"Create the Model"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#visualize-the-model",children:"Visualize the Model"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#visualize-predictions",children:"Visualize Predictions"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#regression-evaluation-metrics",children:"Regression Evaluation Metrics"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#absolute-error",children:"Absolute Error"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#squared-error",children:"Squared Error"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/mpolinowski/tf-2023",children:"Github Repository"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"See also:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Fun, fun, tensors: ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-19-tensorflow-introduction/2023-02-19",children:"Tensor Constants, Variables and Attributes"}),", ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-21-tensorflow-tensors-2/2023-02-21",children:"Tensor Indexing, Expanding and Manipulations"}),", ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-22-tensorflow-tensors-3/2023-02-22",children:"Matrix multiplications, Squeeze, One-hot and Numpy"})]}),"\n",(0,a.jsxs)(n.li,{children:["Tensorflow 2 - Neural Network Regression: ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-23-tensorflow-neural-network-regression/2023-02-23",children:"Building a Regression Model"}),", ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-24-tensorflow-neural-network-regression-evaluation/2023-02-24",children:"Model Evaluation"}),", ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-25-tensorflow-neural-network-regression-experiments/2023-02-25",children:"Model Optimization"}),", ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-26-tensorflow-neural-network-regression-real-dataset/2023-02-26",children:'Working with a "Real" Dataset'}),", ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-26-tensorflow-neural-network-regression-data-preprocessing/2023-02-26",children:"Feature Scaling"})]}),"\n",(0,a.jsxs)(n.li,{children:["Tensorflow 2 - Neural Network Classification: ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-27-tensorflow-neural-network-classification/2023-02-27",children:"Non-linear Data and Activation Functions"}),", ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-28-tensorflow-neural-network-classification-model-evaluation/2023-02-28",children:"Model Evaluation and Performance Improvement"}),", ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-02-tensorflow-neural-network-multi-classification/2023-03-02",children:"Multiclass Classification Problems"})]}),"\n",(0,a.jsxs)(n.li,{children:["Tensorflow 2 - Convolutional Neural Networks: ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-03-tensorflow-convolutional-neural-network-binary-classifications/2023-03-03",children:"Binary Image Classification"}),", ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-05-tensorflow-convolutional-neural-network-multiclass-classifications/2023-03-05",children:"Multiclass Image Classification"})]}),"\n",(0,a.jsxs)(n.li,{children:["Tensorflow 2 - Transfer Learning: ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-06-tensorflow-transfer-learning-feature-extraction/2023-03-06",children:"Feature Extraction"}),", ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-11-tensorflow-transfer-learning-fine-tuning/2023-03-11",children:"Fine-Tuning"}),", ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-16-tensorflow-transfer-learning-scaling/2023-03-16",children:"Scaling"})]}),"\n",(0,a.jsxs)(n.li,{children:["Tensorflow 2 - Unsupervised Learning: ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-24-tensorflow-unsupervised-learning-autoencoders/2023-03-24",children:"Autoencoder Feature Detection"}),", ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-26-tensorflow-unsupervised-learning-autoencoders-super-resolution/2023-03-26",children:"Autoencoder Super-Resolution"}),", ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-26-tensorflow-unsupervised-learning-generative-adversial-networks/2023-03-26",children:"Generative Adverserial Networks"})]}),"\n"]}),"\n",(0,a.jsx)(n.h1,{id:"tensorflow-neural-network-regression",children:"Tensorflow Neural Network Regression"}),"\n",(0,a.jsx)(n.h2,{id:"model-evaluation",children:"Model Evaluation"}),"\n",(0,a.jsx)(n.h3,{id:"create-a-new-dataset",children:"Create a new Dataset"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# create a new feature matrix\nX = tf.range(-100, 100, 4)\nX\n# <tf.Tensor: shape=(50,), dtype=int32, numpy=\n# array([-100,  -96,  -92,  -88,  -84,  -80,  -76,  -72,  -68,  -64,  -60,\n#         -56,  -52,  -48,  -44,  -40,  -36,  -32,  -28,  -24,  -20,  -16,\n#         -12,   -8,   -4,    0,    4,    8,   12,   16,   20,   24,   28,\n#          32,   36,   40,   44,   48,   52,   56,   60,   64,   68,   72,\n#          76,   80,   84,   88,   92,   96], dtype=int32)>\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# create labels for those features that follow a pattern\ny = X + 10\ny\n# <tf.Tensor: shape=(50,), dtype=int32, numpy=\n# array([-90, -86, -82, -78, -74, -70, -66, -62, -58, -54, -50, -46, -42,\n#        -38, -34, -30, -26, -22, -18, -14, -10,  -6,  -2,   2,   6,  10,\n#         14,  18,  22,  26,  30,  34,  38,  42,  46,  50,  54,  58,  62,\n#         66,  70,  74,  78,  82,  86,  90,  94,  98, 102, 106], dtype=int32)>\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# visualize the data\nplt.scatter(X,y)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Tensorflow Neural Network Regression",src:r(173108).Z+"",width:"554",height:"413"})}),"\n",(0,a.jsx)(n.h3,{id:"train-test-datasplit",children:"Train-Test Datasplit"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"len(X)\n# 50 => 80:20 split\nX_train = X[:40] # take first 80% of features\nX_test = X[40:] # take last 20% of features\ny_train = y[:40] # take first 80% of lables\ny_test = y[40:] # take last 20% of lables\n\nlen(X_train), len(X_test), len(y_train), len(y_test)\n# (40, 10, 40, 10)\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# visualize datasets\nplt.figure(figsize=(10,7))\nplt.scatter(X_train, y_train, color="blue", label="Training Data")\nplt.scatter(X_test, y_test, color="hotpink", label="Testing Data")\nplt.legend()\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Tensorflow Neural Network Regression",src:r(563547).Z+"",width:"833",height:"582"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# to get around biases it is better to shuffle your data\n# first create random indices to be able to shuffle\n# both features and lables by the same order\nindices = tf.range(start=0, limit=tf.shape(X)[0], dtype=tf.int32)\nshuffled_indices = tf.random.shuffle(indices)\n\n# use random indices to shuffle both tensors\nX_random = tf.gather(X, shuffled_indices)\ny_random = tf.gather(y, shuffled_indices)\n\n# re-split\nX_train = X_random[:40] # take first 80% of features\nX_test = X_random[40:] # take last 20% of features\ny_train = y_random[:40] # take first 80% of lables\ny_test = y_random[40:] # take last 20% of lables\n\n# visualize datasets\nplt.figure(figsize=(10,7))\nplt.scatter(X_train, y_train, color="blue", label="Training Data")\nplt.scatter(X_test, y_test, color="hotpink", label="Testing Data")\nplt.legend()\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Tensorflow Neural Network Regression",src:r(184814).Z+"",width:"833",height:"582"})}),"\n",(0,a.jsx)(n.h3,{id:"create-the-model",children:"Create the Model"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'tf.random.set_seed(42)\n\nmodel = tf.keras.Sequential([\n    layers.Dense(1, input_shape=[1], name="input_layer"),\n    layers.Dense(128, activation="relu", name="dense_layer1"),\n    layers.Dropout(.25, name="dropout"),\n    layers.Dense(64, activation="relu", name="dense_layer2"),\n    layers.Dense(1, name="output_layer")\n], name="my_model")\n    # input and output shape is 1 - we input 1 value and create a 1 value prediction\n\nmodel.compile(\n    loss=tf.keras.losses.mae,\n    optimizer=optimizers.Adam(learning_rate=0.01),\n    metrics="mae")\n'})}),"\n",(0,a.jsx)(n.h4,{id:"visualize-the-model",children:"Visualize the Model"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'model.summary()\n# Model: "my_model"\n# _________________________________________________________________\n#  Layer (type)                Output Shape              Param #   \n# =================================================================\n#  input_layer (Dense)         (None, 1)                 2         \n                                                                 \n#  dense_layer1 (Dense)        (None, 128)               256       \n                                                                 \n#  dropout (Dropout)           (None, 128)               0         \n                                                                 \n#  dense_layer2 (Dense)        (None, 64)                8256      \n                                                                 \n#  output_layer (Dense)        (None, 1)                 65        \n                                                                 \n# =================================================================\n# Total params: 8,579\n# Trainable params: 8,579\n# Non-trainable params: 0\n# _________________________________________________________________\n\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# plot the model\nfrom tensorflow.keras.utils import plot_model\n\nplot_model(model=model, show_shapes=True, show_layer_names=True, expand_nested=False)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Tensorflow Neural Network Regression",src:r(536794).Z+"",width:"413",height:"627"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=99)\n# Epoch 99/99\n# 2/2 [==============================] - 0s 25ms/step - loss: 3.1461 - mae: 3.1461 - val_loss: 3.8707 - val_mae: 3.8707\n"})}),"\n",(0,a.jsx)(n.h4,{id:"visualize-predictions",children:"Visualize Predictions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# make predictions\ny_pred = model.predict(X_test)\n\n# predicted values & true values\ntf.constant(y_pred), y_test\n# (<tf.Tensor: shape=(10, 1), dtype=float32, numpy=\n#  array([[-44.232136],\n#         [-88.13068 ],\n#         [ 71.16495 ],\n#         [-80.16996 ],\n#         [-23.712166],\n#         [ 63.83241 ],\n#         [-52.232437],\n#         [ 67.49867 ],\n#         [ 78.4975  ],\n#         [ 12.77635 ]], dtype=float32)>,\n#  <tf.Tensor: shape=(10,), dtype=int32, numpy=array([-42, -86,  78, -78, -22,  70, -50,  74,  86,  14], dtype=int32)>)\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# plot train/test and compare predictions to ground truth\ndef plot_predictions(\n    train_data=X_train,\n    train_labels=y_train,\n    test_data=X_test,\n    test_labels=y_test,\n    predictions=y_pred):\n    \n    plt.figure(figsize=(10,7))\n    plt.scatter(train_data, train_labels, color="green", label="training data")\n    plt.scatter(test_data, test_labels, color="red", label="testing data")\n    plt.scatter(test_data, predictions, color="blue", label="predictions")\n    plt.legend()\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# blue dots should line up with red dots for a perfect prediction\nplot_predictions(X_train, y_train, X_test, y_test)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Tensorflow Neural Network Regression",src:r(208828).Z+"",width:"833",height:"582"})}),"\n",(0,a.jsx)(n.h3,{id:"regression-evaluation-metrics",children:"Regression Evaluation Metrics"}),"\n",(0,a.jsx)(n.p,{children:"Regression Metrics:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"tf.keras.losses.MAE()"}),", ",(0,a.jsx)(n.code,{children:"tf.metrics.mean_absolute_error()"})," - Mean absolute error (absolute value my predictions - on average - will be off)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"tf.keras.losses.MSE()"}),", ",(0,a.jsx)(n.code,{children:"tf.metrics.mean_suared_error()"})," - Mean square error (squared average error)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"tf.keras.losses.Huber()"})," - Combination of MAE & MSE (less sensitive to outliers)"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# get loss & metrics value in test mode\nmodel.evaluate(X_test, y_test)\n# since lossfunction & metrics are set to MAE we get the absolute error:\n# [3.8707497119903564, 3.8707497119903564]\n"})}),"\n",(0,a.jsx)(n.h4,{id:"absolute-error",children:"Absolute Error"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# to compare y_test with y_pred we must make sure they have the same shape\ny_test.shape, y_pred.shape\n# (TensorShape([10]), (10, 1))\n\n# removing extra dimension from prediction array\ny_pred_squeezed = tf.squeeze(y_pred)\ny_pred_squeezed.shape\n# TensorShape([10])\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# calculate the MAE\nmae = tf.metrics.mean_absolute_error(y_true=y_test, y_pred=y_pred_squeezed)\n\n# this returns the same value for the absolute error as the eval method above\nmae\n# <tf.Tensor: shape=(), dtype=float32, numpy=3.8707497>\n"})}),"\n",(0,a.jsx)(n.h4,{id:"squared-error",children:"Squared Error"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# calculate the MAE\nmse = tf.metrics.mean_squared_error(y_true=y_test, y_pred=y_pred_squeezed)\nmse\n# <tf.Tensor: shape=(), dtype=float32, numpy=20.695545>\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# function to calculate both errors\ndef squared_and_absolute_error(y_true, y_pred):\n    mae = tf.metrics.mean_absolute_error(y_true, y_pred)\n    mse = tf.metrics.mean_squared_error(y_true, y_pred)\n    \n    return mae, mse\n\nsquared_and_absolute_error(y_true=y_test, y_pred=y_pred_squeezed)\n# (<tf.Tensor: shape=(), dtype=float32, numpy=3.8707497>,\n#  <tf.Tensor: shape=(), dtype=float32, numpy=20.695545>)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.ah)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>d});var a=r(667294);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function t(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?t(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,a,s=function(e,n){if(null==e)return{};var r,a,s={},t=Object.keys(e);for(a=0;a<t.length;a++)r=t[a],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(a=0;a<t.length;a++)r=t[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=a.createContext({}),d=function(e){var n=a.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var r=e.components,s=e.mdxType,t=e.originalType,l=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),u=d(r),_=s,p=u["".concat(l,".").concat(_)]||u[_]||c[_]||t;return r?a.createElement(p,o(o({ref:n},h),{},{components:r})):a.createElement(p,o({ref:n},h))}));h.displayName="MDXCreateElement"},173108:(e,n,r)=>{r.d(n,{Z:()=>a});const a=r.p+"assets/images/01a_Tensorflow_Regressions_02-94534e118d6ae49ccc0c705932af6947.png"},563547:(e,n,r)=>{r.d(n,{Z:()=>a});const a=r.p+"assets/images/01a_Tensorflow_Regressions_03-33a235d4c2c76dc5307d93d10c4b9255.png"},184814:(e,n,r)=>{r.d(n,{Z:()=>a});const a=r.p+"assets/images/01a_Tensorflow_Regressions_04-3a5390a8257f33a3f83c545c21272238.png"},536794:(e,n,r)=>{r.d(n,{Z:()=>a});const a=r.p+"assets/images/01a_Tensorflow_Regressions_05-e625b7373beb8791969d9f256d691788.png"},208828:(e,n,r)=>{r.d(n,{Z:()=>a});const a=r.p+"assets/images/01a_Tensorflow_Regressions_06-2e2245abd3e5fe338209aa340969cc6a.png"},56518:(e,n,r)=>{r.d(n,{Z:()=>a});const a=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-f80e63ee872dae25129198058ac93b4e.jpg"}}]);