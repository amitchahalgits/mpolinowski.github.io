"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[80863],{204871:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var t=a(785893),r=a(603905);const o={sidebar_position:6030,slug:"2022-05-16",title:"Hashicorp Nomad Dojo",authors:"mpolinowski",tags:["Nomad","LINUX"]},s=void 0,i={id:"DevOps/Hashicorp/2022-05-16-hashicorp-dojo-nomad-starter/index",title:"Hashicorp Nomad Dojo",description:"Shen Zhen, China",source:"@site/docs/DevOps/Hashicorp/2022-05-16-hashicorp-dojo-nomad-starter/index.md",sourceDirName:"DevOps/Hashicorp/2022-05-16-hashicorp-dojo-nomad-starter",slug:"/DevOps/Hashicorp/2022-05-16-hashicorp-dojo-nomad-starter/2022-05-16",permalink:"/docs/DevOps/Hashicorp/2022-05-16-hashicorp-dojo-nomad-starter/2022-05-16",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-05-16-hashicorp-dojo-nomad-starter/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:6030,frontMatter:{sidebar_position:6030,slug:"2022-05-16",title:"Hashicorp Nomad Dojo",authors:"mpolinowski",tags:["Nomad","LINUX"]},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Nomad Deployment",permalink:"/docs/DevOps/Hashicorp/2022-05-17-hashicorp-dojo-nomad-deployment/2022-05-17"},next:{title:"Hashicorp Nomad Refresher",permalink:"/docs/DevOps/Hashicorp/2022-05-15-hashicorp-nomad-refresher/2022-05-15"}},d={},l=[{value:"Setup",id:"setup",level:2},{value:"Run an Agent in Dev Mode",id:"run-an-agent-in-dev-mode",level:3},{value:"Deploying a Job",id:"deploying-a-job",level:2},{value:"Job Specification",id:"job-specification",level:3},{value:"Plan and Run the Job",id:"plan-and-run-the-job",level:3},{value:"Building a Multi-Node Cluster",id:"building-a-multi-node-cluster",level:2},{value:"Configure the Server",id:"configure-the-server",level:3},{value:"Start the Server",id:"start-the-server",level:4},{value:"Configure the Client",id:"configure-the-client",level:3},{value:"Download",id:"download",level:4},{value:"Installation",id:"installation",level:4},{value:"Configuration",id:"configuration",level:4},{value:"Start the Client",id:"start-the-client",level:4},{value:"Use the Nomad UI to Check on your Cluster",id:"use-the-nomad-ui-to-check-on-your-cluster",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.ah)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Shen Zhen, China",src:a(70821).Z+"",width:"2230",height:"839"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#setup",children:"Setup"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#run-an-agent-in-dev-mode",children:"Run an Agent in Dev Mode"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#deploying-a-job",children:"Deploying a Job"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#job-specification",children:"Job Specification"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#plan-and-run-the-job",children:"Plan and Run the Job"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#building-a-multi-node-cluster",children:"Building a Multi-Node Cluster"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#configure-the-server",children:"Configure the Server"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#start-the-server",children:"Start the Server"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#configure-the-client",children:"Configure the Client"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#download",children:"Download"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#installation",children:"Installation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#configuration",children:"Configuration"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#start-the-client",children:"Start the Client"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#use-the-nomad-ui-to-check-on-your-cluster",children:"Use the Nomad UI to Check on your Cluster"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["See for ",(0,t.jsx)(n.a,{href:"/docs/DevOps/Hashicorp/2022-05-15-hashicorp-nomad-refresher/2022-05-15",children:"Hashicorp Nomad Refresher"})," for the initial steps and the Hashicorp Nomad ",(0,t.jsx)(n.a,{href:"https://github.com/thedojoseries/nomad",children:"Dojo"})," for the following"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"run-an-agent-in-dev-mode",children:"Run an Agent in Dev Mode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nomad --version\nNomad v1.3.1 (2b054e38e91af964d1235faa98c286ca3f527e56)\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nomad agent -dev -bind 0.0.0.0 -log-level INFO\n"})}),"\n",(0,t.jsx)(n.h2,{id:"deploying-a-job",children:"Deploying a Job"}),"\n",(0,t.jsx)(n.h3,{id:"job-specification",children:"Job Specification"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.nomadproject.io/docs/job-specification",children:"Create a Jobfile"})," ",(0,t.jsx)(n.code,{children:"frontend.nomad"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Name your job and assign it to a datacenter. Since we did not define a datacenter before the node is assigned to the default value of ",(0,t.jsx)(n.code,{children:"dc1"}),". You can verify this by running ",(0,t.jsx)(n.code,{children:"nomad node status"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Set the type to be a ",(0,t.jsx)(n.code,{children:"service"})," - A ",(0,t.jsx)(n.a,{href:"https://www.nomadproject.io/docs/schedulers",children:"service is a long-lived process"})," that should never go down."]}),"\n",(0,t.jsxs)(n.li,{children:["Set the ",(0,t.jsx)(n.code,{children:"group"})," your service belongs to - If you're coming from the Kubernetes world, think of group as a pod (where you can run multiple containers together under the same network stack)."]}),"\n",(0,t.jsxs)(n.li,{children:["Inside the group stanza you can set a ",(0,t.jsx)(n.code,{children:"count"})," that defines the number of instances of the service that will be run by the group. Set it to ",(0,t.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Finally, the ",(0,t.jsx)(n.code,{children:"task"})," is section is used to define the ",(0,t.jsx)(n.code,{children:"driver"})," (how you want to deploy your app - we choose ",(0,t.jsx)(n.a,{href:"https://www.nomadproject.io/docs/drivers/docker",children:"docker"}),")."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"frontend.nomad"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'job "frontend" {\n  datacenters = ["dc1"] \n  type = "service"\n\n  group "frontend" {\n    count = 1\n\n    task "frontend" {\n        driver = "docker"\n        config {\n          image = "thedojoseries/frontend:latest"\n        }\n      }\n   }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"plan-and-run-the-job",children:"Plan and Run the Job"}),"\n",(0,t.jsx)(n.p,{children:"To check if you're able to deploy this job, you can use the command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'nomad plan frontend.nomad\n\n+ Job: "frontend"\n+ Task Group: "frontend" (1 create)\n  + Task: "frontend" (forces create)\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nJob Modify Index: 0\nTo submit the job with version verification run:\n\nnomad job run -check-index 0 frontend.nomad\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now that the job dry-run was successful we can run the plan with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'nomad job run -check-index 0 frontend.nomad\n\n==> 2022-06-04T12:51:28+02:00: Monitoring evaluation "0fb28cb9"\n    2022-06-04T12:51:28+02:00: Evaluation triggered by job "frontend"\n    2022-06-04T12:51:28+02:00: Evaluation within deployment: "d6acae43"\n    2022-06-04T12:51:28+02:00: Allocation "7d403280" created: node "9970f13f", group "frontend"\n    2022-06-04T12:51:28+02:00: Evaluation status changed: "pending" -> "complete"\n==> 2022-06-04T12:51:28+02:00: Evaluation "0fb28cb9" finished with status "complete"\n==> 2022-06-04T12:51:28+02:00: Monitoring deployment "d6acae43"\n  \u2713 Deployment "d6acae43" successful\n    \n    2022-06-04T12:51:55+02:00\n    ID          = d6acae43\n    Job ID      = frontend\n    Job Version = 0\n    Status      = successful\n    Description = Deployment completed successfully\n    \n    Deployed\n    Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\n    frontend    1        1       1        0          2022-06-04T13:01:54+02:00\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Verify with ",(0,t.jsx)(n.code,{children:"nomad status frontend"})," that the service is up-and-running."]}),"\n",(0,t.jsx)(n.h2,{id:"building-a-multi-node-cluster",children:"Building a Multi-Node Cluster"}),"\n",(0,t.jsxs)(n.p,{children:["Make sure that the ",(0,t.jsx)(n.a,{href:"https://www.nomadproject.io/docs/install/production/requirements#ports-used",children:"following ports are open"})," on your Nomad master server - I am not going to open the HTTP port since I will use the Nomad UI through an SSH tunnel and do not plan on using the HTTP REST interface Nomad supplies (the Nomad clients will connect using the RPC interface instead):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"ufw allow 4647,4648/tcp\nufw reload\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configure-the-server",children:"Configure the Server"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir -p /opt/nomad/data\nnano /etc/nomad.d/server.hcl\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'## https://www.nomadproject.io/docs/agent/configuration\nname = "nomad_master"\ndatacenter = "instaryun"\ndata_dir = "/opt/nomad/data"\nbind_addr = "0.0.0.0"\n\nadvertise {\n  http = "0.0.0.0"\n  rpc  = "my.server.com"\n  serf = "my.server.com"\n}\n\nports {\n  http  = 4646\n  rpc  = 4647\n  serf = 4648\n}\n\nserver {\n  enabled = true\n  bootstrap_expect = 1\n}\n\n## https://www.nomadproject.io/docs/agent/configuration/index.html#log_level\n## [WARN|INFO|DEBUG]\nlog_level = "DEBUG"\nlog_rotate_duration = "30d"\nlog_rotate_max_files = 12\n'})}),"\n",(0,t.jsx)(n.h4,{id:"start-the-server",children:"Start the Server"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nomad agent -config /etc/nomad.d/server.hcl\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nomad server members\n\nName                 Address        Port  Status  Leader  Build  Datacenter\nnomad_master.global  my.server.com  4647  alive   true   1.3.1  instaryun\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configure-the-client",children:"Configure the Client"}),"\n",(0,t.jsxs)(n.p,{children:["Setting up the ",(0,t.jsx)(n.a,{href:"/docs/DevOps/Hashicorp/2021-10-10--hashicorp-nomad-in-production/2021-10-10",children:"Client Server for Production"}),":"]}),"\n",(0,t.jsx)(n.h4,{id:"download",children:"Download"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"wget https://releases.hashicorp.com/nomad/1.3.1/nomad_1.3.1_linux_amd64.zip\nwget https://releases.hashicorp.com/nomad/1.3.1/nomad_1.3.1_SHA256SUMS\n\ncat nomad_1.3.1_SHA256SUMS\nd16dcea9fdfab3846e749307e117e33a07f0d8678cf28cc088637055e34e5b37  nomad_1.3.1_linux_amd64.zip\n\nsha256sum nomad_1.3.1_linux_amd64.zip\nd16dcea9fdfab3846e749307e117e33a07f0d8678cf28cc088637055e34e5b37  nomad_1.3.1_linux_amd64.zip\n"})}),"\n",(0,t.jsx)(n.h4,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"unzip ./nomad_1.3.1_linux_amd64.zip\nrm ./nomad_1.3.1_linux_amd64.zip && rm ./nomad_1.3.1_SHA256SUMS\nmv nomad /usr/bin/nomad\n\nnomad -v\nNomad v1.3.1 (2b054e38e91af964d1235faa98c286ca3f527e56)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"ufw allow 4647,4648/tcp\nufw reload\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nomad -autocomplete-install\ncomplete -C /usr/bin/nomad nomad\nuseradd --system --home /etc/nomad.d --shell /bin/false nomad\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir /etc/nomad.d\nmkdir -p /opt/nomad/data\nnano /etc/nomad.d/client.hcl\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'## https://www.nomadproject.io/docs/agent/configuration\nname = "my_nomad_client"\ndatacenter = "instaryun"\ndata_dir = "/opt/nomad/data"\nbind_addr = "0.0.0.0"\n\nadvertise {\n  http = "0.0.0.0"\n  rpc  = "my.server.com"\n  serf = "my.server.com"\n}\n\nports {\n  http = 4646\n  rpc  = 4647\n  serf = 4648\n}\n\nclient {\n  enabled = true\n  servers = ["my.nomad.master.com:4647"]\n}\n\nserver {\n  enabled = false\n}\n\n## https://www.nomadproject.io/docs/agent/configuration/index.html#log_level\n## [WARN|INFO|DEBUG]\nlog_level = "DEBUG"\nlog_rotate_duration = "30d"\nlog_rotate_max_files = 12\n'})}),"\n",(0,t.jsx)(n.h4,{id:"start-the-client",children:"Start the Client"}),"\n",(0,t.jsx)(n.p,{children:"For now I am going to run the client manually:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nomad agent -config /etc/nomad.d/client.hcl\n"})}),"\n",(0,t.jsx)(n.p,{children:"Verify that it is up in another terminal:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nomad node status\nID        DC         Name           Class   Drain  Eligibility  Status\n005f708b  instaryun  my_nomad_client  <none>  false  eligible     ready\n"})}),"\n",(0,t.jsx)(n.p,{children:"Later I will make use of SystemD to run Nomad automatically:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nano /etc/systemd/system/nomad.service\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"[Unit]\nDescription=Nomad\nDocumentation=https://www.nomadproject.io/docs/\nWants=network-online.target\nAfter=network-online.target\n\n# When using Nomad with Consul it is not necessary to start Consul first. These\n# lines start Consul before Nomad as an optimization to avoid Nomad logging\n# that Consul is unavailable at startup.\n#Wants=consul.service\n#After=consul.service\n\n[Service]\n\n# Nomad server should be run as the nomad user. Nomad clients\n# should be run as root\nUser=nomad\nGroup=nomad\n\nExecReload=/bin/kill -HUP $MAINPID\nExecStart=/usr/bin/nomad agent -config /etc/nomad.d\nKillMode=process\nKillSignal=SIGINT\nLimitNOFILE=65536\nLimitNPROC=infinity\nRestart=on-failure\nRestartSec=2\n\n## Configure unit start rate limiting. Units which are started more than\n## *burst* times within an *interval* time span are not permitted to start any\n## more. Use `StartLimitIntervalSec` or `StartLimitInterval` (depending on\n## systemd version) to configure the checking interval and `StartLimitBurst`\n## to configure how many starts per interval are allowed. The values in the\n## commented lines are defaults.\n\n# StartLimitBurst = 5\n\n## StartLimitIntervalSec is used for systemd versions >= 230\n# StartLimitIntervalSec = 10s\n\n## StartLimitInterval is used for systemd versions < 230\n# StartLimitInterval = 10s\n\nTasksMax=infinity\nOOMScoreAdjust=-1000\n\n[Install]\nWantedBy=multi-user.target\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Make sure that the Nomad user has access to the ",(0,t.jsx)(n.code,{children:"data"})," directory:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"chown -R nomad:nomad /opt/nomad/*\n"})}),"\n",(0,t.jsx)(n.p,{children:"And start the service:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"systemctl enable nomad.service\nservice nomad start && service nomad status\n"})}),"\n",(0,t.jsx)(n.h3,{id:"use-the-nomad-ui-to-check-on-your-cluster",children:"Use the Nomad UI to Check on your Cluster"}),"\n",(0,t.jsxs)(n.p,{children:["If you opened the HTTP Port ",(0,t.jsx)(n.code,{children:"4646"})," on your Nomad master server you can now access the Nomad web interface using your browser. Since I kept this port closed I will ",(0,t.jsx)(n.a,{href:"/docs/DevOps/Hashicorp/2022-05-15-hashicorp-nomad-refresher/2022-05-15/#forward-the-service-through-ssh-optional",children:"tunnel it through to my local machine using SSH"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"ssh \u2013L 8080:localhost:4646 root@nomad.master.server.com -p ssh.port\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Which allows me to access the UI via ",(0,t.jsx)(n.code,{children:"http://localhost:8080"})," on my local machine - and lo and behold the client is listed:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Hashicorp Nomad UI",src:a(430758).Z+"",width:"1235",height:"646"})})]})}function h(e={}){const{wrapper:n}={...(0,r.ah)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},603905:(e,n,a)=>{a.d(n,{ah:()=>l});var t=a(667294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=t.createContext({}),l=function(e){var n=t.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),u=l(a),m=r,p=u["".concat(d,".").concat(m)]||u[m]||c[m]||o;return a?t.createElement(p,s(s({ref:n},h),{},{components:a})):t.createElement(p,s({ref:n},h))}));h.displayName="MDXCreateElement"},430758:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/Hashicorp_Nomad_UI_01-c0ae3ffbe8f3559ba53e3b348116f30d.png"},70821:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"}}]);