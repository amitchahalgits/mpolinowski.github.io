"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[78550],{37019:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var o=r(785893),i=r(603905);const t={sidebar_position:6080,slug:"2021-04-07",title:"Loki - Promtail & Grafana for System Logs.",authors:"mpolinowski",tags:["LINUX","Docker"]},s=void 0,a={id:"DevOps/Provisioning/2021-04-07--loki-prometheus-grafana/index",title:"Loki - Promtail & Grafana for System Logs.",description:"Shenzhen, China",source:"@site/docs/DevOps/Provisioning/2021-04-07--loki-prometheus-grafana/index.md",sourceDirName:"DevOps/Provisioning/2021-04-07--loki-prometheus-grafana",slug:"/DevOps/Provisioning/2021-04-07--loki-prometheus-grafana/2021-04-07",permalink:"/docs/DevOps/Provisioning/2021-04-07--loki-prometheus-grafana/2021-04-07",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Provisioning/2021-04-07--loki-prometheus-grafana/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Docker",permalink:"/docs/tags/docker"}],version:"current",sidebarPosition:6080,frontMatter:{sidebar_position:6080,slug:"2021-04-07",title:"Loki - Promtail & Grafana for System Logs.",authors:"mpolinowski",tags:["LINUX","Docker"]},sidebar:"tutorialSidebar",previous:{title:"PostgreSQL 14 Database Refresher :: Introduction Part I",permalink:"/docs/DevOps/Provisioning/2021-09-13--postgres-refresher-part-i/2021-09-13"},next:{title:"ownCloud Infinite Scale Stack",permalink:"/docs/DevOps/Provisioning/2021-01-27-owncloud-ocis/2021-01-27"}},l={},c=[{value:"Installation with Docker",id:"installation-with-docker",level:2},{value:"Dry-run with Docker Compose",id:"dry-run-with-docker-compose",level:3},{value:"Configuring the Services",id:"configuring-the-services",level:3},{value:"Promtail",id:"promtail",level:4},{value:"Loki",id:"loki",level:4},{value:"Docker Compose",id:"docker-compose",level:4},{value:"Starting the Loki Environment",id:"starting-the-loki-environment",level:2},{value:"Configure Data Source",id:"configure-data-source",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.ah)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Shenzhen, China",src:r(55740).Z+"",width:"1500",height:"467"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#installation-with-docker",children:"Installation with Docker"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#dry-run-with-docker-compose",children:"Dry-run with Docker Compose"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#configuring-the-services",children:"Configuring the Services"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#promtail",children:"Promtail"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#loki",children:"Loki"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#docker-compose",children:"Docker Compose"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#starting-the-loki-environment",children:"Starting the Loki Environment"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#configure-data-source",children:"Configure Data Source"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Loki is a horizontally-scalable, highly-available, multi-tenant log aggregation system inspired by Prometheus. It is designed to be very cost effective and easy to operate. It does not index the contents of the logs, but rather a set of labels for each log stream."}),"\n",(0,o.jsx)(n.h2,{id:"installation-with-docker",children:"Installation with Docker"}),"\n",(0,o.jsx)(n.p,{children:"You can install Loki and Promtail with Docker or Docker Compose if you are evaluating, testing, or developing Loki."}),"\n",(0,o.jsx)(n.h3,{id:"dry-run-with-docker-compose",children:"Dry-run with Docker Compose"}),"\n",(0,o.jsx)(n.p,{children:"Run the following commands in your command line. They work for Windows or Linux systems."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"wget https://raw.githubusercontent.com/grafana/loki/v2.3.0/production/docker-compose.yaml -O docker-compose.yaml\r\n\r\ndocker-compose -f docker-compose.yml up\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"nano /opt/loki/docker-compose.yml"})}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yml",children:'version: "3"\r\n\r\nnetworks:\r\n  loki:\r\n\r\nservices:\r\n  loki:\r\n    image: grafana/loki:2.3.0\r\n    ports:\r\n      - "3100:3100"\r\n    command: -config.file=/etc/loki/local-config.yaml\r\n    networks:\r\n      - loki\r\n\r\n  promtail:\r\n    image: grafana/promtail:2.3.0\r\n    volumes:\r\n      - /var/log:/var/log\r\n    command: -config.file=/etc/promtail/config.yml\r\n    networks:\r\n      - loki\r\n\r\n  grafana:\r\n    image: grafana/grafana:latest\r\n    ports:\r\n      - "3000:3000"\r\n    networks:\r\n      - loki\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Navigate to ",(0,o.jsx)(n.code,{children:"http://localhost:3100/metrics"})," to view the metrics and ",(0,o.jsx)(n.code,{children:"http://localhost:3100/ready"})," readiness of the ",(0,o.jsx)(n.strong,{children:"Loki"})," database."]}),"\n",(0,o.jsx)(n.p,{children:"The Docker-Compose file looks like:"}),"\n",(0,o.jsxs)(n.p,{children:["Now visit the server IP on Port ",(0,o.jsx)(n.code,{children:"3000"}),". Login with ",(0,o.jsx)(n.code,{children:"admin"}),"/",(0,o.jsx)(n.code,{children:"admin"}),", e.g.:"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"http://192.168.2.111:3000/login",children:"http://192.168.2.111:3000/login"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Loki - Grafana and Prometheus",src:r(183967).Z+"",width:"1071",height:"611"})}),"\n",(0,o.jsxs)(n.p,{children:["Ok - this worked - shut everything down with ",(0,o.jsx)(n.code,{children:"docker-compose down"})," and going to the next step:"]}),"\n",(0,o.jsx)(n.h3,{id:"configuring-the-services",children:"Configuring the Services"}),"\n",(0,o.jsx)(n.h4,{id:"promtail",children:"Promtail"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Promtail"})," - similar to ",(0,o.jsx)(n.strong,{children:"Elastic Logstash"})," - ingests log files for us and forwards them to our database ",(0,o.jsx)(n.strong,{children:"Loki"}),". We need to configure it to keep an eye on a specific log or a log directory. The ",(0,o.jsx)(n.a,{href:"https://grafana.com/docs/loki/latest/clients/promtail/configuration/",children:"official config example"})," is:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yml",children:"server:\r\n  http_listen_port: 9080\r\n  grpc_listen_port: 0\r\n\r\npositions:\r\n  filename: /tmp/positions.yaml\r\n\r\nclients:\r\n  - url: http://localhost:3100/loki/api/v1/push\r\n\r\nscrape_configs:\r\n- job_name: system\r\n  static_configs:\r\n  - targets:\r\n      - localhost\r\n    labels:\r\n      job: varlogs\r\n      __path__: /var/log/*log\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Which would keep an eye on our Linux system log directory. Since we are running the service inside a Docker container, we have to point Promtail to an internal directory and modify our ",(0,o.jsx)(n.code,{children:"docker-compose"})," file to mount in the log file from our host system. The resulting configuration file looks like:"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"nano /opt/loki/config/promtail-config.yml"})}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yml",children:"server:\r\n  http_listen_port: 9080\r\n  grpc_listen_port: 0\r\n\r\npositions:\r\n  filename: /tmp/positions.yaml\r\n\r\nclients:\r\n  - url: http://loki:3100/loki/api/v1/push\r\n\r\nscrape_configs:\r\n- job_name: nginx_log\r\n  static_configs:\r\n  - targets:\r\n      - loki\r\n    labels:\r\n      job: varlogs\r\n      __path__: /opt/nginx_access.log\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["The NGINX logfile is located in ",(0,o.jsx)(n.code,{children:"/opt/loki/logs/nginx_access.log"})," on my host and will be mounted to ",(0,o.jsx)(n.code,{children:"/opt/nginx_access.log"})," inside the ",(0,o.jsx)(n.strong,{children:"Promtail"})," container by the Docker-Compose file below."]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["All the demo files I found online usually use the ",(0,o.jsx)(n.code,{children:"localhost:3100"})," URL - make sure to change this to ",(0,o.jsx)(n.code,{children:"loki:3100"}),". We are running our setup in an virtual environment where docker provides a DNS service that allows us to resolve container names to their IP addresses inside the docker network."]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"loki",children:"Loki"}),"\n",(0,o.jsxs)(n.p,{children:["For ",(0,o.jsx)(n.strong,{children:"Loki"})," I am going to use the default config you can ",(0,o.jsx)(n.a,{href:"https://raw.githubusercontent.com/grafana/loki/v2.2.1/cmd/loki/loki-local-config.yaml",children:"download from Github"}),":"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["In the downloaded version there was a path ",(0,o.jsx)(n.code,{children:"/tmp/loki/rules-temp"})," that I had to replace with ",(0,o.jsx)(n.code,{children:"/loki/rules-temp"})," for this config to work."]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"nano /opt/loki/config/loki-config.yml"})}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yml",children:"auth_enabled: false\r\n\r\nserver:\r\n  http_listen_port: 3100\r\n  grpc_listen_port: 9096\r\n\r\ningester:\r\n  wal:\r\n    enabled: true\r\n    dir: /tmp/wal\r\n  lifecycler:\r\n    address: 127.0.0.1\r\n    ring:\r\n      kvstore:\r\n        store: inmemory\r\n      replication_factor: 1\r\n    final_sleep: 0s\r\n  chunk_idle_period: 1h       # Any chunk not receiving new logs in this time will be flushed\r\n  max_chunk_age: 1h           # All chunks will be flushed when they hit this age, default is 1h\r\n  chunk_target_size: 1048576  # Loki will attempt to build chunks up to 1.5MB, flushing first if chunk_idle_period or max_chunk_age is reached first\r\n  chunk_retain_period: 30s    # Must be greater than index read cache TTL if using an index cache (Default index read cache TTL is 5m)\r\n  max_transfer_retries: 0     # Chunk transfers disabled\r\n\r\nschema_config:\r\n  configs:\r\n    - from: 2020-10-24\r\n      store: boltdb-shipper\r\n      object_store: filesystem\r\n      schema: v11\r\n      index:\r\n        prefix: index_\r\n        period: 24h\r\n\r\nstorage_config:\r\n  boltdb_shipper:\r\n    active_index_directory: /tmp/loki/boltdb-shipper-active\r\n    cache_location: /tmp/loki/boltdb-shipper-cache\r\n    cache_ttl: 24h         # Can be increased for faster performance over longer query periods, uses more disk space\r\n    shared_store: filesystem\r\n  filesystem:\r\n    directory: /tmp/loki/chunks\r\n\r\ncompactor:\r\n  working_directory: /tmp/loki/boltdb-shipper-compactor\r\n  shared_store: filesystem\r\n\r\nlimits_config:\r\n  reject_old_samples: true\r\n  reject_old_samples_max_age: 168h\r\n\r\nchunk_store_config:\r\n  max_look_back_period: 0s\r\n\r\ntable_manager:\r\n  retention_deletes_enabled: false\r\n  retention_period: 0s\r\n\r\nruler:\r\n  storage:\r\n    type: local\r\n    local:\r\n      directory: /tmp/loki/rules\r\n  rule_path: /loki/rules-temp\r\n  alertmanager_url: http://localhost:9093\r\n  ring:\r\n    kvstore:\r\n      store: inmemory\r\n  enable_api: true\r\n\n"})}),"\n",(0,o.jsx)(n.h4,{id:"docker-compose",children:"Docker Compose"}),"\n",(0,o.jsx)(n.p,{children:"Now we need to make sure that those configuration files and logs are mounted into the correct containers:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yml",children:'version: "3"\r\n\r\nnetworks:\r\n  loki:\r\n\r\nservices:\r\n  loki:\r\n    image: grafana/loki:2.3.0\r\n    volumes:\r\n      - /opt/loki/config/loki-config.yml:/etc/loki/loki-config.yml\r\n    ports:\r\n      - "3100:3100"\r\n    command: -config.file=/etc/loki/loki-config.yml\r\n    networks:\r\n      - loki\r\n\r\n  promtail:\r\n    image: grafana/promtail:2.3.0\r\n    volumes:\r\n      - /opt/loki/config/promtail-config.yml:/etc/promtail/promtail-config.yml\r\n      - /opt/loki/logs/nginx_access.log:/opt/nginx_access.log\r\n    command: -config.file=/etc/promtail/promtail-config.yml\r\n    networks:\r\n      - loki\r\n\r\n  grafana:\r\n    image: grafana/grafana:latest\r\n    ports:\r\n      - "3000:3000"\r\n    networks:\r\n      - loki\n'})}),"\n",(0,o.jsx)(n.h2,{id:"starting-the-loki-environment",children:"Starting the Loki Environment"}),"\n",(0,o.jsx)(n.h3,{id:"configure-data-source",children:"Configure Data Source"}),"\n",(0,o.jsxs)(n.p,{children:["Head over to ",(0,o.jsx)(n.strong,{children:"Configuration/Data sources"})," and select to add a new ",(0,o.jsx)(n.strong,{children:"Loki Data Source"}),":"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Loki - Grafana and Prometheus",src:r(453171).Z+"",width:"1461",height:"443"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["The online documentation I found usually used ",(0,o.jsx)(n.code,{children:"localhost:3100"}),". But since I am accessing from a different system, I have to use the server IP address instead. ",(0,o.jsx)(n.code,{children:"192.168.2.111:3000"})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Now switch to the ",(0,o.jsx)(n.strong,{children:"Explore"})," tab and follow the help to come up with some queries - e.g. ",(0,o.jsx)(n.code,{children:'{job="varlogs"}'})," - ",(0,o.jsx)(n.code,{children:"varlogs"})," is the label we assigned to our job in ",(0,o.jsx)(n.code,{children:"promtail-config.yml"}),":"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Loki - Grafana and Prometheus",src:r(31271).Z+"",width:"1463",height:"435"})}),"\n",(0,o.jsxs)(n.p,{children:["Running the query will show the NGINX log data that I had ",(0,o.jsx)(n.strong,{children:"Promtail"})," load into ",(0,o.jsx)(n.strong,{children:"Loki"}),":"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Loki - Grafana and Prometheus",src:r(556582).Z+"",width:"1467",height:"871"})})]})}function h(e={}){const{wrapper:n}={...(0,i.ah)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>c});var o=r(667294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function t(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?t(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,o,i=function(e,n){if(null==e)return{};var r,o,i={},t=Object.keys(e);for(o=0;o<t.length;o++)r=t[o],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(o=0;o<t.length;o++)r=t[o],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=o.createContext({}),c=function(e){var n=o.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var r=e.components,i=e.mdxType,t=e.originalType,l=e.parentName,h=a(e,["components","mdxType","originalType","parentName"]),p=c(r),g=i,m=p["".concat(l,".").concat(g)]||p[g]||d[g]||t;return r?o.createElement(m,s(s({ref:n},h),{},{components:r})):o.createElement(m,s({ref:n},h))}));h.displayName="MDXCreateElement"},183967:(e,n,r)=>{r.d(n,{Z:()=>o});const o=r.p+"assets/images/Loki_and_Grafana_01-11c95223166ea9e94df4dbab6efc4a06.png"},453171:(e,n,r)=>{r.d(n,{Z:()=>o});const o=r.p+"assets/images/Loki_and_Grafana_02-c32f4ec057e043f56c883ded992eb112.png"},31271:(e,n,r)=>{r.d(n,{Z:()=>o});const o=r.p+"assets/images/Loki_and_Grafana_03-c802b3508997f7105bec83194d7dc4bc.png"},556582:(e,n,r)=>{r.d(n,{Z:()=>o});const o=r.p+"assets/images/Loki_and_Grafana_04-6708e2d6e1affb54de799aeac8b6c096.png"},55740:(e,n,r)=>{r.d(n,{Z:()=>o});const o=r.p+"assets/images/photo-456tdsfggd_67gfh6dgdf4_d-d52c49feef569ff5bedc9c66dc917fcf.jpg"}}]);