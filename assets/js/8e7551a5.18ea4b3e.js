"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[27013],{3905:(t,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>g});var e=n(67294);function l(t,a,n){return a in t?Object.defineProperty(t,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[a]=n,t}function r(t,a){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);a&&(e=e.filter((function(a){return Object.getOwnPropertyDescriptor(t,a).enumerable}))),n.push.apply(n,e)}return n}function i(t){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){l(t,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(t,a,Object.getOwnPropertyDescriptor(n,a))}))}return t}function o(t,a){if(null==t)return{};var n,e,l=function(t,a){if(null==t)return{};var n,e,l={},r=Object.keys(t);for(e=0;e<r.length;e++)n=r[e],a.indexOf(n)>=0||(l[n]=t[n]);return l}(t,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(e=0;e<r.length;e++)n=r[e],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var m=e.createContext({}),d=function(t){var a=e.useContext(m),n=a;return t&&(n="function"==typeof t?t(a):i(i({},a),t)),n},p=function(t){var a=d(t.components);return e.createElement(m.Provider,{value:a},t.children)},s={inlineCode:"code",wrapper:function(t){var a=t.children;return e.createElement(e.Fragment,{},a)}},u=e.forwardRef((function(t,a){var n=t.components,l=t.mdxType,r=t.originalType,m=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),u=d(n),g=l,k=u["".concat(m,".").concat(g)]||u[g]||s[g]||r;return n?e.createElement(k,i(i({ref:a},p),{},{components:n})):e.createElement(k,i({ref:a},p))}));function g(t,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof t||l){var r=n.length,i=new Array(r);i[0]=u;var o={};for(var m in a)hasOwnProperty.call(a,m)&&(o[m]=a[m]);o.originalType=t,o.mdxType="string"==typeof t?t:l,i[1]=o;for(var d=2;d<r;d++)i[d]=n[d];return e.createElement.apply(null,i)}return e.createElement.apply(null,n)}u.displayName="MDXCreateElement"},61599:(t,a,n)=>{n.r(a),n.d(a,{assets:()=>m,contentTitle:()=>i,default:()=>s,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var e=n(87462),l=(n(67294),n(3905));const r={sidebar_position:4460,slug:"2023-04-13",title:"Multidimensional Scaling (MDS)",authors:"mpolinowski",tags:["Python","Machine Learning"],description:"Multidimensional Scaling is a family of statistical methods that focus on creating mappings of items based on distance."},i=void 0,o={unversionedId:"IoT-and-Machine-Learning/ML/2023-04-13-multi-dimensional-scaling/index",id:"IoT-and-Machine-Learning/ML/2023-04-13-multi-dimensional-scaling/index",title:"Multidimensional Scaling (MDS)",description:"Multidimensional Scaling is a family of statistical methods that focus on creating mappings of items based on distance.",source:"@site/docs/IoT-and-Machine-Learning/ML/2023-04-13-multi-dimensional-scaling/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2023-04-13-multi-dimensional-scaling",slug:"/IoT-and-Machine-Learning/ML/2023-04-13-multi-dimensional-scaling/2023-04-13",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-04-13-multi-dimensional-scaling/2023-04-13",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2023-04-13-multi-dimensional-scaling/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"}],version:"current",sidebarPosition:4460,frontMatter:{sidebar_position:4460,slug:"2023-04-13",title:"Multidimensional Scaling (MDS)",authors:"mpolinowski",tags:["Python","Machine Learning"],description:"Multidimensional Scaling is a family of statistical methods that focus on creating mappings of items based on distance."},sidebar:"tutorialSidebar",previous:{title:"Machine Learning",permalink:"/docs/category/machine-learning"},next:{title:"tStochastic Neighbor Embedding (t-SNE)",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-04-12-tstochastic-neighbor-embedding/2023-04-12"}},m={},d=[{value:"Dataset",id:"dataset",level:2},{value:"2-Dimensional Plot",id:"2-dimensional-plot",level:2},{value:"3-Dimensional Plot",id:"3-dimensional-plot",level:2}],p={toc:d};function s(t){let{components:a,...r}=t;return(0,l.kt)("wrapper",(0,e.Z)({},p,r,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Victoria Harbour, Hongkong",src:n(61005).Z,width:"2385",height:"858"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#dimensionality-reduction"},"Dimensionality Reduction"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#dataset"},"Dataset")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2-dimensional-plot"},"2-Dimensional Plot")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#3-dimensional-plot"},"3-Dimensional Plot"))))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/multi-dimensional-scaling"},"Github Repository")),(0,l.kt)("p",null,"Multidimensional Scaling is a family of statistical methods that focus on creating mappings of items based on distance."),(0,l.kt)("h1",{id:"dimensionality-reduction"},"Dimensionality Reduction"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://scikit-learn.org/stable/modules/manifold.html"},"Manifold learning")," is an approach to non-linear dimensionality reduction. Algorithms for this task are based on the idea that the dimensionality of many data sets is only artificially high."),(0,l.kt)("p",null,"High-dimensional datasets can be very difficult to visualize. While data in two or three dimensions can be plotted to show the inherent structure of the data, equivalent high-dimensional plots are much less intuitive. To aid visualization of the structure of a dataset, the dimension must be reduced in some way."),(0,l.kt)("p",null,"The simplest way to accomplish this dimensionality reduction is by taking a random projection of the data. Though this allows some degree of visualization of the data structure, the randomness of the choice leaves much to be desired. In a random projection, it is likely that the more interesting structure within the data will be lost."),(0,l.kt)("p",null,"To address this concern, a number of supervised and unsupervised linear dimensionality reduction frameworks have been designed, such as:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-04-09-principal-component-analysis/2023-04-09"},"Principal Component Analysis (PCA)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-04-11-locally-linear-embedding/2023-04-11"},"Locally Linear Embedding (LLE)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-04-12-tstochastic-neighbor-embedding/2023-04-12"},"tStochastic Neighbor Embedding (t-SNE)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-04-13-multi-dimensional-scaling/2023-04-13"},"Multidimensional Scaling (MDS)"))),(0,l.kt)("h2",{id:"dataset"},"Dataset"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("a",{parentName:"p",href:"https://www.researchgate.net/publication/243766527_A_multivariate_study_of_variation_in_two_species_of_rock_crab_of_genus_Leptograpsus"},"A multivariate study of variation in two species of rock crab of genus Leptograpsus"),": A multivariate approach has been used to study morphological variation in the blue and orange-form species of rock crab of the genus Leptograpsus. Objective criteria for the identification of the two species are established, based on the following characters:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"SP"),": Species (Blue or Orange)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Sex"),": Male or Female"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"FL"),": Width of the frontal region of the carapace; "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"RW"),": Width of the posterior region of the carapace (rear width); "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"CL"),": Length of the carapace along the midline;"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"CW"),": Maximum width of the carapace; "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"BD"),": and the depth of the body;")),(0,l.kt)("p",null,"The dataset can be ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/tercen/crabs_dataset"},"downloaded from Github"),"."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"(see introduction in: ",(0,l.kt)("a",{parentName:"em",href:"https://mpolinowski.github.io/docs/IoT-and-Machine-Learning/ML/2023-04-09-principal-component-analysis/2023-04-09"},"Principal Component Analysis PCA"),")")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"raw_data = pd.read_csv('data/A_multivariate_study_of_variation_in_two_species_of_rock_crab_of_genus_Leptograpsus.csv')\n\ndata = raw_data.rename(columns={\n    'sp': 'Species',\n    'sex': 'Sex',\n    'index': 'Index',\n    'FL': 'Frontal Lobe',\n    'RW': 'Rear Width',\n    'CL': 'Carapace Midline',\n    'CW': 'Maximum Width',\n    'BD': 'Body Depth'})\n\ndata['Species'] = data['Species'].map({'B':'Blue', 'O':'Orange'})\ndata['Sex'] = data['Sex'].map({'M':'Male', 'F':'Female'})\ndata['Class'] = data.Species + data.Sex\n\ndata_columns = ['Frontal Lobe',\n                'Rear Width',\n                'Carapace Midline',\n                'Maximum Width',\n                'Body Depth']\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# generate a class variable for all 4 classes\ndata['Class'] = data.Species + data.Sex\n\nprint(data['Class'].value_counts())\ndata.head(5)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"BlueMale: ",(0,l.kt)("inlineCode",{parentName:"li"},"50")),(0,l.kt)("li",{parentName:"ul"},"BlueFemale: ",(0,l.kt)("inlineCode",{parentName:"li"},"50")),(0,l.kt)("li",{parentName:"ul"},"OrangeMale: ",(0,l.kt)("inlineCode",{parentName:"li"},"50")),(0,l.kt)("li",{parentName:"ul"},"OrangeFemale: ",(0,l.kt)("inlineCode",{parentName:"li"},"50"))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"Species"),(0,l.kt)("th",{parentName:"tr",align:null},"Sex"),(0,l.kt)("th",{parentName:"tr",align:null},"Index"),(0,l.kt)("th",{parentName:"tr",align:null},"Frontal Lobe"),(0,l.kt)("th",{parentName:"tr",align:null},"Rear Width"),(0,l.kt)("th",{parentName:"tr",align:null},"Carapace Midline"),(0,l.kt)("th",{parentName:"tr",align:null},"Maximum Width"),(0,l.kt)("th",{parentName:"tr",align:null},"Body Depth"),(0,l.kt)("th",{parentName:"tr",align:null},"Class"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"Blue"),(0,l.kt)("td",{parentName:"tr",align:null},"Male"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"8.1"),(0,l.kt)("td",{parentName:"tr",align:null},"6.7"),(0,l.kt)("td",{parentName:"tr",align:null},"16.1"),(0,l.kt)("td",{parentName:"tr",align:null},"19.0"),(0,l.kt)("td",{parentName:"tr",align:null},"7.0"),(0,l.kt)("td",{parentName:"tr",align:null},"BlueMale")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"Blue"),(0,l.kt)("td",{parentName:"tr",align:null},"Male"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"8.8"),(0,l.kt)("td",{parentName:"tr",align:null},"7.7"),(0,l.kt)("td",{parentName:"tr",align:null},"18.1"),(0,l.kt)("td",{parentName:"tr",align:null},"20.8"),(0,l.kt)("td",{parentName:"tr",align:null},"7.4"),(0,l.kt)("td",{parentName:"tr",align:null},"BlueMale")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"Blue"),(0,l.kt)("td",{parentName:"tr",align:null},"Male"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"9.2"),(0,l.kt)("td",{parentName:"tr",align:null},"7.8"),(0,l.kt)("td",{parentName:"tr",align:null},"19.0"),(0,l.kt)("td",{parentName:"tr",align:null},"22.4"),(0,l.kt)("td",{parentName:"tr",align:null},"7.7"),(0,l.kt)("td",{parentName:"tr",align:null},"BlueMale")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"Blue"),(0,l.kt)("td",{parentName:"tr",align:null},"Male"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"9.6"),(0,l.kt)("td",{parentName:"tr",align:null},"7.9"),(0,l.kt)("td",{parentName:"tr",align:null},"20.1"),(0,l.kt)("td",{parentName:"tr",align:null},"23.1"),(0,l.kt)("td",{parentName:"tr",align:null},"8.2"),(0,l.kt)("td",{parentName:"tr",align:null},"BlueMale")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"Blue"),(0,l.kt)("td",{parentName:"tr",align:null},"Male"),(0,l.kt)("td",{parentName:"tr",align:null},"5"),(0,l.kt)("td",{parentName:"tr",align:null},"9.8"),(0,l.kt)("td",{parentName:"tr",align:null},"8.0"),(0,l.kt)("td",{parentName:"tr",align:null},"20.3"),(0,l.kt)("td",{parentName:"tr",align:null},"23.0"),(0,l.kt)("td",{parentName:"tr",align:null},"8.2"),(0,l.kt)("td",{parentName:"tr",align:null},"BlueMale")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# normalize data columns\ndata_norm = data.copy()\ndata_norm[data_columns] = MinMaxScaler().fit_transform(data[data_columns])\n\ndata_norm.describe()\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"Index"),(0,l.kt)("th",{parentName:"tr",align:null},"Frontal Lobe"),(0,l.kt)("th",{parentName:"tr",align:null},"Rear Width"),(0,l.kt)("th",{parentName:"tr",align:null},"Carapace Midline"),(0,l.kt)("th",{parentName:"tr",align:null},"Maximum Width"),(0,l.kt)("th",{parentName:"tr",align:null},"Body Depth"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"count"),(0,l.kt)("td",{parentName:"tr",align:null},"200.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"200.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"200.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"200.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"200.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"200.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mean"),(0,l.kt)("td",{parentName:"tr",align:null},"25.500000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.527233"),(0,l.kt)("td",{parentName:"tr",align:null},"0.455365"),(0,l.kt)("td",{parentName:"tr",align:null},"0.529043"),(0,l.kt)("td",{parentName:"tr",align:null},"0.515053"),(0,l.kt)("td",{parentName:"tr",align:null},"0.511645")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"std"),(0,l.kt)("td",{parentName:"tr",align:null},"14.467083"),(0,l.kt)("td",{parentName:"tr",align:null},"0.219832"),(0,l.kt)("td",{parentName:"tr",align:null},"0.187835"),(0,l.kt)("td",{parentName:"tr",align:null},"0.216382"),(0,l.kt)("td",{parentName:"tr",align:null},"0.209919"),(0,l.kt)("td",{parentName:"tr",align:null},"0.220953")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"min"),(0,l.kt)("td",{parentName:"tr",align:null},"1.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"25%"),(0,l.kt)("td",{parentName:"tr",align:null},"13.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.358491"),(0,l.kt)("td",{parentName:"tr",align:null},"0.328467"),(0,l.kt)("td",{parentName:"tr",align:null},"0.382219"),(0,l.kt)("td",{parentName:"tr",align:null},"0.384000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.341935")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"50%"),(0,l.kt)("td",{parentName:"tr",align:null},"25.500000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.525157"),(0,l.kt)("td",{parentName:"tr",align:null},"0.459854"),(0,l.kt)("td",{parentName:"tr",align:null},"0.528875"),(0,l.kt)("td",{parentName:"tr",align:null},"0.525333"),(0,l.kt)("td",{parentName:"tr",align:null},"0.503226")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"75%"),(0,l.kt)("td",{parentName:"tr",align:null},"38.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.682390"),(0,l.kt)("td",{parentName:"tr",align:null},"0.569343"),(0,l.kt)("td",{parentName:"tr",align:null},"0.684650"),(0,l.kt)("td",{parentName:"tr",align:null},"0.664000"),(0,l.kt)("td",{parentName:"tr",align:null},"0.677419")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"max"),(0,l.kt)("td",{parentName:"tr",align:null},"50.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"1.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"1.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"1.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"1.000000"),(0,l.kt)("td",{parentName:"tr",align:null},"1.000000")))),(0,l.kt)("h2",{id:"2-dimensional-plot"},"2-Dimensional Plot"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"no_components = 2\nn_init = 15\nmetric = True\nn_stress='auto'\n\nmds = MDS(\n    n_components=no_components,\n    n_init=n_init, metric=metric,\n    normalized_stress=n_stress)\n\ndata_mds = mds.fit_transform(data_norm[data_columns])\nprint('MSE: ', mds.stress_)\n# MSE:  3.886582480465905\n# the more components you add the smaller\n# the mean squared error becomes - meaning\n# your model starts to fit better\n\ndata_norm[['MDS1', 'MDS2']] = data_mds\ndata_norm.head(1)\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"Species"),(0,l.kt)("th",{parentName:"tr",align:null},"Sex"),(0,l.kt)("th",{parentName:"tr",align:null},"Index"),(0,l.kt)("th",{parentName:"tr",align:null},"Frontal Lobe"),(0,l.kt)("th",{parentName:"tr",align:null},"Rear Width"),(0,l.kt)("th",{parentName:"tr",align:null},"Carapace Midline"),(0,l.kt)("th",{parentName:"tr",align:null},"Maximum Width"),(0,l.kt)("th",{parentName:"tr",align:null},"Body Depth"),(0,l.kt)("th",{parentName:"tr",align:null},"Class"),(0,l.kt)("th",{parentName:"tr",align:null},"MDS1"),(0,l.kt)("th",{parentName:"tr",align:null},"MDS2"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"Blue"),(0,l.kt)("td",{parentName:"tr",align:null},"Male"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"0.056604"),(0,l.kt)("td",{parentName:"tr",align:null},"0.014599"),(0,l.kt)("td",{parentName:"tr",align:null},"0.042553"),(0,l.kt)("td",{parentName:"tr",align:null},"0.050667"),(0,l.kt)("td",{parentName:"tr",align:null},"0.058065"),(0,l.kt)("td",{parentName:"tr",align:null},"BlueMale"),(0,l.kt)("td",{parentName:"tr",align:null},"-0.482199"),(0,l.kt)("td",{parentName:"tr",align:null},"-0.917839")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"fig = plt.figure(figsize=(10, 8))\nsns.scatterplot(x='MDS1', y='MDS2', hue='Class', data=data_norm)\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Multidimensional Scaling (MDS)",src:n(68295).Z,width:"871",height:"680"})),(0,l.kt)("h2",{id:"3-dimensional-plot"},"3-Dimensional Plot"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"no_components = 3\nn_init = 15\nmetric = True\nn_stress='auto'\n\nmds = MDS(\n    n_components=no_components,\n    n_init=n_init, metric=metric,\n    normalized_stress=n_stress)\n\ndata_mds = mds.fit_transform(data_norm[data_columns])\nprint('MSE: ', mds.stress_)\n# MSE:  2.4601741009431457\n\ndata_norm[['MDS1', 'MDS2', 'MDS3']] = data_mds\ndata_norm.head(1)\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"Species"),(0,l.kt)("th",{parentName:"tr",align:null},"Sex"),(0,l.kt)("th",{parentName:"tr",align:null},"Index"),(0,l.kt)("th",{parentName:"tr",align:null},"Frontal Lobe"),(0,l.kt)("th",{parentName:"tr",align:null},"Rear Width"),(0,l.kt)("th",{parentName:"tr",align:null},"Carapace Midline"),(0,l.kt)("th",{parentName:"tr",align:null},"Maximum Width"),(0,l.kt)("th",{parentName:"tr",align:null},"Body Depth"),(0,l.kt)("th",{parentName:"tr",align:null},"Class"),(0,l.kt)("th",{parentName:"tr",align:null},"MDS1"),(0,l.kt)("th",{parentName:"tr",align:null},"MDS2"),(0,l.kt)("th",{parentName:"tr",align:null},"MDS3"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"Blue"),(0,l.kt)("td",{parentName:"tr",align:null},"Male"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"0.056604"),(0,l.kt)("td",{parentName:"tr",align:null},"0.014599"),(0,l.kt)("td",{parentName:"tr",align:null},"0.042553"),(0,l.kt)("td",{parentName:"tr",align:null},"0.050667"),(0,l.kt)("td",{parentName:"tr",align:null},"0.058065"),(0,l.kt)("td",{parentName:"tr",align:null},"BlueMale"),(0,l.kt)("td",{parentName:"tr",align:null},"-0.093961"),(0,l.kt)("td",{parentName:"tr",align:null},"0.80491"),(0,l.kt)("td",{parentName:"tr",align:null},"0.645809")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class_colours = {\n    'BlueMale': '#0027c4', #blue\n    'BlueFemale': '#f18b0a', #orange\n    'OrangeMale': '#0af10a', # green\n    'OrangeFemale': '#ff1500', #red\n}\n\ncolours = data_norm['Class'].apply(lambda x: class_colours[x])\n\nx=data_norm.MDS1\ny=data_norm.MDS2\nz=data_norm.MDS3\n\nfig = plt.figure(figsize=(10,10))\nplt.title('MDS Data Analysis')\nax = fig.add_subplot(projection='3d')\n\nax.scatter(xs=x, ys=y, zs=z, s=50, c=colours)\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Multidimensional Scaling (MDS)",src:n(27249).Z,width:"837",height:"836"})))}s.isMDXComponent=!0},68295:(t,a,n)=>{n.d(a,{Z:()=>e});const e=n.p+"assets/images/Multi-Dimensional_Scaling_01-e3e615ca7db58efb17afc5b338de3b37.png"},27249:(t,a,n)=>{n.d(a,{Z:()=>e});const e=n.p+"assets/images/Multi-Dimensional_Scaling_02-1945cfd53df14ba7c242522883f6870c.png"},61005:(t,a,n)=>{n.d(a,{Z:()=>e});const e=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-936fe81d44bf1beb4563551aafeb5788.jpg"}}]);