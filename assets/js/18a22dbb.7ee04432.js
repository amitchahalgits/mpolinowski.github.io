"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[18043],{326814:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var t=n(474848),a=n(28453);const s={sidebar_position:9010,slug:"2021-09-24",title:"Getting started with Go and React - React & REST API's",authors:"mpolinowski",tags:["SQL","Javascript","Go"]},o=void 0,i={id:"Development/Go/2021-09-24--golang-react-starter-part-iv/index",title:"Getting started with Go and React - React & REST API's",description:"Shenzhen, China",source:"@site/docs/Development/Go/2021-09-24--golang-react-starter-part-iv/index.md",sourceDirName:"Development/Go/2021-09-24--golang-react-starter-part-iv",slug:"/Development/Go/2021-09-24--golang-react-starter-part-iv/2021-09-24",permalink:"/docs/Development/Go/2021-09-24--golang-react-starter-part-iv/2021-09-24",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Go/2021-09-24--golang-react-starter-part-iv/index.md",tags:[{label:"SQL",permalink:"/docs/tags/sql"},{label:"Javascript",permalink:"/docs/tags/javascript"},{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:9010,frontMatter:{sidebar_position:9010,slug:"2021-09-24",title:"Getting started with Go and React - React & REST API's",authors:"mpolinowski",tags:["SQL","Javascript","Go"]},sidebar:"tutorialSidebar",previous:{title:"goFTP",permalink:"/docs/Development/Go/2021-10-08--goftp/2021-10-08"},next:{title:"Getting started with Go and React - PostgreSQL",permalink:"/docs/Development/Go/2021-09-23--golang-react-starter-part-iii/2021-09-23"}},l={},d=[{value:"Go CORS Middleware",id:"go-cors-middleware",level:2},{value:"React Frontend",id:"react-frontend",level:2},{value:"Display Camera List",id:"display-camera-list",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Display Single Camera Details",id:"display-single-camera-details",level:3},{value:"Display all Camera Locations",id:"display-all-camera-locations",level:3},{value:"Backend",id:"backend",level:4},{value:"Frontend",id:"frontend",level:4},{value:"Display all Cameras from a Location",id:"display-all-cameras-from-a-location",level:3},{value:"Backend",id:"backend-1",level:4},{value:"Frontend",id:"frontend-1",level:4}];function c(r){const e={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{alt:"Shenzhen, China",src:n(822156).A+"",width:"1500",height:"441"})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"Creating an REST API backend in Go and connecting it to a React.js frontend."}),"\n"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#",children:"Part I - Webservice, Routing and Status Log"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#",children:"Part II - API Routes"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#",children:"Part III - PostgreSQL"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#",children:"Part III - React & REST API's"})}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["I want to prototype a Go backend for a ",(0,t.jsx)(e.strong,{children:"Weather Cam"})," tool. The backend should hold all the information related to all cameras and serve them on different routes. The backend then needs to be connected to a React.js frontend that displays the JSON data that is being served as well as to allow to add / delete cameras."]}),"\n",(0,t.jsx)(e.h2,{id:"go-cors-middleware",children:"Go CORS Middleware"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["Access to fetch at '",(0,t.jsx)(e.a,{href:"http://localhost:4000/v1/cameras",children:"http://localhost:4000/v1/cameras"}),"' from origin '",(0,t.jsx)(e.a,{href:"http://localhost:3000",children:"http://localhost:3000"}),"' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled."]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"To be able to connect our React frontend with the Go backend, we first need to take care of our CORS header. Since the applications are running on different ports they will be interpreted as different webpages by our browsers - and the API will be blocked by default. We need a middleware that adds a allow all origins header to every request:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"./src/api/middleware.go"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\r\n\r\nimport "net/http"\r\n\r\nfunc (app *application) enableCORS(next http.Handler) http.Handler {\r\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n\t\tw.Header().Set("Access-Control-Allow-Origin", "*")\r\n\r\n\t\tnext.ServeHTTP(w, r)\r\n\t})\r\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"The middleware just needs to be wrapped around our routes:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:"//BEFORE\r\nfunc (app *application) routes() *httprouter.Router {\r\n\t...\r\n\treturn router\r\n}\r\n//AFTER\r\nfunc (app *application) routes() http.Handler {\r\n\t...\r\n\treturn app.enableCORS(router)\r\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"react-frontend",children:"React Frontend"}),"\n",(0,t.jsx)(e.h3,{id:"display-camera-list",children:"Display Camera List"}),"\n",(0,t.jsx)(e.p,{children:"So far we hardcoded a list of cameras to our React component in:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"src/components/cameras.jsx"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'state= {cameras: []}\r\n\r\ncomponentDidMount() {\r\n        this.setState({\r\n            cameras: [\r\n                {id: 1, name: "A Camera", location: "Somewhere"},\r\n                {id: 2, name: "B Camera", location: "Nowhere"},\r\n                {id: 3, name: "C Camera", location: "Knowhere"}\r\n            ]\r\n        })\r\n    }\n'})}),"\n",(0,t.jsx)(e.p,{children:"Here we now need to add our API request list:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'state= {\r\n\tcameras: [],\r\n\tisLoaded: false,\r\n}\r\n\r\ncomponentDidMount() {\r\n\t\tfetch("http://localhost:4000/v1/cameras")\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((json) => {\r\n\t\t\t\tthis.setState(\r\n\t\t\t\t\tcameras: json.cameras,\r\n\t\t\t\t\tisLoaded: true\r\n\t\t\t\t)\r\n\t\t\t})\r\n    }\n'})}),"\n",(0,t.jsx)(e.p,{children:"To render the response:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"render() {\r\n        const { cameras, isLoaded } = this.state;\r\n\r\n        if (!isLoaded) {\r\n            return <p>Loading ...</p>\r\n        } else {\r\n        return (\r\n            <>\r\n                <h2>Cameras</h2>\r\n\r\n                <ul>\r\n                    {cameras.map( (m) => (\r\n                        <li key={m.id}>\r\n                            <Link to={`/cameras/${m.id}`}>{m.name}</Link>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </>\r\n        )\r\n    }}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Go and visit the frontend ",(0,t.jsx)(e.code,{children:"http://localhost:3000/#/cameras"})," - it should now render the list of cameras defined in our Postgres database!"]}),"\n",(0,t.jsx)(e.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsxs)(e.p,{children:["So far we have a variable called ",(0,t.jsx)(e.code,{children:"isLoaded"}),' that is set to true once we get the JSON response from our API. We are using an IF statement to replace a "Loading..." paragraph with the actual data once this happens. But we still need to handle the case that our API returns something that is not the correct response:']}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"./src/components/cameras.jsx"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"export default class Cameras extends Component {\r\n  state = {\r\n    cameras: [],\r\n    isLoaded: false,\r\n    // Add state for error handling\r\n    error: null,\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('http://localhost:4000/v1/cameras')\r\n      // .then((response) => response.json())\r\n      // Replace above with error handler\r\n      .then((response) => {\r\n        // Debugging: Print status code to console\r\n        // console.log(\"API Response Status Code: \", response.status)\r\n        if (response.status !== '200') {\r\n          let err = Error\r\n          err.message = 'Invalid API Response Code: ' + response.status\r\n          this.setState({ error: err })\r\n        }\r\n        return response.json()\r\n      })\r\n      .then((json) => {\r\n        this.setState(\r\n          {\r\n            cameras: json.cameras,\r\n            isLoaded: true,\r\n          },\r\n          // If status code is not 200 export error instead\r\n          (error) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              error,\r\n            })\r\n          }\r\n        )\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { cameras, isLoaded, error } = this.state\r\n    // Print error if error is not null\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>\r\n      // Or print `Loading...` until JSON response\r\n    } else if (!isLoaded) {\r\n      return <p>Loading ...</p>\r\n      // Once it is loaded print response\r\n    } else {\r\n      return (\r\n        <>\r\n          <h2>Cameras</h2>\r\n\r\n          <ul>\r\n            {cameras.map((m) => (\r\n              <li key={m.id}>\r\n                <Link to={`/cameras/${m.id}`}>{m.name}</Link>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"display-single-camera-details",children:"Display Single Camera Details"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"./src/components/camera.jsx"})}),"\n",(0,t.jsx)(e.p,{children:"For the camera detail page we can recycle most of this code:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"export default class Camera extends Component {\r\n  state = {\r\n    camera: [],\r\n    isLoaded: false,\r\n    error: null,\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('http://localhost:4000/v1/camera/' + this.props.match.params.id)\r\n      // .then((response) => response.json())\r\n      // Replace above with error handler\r\n      .then((response) => {\r\n        // Debugging: Print status code to console\r\n        // console.log(\"API Response Status Code: \", response.status)\r\n        if (response.status !== '200') {\r\n          let err = Error\r\n          err.message = 'Invalid API Response Code: ' + response.status\r\n          this.setState({ error: err })\r\n        }\r\n        return response.json()\r\n      })\r\n      .then((json) => {\r\n        this.setState(\r\n          {\r\n            camera: json.camera,\r\n            isLoaded: true,\r\n          },\r\n          // If status code is not 200 export error instead\r\n          (error) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              error,\r\n            })\r\n          }\r\n        )\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { camera, isLoaded, error } = this.state\r\n    // Print error if error is not null\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>\r\n      // Or print `Loading...` until JSON response\r\n    } else if (!isLoaded) {\r\n      return <p>Loading ...</p>\r\n      // Once it is loaded print response\r\n    } else {\r\n      return (\r\n        <>\r\n          <h2>Camera Details</h2>\r\n\r\n          <table className=\"table table-compact table-striped mt-3\">\r\n            <thead>\r\n              <tr>\r\n                <td>\r\n                  <strong>Name|Rating:</strong>\r\n                </td>\r\n                <td>\r\n                  {camera.name} |{' '}\r\n                  <span className=\"badge bg-primary\">{camera.rating}</span>\r\n                </td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <strong>ID|CID|LID:</strong>\r\n                </td>\r\n                <td>\r\n                  {camera.id} | {camera.location[0].cid} |{' '}\r\n                  {camera.location[0].lid}{' '}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <strong>Location:</strong>\r\n                </td>\r\n                <td>{camera.location[0].location}</td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <strong>Model|Lense|Resolution:</strong>\r\n                </td>\r\n                <td>\r\n                  {camera.location[0].model} | {camera.location[0].lense} |{' '}\r\n                  {camera.location[0].res}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <strong>Address:</strong>\r\n                </td>\r\n                <td>{camera.ip}</td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <strong>Login:</strong>\r\n                </td>\r\n                <td>\r\n                  {camera.usr} | {camera.pass}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <strong>Installed|Inspected:</strong>\r\n                </td>\r\n                <td>\r\n                  {camera.installed} <br /> {camera.inspected}\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </>\r\n      )\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"display-all-camera-locations",children:"Display all Camera Locations"}),"\n",(0,t.jsx)(e.h4,{id:"backend",children:"Backend"}),"\n",(0,t.jsx)(e.p,{children:"Displaying camera locations is pretty much the same as displaying all cameras:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"./src/components/locations.jsx"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'export default class Locations extends Component {\r\n  state = {\r\n    locations: [],\r\n    isLoaded: false,\r\n    error: null,\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\'http://localhost:4000/v1/locations/\')\r\n      .then((response) => {\r\n        // Debugging: Print status code to console\r\n        // console.log("API Response Status Code: ", response.status)\r\n        if (response.status !== 200) {\r\n          let err = Error\r\n          err.message = \'Invalid API Response Code: \' + response.status\r\n          this.setState({ error: err })\r\n        }\r\n        return response.json()\r\n      })\r\n      .then((json) => {\r\n        // Debugging: Print locations to console\r\n        // console.log("Locations JSON: ", json.locations)\r\n        this.setState(\r\n          {\r\n            locations: json.locations,\r\n            isLoaded: true,\r\n          },\r\n          // Debugging: Print locations State to console\r\n          // () => {console.log("Locations State: ", this.state.locations)},\r\n          // If status code is not 200 export error instead\r\n          (error) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              error,\r\n            })\r\n          }\r\n        )\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { locations, isLoaded, error } = this.state\r\n    // Print error if error is not null\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>\r\n      // Or print `Loading...` until JSON response\r\n    } else if (!isLoaded) {\r\n      return <p>Loading ...</p>\r\n      // Once it is loaded print response\r\n    } else {\r\n      return (\r\n        <>\r\n          <h2>Locations</h2>\r\n          <ul>\r\n            {locations.map((m) => (\r\n              <li key={m.id}>\r\n                <Link to={`/location/${m.id}`}>{m.location}</Link>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"But we now have to add the backend to handle the location URL. The SQL queries are defined in:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"./go_backend/models/gocamDB.go"})}),"\n",(0,t.jsx)(e.p,{children:"Here we need to add the following SQL query:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"SELECT id, location, cid, lid, created, updated FROM camera_locations ORDER BY lid;\r\n\r\n id |   location    |     cid     |   lid   |          created           |          updated\r\n----+---------------+-------------+---------+----------------------------+----------------------------\r\n  1 | Mountain View | INSTAR-0001 | HK-0001 | 2021-09-19 03:03:19.534528 | 2021-10-21 03:03:19.534528\r\n  2 | Harbour East  | INSTAR-0002 | HK-0001 | 2021-09-28 03:03:19.534528 | 2021-10-21 03:03:19.534528\r\n  3 | Harbour West  | INSTAR-0003 | HK-0001 | 2021-09-08 03:03:19.534528 | 2021-10-21 03:03:19.534528\r\n  4 | Beachfront    | INSTAR-0001 | HK-0002 | 2021-10-09 03:03:19.534528 | 2021-10-21 03:03:19.534528\r\n  5 | Downtown      | INSTAR-0005 | HK-0003 | 2021-08-28 03:03:19.534528 | 2021-10-21 03:03:19.534528\r\n  6 | Central Park  | INSTAR-0001 | HK-0003 | 2021-03-22 03:03:19.534528 | 2021-10-21 03:03:19.534528\r\n  7 | Terminal      | INSTAR-0002 | HK-0003 | 2021-09-18 03:03:19.534528 | 2021-10-21 03:03:19.534528\r\n  8 | Skyline       | INSTAR-0003 | HK-0003 | 2021-08-17 03:03:19.534528 | 2021-10-21 03:03:19.534528\r\n  9 | Plaza         | INSTAR-0004 | HK-0003 | 2021-09-06 03:03:19.534528 | 2021-10-21 03:03:19.534528\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:"func (m *DBModel) LocationsAll() ( []*Location, error) {\r\n\tctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\r\n\tdefer cancel()\r\n\r\n\tquery := `SELECT id, location, cid, lid, created, updated FROM camera_locations ORDER BY lid`\r\n\r\n\trows, err := m.DB.QueryContext(ctx, query)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tdefer rows.Close()\r\n\r\n\tvar locations []*Location\r\n\r\n\tfor rows.Next() {\r\n\t\tvar l Location\r\n\t\terr := rows.Scan(\r\n\t\t\t&l.ID,\r\n\t\t\t&l.LocationName,\r\n\t\t\t&l.CameraID,\r\n\t\t\t&l.LocationID,\r\n\t\t\t&l.Created,\r\n\t\t\t&l.Updated,\r\n\t\t)\r\n\t\tif err != nil {\r\n\t\t\treturn nil, err\r\n\t\t}\r\n\r\n\t\tlocations = append(locations, &l)\r\n\t}\r\n\r\n\treturn locations, nil\r\n\r\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"To be able to use this model we now have to add a handler that takes care of the SQL request when the URL is called by our React App:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"go_backend/src/api/cameraHandler.go"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'func (app *application) getAllLocations(w http.ResponseWriter, r *http.Request) {\r\n\tlocations, err := app.models.DB.LocationsAll()\r\n\tif err != nil {\r\n\t\tapp.errorJSON(w, err)\r\n\t\treturn\r\n\t}\r\n\r\n\terr = app.writeJSON(w, http.StatusOK, locations, "locations")\r\n\tif err != nil {\r\n\t\tapp.errorJSON(w, err)\r\n\t\treturn\r\n\t}\r\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"Now we can provide a route that uses the handler:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"go_backend/src/api/routes.go"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'func (app *application) routes() http.Handler {\r\n\trouter := httprouter.New()\r\n\t// Route for status check handled by statusHandler\r\n\trouter.HandlerFunc(http.MethodGet, "/status", app.statusHandler)\r\n\t// Routes for camera API check handled by cameraHandler\r\n\trouter.HandlerFunc(http.MethodGet, "/v1/camera/:id", app.getOneCamera)\r\n\trouter.HandlerFunc(http.MethodGet, "/v1/cameras", app.getAllCameras)\r\n\trouter.HandlerFunc(http.MethodGet, "/v1/locations", app.getAllLocations)\r\n\r\n\treturn app.enableCORS(router)\r\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"frontend",children:"Frontend"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:"export default class Cameras extends Component {\r\n  state = {\r\n    cameras: [],\r\n    isLoaded: false,\r\n    // Add state for error handling\r\n    error: null,\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('http://localhost:4000/v1/cameras')\r\n      // .then((response) => response.json())\r\n      // Replace above with error handler\r\n      .then((response) => {\r\n        // Debugging: Print status code to console\r\n        // console.log(\"API Response Status Code: \", response.status)\r\n        if (response.status !== '200') {\r\n          let err = Error\r\n          err.message = 'Invalid API Response Code: ' + response.status\r\n          this.setState({ error: err })\r\n        }\r\n        return response.json()\r\n      })\r\n      .then((json) => {\r\n        this.setState(\r\n          {\r\n            cameras: json.cameras,\r\n            isLoaded: true,\r\n          },\r\n          // If status code is not 200 export error instead\r\n          (error) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              error,\r\n            })\r\n          }\r\n        )\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { cameras, isLoaded, error } = this.state\r\n    // Print error if error is not null\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>\r\n      // Or print `Loading...` until JSON response\r\n    } else if (!isLoaded) {\r\n      return <p>Loading ...</p>\r\n      // Once it is loaded print response\r\n    } else {\r\n      return (\r\n        <>\r\n          <h2>Cameras</h2>\r\n\r\n          <ul>\r\n            {cameras.map((m) => (\r\n              <li key={m.id}>\r\n                <Link to={`/cameras/${m.id}`}>{m.name}</Link>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"display-all-cameras-from-a-location",children:"Display all Cameras from a Location"}),"\n",(0,t.jsx)(e.h4,{id:"backend-1",children:"Backend"}),"\n",(0,t.jsx)(e.p,{children:"Now that we have a list of locations with installed cameras we now need to add a component that displays all cameras from a selected location. Our backend already has a function that returns all cameras. We can modify this function to filter the results by the field location:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"go_backend/models/gocamDB.go"})}),"\n",(0,t.jsx)(e.p,{children:"He we are using the following SQL query to get all cameras:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"SELECT id, name, usr, pass, ip, updated, created, rating FROM camera ORDER BY created DESC;\r\n\r\n id |     name      |  usr  |  pass  |       ip        |          updated           |          created           | rating\r\n----+---------------+-------+--------+-----------------+----------------------------+----------------------------+--------\r\n  9 | Plaza         | admin | instar | 192.168.178.249 | 2021-10-22 03:32:09.828103 | 2021-10-15 03:32:09.828103 |      1\r\n  4 | Beachfront    | admin | instar | 192.168.2.117   | 2021-10-22 03:32:09.828103 | 2021-09-20 03:32:09.828103 |      2\r\n  1 | Mountain View | admin | instar | 192.168.2.10    | 2021-10-22 03:32:09.828103 | 2021-06-21 03:32:09.828103 |      3\r\n  2 | Harbour East  | admin | instar | 192.168.2.19    | 2021-10-22 03:32:09.828103 | 2021-06-01 03:32:09.828103 |      5\r\n  3 | Harbour West  | admin | instar | 192.168.2.24    | 2021-10-22 03:32:09.828103 | 2021-05-19 03:32:09.828103 |      3\r\n  7 | Terminal      | admin | instar | 192.168.178.52  | 2021-10-22 03:32:09.828103 | 2021-03-23 03:32:09.828103 |      2\r\n  8 | Skyline       | admin | instar | 192.168.178.67  | 2021-10-22 03:32:09.828103 | 2021-03-02 03:32:09.828103 |      5\r\n  6 | Central Park  | admin | instar | 192.168.178.42  | 2021-10-22 03:32:09.828103 | 2020-08-13 03:32:09.828103 |      2\r\n  5 | Downtown      | admin | instar | 192.168.178.70  | 2021-10-22 03:32:09.828103 | 2020-07-12 03:32:09.828103 |      4\n"})}),"\n",(0,t.jsxs)(e.p,{children:["We need combine this with a query over the ",(0,t.jsx)(e.code,{children:"camera_location"})," table and filter by location ID:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"SELECT camera_locations.id, camera_locations.location, camera_locations.cid, camera_locations.lid FROM camera_locations;\r\n\r\n id |   location    |     cid     |   lid\r\n----+---------------+-------------+---------\r\n  1 | Mountain View | INSTAR-0001 | HK-0001\r\n  2 | Harbour East  | INSTAR-0002 | HK-0001\r\n  3 | Harbour West  | INSTAR-0003 | HK-0001\r\n  4 | Beachfront    | INSTAR-0001 | HK-0002\r\n  5 | Downtown      | INSTAR-0005 | HK-0003\r\n  6 | Central Park  | INSTAR-0001 | HK-0003\r\n  7 | Terminal      | INSTAR-0002 | HK-0003\r\n  8 | Skyline       | INSTAR-0003 | HK-0003\r\n  9 | Plaza         | INSTAR-0004 | HK-0003\n"})}),"\n",(0,t.jsxs)(e.p,{children:["E.g. filter for location ID ",(0,t.jsx)(e.code,{children:"HK-0001"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"SELECT id, name, usr, pass, ip, updated, created, rating FROM camera WHERE id IN (SELECT camera_locations.id FROM camera_locations WHERE camera_locations.lid = 'HK-0001' ) ORDER BY created DESC;\n"})}),"\n",(0,t.jsx)(e.p,{children:"In our DBModel this looks like this:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'// Return all cameras\r\n// EDIT: add location ID as variable filter to All()\r\nfunc(m *DBModel) All(locationID ...string) ([]*Camera, error) {\r\n\tctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\r\n\tdefer cancel()\r\n\r\n\t// Create variable to be able to filter by given locationID if provided\r\n\twhere := ""\r\n\t// If locationID is provided set variable to filter query\r\n\tif len(locationID) > 0 {\r\n\t\twhere = fmt.Sprintf("WHERE id IN (SELECT camera_locations.id FROM camera_locations WHERE camera_locations.lid = \'%s\')", locationID[0])\r\n\t}\r\n\r\n\t// SQL query to get all cameras\r\n\t// EDIT: if where is defined filter by given lid\r\n\tquery := fmt.Sprintf(`SELECT id, name, usr, pass, ip, updated, created, rating FROM camera %s ORDER BY created DESC`, where)\r\n\r\n  ...\n'})}),"\n",(0,t.jsx)(e.p,{children:"This now handles both cases - where a location is provided it will filter by it and without a location it will insert an empty string and return cameras of all locations (just like before). All that is needed now is another function handler for the filter case:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"./go_backend/src/api/cameraHandler.go"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'func (app *application) getCamerasByLocation(w http.ResponseWriter, r *http.Request) {\r\n\r\n\tparams := httprouter.ParamsFromContext(r.Context())\r\n\r\n\tlocationID := params.ByName("lid")\r\n\r\n\tcameras, err := app.models.DB.All(locationID)\r\n\tif err != nil {\r\n\t\tapp.errorJSON(w, err)\r\n\t\treturn\r\n\t}\r\n\r\n\terr = app.writeJSON(w, http.StatusOK, cameras, "cameras")\r\n\tif err != nil {\r\n\t\tapp.errorJSON(w, err)\r\n\t\treturn\r\n\t}\r\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"And this handler has to be added to it's route:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"go_backend/src/api/routes.go"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'func (app *application) routes() http.Handler {\r\n\trouter := httprouter.New()\r\n\t// Route for status check handled by statusHandler\r\n\trouter.HandlerFunc(http.MethodGet, "/status", app.statusHandler)\r\n\t// Routes for camera API check handled by cameraHandler\r\n\trouter.HandlerFunc(http.MethodGet, "/v1/camera/:id", app.getOneCamera)\r\n\trouter.HandlerFunc(http.MethodGet, "/v1/cameras", app.getAllCameras)\r\n\trouter.HandlerFunc(http.MethodGet, "/v1/cameras/:lid", app.getCamerasByLocation)\r\n\trouter.HandlerFunc(http.MethodGet, "/v1/locations", app.getAllLocations)\r\n\r\n\treturn app.enableCORS(router)\r\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"frontend-1",children:"Frontend"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"./src/components/location.jsx"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:"export default class CameraLocation extends Component {\r\n  state = {\r\n    cameras: [],\r\n    isLoaded: false,\r\n    error: null,\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('http://localhost:4000/v1/cameras/' + this.props.match.params.lid)\r\n      // .then((response) => response.json())\r\n      // Replace above with error handler\r\n      .then((response) => {\r\n        // Debugging: Print status code to console\r\n        // console.log(\"API Response Status Code: \", response.status)\r\n        if (response.status !== '200') {\r\n          let err = Error\r\n          err.message = 'Invalid API Response Code: ' + response.status\r\n          this.setState({ error: err })\r\n        }\r\n        return response.json()\r\n      })\r\n      .then((json) => {\r\n        this.setState(\r\n          {\r\n            cameras: json.cameras,\r\n            isLoaded: true,\r\n          },\r\n          // If status code is not 200 export error instead\r\n          (error) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              error,\r\n            })\r\n          }\r\n        )\r\n      })\r\n  }\r\n\r\n  render() {\r\n    let { cameras, isLoaded, error } = this.state\r\n    // If given location has no cameras set variable to empty array\r\n    if (!cameras) {\r\n      cameras = []\r\n    }\r\n    // Print error if error is not null\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>\r\n      // Or print `Loading...` until JSON response\r\n    } else if (!isLoaded) {\r\n      return <p>Loading ...</p>\r\n      // Once it is loaded print response\r\n    } else {\r\n      return (\r\n        <>\r\n          <h2>\r\n            Location ID:{' '}\r\n            {this.props.location.pathname.split('/').pop().split(';')[0]}\r\n          </h2>\r\n\r\n          <ul>\r\n            {cameras.map((m) => (\r\n              <li key={m.id}>\r\n                <Link to={`/cameras/${m.id}`}>{m.name}</Link>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"Adding a route for the component:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"./src/components/content.jsx"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:"import CameraList from './cameras'\r\nimport Camera from './camera'\r\nimport LocationList from './locations'\r\nimport Location from './location'\r\n\r\n...\r\n\r\n<Switch>\r\n  <Route path=\"/cameras/:id\" component={Camera} />\r\n  <Route path=\"/locations/:lid\" component={Location} />\r\n  <Route exact path=\"/cameras\">\r\n    <CameraList />\r\n  </Route>\r\n  <Route exact path=\"/locations\">\r\n    <LocationList />\r\n  </Route>\r\n  ...\r\n</Switch>\n"})})]})}function p(r={}){const{wrapper:e}={...(0,a.R)(),...r.components};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(c,{...r})}):c(r)}},822156:(r,e,n)=>{n.d(e,{A:()=>t});const t=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-f4a66dcdd4723b20f63751871edc4e36.jpg"},28453:(r,e,n)=>{n.d(e,{R:()=>o,x:()=>i});var t=n(296540);const a={},s=t.createContext(a);function o(r){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function i(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(a):r.components||a:o(r.components),t.createElement(s.Provider,{value:e},r.children)}}}]);