"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[32301],{309721:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var t=r(785893),s=r(603905);const o={sidebar_position:8030,slug:"2019-12-03",title:"Podman FTP Server Container",authors:"mpolinowski",tags:["LINUX","Smarthome","IoT","Docker"]},i=void 0,a={id:"DevOps/Linux/2019-12-03--podman-ftp-server-container/index",title:"Podman FTP Server Container",description:"Victory Harbour, Hong Kong",source:"@site/docs/DevOps/Linux/2019-12-03--podman-ftp-server-container/index.md",sourceDirName:"DevOps/Linux/2019-12-03--podman-ftp-server-container",slug:"/DevOps/Linux/2019-12-03--podman-ftp-server-container/2019-12-03",permalink:"/docs/DevOps/Linux/2019-12-03--podman-ftp-server-container/2019-12-03",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Linux/2019-12-03--podman-ftp-server-container/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Smarthome",permalink:"/docs/tags/smarthome"},{label:"IoT",permalink:"/docs/tags/io-t"},{label:"Docker",permalink:"/docs/tags/docker"}],version:"current",sidebarPosition:8030,frontMatter:{sidebar_position:8030,slug:"2019-12-03",title:"Podman FTP Server Container",authors:"mpolinowski",tags:["LINUX","Smarthome","IoT","Docker"]},sidebar:"tutorialSidebar",previous:{title:"CentOS 8 Cockpit Web Console",permalink:"/docs/DevOps/Linux/2020-01-05--centos8-cockpit/2020-01-05"},next:{title:"Kali Linux with Docker for Windows",permalink:"/docs/DevOps/Linux/2019-09-26--kali-docker-windows/2019-09-26"}},c={},d=[{value:"Building the Docker Image",id:"building-the-docker-image",level:2},{value:"Using the Docker Image",id:"using-the-docker-image",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.ah)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Victory Harbour, Hong Kong",src:r(201710).Z+"",width:"1500",height:"656"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#building-the-docker-image",children:"Building the Docker Image"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#using-the-docker-image",children:"Using the Docker Image"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"building-the-docker-image",children:"Building the Docker Image"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Create the ",(0,t.jsx)(n.code,{children:"Dockerfile"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dockerfile",children:'# Dockerfile for vsftpd on CentOS7\r\nFROM centos:7\r\n\r\nMAINTAINER m.polinowski@gmail.com\r\n\r\nRUN yum -y update; yum -y install which vsftpd net-tools vsftpd-sysvinit; yum clean all\r\n\r\nCOPY vusers.txt /etc/vsftpd/\r\nRUN db_load -T -t hash -f /etc/vsftpd/vusers.txt /etc/vsftpd/vsftpd-virtual-user.db; rm -v /etc/vsftpd/vusers.txt; \\\r\n\tchmod 600 /etc/vsftpd/vsftpd-virtual-user.db\r\nCOPY vsftpd.conf /etc/vsftpd/\r\nCOPY vsftpd.virtual /etc/pam.d/\r\nRUN mkdir -p /home/vftp/ftpuser; chown -R ftp:ftp /home/vftp\r\n\r\nEXPOSE 20 21\r\n\r\nCMD ["/usr/sbin/vsftpd","-obackground=NO"]\n'})}),"\n",(0,t.jsx)(n.p,{children:"We need to create three files before building the image, one for vsftpd virtual users PAM, another vsftpd.conf file and another with the virtual users:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"vsftpd.conf"})," - Server Configuration"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cfg",children:"anonymous_enable=NO\r\nlocal_enable=YES\r\nvirtual_use_local_privs=YES\r\nwrite_enable=YES\r\nlocal_umask=022\r\npam_service_name=vsftpd.virtual\r\nguest_enable=YES\r\nuser_sub_token=$USER\r\nlocal_root=/home/vftp/$USER\r\nchroot_local_user=YES\r\nallow_writeable_chroot=YES\r\nhide_ids=YES\r\nxferlog_enable=YES\r\nxferlog_file=/var/log/vsftpd.log\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"vsftpd.virtual"})," - User Configuration"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"#%PAM-1.0\r\nauth       required     pam_userdb.so db=/etc/vsftpd/vsftpd-virtual-user\r\naccount    required     pam_userdb.so db=/etc/vsftpd/vsftpd-virtual-user\r\nsession    required     pam_loginuid.so\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"vusers.txt"})," - User Login"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"ftpuser\r\nmypassword\n"})}),"\n",(0,t.jsx)(n.p,{children:"With those 4 files in place run the following command from the same directory:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"podman build -t centos-vsftpd .\r\n\r\nSending build context to Docker daemon  5.632kB\r\nStep 1/10 : FROM centos:7\r\n7: Pulling from library/centos\r\nab5ef0e58194: Already exists Digest: sha256:4a701376d03f6b39b8c2a8f4a8e499441b0d567f9ab9d58e4991de4472fb813c\r\nStatus: Downloaded newer image for centos:7\r\n ---\x3e 5e35e350aded\r\nStep 2/10 : MAINTAINER m.polinowski@gmail.com\r\n ---\x3e Running in 1c61a249529e\r\nRemoving intermediate container 1c61a249529e\r\n ---\x3e 36e28ef538a6\r\nStep 3/10 : RUN yum -y update; yum -y install which vsftpd net-tools vsftpd-sysvinit; yum clean all\r\n ---\x3e Running in ae775834a509\r\nLoaded plugins: fastestmirror, ovl\r\nDetermining fastest mirrors\r\n * base: ftp.jaist.ac.jp\r\n * extras: ftp.jaist.ac.jp\r\n * updates: ftp.jaist.ac.jp\r\nResolving Dependencies\r\n--\x3e Running transaction check\r\n\r\n...\r\n\r\nSuccessfully built 76812707f80e\r\nSuccessfully tagged centos-vsftpd:latest\n"})}),"\n",(0,t.jsx)(n.h2,{id:"using-the-docker-image",children:"Using the Docker Image"}),"\n",(0,t.jsx)(n.p,{children:"We can transfer this image to an offline machine by exporting it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"podman save -o centos-vsftpd.docker centos-vsftpd:latest\n"})}),"\n",(0,t.jsx)(n.p,{children:"Copy the exported centos-vsftpd.docker file to your offline PC and import it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"podman load -i centos-vsftpd.docker\r\n\r\nGetting image source signatures\r\nCopying blob 1f3e340aabdd done\r\nCopying blob b6845f432261 done\r\nCopying blob d83f2fa44778 done\r\nCopying blob 77b174a6a187 done\r\nCopying blob d0419636bcc7 done\r\nCopying blob e5dd2d926baa done\r\nCopying blob 9721a5c27b58 done\r\nCopying config 76812707f8 done\r\nWriting manifest to image destination\r\nStoring signatures\r\nLoaded image(s): localhost/centos-vsftpd:latest\n"})}),"\n",(0,t.jsx)(n.p,{children:"Make sure that the FTP user directory exists and can be written to by your podman user:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir /opt/vsftpd\r\nmkdir /opt/vsftpd/ftpuser\r\nchmod 775  /opt/vsftpd/*\n"})}),"\n",(0,t.jsx)(n.p,{children:"And run the container with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"podman images\r\n\r\nREPOSITORY                               TAG               IMAGE ID       CREATED        SIZE\r\nlocalhost/centos-vsftpd                  latest            76812707f80e   2 hours ago    307 MB\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"podman run \\\r\n        --name vsftpd \\\r\n        --net=host \\\r\n        --privileged \\\r\n        --rm \\\r\n        -v /opt/vsftpd/ftpuser/:/home/vftp/ftpuser/ \\\r\n        localhost/centos-vsftpd\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.ah)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>d});var t=r(667294);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,s=function(e,n){if(null==e)return{};var r,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=t.createContext({}),d=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},l={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=d(r),f=s,h=u["".concat(c,".").concat(f)]||u[f]||l[f]||o;return r?t.createElement(h,i(i({ref:n},p),{},{components:r})):t.createElement(h,i({ref:n},p))}));p.displayName="MDXCreateElement"},201710:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-7c8909b135704b02a201872ba4dc0ab9.jpg"}}]);