"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[68749],{357410:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var i=n(785893),r=n(603905);const s={slug:"typical_ci_process",title:"GitLab CI/CD",authors:["mpolinowski"],tags:["DevOps"]},o=void 0,a={permalink:"/blog/typical_ci_process",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-06-02-typical_ci_process/index.md",source:"@site/blog/2019-06-02-typical_ci_process/index.md",title:"GitLab CI/CD",description:"GitLab CI/CD",date:"2019-06-02T00:00:00.000Z",formattedDate:"June 2, 2019",tags:[{label:"DevOps",permalink:"/blog/tags/dev-ops"}],readingTime:8.14,hasTruncateMarker:!0,authors:[{name:"Mike Polinowski",title:"CTO INSTAR Deutschland GmbH",url:"https://github.com/mpolinowski",imageURL:"https://github.com/mpolinowski.png",key:"mpolinowski"}],frontMatter:{slug:"typical_ci_process",title:"GitLab CI/CD",authors:["mpolinowski"],tags:["DevOps"]},unlisted:!1,nextItem:{title:"What is meant by CI/CD?",permalink:"/blog/continuous-integration"}},l={authorsImageUrls:[void 0]},d=[{value:"GitLab CI/CD",id:"gitlab-cicd",level:2},{value:"Overview",id:"overview",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Migrating from CircleCI",id:"migrating-from-circleci",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Feature set",id:"feature-set",level:2},{value:"Code repository",id:"code-repository",level:2},{value:"Static analysis",id:"static-analysis",level:2},{value:"Gradle build script with Findbugs and Checkstyle",id:"gradle-build-script-with-findbugs-and-checkstyle",level:2},{value:"$ gradle check",id:"-gradle-check",level:2},{value:"Packaging and deployment to the test/staging environment",id:"packaging-and-deployment-to-the-teststaging-environment",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.ah)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"gitlab-cicd",children:"GitLab CI/CD"}),"\n",(0,i.jsx)(t.p,{children:"GitLab CI/CD is a tool built into GitLab for software development through the continuous methodologies:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Continuous Integration (CI)"}),"\n",(0,i.jsx)(t.li,{children:"Continuous Delivery (CD)"}),"\n",(0,i.jsx)(t.li,{children:"Continuous Deployment (CD)"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Note"}),": Out-of-the-box management systems can decrease hours spent on maintaining toolchains by 10% or more. Watch our \u201cMastering continuous software development\u201d webcast to learn about continuous methods and how GitLab\u2019s built-in CI can help you simplify and scale software development."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#gitlab-cicd",children:"GitLab CI/CD"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#overview",children:"Overview"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#getting-started",children:"Getting started"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#migrating-from-circleci",children:"Migrating from CircleCI"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#concepts",children:"Concepts"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#configuration",children:"Configuration"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#feature-set",children:"Feature set"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#code-repository",children:"Code repository"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#static-analysis",children:"Static analysis"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#gradle-build-script-with-findbugs-and-checkstyle",children:"Gradle build script with Findbugs and Checkstyle"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#-gradle-check",children:"$ gradle check"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#packaging-and-deployment-to-the-teststaging-environment",children:"Packaging and deployment to the test/staging environment"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(t.p,{children:"Continuous Integration works by pushing small code chunks to your application\u2019s code base hosted in a Git repository, and, to every push, run a pipeline of scripts to build, test, and validate the code changes before merging them into the main branch."}),"\n",(0,i.jsx)(t.p,{children:"Continuous Delivery and Deployment consist of a step further CI, deploying your application to production at every push to the default branch of the repository."}),"\n",(0,i.jsx)(t.p,{children:"These methodologies allow you to catch bugs and errors early in the development cycle, ensuring that all the code deployed to production complies with the code standards you established for your app."}),"\n",(0,i.jsx)(t.p,{children:"For a complete overview of these methodologies and GitLab CI/CD, read the Introduction to CI/CD with GitLab."}),"\n",(0,i.jsx)(t.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,i.jsx)(t.p,{children:"GitLab CI/CD is configured by a file called .gitlab-ci.yml placed at the repository\u2019s root. This file creates a pipeline, which runs for changes to the code in the repository. Pipelines consist of one or more stages that run in order and can each contain one or more jobs that run in parallel. These jobs (or scripts) get executed by the GitLab Runner agent."}),"\n",(0,i.jsx)(t.p,{children:"To get started with GitLab CI/CD, we recommend you read through the following documents:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"How GitLab CI/CD works."}),"\n",(0,i.jsx)(t.li,{children:"Fundamental pipeline architectures."}),"\n",(0,i.jsx)(t.li,{children:"GitLab CI/CD basic workflow."}),"\n",(0,i.jsx)(t.li,{children:"Step-by-step guide for writing .gitlab-ci.yml for the first time."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"If you\u2019re migrating from another CI/CD tool, check out our handy references:"}),"\n",(0,i.jsx)(t.h2,{id:"migrating-from-circleci",children:"Migrating from CircleCI"}),"\n",(0,i.jsx)(t.p,{children:"Migrating from Jenkins\nYou can also get started by using one of the .gitlab-ci.yml templates available through the UI. You can use them by creating a new file, choosing a template that suits your application, and adjusting it to your needs:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Gitlab CI",src:n(111695).Z+"",width:"2872",height:"960"})}),"\n",(0,i.jsx)(t.h2,{id:"concepts",children:"Concepts"}),"\n",(0,i.jsx)(t.p,{children:"GitLab CI/CD uses a number of concepts to describe and run your build and deploy."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Concept"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Pipelines"}),(0,i.jsx)(t.td,{children:"Structure your CI/CD process through pipelines."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Environment variables"}),(0,i.jsx)(t.td,{children:"Reuse values based on a variable/value key pair."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Environments"}),(0,i.jsx)(t.td,{children:"Deploy your application to different environments (e.g., staging, production)."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Job artifacts"}),(0,i.jsx)(t.td,{children:"Output, use, and reuse job artifacts."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Cache dependencies"}),(0,i.jsx)(t.td,{children:"Cache your dependencies for a faster execution."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GitLab Runner"}),(0,i.jsx)(t.td,{children:"Configure your own runners to execute your scripts."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Pipeline efficiency"}),(0,i.jsx)(t.td,{children:"Configure your pipelines to run quickly and effienctly."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(t.p,{children:"GitLab CI/CD supports numerous configuration options:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Configuration"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Schedule pipelines"}),(0,i.jsx)(t.td,{children:"Schedule pipelines to run as often as you need."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Custom path for .gitlab-ci.yml"}),(0,i.jsx)(t.td,{children:"Define a custom path for the CI/CD configuration file."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Git submodules for CI/CD"}),(0,i.jsx)(t.td,{children:"Configure jobs for using Git submodules."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SSH keys for CI/CD"}),(0,i.jsx)(t.td,{children:"Using SSH keys in your CI pipelines."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Pipeline triggers"}),(0,i.jsx)(t.td,{children:"Trigger pipelines through the API."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Pipelines for Merge Requests"}),(0,i.jsx)(t.td,{children:"Design a pipeline structure for running a pipeline in merge requests."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Integrate with Kubernetes clusters"}),(0,i.jsx)(t.td,{children:"Connect your project to Google Kubernetes Engine (GKE) or an existing Kubernetes cluster."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Optimize GitLab and GitLab Runner for large repositories"}),(0,i.jsx)(t.td,{children:"Recommended strategies for handling large repositories."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:".gitlab-ci.yml full reference"}),(0,i.jsx)(t.td,{children:"All the attributes you can use with GitLab CI/CD."})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"Note that certain operations can only be performed according to the user and job permissions."}),"\n",(0,i.jsx)(t.h2,{id:"feature-set",children:"Feature set"}),"\n",(0,i.jsx)(t.p,{children:"Use the vast GitLab CI/CD to easily configure it for specific purposes. Its feature set is listed on the table below according to DevOps stages."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Feature"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Configure"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Auto DevOps"}),(0,i.jsx)(t.td,{children:"Set up your app\u2019s entire lifecycle."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"ChatOps"}),(0,i.jsx)(t.td,{children:"Trigger CI jobs from chat, with results sent back to the channel."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Verify"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Browser Performance Testing"}),(0,i.jsx)(t.td,{children:"Quickly determine the browser performance impact of pending code changes."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Load Performance Testing"}),(0,i.jsx)(t.td,{children:"Quickly determine the server performance impact of pending code changes."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"CI services"}),(0,i.jsx)(t.td,{children:"Link Docker containers with your base image."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Code Quality"}),(0,i.jsx)(t.td,{children:"Analyze your source code quality."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GitLab CI/CD for external repositories"}),(0,i.jsx)(t.td,{children:"Get the benefits of GitLab CI/CD combined with repositories in GitHub and Bitbucket Cloud."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Interactive Web Terminals"}),(0,i.jsx)(t.td,{children:"Open an interactive web terminal to debug the running jobs."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Unit test reports"}),(0,i.jsx)(t.td,{children:"Identify script failures directly on merge requests."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Using Docker images"}),(0,i.jsx)(t.td,{children:"Use GitLab and GitLab Runner with Docker to build and test applications."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Release"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Auto Deploy"}),(0,i.jsx)(t.td,{children:"Deploy your application to a production environment in a Kubernetes cluster."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Building Docker images"}),(0,i.jsx)(t.td,{children:"Maintain Docker-based projects using GitLab CI/CD."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Canary Deployments"}),(0,i.jsx)(t.td,{children:"Ship features to only a portion of your pods and let a percentage of your user base to visit the temporarily deployed feature."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Deploy Boards"}),(0,i.jsx)(t.td,{children:"Check the current health and status of each CI/CD environment running on Kubernetes."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Feature Flags"}),(0,i.jsx)(t.td,{children:"Deploy your features behind Feature Flags."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GitLab Pages"}),(0,i.jsx)(t.td,{children:"Deploy static websites."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GitLab Releases"}),(0,i.jsx)(t.td,{children:"Add release notes to Git tags."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Review Apps"}),(0,i.jsx)(t.td,{children:"Configure GitLab CI/CD to preview code changes."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Cloud deployment"}),(0,i.jsx)(t.td,{children:"Deploy your application to a main cloud provider."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Secure"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Container Scanning"}),(0,i.jsx)(t.td,{children:"Check your Docker containers for known vulnerabilities."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Dependency Scanning"}),(0,i.jsx)(t.td,{children:"Analyze your dependencies for known vulnerabilities."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"License Compliance"}),(0,i.jsx)(t.td,{children:"Search your project dependencies for their licenses."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Security Test reports"}),(0,i.jsx)(t.td,{children:"Check for app vulnerabilities."})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"#####################"}),"\n",(0,i.jsx)(t.p,{children:"Continuous Integration (CI) is a phase in the software development cycle where code from different team members or different features are integrated together. This usually involves merging code (integration), building the application and carrying out basic tests all within an ephemeral environment."}),"\n",(0,i.jsx)(t.p,{children:"In the past, the code was integrated at an \u201cintegration phase\u201d of the software development life cycle. This phase came after different teams would have spent weeks, months or even years working in separately, dedicated to different (parts of) application or services. You can guess how painful the integration phase of the project would have been. It was not uncommon to spend weeks or even months in this phase. This was during the waterfall era."}),"\n",(0,i.jsx)(t.p,{children:"With Extreme Programming (XP) and agile, integration became frequent with developers integrating as often as possible usually soon after a unit is complete. This is done on the shared source code repository. The frequent integration became automated and continuous which prompted the need for some kind of checks before the new code is integrated. Thus, Continuous Integration."}),"\n",(0,i.jsx)(t.p,{children:"CI workflows vary a lot depending on tools, programming language, project and many other factors but a common flow has these steps."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Pushing to the code repository"}),"\n",(0,i.jsx)(t.li,{children:"Static analysis"}),"\n",(0,i.jsx)(t.li,{children:"Pre-deployment testing"}),"\n",(0,i.jsx)(t.li,{children:"Packaging and deployment to the test environment"}),"\n",(0,i.jsx)(t.li,{children:"Post-deployment testing"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Let\u2019s take a look at how this flow would work on a java project with Gradle as the build tool."}),"\n",(0,i.jsx)(t.h2,{id:"code-repository",children:"Code repository"}),"\n",(0,i.jsx)(t.p,{children:"Typically, there would have a code repository and some kind of workflow for contributing new code. Depending on the workflow, committing code kicks off the CI pipeline, which often starts with static code analysis. You could refer to this post to help choose an appropriate workflow."}),"\n",(0,i.jsx)(t.h2,{id:"static-analysis",children:"Static analysis"}),"\n",(0,i.jsx)(t.p,{children:"Static (code) analysis is done on the code base of the application without the need to run the software. The goal here is to ensure the code doesn\u2019t have possible bugs and conforms to standard formatting and styling."}),"\n",(0,i.jsx)(t.p,{children:"Let\u2019s add FindBugs to check for possible errors and Checkstyle to ensure the project conforms to coding standard (we\u2019ll use the Google Java Style)."}),"\n",(0,i.jsx)(t.p,{children:"The Gradle build script would be something like this:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"apply plugin: 'java'\napply plugin: 'findbugs'\napply plugin: 'checkstyle'\n\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n  ...\n}\n\ntasks.withType(FindBugs) {\n  reports {\n    xml.enabled false\n    html.enabled true\n  }\n}\n\ntasks.withType(Checkstyle) {\n  reports {\n    xml.enabled false\n    html.enabled true\n  }\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"gradle-build-script-with-findbugs-and-checkstyle",children:"Gradle build script with Findbugs and Checkstyle"}),"\n",(0,i.jsx)(t.p,{children:"To complete the Checkstyle configuration, we\u2019ll need to add a Checkstyle configuration file to the project path config/checkstyle/checkstyle.xml. There\u2019s a sample config file on GitHub based on the Google Java style. With FindBugs and Checkstyle configured, static analysis can now be run:"}),"\n",(0,i.jsx)(t.h2,{id:"-gradle-check",children:"$ gradle check"}),"\n",(0,i.jsx)(t.p,{children:"At this phase, any test that could be run without deploying to a server should be. This will include unit tests and various other types of tests (maybe functional or integration). This phase is used to ensure that the change set doesn\u2019t break functionalities and works well with other parts code since the tests are run on the whole code base, not just the new changes (as the author might have done on the dev env)."}),"\n",(0,i.jsx)(t.h2,{id:"packaging-and-deployment-to-the-teststaging-environment",children:"Packaging and deployment to the test/staging environment"}),"\n",(0,i.jsx)(t.p,{children:"Depending on the kind of project, the application is built, packaged, sent to a test or staging environment (that mimics production). This ensures that the integrated changes build well with other parts and can be deployed for a functional test can to be carried out. It\u2019s at this phase that we also verify that the new changes are compatible with other libraries and the deployment environment. This is phase should also automated."}),"\n",(0,i.jsx)(t.p,{children:"For tests that need the application to be deployed, this phase of the CI pipeline is where they\u2019re run. The tests vary depending on tools, frameworks, and language of the application but they\u2019re usually functional integration and performance tests. Successful execution of this phase ends the CI pipeline for the changeset signalling it\u2019s good enough for users."}),"\n",(0,i.jsx)(t.p,{children:"Once the CI pipeline completes successfully, the deployed application could undergo a manual test by a \u201cuser\u201d or the QA team to ensure that it fits the client\u2019s requirements. The packages or artifacts generated by the CI pipeline can now be taken/deployed to production. This can also be automated with a successful implementation of a Continuous Delivery (CD) pipeline."}),"\n",(0,i.jsx)(t.p,{children:"Hope you find this useful. look forward to seeing how this is implemented for different projects."})]})}function h(e={}){const{wrapper:t}={...(0,r.ah)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},603905:(e,t,n)=>{n.d(t,{ah:()=>d});var i=n(667294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),d=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,h=a(e,["components","mdxType","originalType","parentName"]),u=d(n),p=r,g=u["".concat(l,".").concat(p)]||u[p]||c[p]||s;return n?i.createElement(g,o(o({ref:t},h),{},{components:n})):i.createElement(g,o({ref:t},h))}));h.displayName="MDXCreateElement"},111695:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/gitlab-ci-yml-39aa867cf00d68637e5554ba9a0633a8.png"}}]);