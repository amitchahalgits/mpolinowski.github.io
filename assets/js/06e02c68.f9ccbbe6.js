"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[45769],{164751:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var s=t(474848),r=t(28453);const a={sidebar_position:4050,slug:"2022-10-22",title:"Hashicorp Nomad Sidecar Pattern",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"],description:"Combine two applications in a single Nomad Job."},i=void 0,o={id:"DevOps/Hashicorp/2022-10-22-hashicorp-nomad-sidecar-pattern/index",title:"Hashicorp Nomad Sidecar Pattern",description:"Combine two applications in a single Nomad Job.",source:"@site/docs/DevOps/Hashicorp/2022-10-22-hashicorp-nomad-sidecar-pattern/index.md",sourceDirName:"DevOps/Hashicorp/2022-10-22-hashicorp-nomad-sidecar-pattern",slug:"/DevOps/Hashicorp/2022-10-22-hashicorp-nomad-sidecar-pattern/2022-10-22",permalink:"/docs/DevOps/Hashicorp/2022-10-22-hashicorp-nomad-sidecar-pattern/2022-10-22",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-10-22-hashicorp-nomad-sidecar-pattern/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Consul",permalink:"/docs/tags/consul"},{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:4050,frontMatter:{sidebar_position:4050,slug:"2022-10-22",title:"Hashicorp Nomad Sidecar Pattern",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"],description:"Combine two applications in a single Nomad Job."},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Nomad - Working with Consul Connect",permalink:"/docs/DevOps/Hashicorp/2022-10-23-hashicorp-consul-connect/2022-10-23"},next:{title:"Hashicorp Nomad to set up an OSTicket Helpdesk - Part I",permalink:"/docs/DevOps/Hashicorp/2022-10-21-hashicorp-nomad-for-osticket-part-i/2022-10-21"}},c={},d=[{value:"SSL Proxy as a Sidecar",id:"ssl-proxy-as-a-sidecar",level:2},{value:"Run the Job",id:"run-the-job",level:2},{value:"Complete Jobfile",id:"complete-jobfile",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Shen Zhen, China",src:t(627317).A+"",width:"2230",height:"839"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#ssl-proxy-as-a-sidecar",children:"SSL Proxy as a Sidecar"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#run-the-job",children:"Run the Job"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#complete-jobfile",children:"Complete Jobfile"})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Based on the ",(0,s.jsx)(n.a,{href:"https://github.com/lastlegion/Container-Patterns-With-Nomad/blob/master/sidecar/app.nomad",children:"Github Repository"})," from ",(0,s.jsx)(n.a,{href:"https://iyer.ai/",children:"@lastlegion"}),". But I found a couple of deprecation issues that needed to be ironed out."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"ssl-proxy-as-a-sidecar",children:"SSL Proxy as a Sidecar"}),"\n",(0,s.jsx)(n.p,{children:"The sidecar pattern is made up of 2 containers:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"application container"}),"\n",(0,s.jsx)(n.li,{children:"sidecar container"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Sidecar services augment other application and are scheduled on the ",(0,s.jsx)(n.strong,{children:"Same Host"})," using Nomad\u2019s ",(0,s.jsx)(n.strong,{children:"Group Stanza"}),". The application build consists of the ",(0,s.jsx)(n.a,{href:"https://github.com/hashicorp/http-echo",children:"Hashicorp HTTP Echo Server"})," - standing in as a template Webfrontend - and an ",(0,s.jsx)(n.a,{href:"https://www.nginx.com/",children:"NGINX"})," Sidecar Proxy. The HTTP server is configured to return a simple ",(0,s.jsx)(n.em,{children:"Hello World"})," string and listening on port ",(0,s.jsx)(n.code,{children:"8080"})," - a port that is not accessible outside from localhost:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'config {\n        image = "hashicorp/http-echo:latest"\n        ports = [\n          "http",\n        ]\n        args  = [\n          "-listen", ":${NOMAD_PORT_http}",\n          "-text", "Hello World!",\n        ]\n      }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The NGINX reverse-proxy can be configured using Nomad's ",(0,s.jsx)(n.strong,{children:"Template Stanza"})," to listen on a different port that is accessible from the internet and forward all incoming traffic to our HTTP server:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'template {\n        data = <<EOF\n          worker_processes  1;\n          events {\n              worker_connections  1024;\n          }\n          http {\n              include       mime.types;\n              default_type  application/octet-stream;\n              sendfile        on;\n              keepalive_timeout  65;\n              upstream backend {\n                {{ range service "app-server" }}\n                server {{ .Address }}:{{ .Port }};\n                {{ else }}server 127.0.0.1:65535; # force a 502\n                {{ end }}\n              }\n              server {\n                listen       8015 ssl;\n                server_name  localhost;\n                ssl_certificate      /secrets/certificate.crt;\n                ssl_certificate_key  /secrets/certificate.key;\n                location / {\n                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                  proxy_set_header Host $http_host;\n                  proxy_pass http://backend;\n                }\n              }\n          }\n        EOF\n        destination = "config/nginx.conf"\n      }\n      template {\n        # Warning: Fetch certificate from a secret store like vault in a production setting\n        data = <<EOF\n-----BEGIN CERTIFICATE-----\nMIIDajCCAlKgAwIBAgITPAgZrdQO2jRhM/KkR8Czc1iC+jANBgkqhkiG9w0BAQsF\n...\njlw8JveeVvRFTvdwW23+JHnTvqpremm5PhmvPPnRNOhR1WhKxvJWWdeYDBjBoaPo\nvAIDwNat6MpbCNH6pSs=\n-----END CERTIFICATE-----\n        EOF\n        destination = "secrets/certificate.crt"\n      }\n      template {\n        # Warning: Fetch certificate from a secret store like vault in a production setting\n        data = <<EOF\n-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDtReLnMCGfM6jI\n...\nEFG7bYgACbS289cpWA2nmcfhhGn7tV26xLuMFma0GQhr6jpQbuqONbrnlyRJGvMr\n7iyk7nrNu9Ez3yM9zVMuvIJH\n-----END PRIVATE KEY-----\n        EOF\n        destination = "secrets/certificate.key"\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Here we are using a set of self-signed TLS certificates to accept HTTPS traffic on port ",(0,s.jsx)(n.code,{children:"8015"})," (I am using a none default port to de-conflict with another service running on this host), takes care of the TLS termination and forwards the request to our application container using a Nomad variables ",(0,s.jsx)(n.code,{children:'{{ range service "app-server" }}'}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"run-the-job",children:"Run the Job"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'nomad plan tls_sidecar.tf\n+ Job: "ssl-proxy-example"\n+ Task Group: "ssl-proxy" (1 create)\n  + Task: "app-server" (forces create)\n  + Task: "ssl-proxy-sidecar" (forces create)\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nJob Modify Index: 0\nTo submit the job with version verification run:\n\nnomad job run -check-index 0 tls_sidecar.tf\n'})}),"\n",(0,s.jsxs)(n.p,{children:["After running the job with the command above I can see the successful service registration in ",(0,s.jsx)(n.strong,{children:"Consul"}),". Here I can already see that the HTTP request results in the ",(0,s.jsx)(n.code,{children:"Hello World"})," response - so this is the Consul client directly interacting with the app container through the port that is only accessible on ",(0,s.jsx)(n.em,{children:"localhost"}),":"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Hashicorp Nomad Sidecar Pattern",src:t(680872).A+"",width:"888",height:"775"})}),"\n",(0,s.jsxs)(n.p,{children:["Switching to ",(0,s.jsx)(n.strong,{children:"Nomad"})," I can see that both services - the app and my proxy sidecar - was successfully deployed:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Hashicorp Nomad Sidecar Pattern",src:t(966147).A+"",width:"1051",height:"673"})}),"\n",(0,s.jsx)(n.p,{children:"And finally testing the HTTPS connection - everything works as expected! My request is received by the NGINX proxy, TLS is terminated and the request then forwarded to the app. Sweet!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl --insecure https://myserverip:8015\nHello World!\n"})}),"\n",(0,s.jsx)(n.h2,{id:"complete-jobfile",children:"Complete Jobfile"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'job "ssl-proxy" {\n  datacenters=["mydc"]\n  group "ssl-proxy" {\n        \n    network {\n        port "http" {\n            static = 8080\n        }\n        port "https" {\n            static = 8015\n        }\n    }\n\n    service {\n      name = "app-server"\n      port = "http"\n\n      check {\n        type     = "http"\n        port     = "http"\n        path     = "/"\n        interval = "2s"\n        timeout  = "2s"\n      }\n    }\n\n    task "app-server" {\n      driver = "docker"\n\n      config {\n        image = "hashicorp/http-echo:latest"\n        ports = [\n          "http",\n        ]\n        args  = [\n          "-listen", ":${NOMAD_PORT_http}",\n          "-text", "Hello World!",\n        ]\n      }\n    }\n\n    task "ssl-proxy-sidecar" {\n      driver = "docker"\n      config {\n        image = "nginx"\n        ports = [\n          "https",\n        ]\n        volumes = [\n          "config/nginx.conf:/etc/nginx/nginx.conf",\n          "secrets/certificate.crt:/secrets/certificate.crt",\n          "secrets/certificate.key:/secrets/certificate.key",\n        ]\n      }\n      \n      template {\n        data = <<EOF\n          worker_processes  1;\n          events {\n              worker_connections  1024;\n          }\n          http {\n              include       mime.types;\n              default_type  application/octet-stream;\n              sendfile        on;\n              keepalive_timeout  65;\n              upstream backend {\n                {{ range service "app-server" }}\n                server {{ .Address }}:{{ .Port }};\n                {{ else }}server 127.0.0.1:65535; # force a 502\n                {{ end }}\n              }\n              server {\n                listen       8015 ssl;\n                server_name  localhost;\n                ssl_certificate      /secrets/certificate.crt;\n                ssl_certificate_key  /secrets/certificate.key;\n                location / {\n                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                  proxy_set_header Host $http_host;\n                  proxy_pass http://backend;\n                }\n              }\n          }\n        EOF\n        destination = "config/nginx.conf"\n      }\n      template {\n        # Warning: Fetch certificate from a secret store like vault in a production setting\n        data = <<EOF\n-----BEGIN CERTIFICATE-----\nMIIDajCCAlKgAwIBAgITPAgZrdQO2jRhM/KkR8Czc1iC+jANBgkqhkiG9w0BAQsF\n...\njlw8JveeVvRFTvdwW23+JHnTvqpremm5PhmvPPnRNOhR1WhKxvJWWdeYDBjBoaPo\nvAIDwNat6MpbCNH6pSs=\n-----END CERTIFICATE-----\n        EOF\n        destination = "secrets/certificate.crt"\n      }\n      template {\n        # Warning: Fetch certificate from a secret store like vault in a production setting\n        data = <<EOF\n-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDtReLnMCGfM6jI\n...\nEFG7bYgACbS289cpWA2nmcfhhGn7tV26xLuMFma0GQhr6jpQbuqONbrnlyRJGvMr\n7iyk7nrNu9Ez3yM9zVMuvIJH\n-----END PRIVATE KEY-----\n        EOF\n        destination = "secrets/certificate.key"\n      }\n    }\n  }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},966147:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/Hashicorp-Nomad-Sidecar-Pattern_01-96e441bdeaf40e8af47a0f496d531871.png"},680872:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/Hashicorp-Nomad-Sidecar-Pattern_02-0cc5de70097025427e3c5b4fe633a5d7.png"},627317:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(296540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);