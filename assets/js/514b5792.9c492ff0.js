"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[11878],{1930:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>t,metadata:()=>i,toc:()=>h});var a=s(785893),n=s(603905);const t={sidebar_position:6050,slug:"2021-09-14",title:"PostgreSQL 14 Database Refresher :: Working with GraphQL",authors:"mpolinowski",tags:["SQL","GraphQL"]},o=void 0,i={id:"DevOps/Provisioning/2021-09-14--postgres-refresher-hasura/index",title:"PostgreSQL 14 Database Refresher :: Working with GraphQL",description:"Shenzhen, China",source:"@site/docs/DevOps/Provisioning/2021-09-14--postgres-refresher-hasura/index.md",sourceDirName:"DevOps/Provisioning/2021-09-14--postgres-refresher-hasura",slug:"/DevOps/Provisioning/2021-09-14--postgres-refresher-hasura/2021-09-14",permalink:"/docs/DevOps/Provisioning/2021-09-14--postgres-refresher-hasura/2021-09-14",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Provisioning/2021-09-14--postgres-refresher-hasura/index.md",tags:[{label:"SQL",permalink:"/docs/tags/sql"},{label:"GraphQL",permalink:"/docs/tags/graph-ql"}],version:"current",sidebarPosition:6050,frontMatter:{sidebar_position:6050,slug:"2021-09-14",title:"PostgreSQL 14 Database Refresher :: Working with GraphQL",authors:"mpolinowski",tags:["SQL","GraphQL"]},sidebar:"tutorialSidebar",previous:{title:"PostgreSQL 14 Database Refresher :: Working with JSON & Node.js",permalink:"/docs/DevOps/Provisioning/2021-09-14--postgres-refresher-node-json/2021-09-14"},next:{title:"PostgreSQL 14 Database Refresher :: Introduction Part II",permalink:"/docs/DevOps/Provisioning/2021-09-13--postgres-refresher-part-ii/2021-09-13"}},c={},h=[{value:"Hasura GraphQL",id:"hasura-graphql",level:2},{value:"docker-compose",id:"docker-compose",level:3},{value:"docker",id:"docker",level:3}];function d(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.ah)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.p,{children:(0,a.jsx)(r.img,{alt:"Shenzhen, China",src:s(791838).Z+"",width:"1500",height:"392"})}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.a,{href:"#hasura-graphql",children:"Hasura GraphQL"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"#docker-compose",children:"docker-compose"})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"#docker",children:"docker"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"hasura-graphql",children:"Hasura GraphQL"}),"\n",(0,a.jsxs)(r.p,{children:["The ",(0,a.jsx)(r.a,{href:"https://hasura.io/docs/latest/graphql/core/index.html",children:"Hasura GraphQL"})," engine makes your data instantly accessible over a real-time GraphQL API, so you can build and ship modern apps and APIs faster. Hasura connects to your databases, REST servers, GraphQL servers, and third party APIs to provide a unified realtime GraphQL API across all your data sources."]}),"\n",(0,a.jsx)(r.p,{children:"This guide will help you get the Hasura GraphQL engine and a Postgres database to store its metadata running as Docker containers using Docker Compose. This is the easiest way to set up Hasura GraphQL engine on your local environment."}),"\n",(0,a.jsx)(r.h3,{id:"docker-compose",children:"docker-compose"}),"\n",(0,a.jsx)(r.p,{children:"This sets up both Postgres v12 and Hasura GraphQL:"}),"\n",(0,a.jsxs)(r.p,{children:["The ",(0,a.jsx)(r.a,{href:"https://github.com/hasura/graphql-engine/tree/stable/install-manifests",children:"hasura/graphql-engine/install-manifests"})," repo contains all installation manifests required to deploy Hasura anywhere. Get the docker compose file from there:"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"curl https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/docker-compose/docker-compose.yaml -o docker-compose.yml\n"})}),"\n",(0,a.jsx)(r.p,{children:"The following command will run Hasura GraphQL engine along with a Postgres database to store its metadata."}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"docker-compose up -d\n"})}),"\n",(0,a.jsx)(r.h3,{id:"docker",children:"docker"}),"\n",(0,a.jsxs)(r.p,{children:["This works without issues with my Postgres v14 docker installation on host ",(0,a.jsx)(r.code,{children:"192.168.2.111"}),":"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"docker run -d -p 8080:8080 \\\r\n  -e HASURA_GRAPHQL_DATABASE_URL=postgresql://postgres:secretpassword@192.168.2.111:5432/message_boards \\\r\n  -e HASURA_GRAPHQL_ENABLE_CONSOLE=true --name=hasura --rm \\\r\n  hasura/graphql-engine:latest\n"})}),"\n",(0,a.jsxs)(r.p,{children:["After the container is started visit the IP of your docker host on port ",(0,a.jsx)(r.code,{children:"8080"}),". Go to data and track all your data:"]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.img,{alt:"Postgres Hasura GraphQL",src:s(396885).Z+"",width:"1007",height:"482"})}),"\n",(0,a.jsx)(r.p,{children:"I can now query the data from my PG database using Graph queries in GraphiQL:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-json",children:"{\r\n  boards(where: { board_id: { _eq: 39 } }) {\r\n    board_id\r\n    board_name\r\n    board_description\r\n  }\r\n  comments(where: { board_id: { _eq: 39 } }) {\r\n    board_id\r\n    comment\r\n    comment_id\r\n    time\r\n    user_id\r\n  }\r\n}\n"})}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.img,{alt:"Postgres Hasura GraphQL",src:s(675199).Z+"",width:"1237",height:"971"})})]})}function l(e={}){const{wrapper:r}={...(0,n.ah)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},603905:(e,r,s)=>{s.d(r,{ah:()=>h});var a=s(667294);function n(e,r,s){return r in e?Object.defineProperty(e,r,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[r]=s,e}function t(e,r){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),s.push.apply(s,a)}return s}function o(e){for(var r=1;r<arguments.length;r++){var s=null!=arguments[r]?arguments[r]:{};r%2?t(Object(s),!0).forEach((function(r){n(e,r,s[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):t(Object(s)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(s,r))}))}return e}function i(e,r){if(null==e)return{};var s,a,n=function(e,r){if(null==e)return{};var s,a,n={},t=Object.keys(e);for(a=0;a<t.length;a++)s=t[a],r.indexOf(s)>=0||(n[s]=e[s]);return n}(e,r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(a=0;a<t.length;a++)s=t[a],r.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(n[s]=e[s])}return n}var c=a.createContext({}),h=function(e){var r=a.useContext(c),s=r;return e&&(s="function"==typeof e?e(r):o(o({},r),e)),s},d={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},l=a.forwardRef((function(e,r){var s=e.components,n=e.mdxType,t=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=h(s),u=n,g=p["".concat(c,".").concat(u)]||p[u]||d[u]||t;return s?a.createElement(g,o(o({ref:r},l),{},{components:s})):a.createElement(g,o({ref:r},l))}));l.displayName="MDXCreateElement"},396885:(e,r,s)=>{s.d(r,{Z:()=>a});const a=s.p+"assets/images/Postgres_Hasura_GraphQL_01-391eccb4aaea408a3f930fb53ab7bb89.png"},675199:(e,r,s)=>{s.d(r,{Z:()=>a});const a=s.p+"assets/images/Postgres_Hasura_GraphQL_02-a197c5f90e1b212f21d3016622168206.png"},791838:(e,r,s)=>{s.d(r,{Z:()=>a});const a=s.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-71f2b7209f58ecc12682d4095513b1b8.jpg"}}]);