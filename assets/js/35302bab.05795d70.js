"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[57605],{529968:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>d});var i=r(785893),s=r(603905);const t={sidebar_position:5060,slug:"2022-01-25",title:"Running a DNS Server with Docker",authors:"mpolinowski",tags:["LINUX"]},o=void 0,a={id:"DevOps/Provisioning/2022-01-25--installing-bind9-docker/index",title:"Running a DNS Server with Docker",description:"Shenzhen, China",source:"@site/docs/DevOps/Provisioning/2022-01-25--installing-bind9-docker/index.md",sourceDirName:"DevOps/Provisioning/2022-01-25--installing-bind9-docker",slug:"/DevOps/Provisioning/2022-01-25--installing-bind9-docker/2022-01-25",permalink:"/docs/DevOps/Provisioning/2022-01-25--installing-bind9-docker/2022-01-25",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Provisioning/2022-01-25--installing-bind9-docker/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:5060,frontMatter:{sidebar_position:5060,slug:"2022-01-25",title:"Running a DNS Server with Docker",authors:"mpolinowski",tags:["LINUX"]},sidebar:"tutorialSidebar",previous:{title:"DNS Over TLS Using BIND And Nginx",permalink:"/docs/DevOps/Provisioning/2022-01-26--dns-over-TLS-docker/2022-01-26"},next:{title:"Getting to know the BIND9 DNS Server with Docker",permalink:"/docs/DevOps/Provisioning/2022-01-24--getting-to-know-bind9-docker/2022-01-24"}},c={},d=[{value:"Preparations",id:"preparations",level:2},{value:"Network Setup",id:"network-setup",level:3},{value:"DNS Server Configuration",id:"dns-server-configuration",level:3},{value:"Build the Docker Image",id:"build-the-docker-image",level:3},{value:"Run the Docker Container",id:"run-the-docker-container",level:2},{value:"Connecting Services",id:"connecting-services",level:3}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.ah)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Shenzhen, China",src:r(735641).Z+"",width:"1500",height:"671"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#preparations",children:"Preparations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#network-setup",children:"Network Setup"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#dns-server-configuration",children:"DNS Server Configuration"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#build-the-docker-image",children:"Build the Docker Image"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#run-the-docker-container",children:"Run the Docker Container"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#connecting-services",children:"Connecting Services"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This tutorial is largely based on the Medium article by ",(0,i.jsx)(n.a,{href:"https://medium.com/nagoya-foundation/running-a-dns-server-in-docker-61cc2003e899",children:"foo0x29a"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Besides the standard numbers-and-dots notation for Internet addresses, you can also refer to a host by a symbolic name.  The advantage of a symbolic name is that it is usually easier to remember.  For example, the machine with Internet address ",(0,i.jsx)(n.code,{children:"158.121.106.19"})," is also known as ",(0,i.jsx)(n.code,{children:"alpha.gnu.org"}),"; and other machines in the ",(0,i.jsx)(n.code,{children:"gnu.org"})," domain can refer to it simply as ",(0,i.jsx)(n.code,{children:"alpha"}),". The ",(0,i.jsx)(n.strong,{children:"Domain Name System"})," (DNS) is a service that translates domain names into IP addresses."]}),"\n",(0,i.jsxs)(n.p,{children:["Internally, the system uses a database to keep track of the mapping between host names and host numbers. The name resolution in the Linux environments is described in the ",(0,i.jsx)(n.code,{children:"/etc/nsswitch.conf"})," file. By default, it has an entry with ",(0,i.jsx)(n.code,{children:"files dns"}),", which means it will first check the ",(0,i.jsx)(n.code,{children:"/etc/hosts"})," file, and then the DNS server."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://www.isc.org/bind/",children:"BIND 9"})," is transparent open source, licensed under the MPL 2.0 license. BIND 9 has evolved to be a very flexible, full-featured DNS system. BIND is used successfully for every application from publishing the (DNSSEC-signed) DNS root zone and many top-level domains, to hosting providers who publish very large zone files with many small zones, to enterprises with both internal (private) and external zones, to service providers with large resolver farms."]}),"\n",(0,i.jsx)(n.h2,{id:"preparations",children:"Preparations"}),"\n",(0,i.jsx)(n.h3,{id:"network-setup",children:"Network Setup"}),"\n",(0,i.jsxs)(n.p,{children:["To be able to operate the DNS container with static IP addresses I am going to create Docker network first. The following command creates an arbitrary called network ",(0,i.jsx)(n.code,{children:"instar-net"})," with range ",(0,i.jsx)(n.code,{children:"172.24.0.0/16"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker network create --subnet=172.24.0.0/16 instar-net\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dns-server-configuration",children:"DNS Server Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["First I create a file to start configuring the Bind9 server ",(0,i.jsx)(n.code,{children:"named.conf.options"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mkdir -p /opt/bind9/configuration\r\nnano /opt/bind9/configuration/named.conf.options\n"})}),"\n",(0,i.jsx)(n.p,{children:"This will make sure that BIND is listening on all interfaces and will use the Google DNS Servers as forwarders:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'options {\r\n    directory "/var/cache/bind";\r\n\r\n    recursion yes;\r\n    listen-on { any; };\r\n\r\n    forwarders {\r\n            8.8.8.8;\r\n            4.4.4.4;\r\n    };\r\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Next, I will Define a ",(0,i.jsx)(n.strong,{children:"Zone"})," called ",(0,i.jsx)(n.code,{children:"instar-net.io"}),", that points to ",(0,i.jsx)(n.code,{children:"/etc/bind/zones/db.instar-net.io"})," ",(0,i.jsx)(n.strong,{children:"Zone File"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"nano /opt/bind9/configuration/named.conf.local\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'zone "instar-net.io" {\r\n    type master;\r\n    file "/etc/bind/zones/db.instar-net.io";\r\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Zone File"})," called ",(0,i.jsx)(n.code,{children:"db.instar-net.io"})," lists all the services that need to be managed (e.g. Docker container on the Docker network) and assigns them a hostname and an IP address:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"nano /opt/bind9/configuration/db.instar-net.io\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:"$TTL    1d ; default expiration time (in seconds) of all RRs without their own TTL value\r\n@       IN      SOA     ns1.instar-net.io. root.instar-net.io. (\r\n                  3      ; Serial\r\n                  1d     ; Refresh\r\n                  1h     ; Retry\r\n                  1w     ; Expire\r\n                  1h )   ; Negative Cache TTL\r\n\r\n; name servers - NS records\r\n     IN      NS      ns1.instar-net.io.\r\n\r\n; name servers - A records\r\nns1.instar-net.io.             IN      A      172.24.0.2\r\n\r\nservice1.instar-net.io.        IN      A      172.24.0.3\r\nservice2.instar-net.io.        IN      A      172.24.0.4\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the example, there are two hosts ",(0,i.jsx)(n.code,{children:"service1.instar-net.io"})," and ",(0,i.jsx)(n.code,{children:"service2.instar-net.io"}),", and one name server ",(0,i.jsx)(n.code,{children:"ns1.instar-net.io"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"build-the-docker-image",children:"Build the Docker Image"}),"\n",(0,i.jsxs)(n.p,{children:["I want to use the ",(0,i.jsx)(n.a,{href:"https://hub.docker.com/r/internetsystemsconsortium/bind9",children:"official Docker Image"})," of ",(0,i.jsx)(n.a,{href:"https://www.isc.org/bind/",children:"BIND 9"})," but install a couple of additional dependencies and directly add my configuration files to it instead of mounting them into the container:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"nano /opt/bind9/Dockerfile\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:'FROM internetsystemsconsortium/bind9:9.18\r\n\r\nRUN apt update \\\r\n  && apt install -y \\\r\n  bind9-doc \\\r\n  dnsutils \\\r\n  geoip-bin \\\r\n  mariadb-server \\\r\n  net-tools\r\n\r\n# Copy configuration files\r\nCOPY configuration/named.conf.options /etc/bind/\r\nCOPY configuration/named.conf.local /etc/bind/\r\nCOPY configuration/db.instar-net.io /etc/bind/zones/\r\n\r\n# Expose Ports\r\nEXPOSE 53/tcp\r\nEXPOSE 53/udp\r\nEXPOSE 953/tcp\r\n\r\n# Start the Name Service\r\nCMD ["/usr/sbin/named", "-g", "-c", "/etc/bind/named.conf", "-u", "bind"]\n'})}),"\n",(0,i.jsx)(n.p,{children:"I can now build and tag the BIND image:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker build -t ddns-master .\n"})}),"\n",(0,i.jsx)(n.h2,{id:"run-the-docker-container",children:"Run the Docker Container"}),"\n",(0,i.jsxs)(n.p,{children:["The container has now to be created inside the Docker network ",(0,i.jsx)(n.code,{children:"instar-net"})," with the IP address assigned to it inside ",(0,i.jsx)(n.code,{children:"db.instar-net.io"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run -d --rm --name=ddns-master --net=instar-net --ip=172.24.0.2 ddns-master\n"})}),"\n",(0,i.jsx)(n.p,{children:"I can now verify my server configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker exec -ti ddns-master /bin/bash\r\nnamed-checkconf\r\nnamed-checkzone instar-net.io /etc/bind/zones/db.instar-net.io\r\nzone instar-net.io/IN: loaded serial 3\r\nOK\n"})}),"\n",(0,i.jsx)(n.h3,{id:"connecting-services",children:"Connecting Services"}),"\n",(0,i.jsx)(n.p,{children:"Now it is possible to run the two service container using the dns-server container as a DNS server (I am using NGINX container because I already have the image. Use whatever container you want):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'docker run -d --rm --name=service1 --net=instar-net --ip=172.24.0.3 --dns=172.24.0.2 nginx:1.21.6-alpine /bin/ash -c "while :; do sleep 10; done"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'sudo docker run -d --rm --name=service2 --net=instar-net --ip=172.24.0.4 --dns=172.24.0.2 nginx:1.21.6-alpine /bin/ash -c "while :; do sleep 10; done"\n'})}),"\n",(0,i.jsx)(n.p,{children:"All container now run on the same network:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'docker network inspect instar-net\r\n\r\n[\r\n    {\r\n        "Name": "instar-net",\r\n        "IPAM": {\r\n            "Config": [\r\n                {\r\n                    "Subnet": "172.24.0.0/16"\r\n                }\r\n            ]\r\n        },\r\n        "Containers": {\r\n            "04bd7e3b3a033fd643d36fff787cda485dc5f3d4468212568b8ff4498e776993": {\r\n                "Name": "ddns-master",\r\n                "IPv4Address": "172.24.0.2/16"\r\n            },\r\n            "14deb32e260d15ff8543571f2c5fd1d99eeb9ba97042a97c34d9b933525ca8aa": {\r\n                "Name": "service2",\r\n                "IPv4Address": "172.24.0.4/16"\r\n            },\r\n            "cb6840cfd76d360dfe4cefc96486a11cd4b73f405d114c2830fd792c4883dd8b": {\r\n                "Name": "service1",\r\n                "IPv4Address": "172.24.0.3/16"\r\n            }\r\n        },\r\n    }\r\n]\n'})}),"\n",(0,i.jsx)(n.p,{children:"I can test the DNS Service by connecting to one of the client service and ping the other:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker exec -it service1 nslookup service2.instar-net.io                                                         \r\nServer:         127.0.0.11\r\nAddress:        127.0.0.11:53\r\n\r\nName:   service2.instar-net.io\r\nAddress: 172.24.0.4\n"})}),"\n",(0,i.jsx)(n.p,{children:"Also the forwarder is doing it's job allowing me to resolve domains outside of the defined zone:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker exec -it service1 nslookup google.com                                                                     \r\nServer:         127.0.0.11\r\nAddress:        127.0.0.11:53\r\n\r\nNon-authoritative answer:\r\nName:   google.com\r\nAddress: 142.250.185.238\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here we can see that the reply is ",(0,i.jsx)(n.strong,{children:"Non-authoritative"})," - meaning that the DNS server we asked had to forward the request because it did not know the answer."]})]})}function h(e={}){const{wrapper:n}={...(0,s.ah)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>d});var i=r(667294);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function t(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,i)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?t(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,i,s=function(e,n){if(null==e)return{};var r,i,s={},t=Object.keys(e);for(i=0;i<t.length;i++)r=t[i],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(i=0;i<t.length;i++)r=t[i],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=i.createContext({}),d=function(e){var n=i.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},l={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var r=e.components,s=e.mdxType,t=e.originalType,c=e.parentName,h=a(e,["components","mdxType","originalType","parentName"]),u=d(r),p=s,g=u["".concat(c,".").concat(p)]||u[p]||l[p]||t;return r?i.createElement(g,o(o({ref:n},h),{},{components:r})):i.createElement(g,o({ref:n},h))}));h.displayName="MDXCreateElement"},735641:(e,n,r)=>{r.d(n,{Z:()=>i});const i=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-bac99ee9472bf0354e396ff811a46d92.jpg"}}]);