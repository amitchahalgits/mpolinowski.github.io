"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[69616],{842045:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var t=r(785893),s=r(603905);const i={sidebar_position:5890,slug:"2023-12-19",title:"React Query AsyncState Management",authors:"mpolinowski",tags:["Javascript","React"],description:"Leveraging React Query to manage frontend state from REST JSON APIs"},a=void 0,o={id:"Development/Javascript/2023-12-19-react-query-typescript/index",title:"React Query AsyncState Management",description:"Leveraging React Query to manage frontend state from REST JSON APIs",source:"@site/docs/Development/Javascript/2023-12-19-react-query-typescript/index.md",sourceDirName:"Development/Javascript/2023-12-19-react-query-typescript",slug:"/Development/Javascript/2023-12-19-react-query-typescript/2023-12-19",permalink:"/docs/Development/Javascript/2023-12-19-react-query-typescript/2023-12-19",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Javascript/2023-12-19-react-query-typescript/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"},{label:"React",permalink:"/docs/tags/react"}],version:"current",sidebarPosition:5890,frontMatter:{sidebar_position:5890,slug:"2023-12-19",title:"React Query AsyncState Management",authors:"mpolinowski",tags:["Javascript","React"],description:"Leveraging React Query to manage frontend state from REST JSON APIs"},sidebar:"tutorialSidebar",previous:{title:"Tanstack React Query AsyncState Management",permalink:"/docs/Development/Javascript/2023-12-20-react-query-typescript/2023-12-20"},next:{title:"Redux Toolkit Github API",permalink:"/docs/Development/Javascript/2023-12-18-reactjs-typescript-redux-toolkit/2023-12-18"}},c={},l=[{value:"Scaffolding",id:"scaffolding",level:2},{value:"Backend API",id:"backend-api",level:2},{value:"Adding React Query",id:"adding-react-query",level:2},{value:"Working with Query Params",id:"working-with-query-params",level:3},{value:"Mutations",id:"mutations",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.ah)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"TST, Hongkong",src:r(867288).Z+"",width:"2359",height:"864"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#scaffolding",children:"Scaffolding"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#backend-api",children:"Backend API"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#adding-react-query",children:"Adding React Query"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#working-with-query-params",children:"Working with Query Params"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#mutations",children:"Mutations"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"scaffolding",children:"Scaffolding"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm create vite@latest react-query-mutation\n\u2714 Select a framework: \u203a React\n\u2714 Select a variant: \u203a TypeScript + SWC\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd react-query-mutation\nnpm install\nnpm install react-query\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"baseURL"})," to be able to work with absolute imports relative to the defined base:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"./tsconfig.json"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "baseUrl": "./src",\n    ...\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"./vite.config.js"})," ",(0,t.jsx)(n.code,{children:"npm install vite-tsconfig-paths"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { defineConfig } from 'vite'\nimport tsconfigPaths from 'vite-tsconfig-paths'\nimport react from '@vitejs/plugin-react-swc'\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    tsconfigPaths()\n  ],\n})\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"./src/views/App.tsx"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import Users from 'components/Users'\n\nimport 'styles/App.css'\n\nexport default function App() {\n  \n  return (\n    <>\n          <Users greeting='Hello from React Typescript' />\n    </>\n  )\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"./src/components/Users.tsx"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import React from 'react'\n\nimport { iUsersProps } from 'types/interfaces'\n\nexport default function Users({ greeting }: iUsersProps): React.JSX.Element {\n    return (\n        <h1>\n            { greeting }\n        </h1>\n    )\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,t.jsx)(n.h2,{id:"backend-api",children:"Backend API"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install json-server\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"./api/db.json"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "users": [\n        {\n            "id": "1",\n            "name": "Player1",\n            "tier": 3\n        },\n        {\n            "id": "2",\n            "name": "Player2",\n            "tier": 2\n        }\n    ]\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"./package.json"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'"scripts": {\n    "dev": "vite",\n    "build": "tsc && vite build",\n    "api": "json-server api/db.json",\n    "preview": "vite preview"\n  },\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm run api\n"})}),"\n",(0,t.jsx)(n.h2,{id:"adding-react-query",children:"Adding React Query"}),"\n",(0,t.jsx)(n.p,{children:"Add the Query Provider to the entry point of your app:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"./src/main.tsx"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { QueryClientProvider, QueryClient } from 'react-query'\nimport { ReactQueryDevtools } from 'react-query/devtools'\n\nimport App from 'views/App.tsx'\nimport 'styles/index.css'\n\nconst reactQueryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      // use cache for 5s before refetching data\n      staleTime: 5 * 1000\n    }\n  }\n})\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <QueryClientProvider client={reactQueryClient}>\n      <ReactQueryDevtools initialIsOpen={false} />\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now we can use ReactQuery to retrieve data from our JSON API and render it:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"./src/components/Users.tsx"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import React from 'react'\nimport { useQuery, UseQueryResult } from 'react-query'\n\nimport { iUsersProps, iUser } from 'types/interfaces'\n\nconst apiUrl = 'http://localhost:3000/users'\n\nconst fetchUsers = async(): Promise<iUser[]> => {\n        const res = await fetch(apiUrl)\n        if (res.ok) {\n            return res.json()\n        }\n        throw new Error('ERROR :: Data fetching failed!')\n}\n\nexport default function UsersList({ greeting }: iUsersProps): React.JSX.Element {\n    const { isLoading, isError, error, data }: UseQueryResult<iUser[], Error> = useQuery<iUser[], Error>(\n        'users', fetchUsers, {\n        // use cached values for 20s before re-running query\n        staleTime: 20 * 1000\n    })\n\n    if (isLoading) {\n    return (\n        <>\n            <h1>{ greeting }</h1>\n            <p>loading...</p>\n        </>\n        )\n    }\n\n    if (isError) return <p>ERROR :: {error?.message}</p>\n\n    return (\n        <>\n            <h2>All Users:</h2>\n            <ul>\n                {\n                    data?.map((user) => {\n                        return(\n                            <div key={user.id}>\n                                <li><strong>ID:</strong>{user.id}</li>\n                                <li><strong>Username:</strong>{user.name}</li>\n                                <li><strong>Tier:</strong>{user.tier}</li>\n                                <hr/>\n                            </div>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"working-with-query-params",children:"Working with Query Params"}),"\n",(0,t.jsx)(n.p,{children:"The implementation above retrieves all users und displays them in a list. The json server also provides support for query parameter to retrieve a single entry."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"./src/components/User.tsx"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import React from 'react'\nimport { useQuery } from 'react-query'\n\nimport { iUser } from 'types/interfaces'\n\nconst apiUrl = 'http://localhost:3000/users/'\nconst id = '1' // pretend id was extracted from URL param\n\nconst fetchUserById = async(id: string | undefined): Promise<iUser> => {\n    if (typeof id === 'string') {\n        const res = await fetch(apiUrl+id)\n        if (res.ok) {\n            return res.json()\n        }\n        throw new Error('ERROR :: Data fetching failed!')\n    }\n    throw new Error('ERROR :: Invalid User ID!')\n}\n\nexport default function UserDetails(): React.JSX.Element {\n    const { isLoading, isError, error, data } = useQuery<iUser, Error>(\n        ['user', id], () => fetchUserById(id), {\n        // use cached values for 20s before re-running query\n        staleTime: 20 * 1000,\n        // only run query when id is defined\n        enabled: !!id\n    })\n\n    if (isLoading) {\n        return <p>loading...</p>\n    }\n\n    if (isError) return <p>ERROR :: {error?.message}</p>\n\n    return (\n        <>\n            <h2>First User:</h2>\n            <ul>\n                <li><strong>ID:</strong>{data?.id}</li>\n                <li><strong>Username:</strong>{data?.name}</li>\n                <li><strong>Tier:</strong>{data?.tier}</li>\n            </ul>\n        </>\n    )\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"React Query AsyncState Management",src:r(563169).Z+"",width:"1372",height:"725"})}),"\n",(0,t.jsx)(n.h2,{id:"mutations",children:"Mutations"}),"\n",(0,t.jsx)(n.p,{children:"Using regular fetch works but has the disadvantage that we don't see a refresh of our list component when we refresh:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import React from 'react'\nimport { v4 as uuidv4 } from 'uuid'\n\nimport {fetchUsers} from 'components/Users'\n\nconst apiUrl = 'http://localhost:3000/users/'\n\nconst createUser = async(): Promise<string> => {\n\n    const usernames = ['Player3','Player4','Player5','Player6']\n\n    const response = await fetch(apiUrl, {\n        method: 'POST',\n        body: JSON.stringify({\n            id: uuidv4(),\n            name: usernames[Math.floor(Math.random() * 4)],\n            tier: Math.floor(Math.random() * 4)\n        })\n    })\n    fetchUsers()\n    return response.statusText\n}\n\nexport function AddUser(): React.JSX.Element {\n\n    return (\n        <>\n            <button type=\"submit\" onClick={createUser}>\n                Create New User (using regular fetch())\n            </button>\n        </>\n    )\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"useMutation"})," instead allows us to use ",(0,t.jsx)(n.code,{children:"queryClient.invalidateQueries('users')"})," to force a refresh of the ",(0,t.jsx)(n.code,{children:"users"})," query which triggers a reload of the list component:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'import React, { FormEventHandler } from \'react\'\nimport { v4 as uuidv4 } from \'uuid\'\n\nimport { iUser } from \'types/interfaces\'\nimport { useMutation, UseMutationResult, useQueryClient } from \'react-query\'\n\nconst apiUrl = \'http://localhost:3000/users/\'\n\nconst createUser = async(name: string, tier: number): Promise<iUser> => {\n\n    const response: Response = await fetch(apiUrl, {\n        method: \'POST\',\n        body: JSON.stringify({\n            id: uuidv4(),\n            name,\n            tier\n        })\n    })\n    if (response.ok) {\n        return response.json()\n    }\n    throw new Error(\'ERROR :: User could not be created!\')\n}\n\nexport default function AddUserMutation(): React.JSX.Element {\n\n    const queryClient = useQueryClient()\n\n    const mutation:UseMutationResult<iUser, Error, void> = useMutation<iUser, Error>(\n          async ({ name, tier }) => createUser(name, tier), {\n            onSuccess: (data: iUser) => {\n              queryClient.invalidateQueries(\'users\')\n            }\n          }\n        )\n\n    const onSubmit: FormEventHandler<HTMLFormElement> = async (event: React.SyntheticEvent) => {\n        event.preventDefault()\n\n        const target = event.target as typeof event.target & {\n            name: { value: string }\n            tier: { value: number }\n        }\n\n        const name = target.name.value\n        const tier = target.tier.value\n        mutation.mutate({ name, tier })\n\n        return \n    }\n\n    return (\n        <>\n          {mutation.isLoading ? (\n            <p>Adding todo</p>\n          ) : (\n            <>\n              { mutation.isError ? <div>ERROR :: {mutation?.error?.message}</div> : null }\n    \n              { mutation.isSuccess ? (\n                <div>\n                  User added :: Name: {mutation?.data?.name} & Tier: {mutation?.data?.tier}\n                </div>\n              ) : null }\n            </>\n          )}\n    \n          <form onSubmit={onSubmit}>\n            <label htmlFor="name">Name:</label>\n            <br />\n            <input type="text" id="name" name="name" />\n            <br />\n            <label htmlFor="tier">Tier:</label>\n            <br />\n            <select name="tier" id="tier">\n                <option value="0">0</option>\n                <option value="1">1</option>\n                <option value="2">2</option>\n                <option value="3">3</option>\n            </select>\n            <br />\n            <br />\n            <input type="submit" value="Submit" />\n          </form>\n        </>\n    )\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.ah)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>l});var t=r(667294);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,s=function(e,n){if(null==e)return{};var r,t,s={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,s=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=l(r),m=s,h=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return r?t.createElement(h,a(a({ref:n},u),{},{components:r})):t.createElement(h,a({ref:n},u))}));u.displayName="MDXCreateElement"},563169:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/React-Query_01-8231b4665d5a36a42320faf6e62438e6.png"},867288:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-c3aedc7eed015cc5372c21f9c394693d.jpg"}}]);