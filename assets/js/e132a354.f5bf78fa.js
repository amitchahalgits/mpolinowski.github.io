"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[47722],{60644:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>l});var s=r(785893),i=r(603905);const t={sidebar_position:8090,slug:"2021-08-02",title:"Hashicorp Nomad Refresher - Security",authors:"mpolinowski",tags:["Nomad","Linux"]},c=void 0,a={id:"DevOps/Hashicorp/2021-08-02--hashicorp-nomad-security/index",title:"Hashicorp Nomad Refresher - Security",description:"Shenzhen, China",source:"@site/docs/DevOps/Hashicorp/2021-08-02--hashicorp-nomad-security/index.md",sourceDirName:"DevOps/Hashicorp/2021-08-02--hashicorp-nomad-security",slug:"/DevOps/Hashicorp/2021-08-02--hashicorp-nomad-security/2021-08-02",permalink:"/docs/DevOps/Hashicorp/2021-08-02--hashicorp-nomad-security/2021-08-02",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2021-08-02--hashicorp-nomad-security/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Linux",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:8090,frontMatter:{sidebar_position:8090,slug:"2021-08-02",title:"Hashicorp Nomad Refresher - Security",authors:"mpolinowski",tags:["Nomad","Linux"]},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Nomad Refresher - Jobs",permalink:"/docs/DevOps/Hashicorp/2021-08-03--hashicorp-nomad-jobs/2021-08-03"},next:{title:"Hashicorp Nomad Refresher - Installation",permalink:"/docs/DevOps/Hashicorp/2021-08-01--hashicorp-nomad-refresher/2021-08-01"}},o={},l=[{value:"Secure Access to the Nomad GUI",id:"secure-access-to-the-nomad-gui",level:2},{value:"SSH Tunnel",id:"ssh-tunnel",level:3},{value:"Gossip Encryption",id:"gossip-encryption",level:2},{value:"mTLS Transport Encryptions",id:"mtls-transport-encryptions",level:2},{value:"Installing CFSSL",id:"installing-cfssl",level:3},{value:"Generating the TLS Keys",id:"generating-the-tls-keys",level:3},{value:"Generate a certificate for the Nomad server",id:"generate-a-certificate-for-the-nomad-server",level:4},{value:"Generate a certificate for the Nomad client",id:"generate-a-certificate-for-the-nomad-client",level:4},{value:"Generate a certificate for the CLI",id:"generate-a-certificate-for-the-cli",level:4},{value:"Master Server Configuration",id:"master-server-configuration",level:4},{value:"Minion Server Configuration",id:"minion-server-configuration",level:4},{value:"Configuring Nomad",id:"configuring-nomad",level:3},{value:"Master Server",id:"master-server",level:4},{value:"Minion Server",id:"minion-server",level:4},{value:"System Environment",id:"system-environment",level:4},{value:"Browser Configuration",id:"browser-configuration",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.ah)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Shenzhen, China",src:r(304202).Z+"",width:"1500",height:"466"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#secure-access-to-the-nomad-gui",children:"Secure Access to the Nomad GUI"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#ssh-tunnel",children:"SSH Tunnel"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#gossip-encryption",children:"Gossip Encryption"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#mtls-transport-encryptions",children:"mTLS Transport Encryptions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#installing-cfssl",children:"Installing CFSSL"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#generating-the-tls-keys",children:"Generating the TLS Keys"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#generate-a-certificate-for-the-nomad-server",children:"Generate a certificate for the Nomad server"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#generate-a-certificate-for-the-nomad-client",children:"Generate a certificate for the Nomad client"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#generate-a-certificate-for-the-cli",children:"Generate a certificate for the CLI"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#master-server-configuration",children:"Master Server Configuration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#minion-server-configuration",children:"Minion Server Configuration"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#configuring-nomad",children:"Configuring Nomad"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#master-server",children:"Master Server"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#minion-server",children:"Minion Server"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#system-environment",children:"System Environment"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#browser-configuration",children:"Browser Configuration"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"secure-access-to-the-nomad-gui",children:"Secure Access to the Nomad GUI"}),"\n",(0,s.jsx)(n.h3,{id:"ssh-tunnel",children:"SSH Tunnel"}),"\n",(0,s.jsxs)(n.p,{children:["In the previous step I opened the port ",(0,s.jsx)(n.code,{children:"4646"})," on both my master and minion server which gave me access to the Nomad UI. Another - and much more secure - way to access the UI is to tunnel the HTTP port through SSH. On my Windows PC I simply have to type in the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ssh myuser@192.168.2.110 -L4646:localhost:4646\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And now I am able to access the UI via ",(0,s.jsx)(n.code,{children:"localhost"})," instead of the IP address of my RHEL8 Nomad master server:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Hashicorp Nomad",src:r(207444).Z+"",width:"979",height:"490"})}),"\n",(0,s.jsx)(n.p,{children:"We can now close the corresponding ports on our servers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"firewall-cmd --remove-port=4646/tcp\r\nfirewall-cmd --reload\r\nfirewall-cmd --list-ports\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ufw delete allow 4646:4647/tcp\r\nufw allow 4647/tcp\r\nufw reload\r\nufw status verbose\n"})}),"\n",(0,s.jsx)(n.h2,{id:"gossip-encryption",children:"Gossip Encryption"}),"\n",(0,s.jsxs)(n.p,{children:["Nomad server's ",(0,s.jsx)(n.a,{href:"https://learn.hashicorp.com/tutorials/nomad/security-gossip-encryption",children:"gossip protocol"})," that is used to communicate membership and liveness information can be encrypted with symmetric keys. Enabling gossip encryption requires you to set an encryption key when starting the Nomad server."]}),"\n",(0,s.jsxs)(n.p,{children:["Create an encryption key to encrypt the communication between Nomad agents (alternatively, you can also use ",(0,s.jsx)(n.code,{children:"openssl rand -base64 32"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nomad operator keygen\r\n\r\n4kRkFQfcc3LU0BazP1ca+z==\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This key has to be added to the Nomad server configuration to ",(0,s.jsx)(n.a,{href:"https://learn.hashicorp.com/tutorials/nomad/security-gossip-encryption",children:"enable the Gossip encryption"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano /etc/nomad.d/server.hcl\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'server {\r\n  enabled = true\r\n  bootstrap_expect = 1\r\n  encrypt = "4kRkFQfcc3LU0BazP1ca+z=="\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can perform a rolling restart of the Nomad process on each of your server nodes to enable encryption. Restart your servers one at a time in order to maintain a quorum of nodes on one side or the other of this soft partition."}),"\n",(0,s.jsx)(n.p,{children:"Once all of the nodes have been restarted all gossip traffic will be encrypted between all of your server nodes."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"systemctl restart nomad\r\nsystemctl status nomad\n"})}),"\n",(0,s.jsx)(n.h2,{id:"mtls-transport-encryptions",children:"mTLS Transport Encryptions"}),"\n",(0,s.jsxs)(n.p,{children:["The first step to configuring ",(0,s.jsx)(n.a,{href:"https://learn.hashicorp.com/tutorials/nomad/security-enable-tls?in=nomad/transport-security",children:"TLS for Nomad"})," is generating certificates. In order to prevent unauthorized cluster access, Nomad requires all certificates be signed by the same Certificate Authority (CA). This should be a private CA and not a public one like Let's Encrypt as any certificate signed by this CA will be allowed to communicate with the cluster."]}),"\n",(0,s.jsx)(n.h3,{id:"installing-cfssl",children:"Installing CFSSL"}),"\n",(0,s.jsxs)(n.p,{children:["You can generate a private CA certificate and key with ",(0,s.jsx)(n.a,{href:"https://github.com/cloudflare/cfssl",children:"Cloudflare cfssl"}),". Download the ",(0,s.jsx)(n.a,{href:"https://github.com/cloudflare/cfssl/releases",children:"latest release"})," with ",(0,s.jsx)(n.code,{children:"wget"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"wget https://github.com/cloudflare/cfssl/releases/download/v1.6.0/cfssl_1.6.0_linux_amd64 -O cfssl\r\nwget https://github.com/cloudflare/cfssl/releases/download/v1.6.0/cfssljson_1.6.0_linux_amd64 -O cfssljson\r\n\r\nchmod +x cfssljson cfssl\r\nmv cfssl* /usr/local/bin\n"})}),"\n",(0,s.jsx)(n.p,{children:"Verify that it is working:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cfssl version\r\n\r\nVersion: 1.6.0\r\nRuntime: go1.12.12\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cfssljson -version\r\n\r\nVersion: 1.6.0\r\nRuntime: go1.12.12\n"})}),"\n",(0,s.jsx)(n.h3,{id:"generating-the-tls-keys",children:"Generating the TLS Keys"}),"\n",(0,s.jsx)(n.p,{children:"Generate the CA's private key and certificate:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir nomad_certs && cd nomad_certs\r\ncfssl print-defaults csr | cfssl gencert -initca - | cfssljson -bare nomad-ca\n"})}),"\n",(0,s.jsx)(n.p,{children:"Nomad certificates are signed with their region and role such as:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"client.global.nomad"})," for a client node in the global region"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"server.us-west.nomad"})," for a server node in the us-west region"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To create certificates for the client and server in the cluster use the following configuration file as ",(0,s.jsx)(n.a,{href:"https://raw.githubusercontent.com/hashicorp/nomad/master/demo/vagrant/cfssl.json",children:"cfssl.json"})," to increase the default certificate expiration time:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "signing": {\r\n    "default": {\r\n      "expiry": "87600h",\r\n      "usages": ["signing", "key encipherment", "server auth", "client auth"]\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"generate-a-certificate-for-the-nomad-server",children:"Generate a certificate for the Nomad server"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"echo '{}' | cfssl gencert -ca=nomad-ca.pem -ca-key=nomad-ca-key.pem -config=cfssl.json \\\r\n    -hostname=\"server.global.nomad,localhost,127.0.0.1\" - | cfssljson -bare server\n"})}),"\n",(0,s.jsx)(n.h4,{id:"generate-a-certificate-for-the-nomad-client",children:"Generate a certificate for the Nomad client"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"echo '{}' | cfssl gencert -ca=nomad-ca.pem -ca-key=nomad-ca-key.pem -config=cfssl.json \\\r\n    -hostname=\"client.global.nomad,localhost,127.0.0.1\" - | cfssljson -bare client\n"})}),"\n",(0,s.jsx)(n.h4,{id:"generate-a-certificate-for-the-cli",children:"Generate a certificate for the CLI"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"echo '{}' | cfssl gencert -ca=nomad-ca.pem -ca-key=nomad-ca-key.pem -profile=client \\\r\n    - | cfssljson -bare cli\n"})}),"\n",(0,s.jsx)(n.p,{children:"You should now have the following files:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cfssl.json"})," - cfssl configuration."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"nomad-ca.csr"})," - CA signing request."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"nomad-ca-key.pem"})," - CA private key. Keep safe."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"nomad-ca.pem"})," - CA public certificate."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cli.csr"})," - Nomad CLI certificate signing request."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cli-key.pem"})," - Nomad CLI private key."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cli.pem"})," - Nomad CLI certificate."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"client.csr"})," - Nomad client node certificate signing request for the global region."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"client-key"}),".pem - Nomad client node private key for the global region."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"client.pem"})," - Nomad client node public certificate for the global region."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"server.csr"})," - Nomad server node certificate signing request for the global region."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"server-key"}),".pem - Nomad server node private key for the global region."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"server.pem"})," - Nomad server node public certificate for the global region."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Each Nomad node should have:"}),"\n",(0,s.jsx)(n.h4,{id:"master-server-configuration",children:"Master Server Configuration"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The appropriate key ",(0,s.jsx)(n.code,{children:"server-key.pem"})]}),"\n",(0,s.jsxs)(n.li,{children:["And certificate ",(0,s.jsx)(n.code,{children:"server.pem"})," file"]}),"\n",(0,s.jsxs)(n.li,{children:["In addition each node needs the CA's public certificate (",(0,s.jsx)(n.code,{children:"nomad-ca.pem"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir /etc/nomad.d/certs\r\nsudo cp server-key.pem /etc/nomad.d/certs\r\nsudo cp server.pem /etc/nomad.d/certs\r\nsudo cp nomad-ca.pem /etc/nomad.d/certs\n"})}),"\n",(0,s.jsx)(n.h4,{id:"minion-server-configuration",children:"Minion Server Configuration"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The appropriate key ",(0,s.jsx)(n.code,{children:"client-key.pem"})]}),"\n",(0,s.jsxs)(n.li,{children:["And certificate ",(0,s.jsx)(n.code,{children:"client.pem"})," file"]}),"\n",(0,s.jsxs)(n.li,{children:["In addition each node needs the CA's public certificate (",(0,s.jsx)(n.code,{children:"nomad-ca.pem"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Create the same directory and choose you favourite way to copy in the client certs from your master server:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir /etc/nomad.d/certs\n"})}),"\n",(0,s.jsx)(n.h3,{id:"configuring-nomad",children:"Configuring Nomad"}),"\n",(0,s.jsx)(n.p,{children:"Now we need to add the certificates to our server config:"}),"\n",(0,s.jsx)(n.h4,{id:"master-server",children:"Master Server"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano /etc/nomad.d/server.hcl\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'# Require TLS\r\ntls {\r\n  http = true\r\n  rpc  = true\r\n\r\n  ca_file   = "/etc/nomad.d/certs/nomad-ca.pem"\r\n  cert_file = "/etc/nomad.d/certs/server.pem"\r\n  key_file  = "/etc/nomad.d/certs/server-key.pem"\r\n\r\n  verify_server_hostname = true\r\n  verify_https_client    = true\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["These two settings are important for ensuring all of Nomad's ",(0,s.jsx)(n.strong,{children:"mTLS"})," security properties are met. If ",(0,s.jsx)(n.code,{children:"verify_server_hostname"})," is set to ",(0,s.jsx)(n.code,{children:"false"})," the node's certificate will be checked to ensure it is signed by the same CA, but its role and region will not be verified. This means any service with a certificate signed by same CA as Nomad can act as a client or server of any region."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"verify_https_client"})," requires HTTP API clients to present a certificate signed by the same CA as Nomad's certificate. It may be disabled to allow HTTP API clients (e.g. ",(0,s.jsx)(n.strong,{children:"Nomad CLI"}),", ",(0,s.jsx)(n.strong,{children:"Consul"}),", or ",(0,s.jsx)(n.strong,{children:"curl"}),") to communicate with the HTTPS API without presenting a client-side certificate. If ",(0,s.jsx)(n.code,{children:"verify_https_client"})," is enabled only HTTP API clients presenting a certificate signed by the same CA as Nomad's certificate are allowed to access Nomad."]}),"\n",(0,s.jsx)(n.h4,{id:"minion-server",children:"Minion Server"}),"\n",(0,s.jsx)(n.p,{children:"The Nomad client configuration is similar to the server configuration. The biggest difference is in the certificate and key used for configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano /etc/nomad.d/client.hcl\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'tls {\r\n  http = true\r\n  rpc  = true\r\n\r\n  ca_file   = "/etc/nomad.d/certs/nomad-ca.pem"\r\n  cert_file = "/etc/nomad.d/certs/client.pem"\r\n  key_file  = "/etc/nomad.d/certs/client-key.pem"\r\n\r\n  verify_server_hostname = true\r\n  verify_https_client    = true\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Once all of the nodes have been configured restart the Nomad service everywhere:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"systemctl restart nomad\r\nsystemctl status nomad\n"})}),"\n",(0,s.jsx)(n.h4,{id:"system-environment",children:"System Environment"}),"\n",(0,s.jsx)(n.p,{children:"Try to send a CLI command with TLS encryption:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ~/nomad_certs\r\n\r\nnomad server members -ca-cert=nomad-ca.pem -client-cert=cli.pem -client-key=cli-key.pem -addr=https://127.0.0.1:4646\r\n\r\nName                    Address        Port  Status  Leader  Protocol  Build  Datacenter  Region\r\nlinux.fritz.box.global  192.168.2.110  4648  alive   true    2         1.1.3  instaryun   global\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This process can be cumbersome to type each time, so the Nomad CLI also searches environment variables for default values. Use the following commands to set environment variables in your shell (",(0,s.jsx)(n.code,{children:"nano ~/.bash_profile"})," or ",(0,s.jsx)(n.code,{children:"nano ~/.zshrc"}),")."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NOMAD_ADDR"})," is the URL of the Nomad agent and sets the default for ",(0,s.jsx)(n.code,{children:"-addr"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cfg",children:"export NOMAD_ADDR=https://127.0.0.1:4646\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NOMAD_CACERT"})," is the location of your CA certificate and sets the default for ",(0,s.jsx)(n.code,{children:"-ca-cert"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cfg",children:"export NOMAD_CACERT=~/nomad_certs/nomad-ca.pem\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NOMAD_CLIENT_CERT"})," is the location of your CLI certificate and sets the default for ",(0,s.jsx)(n.code,{children:"-client-cert"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cfg",children:"export NOMAD_CLIENT_CERT=~/nomad_certs/cli.pem\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NOMAD_CLIENT_KEY"})," is the location of your CLI key and sets the default for ",(0,s.jsx)(n.code,{children:"-client-key"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cfg",children:"export NOMAD_CLIENT_KEY=~/nomad_certs/cli-key.pem\n"})}),"\n",(0,s.jsxs)(n.p,{children:["After these environment variables are correctly configured and the configuration file ",(0,s.jsx)(n.code,{children:"source ~/.bash_profile"})," or ",(0,s.jsx)(n.code,{children:"source ~/.zshrc"}),", the CLI will respond as expected:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nomad server members\r\n\r\nName                    Address        Port  Status  Leader  Protocol  Build  Datacenter  Region\r\nlinux.fritz.box.global  192.168.2.110  4648  alive   true    2         1.1.3  instaryun   global\n"})}),"\n",(0,s.jsx)(n.p,{children:"Repeat those steps with all your servers."}),"\n",(0,s.jsx)(n.h3,{id:"browser-configuration",children:"Browser Configuration"}),"\n",(0,s.jsx)(n.p,{children:"When I try to connect to the Nomad UI I am now forced to use HTTPS:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Client sent an HTTP request to an HTTPS server.\n"})}),"\n",(0,s.jsx)(n.p,{children:"And when I try to use HTTPS it refuses my certificate:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ERR_BAD_SSL_CLIENT_AUTH_CERT\n"})}),"\n",(0,s.jsxs)(n.p,{children:["I can now use the CLI certificate to generate an ",(0,s.jsx)(n.code,{children:".pfx"})," file that I will have to import to my browser to be allowed back onto the Nomad UI. Make sure you are inside the directory where you generated the certificates and run the following ",(0,s.jsx)(n.strong,{children:"OpenSSL"})," command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"openssl pkcs12 -inkey cli-key.pem -in cli.pem -export -out nomad.pfx\r\n\r\nEnter Export Password:\r\nVerifying - Enter Export Password:\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can add a password here or leave it empty. Then download the certificate and import it into your web browser - e.g. Google Chromium:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Hashicorp Nomad",src:r(803216).Z+"",width:"1098",height:"736"})}),"\n",(0,s.jsx)(n.p,{children:"Refresh the Nomad WebUI and accept the certificate - and you should be back on!"})]})}function h(e={}){const{wrapper:n}={...(0,i.ah)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>l});var s=r(667294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function t(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,s)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?t(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,s,i=function(e,n){if(null==e)return{};var r,s,i={},t=Object.keys(e);for(s=0;s<t.length;s++)r=t[s],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(s=0;s<t.length;s++)r=t[s],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var o=s.createContext({}),l=function(e){var n=s.useContext(o),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},d={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},h=s.forwardRef((function(e,n){var r=e.components,i=e.mdxType,t=e.originalType,o=e.parentName,h=a(e,["components","mdxType","originalType","parentName"]),m=l(r),p=i,u=m["".concat(o,".").concat(p)]||m[p]||d[p]||t;return r?s.createElement(u,c(c({ref:n},h),{},{components:r})):s.createElement(u,c({ref:n},h))}));h.displayName="MDXCreateElement"},207444:(e,n,r)=>{r.d(n,{Z:()=>s});const s=r.p+"assets/images/Hashicorp_Nomad_01-87b7bff39f98e78adeafcdbcfbefecb5.png"},803216:(e,n,r)=>{r.d(n,{Z:()=>s});const s=r.p+"assets/images/Hashicorp_Nomad_02-e351aa7d4795171de4e9ed364d37dec9.png"},304202:(e,n,r)=>{r.d(n,{Z:()=>s});const s=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-2303da2d3163237ced63ba004d49b187.jpg"}}]);