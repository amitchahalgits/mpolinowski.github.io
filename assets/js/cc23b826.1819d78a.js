"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[57334],{420277:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var r=n(785893),i=n(603905);const s={sidebar_position:9e3,slug:"2022-02-01",title:"Mosquitto v2 MQTT Broker on Debian Bullseye",authors:"mpolinowski",tags:["LINUX","Smarthome","MQTT"]},o=void 0,a={id:"Automation_and_Robotics/MQTT/2022-02-01--mosquitto-2-broker/index",title:"Mosquitto v2 MQTT Broker on Debian Bullseye",description:"TST, Hong Kong",source:"@site/docs/Automation_and_Robotics/MQTT/2022-02-01--mosquitto-2-broker/index.md",sourceDirName:"Automation_and_Robotics/MQTT/2022-02-01--mosquitto-2-broker",slug:"/Automation_and_Robotics/MQTT/2022-02-01--mosquitto-2-broker/2022-02-01",permalink:"/docs/Automation_and_Robotics/MQTT/2022-02-01--mosquitto-2-broker/2022-02-01",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Automation_and_Robotics/MQTT/2022-02-01--mosquitto-2-broker/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Smarthome",permalink:"/docs/tags/smarthome"},{label:"MQTT",permalink:"/docs/tags/mqtt"}],version:"current",sidebarPosition:9e3,frontMatter:{sidebar_position:9e3,slug:"2022-02-01",title:"Mosquitto v2 MQTT Broker on Debian Bullseye",authors:"mpolinowski",tags:["LINUX","Smarthome","MQTT"]},sidebar:"tutorialSidebar",previous:{title:"MQTT Clients",permalink:"/docs/Automation_and_Robotics/MQTT/2022-03-26--mqtt-clients/2022-03-26"},next:{title:"Go Paho MQTT Client",permalink:"/docs/Automation_and_Robotics/MQTT/2021-09-12--golang-paho-mqtt/2021-09-12"}},c={},l=[{value:"Install Mosquitto on Debian Bullseye",id:"install-mosquitto-on-debian-bullseye",level:2},{value:"Configure Mosquitto",id:"configure-mosquitto",level:2},{value:"Verify that the Broker is working",id:"verify-that-the-broker-is-working",level:2},{value:"Mosquitto CLI Tools",id:"mosquitto-cli-tools",level:3},{value:"Connecting Clients",id:"connecting-clients",level:3},{value:"Websockets",id:"websockets",level:2},{value:"MQTT Explorer",id:"mqtt-explorer",level:3},{value:"MQTT.js Web Client",id:"mqttjs-web-client",level:3},{value:"Mosquitto Webserver",id:"mosquitto-webserver",level:2},{value:"Adding Encryption",id:"adding-encryption",level:2},{value:"Creating Self-Signed Certificates",id:"creating-self-signed-certificates",level:3},{value:"CA Certificates",id:"ca-certificates",level:4},{value:"Server Certificates",id:"server-certificates",level:4},{value:"Mosquitto Server Configuration",id:"mosquitto-server-configuration",level:4},{value:"Testing the Connection",id:"testing-the-connection",level:4},{value:"Client Certificates",id:"client-certificates",level:4},{value:"Creating a client certificate",id:"creating-a-client-certificate",level:4},{value:"Update the Mosquitto Server Configuration",id:"update-the-mosquitto-server-configuration",level:4},{value:"Testing the Connection",id:"testing-the-connection-1",level:4},{value:"Connect your INSTAR IP Camera",id:"connect-your-instar-ip-camera",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"TST, Hong Kong",src:n(496948).Z+"",width:"2385",height:"978"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#install-mosquitto-on-debian-bullseye",children:"Install Mosquitto on Debian Bullseye"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#configure-mosquitto",children:"Configure Mosquitto"})}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"#verify-that-the-broker-is-working",children:"Verify that the Broker is working"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#mosquitto-cli-tools",children:"Mosquitto CLI Tools"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#connecting-clients",children:"Connecting Clients"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"#websockets",children:"Websockets"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#mqtt-explorer",children:"MQTT Explorer"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#mqttjs-web-client",children:"MQTT.js Web Client"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#mosquitto-webserver",children:"Mosquitto Webserver"})}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"#adding-encryption",children:"Adding Encryption"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"#creating-self-signed-certificates",children:"Creating Self-Signed Certificates"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#ca-certificates",children:"CA Certificates"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#server-certificates",children:"Server Certificates"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#mosquitto-server-configuration",children:"Mosquitto Server Configuration"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#testing-the-connection",children:"Testing the Connection"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#client-certificates",children:"Client Certificates"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#creating-a-client-certificate",children:"Creating a client certificate"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#update-the-mosquitto-server-configuration",children:"Update the Mosquitto Server Configuration"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#testing-the-connection-1",children:"Testing the Connection"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#connect-your-instar-ip-camera",children:"Connect your INSTAR IP Camera"})}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Mosquitto is a message broker that implements the MQTT protocol. Mosquitto is an open-source project developed by Eclipse. MQTT protocol uses a publish/subscribe model. Client can publish message to a broker and other clients can subscribe to the topic of that message. A broker is a central component that receives all messages from the clients and then publishes the messages to all subscribed clients."}),"\n",(0,r.jsx)(t.h2,{id:"install-mosquitto-on-debian-bullseye",children:"Install Mosquitto on Debian Bullseye"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["Check ",(0,r.jsx)(t.a,{href:"/docs/IoT-and-Machine-Learning/MQTT/2022-03-27--build-mosquitto-from-source/2022-03-27",children:"Building Eclipse Mosquitto v2 from Source"})," for building the broker from it's source code under Arch Linux."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Add the Mosquitto repository:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"wget http://repo.mosquitto.org/debian/mosquitto-repo.gpg.key\r\nsudo apt-key add mosquitto-repo.gpg.key\r\ncd /etc/apt/sources.list.d/\r\nwget http://repo.mosquitto.org/debian/mosquitto-bullseye.list\n"})}),"\n",(0,r.jsx)(t.p,{children:"Install Mosquitto broker:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"apt update\r\napt install mosquitto\n"})}),"\n",(0,r.jsx)(t.p,{children:"Check Mosquitto version:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"mosquitto -h | grep version\r\nmosquitto version 2.0.14\n"})}),"\n",(0,r.jsx)(t.p,{children:"Check if Mosquitto service is running:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"service mosquitto status                                                                                              \r\n\u25cf mosquitto.service - Mosquitto MQTT Broker\r\n     Loaded: loaded (/lib/systemd/system/mosquitto.service; enabled; vendor preset: enabled)\r\n     Active: active (running) since Sat 2022-02-05 14:06:50 HKT; 25min ago\r\n       Docs: man:mosquitto.conf(5)\r\n             man:mosquitto(8)\r\n    Process: 574 ExecStartPre=/bin/mkdir -m 740 -p /var/log/mosquitto (code=exited, status=0/SUCCESS)\r\n    Process: 586 ExecStartPre=/bin/chown mosquitto /var/log/mosquitto (code=exited, status=0/SUCCESS)\r\n    Process: 593 ExecStartPre=/bin/mkdir -m 740 -p /run/mosquitto (code=exited, status=0/SUCCESS)\r\n    Process: 598 ExecStartPre=/bin/chown mosquitto /run/mosquitto (code=exited, status=0/SUCCESS)\r\n   Main PID: 599 (mosquitto)\r\n      Tasks: 1 (limit: 9357)\r\n     Memory: 3.6M\r\n        CPU: 1.184s\r\n     CGroup: /system.slice/mosquitto.service\r\n             \u2514\u2500599 /usr/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf\r\n\r\nFeb 05 14:06:49 nomad-minion systemd[1]: Starting Mosquitto MQTT Broker...\r\nFeb 05 14:06:50 nomad-minion mosquitto[599]: 1644041210: Loading config file /etc/mosquitto/conf.d/custom.conf\r\nFeb 05 14:06:50 nomad-minion systemd[1]: Started Mosquitto MQTT Broker.\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Here I can see that the Mosquitto binary was installed in ",(0,r.jsx)(t.code,{children:"/usr/sbin"})," and it is being started with a default configuration file in ",(0,r.jsx)(t.code,{children:"/etc/mosquitto/mosquitto.conf"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"configure-mosquitto",children:"Configure Mosquitto"}),"\n",(0,r.jsx)(t.p,{children:"Mosquitto installs 5 further tools that we can use with our broker:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"ls -la /usr/bin | grep mosquitto\r\n-rwxr-xr-x  1 root root        60448 Jun  9  2021 mosquitto_ctrl\r\n-rwxr-xr-x  1 root root        31456 Jun  9  2021 mosquitto_passwd\r\n-rwxr-xr-x  1 root root        60296 Jun  9  2021 mosquitto_pub\r\n-rwxr-xr-x  1 root root        64608 Jun  9  2021 mosquitto_rr\r\n-rwxr-xr-x  1 root root        64608 Jun  9  2021 mosquitto_sub\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Password file can be created using ",(0,r.jsx)(t.code,{children:"mosquitto_passwd"})," tool:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"mosquitto_passwd -c /etc/mosquitto/password_file admin\r\nPassword: instar\r\nReenter password: instar\n"})}),"\n",(0,r.jsxs)(t.p,{children:["First argument is path to a file, second argument is username. The ",(0,r.jsx)(t.code,{children:"-c"})," option means that new password file will be created. Run the following command and enter a password for the user."]}),"\n",(0,r.jsx)(t.p,{children:"Next, open Mosquitto configuration file:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"cat /etc/mosquitto/mosquitto.conf\r\n# Place your local configuration in /etc/mosquitto/conf.d/\r\n#\r\n# A full description of the configuration file is at\r\n# /usr/share/doc/mosquitto/examples/mosquitto.conf.example\r\n\r\npid_file /run/mosquitto/mosquitto.pid\r\n\r\npersistence true\r\npersistence_location /var/lib/mosquitto/\r\n\r\nlog_dest file /var/log/mosquitto/mosquitto.log\r\n\r\ninclude_dir /etc/mosquitto/conf.d\n"})}),"\n",(0,r.jsxs)(t.p,{children:['Here I can see that the "actual" configuration file, the one that I need to edit, must be located in ',(0,r.jsx)(t.code,{children:"/etc/mosquitto/conf.d"}),". So let's take a look:"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"/etc/mosquitto/conf.d/custom.conf"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-conf",children:"# =================================================================\r\n# General configuration\r\n# =================================================================\r\n# per_listener_settings false\r\n# allow_zero_length_clientid true\r\nauto_id_prefix zeroid-\r\n# check_retain_source true\r\n#max_inflight_bytes 0\r\n#max_inflight_messages 20\r\n#max_keepalive 65535\r\n#max_packet_size 0\r\n#max_queued_bytes 0\r\n#max_qos 2\r\n#max_queued_messages 1000\r\n#memory_limit 0\r\n#message_size_limit 0\r\npersistent_client_expiration 7d\r\n# pid_file /var/run/mosquitto/mosquitto.pid\r\nqueue_qos0_messages true\r\n#retain_available true\r\n#set_tcp_nodelay false\r\n#sys_interval 10\r\n#upgrade_outgoing_qos false\r\n#user mosquitto\r\n# =================================================================\r\n# Listeners\r\n# =================================================================\r\nlistener 1883\r\nprotocol mqtt\r\nlistener 1885\r\nprotocol websockets\r\n#socket_domain\r\n#bind_interface\r\n#http_dir\r\n#max_connections -1\r\n#mount_point\r\n#use_username_as_clientid\r\n#websockets_headers_size\r\n# -----------------------------------------------------------------\r\n# Certificate based SSL/TLS support\r\n# -----------------------------------------------------------------\r\n#certfile\r\n#keyfile\r\n#ciphers\r\n#ciphers_tls1.3\r\n#crlfile\r\n#dhparamfile\r\n#require_certificate false\r\n#cafile\r\n#capath\r\n#use_identity_as_username false\r\n# -----------------------------------------------------------------\r\n# Pre-shared-key based SSL/TLS support\r\n# -----------------------------------------------------------------\r\n#psk_hint\r\n#ciphers\r\n#use_identity_as_username false\r\n# =================================================================\r\n# Persistence\r\n# =================================================================\r\n#autosave_interval 1800\r\n#autosave_on_changes false\r\n#persistence false\r\n#persistence_file mosquitto.db\r\n#persistence_location\r\n# =================================================================\r\n# Logging\r\n# =================================================================\r\n#log_dest stderr\r\nlog_type error\r\nlog_type warning\r\nlog_type notice\r\nlog_type information\r\nconnection_messages true\r\n#log_facility\r\nlog_timestamp true\r\nlog_timestamp_format %Y-%m-%dT%H:%M:%S\r\n#websockets_log_level 0\r\n# =================================================================\r\n# Security\r\n# =================================================================\r\n#clientid_prefixes\r\nallow_anonymous false\r\n# -----------------------------------------------------------------\r\n# Default authentication and topic access control\r\n# -----------------------------------------------------------------\r\npassword_file /etc/mosquitto/passwordfile\r\nacl_file /etc/mosquitto/acl.file\r\n# -----------------------------------------------------------------\r\n# External authentication and topic access plugin options\r\n# -----------------------------------------------------------------\r\n# auth_plugin\r\n# auth_opt_db_host\r\n# auth_opt_db_port\r\n# auth_opt_db_username\r\n# auth_opt_db_password\r\n# =================================================================\r\n# Bridges\r\n# =================================================================\r\n#connection <name>\r\n#address <host>[:<port>] [<host>[:<port>]]\r\n#topic <topic> [[[out | in | both] qos-level] local-prefix remote-prefix]\r\n#bridge_bind_address\r\n#bridge_attempt_unsubscribe true\r\n#bridge_protocol_version mqttv311\r\n#idle_timeout 60\r\n#keepalive_interval 60\r\n#local_clientid\r\n#notifications true\r\n#notification_topic\r\n#remote_clientid\r\n#remote_password\r\n#remote_username\r\n# restart_timeout 20\r\n# restart_timeout 10 30\r\n#restart_timeout 5 30\r\n#round_robin false\r\n#start_type automatic\r\n#threshold 10\r\n#try_private true\r\n#bridge_outgoing_retain true\r\n#bridge_max_packet_size 0\r\n# -----------------------------------------------------------------\r\n# Certificate based SSL/TLS support\r\n# -----------------------------------------------------------------\r\n#bridge_cafile\r\n#bridge_capath\r\n#bridge_alpn\r\n#bridge_insecure false\r\n#bridge_certfile\r\n#bridge_keyfile\r\n# -----------------------------------------------------------------\r\n# PSK based SSL/TLS support\r\n# -----------------------------------------------------------------\r\n#bridge_identity\r\n#bridge_psk\r\n# =================================================================\r\n# External config files\r\n# =================================================================\r\n#include_dir\n"})}),"\n",(0,r.jsx)(t.p,{children:"Make changes as needed and restart the Mosquitto service with:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"service mosquitto restart && service mosquitto status\n"})}),"\n",(0,r.jsx)(t.h2,{id:"verify-that-the-broker-is-working",children:"Verify that the Broker is working"}),"\n",(0,r.jsx)(t.h3,{id:"mosquitto-cli-tools",children:"Mosquitto CLI Tools"}),"\n",(0,r.jsx)(t.p,{children:"Verify that the broker is working using the Mosquitto subscription and publication tools:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"mosquitto_sub  -h localhost -p 1883 -u admin -P instar -v -t '$SYS/broker/uptime'\r\n$SYS/broker/uptime 1089 seconds\r\n$SYS/broker/uptime 1100 seconds\r\n$SYS/broker/uptime 1111 seconds\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Subscribing to ",(0,r.jsx)(t.code,{children:"$SYS/broker/uptime"})," will give you the broker uptime in an 10s interval (interval can be adjusted in the mosquitto config)."]}),"\n",(0,r.jsx)(t.h3,{id:"connecting-clients",children:"Connecting Clients"}),"\n",(0,r.jsx)(t.p,{children:"And to something more exciting - I will connect an INSTAR IP camera:"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Mosquitto2 MQTT Broker",src:n(332014).Z+"",width:"1133",height:"714"})}),"\n",(0,r.jsxs)(t.p,{children:["And send an update to switch the ",(0,r.jsx)(t.em,{children:"privacy area 1"})," on and off again using the command topic:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"mosquitto_pub -h 192.168.2.111 -p 1883 -u admin -P instar -t 'cameras/117/multimedia/privacy/region1/enable' -m '{\"val\":\"1\"}' -d\r\nClient (null) sending CONNECT\r\nClient (null) received CONNACK (0)\r\nClient (null) sending PUBLISH (d0, q0, r0, m1, 'cameras/117/multimedia/privacy/region1/enable', ... (11 bytes))\r\nClient (null) sending DISCONNECT\r\n\r\nmosquitto_pub -h 192.168.2.111 -p 1883 -u admin -P instar -t 'cameras/117/multimedia/privacy/region1/enable' -m '{\"val\":\"0\"}' -d\r\nClient (null) sending CONNECT\r\nClient (null) received CONNACK (0)\r\nClient (null) sending PUBLISH (d0, q0, r0, m1, 'cameras/117/multimedia/privacy/region1/enable', ... (11 bytes))\r\nClient (null) sending DISCONNECT\n"})}),"\n",(0,r.jsx)(t.p,{children:"Subscribing to the status topic I can see that the command was executed as expected:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'mosquitto_sub -h localhost -p 1883 -u admin -P instar -v -t \'cameras/117/status/multimedia/privacy/region1/enable\'    \r\ncameras/117/status/multimedia/privacy/region1/enable {"val":"1"}\r\ncameras/117/status/multimedia/privacy/region1/enable {"val":"0"}\n'})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Mosquitto2 MQTT Broker",src:n(295135).Z+"",width:"1020",height:"736"})}),"\n",(0,r.jsx)(t.h2,{id:"websockets",children:"Websockets"}),"\n",(0,r.jsx)(t.h3,{id:"mqtt-explorer",children:"MQTT Explorer"}),"\n",(0,r.jsxs)(t.p,{children:["So far I have been using the configured default listener on port ",(0,r.jsx)(t.code,{children:"1885"})," using the ",(0,r.jsx)(t.strong,{children:"MQTT"})," protocol. But I added an additional listener on port ",(0,r.jsx)(t.code,{children:"8885"})," that requires a websocket connection:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-conf",children:"# =================================================================\r\n# Listeners\r\n# =================================================================\r\nlistener 1883\r\nprotocol mqtt\r\nlistener 1885\r\nprotocol websockets\n"})}),"\n",(0,r.jsxs)(t.p,{children:["In the ",(0,r.jsx)(t.a,{href:"https://mqtt-explorer.com/",children:"MQTT Explorer"})," you can switch the used protocol to ",(0,r.jsx)(t.code,{children:"ws"})," to test the service:"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Mosquitto2 MQTT Broker",src:n(159562).Z+"",width:"1016",height:"734"})}),"\n",(0,r.jsx)(t.h3,{id:"mqttjs-web-client",children:"MQTT.js Web Client"}),"\n",(0,r.jsxs)(t.p,{children:["Using a ",(0,r.jsx)(t.a,{href:"/docs/Development/Javascript/2021-06-04--mqtt-dashboard-react/2021-06-04",children:"MQTT.js React Dashboard"})," to connect to the WS service:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"import React, { useState, Fragment } from 'react';\r\nimport './App.css';\r\n\r\nvar mqtt = require('mqtt');\r\nvar options = {\r\n    protocol: 'ws',\r\n    username: 'admin',\r\n    password: 'instar',\r\n    // clientId uniquely identifies client\r\n    // choose any string you wish\r\n    clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8),\r\n};\r\nvar client  = mqtt.connect('ws://192.168.2.111:1885', options);\r\n\r\n// Get Broker Uptime MQTT topic\r\nclient.subscribe('$SYS/broker/uptime');\r\n\r\nfunction App() {\r\n  var note;\r\n  client.on('message', function (topic, message) {\r\n    note = message.toString();\r\n    // Updates React state with message \r\n    setMsg(note);\r\n    console.log(note);\r\n    client.end();\r\n    });\r\n\r\n  // Sets default React state \r\n  const [msg, setMsg] = useState(<Fragment><em>connecting...</em></Fragment>);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Mosquitto Broker</h1>\r\n        <p>Uptime: {msg}</p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Mosquitto2 MQTT Broker",src:n(747788).Z+"",width:"1184",height:"883"})}),"\n",(0,r.jsx)(t.h2,{id:"mosquitto-webserver",children:"Mosquitto Webserver"}),"\n",(0,r.jsxs)(t.p,{children:["When a listener is using the websockets protocol, it is possible to serve http data as well. Set ",(0,r.jsx)(t.code,{children:"http_dir"})," to a directory which contains the files you wish to serve. If this option is not specified, then no normal http connections will be possible. Let's add this third listener to the configuration file:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-conf",children:"# =================================================================\r\n# Listeners\r\n# =================================================================\r\nlistener 1883\r\nprotocol mqtt\r\nlistener 1885\r\nprotocol websockets\r\nlistener 8080\r\nprotocol websockets\r\nhttp_dir /opt/mqtt-tree\n"})}),"\n",(0,r.jsxs)(t.p,{children:["I am going to use this ",(0,r.jsx)(t.a,{href:"https://github.com/mpolinowski/d3-MQTT-Topic-Tree",children:"D3 Tree"})," from ",(0,r.jsx)(t.code,{children:"@hardillb"})," and download to ",(0,r.jsx)(t.code,{children:"/opt/mqtt-tree"}),". All I need to add the the ",(0,r.jsx)(t.code,{children:"./index.html"})," file is the Mosquitto WS URL, Port and the broker login to display a tree view of all registered topics:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"var options = {\r\n  // host: location.hostname,\r\n  // port: parseInt(location.port),\r\n  host: '192.168.2.111',\r\n  port: 1885,\r\n  clientID: \"web\" + new Date().getTime(),\r\n  connectOpts: {\r\n    userName: 'admin',\r\n    password: 'instar',\r\n    // useSSL: true,\r\n    keepAliveInterval: 30,\r\n    timeout: 10,\r\n    cleanSession: false,\r\n    onSuccess: onConnect,\r\n    onFailure: onFailure\r\n  }\r\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Restart the Mosquitto service and visit the broker IP on port ",(0,r.jsx)(t.code,{children:"8080"})," with your web browser:"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Mosquitto2 MQTT Broker",src:n(282571).Z+"",width:"929",height:"713"})}),"\n",(0,r.jsx)(t.h2,{id:"adding-encryption",children:"Adding Encryption"}),"\n",(0,r.jsx)(t.h3,{id:"creating-self-signed-certificates",children:"Creating Self-Signed Certificates"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Client Requirements"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"A CA (certificate authority) certificate of the CA that has signed the server certificate on the Mosquitto Broker."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Broker Requirements"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"CA certificate of the CA that has signed the server certificate on the Mosquitto Broker."}),"\n",(0,r.jsx)(t.li,{children:"CA certificated server certificate."}),"\n",(0,r.jsx)(t.li,{children:"Server Private key for decryption."}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"openssl version\r\nOpenSSL 1.1.1l  24 Aug 2021\n"})}),"\n",(0,r.jsx)(t.p,{children:"Mosquitto already creates a directory for self-signed certificates - if it does not exists create it with:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"mkdir -p /etc/mosquitto/certs\r\nchown mosquitto:mosquitto /etc/mosquitto/certs\n"})}),"\n",(0,r.jsx)(t.h4,{id:"ca-certificates",children:"CA Certificates"}),"\n",(0,r.jsx)(t.p,{children:"m"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"cd /etc/mosquitto/certs\r\nopenssl genrsa -out ca.key 4096\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Important"}),": The FQDN must not be the same as the ",(0,r.jsx)(t.strong,{children:"server FQDN"}),", otherwise you might end up with SSL errors. On a local network using a AVM Fritzbox router every device receives both a hostname - for example my Mosquitto server identifies as ",(0,r.jsx)(t.code,{children:"debian11"})," - and a domain name hostname + ",(0,r.jsx)(t.code,{children:".fritz.box"}),". So, for example, I am able to access the Mosquitto webserver via ",(0,r.jsx)(t.code,{children:"http://debian11.fritz.box:8080/"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"openssl req -new -x509 -days 1825 -key ca.key -out ca.crt\r\n\r\nYou are about to be asked to enter information that will be incorporated\r\ninto your certificate request.\r\nWhat you are about to enter is what is called a Distinguished Name or a DN.\r\nThere are quite a few fields but you can leave some blank\r\nFor some fields there will be a default value,\r\nIf you enter '.', the field will be left blank.\r\n-----\r\nCountry Name (2 letter code) [AU]:\r\nState or Province Name (full name) [Some-State]:\r\nLocality Name (eg, city) []:\r\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:INSTAR\r\nOrganizational Unit Name (eg, section) []:\r\nCommon Name (e.g. server FQDN or YOUR name) []:debian11.fritz.box\r\nEmail Address []:\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"chown mosquitto:mosquitto ca.{crt,key}\n"})}),"\n",(0,r.jsx)(t.h4,{id:"server-certificates",children:"Server Certificates"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"openssl genrsa -out server.key 4096\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Important"}),": Here the FQDN must be the ",(0,r.jsx)(t.strong,{children:"hostname"}),", otherwise you might end up with SSL errors. As mentioned above my server can be reached via the hostname ",(0,r.jsx)(t.code,{children:"debian11"})," - I can test this by visiting the mosquitto webserver ",(0,r.jsx)(t.code,{children:"http://debian11:8080/"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"openssl req -new -out server.csr -key server.key\r\n\r\nYou are about to be asked to enter information that will be incorporated\r\ninto your certificate request.\r\nWhat you are about to enter is what is called a Distinguished Name or a DN.\r\nThere are quite a few fields but you can leave some blank\r\nFor some fields there will be a default value,\r\nIf you enter '.', the field will be left blank.\r\n-----\r\nCountry Name (2 letter code) [AU]:\r\nState or Province Name (full name) [Some-State]:\r\nLocality Name (eg, city) []:\r\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:INSTAR\r\nOrganizational Unit Name (eg, section) []:\r\nCommon Name (e.g. server FQDN or YOUR name) []:debian11\r\nEmail Address []:\r\n\r\nPlease enter the following 'extra' attributes\r\nto be sent with your certificate request\r\nA challenge password []:\r\nAn optional company name []:\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 1825\r\n\r\nSignature ok\r\nsubject=C = AU, ST = Some-State, O = INSTAR, CN = debian11\r\nGetting CA Private Key\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"chown mosquitto:mosquitto server.{csr,key,crt}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"certs"})," directory should now contain the following files:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"-rw-r--r-- 1 mosquitto mosquitto 1956 Feb 16 20:31 ca.crt\r\n-rw------- 1 mosquitto mosquitto 3243 Feb 16 20:30 ca.key\r\n-rw-r--r-- 1 root      root        41 Feb 16 20:37 ca.srl\r\n-rw-r--r-- 1 mosquitto mosquitto 1834 Feb 16 20:37 server.crt\r\n-rw-r--r-- 1 mosquitto mosquitto 1659 Feb 16 20:37 server.csr\r\n-rw------- 1 mosquitto mosquitto 3243 Feb 16 20:34 server.key\n"})}),"\n",(0,r.jsx)(t.h4,{id:"mosquitto-server-configuration",children:"Mosquitto Server Configuration"}),"\n",(0,r.jsxs)(t.p,{children:["Add the following configuration to ",(0,r.jsx)(t.code,{children:"/etc/mosquitto/conf.d/custom.conf"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yml",children:"# -----------------------------------------------------------------\r\n# Certificate based SSL/TLS support\r\n# -----------------------------------------------------------------\r\nlistener 8883\r\ntls_version tlsv1.2\r\ncafile /etc/mosquitto/certs/ca.crt\r\ncertfile /etc/mosquitto/certs/server.crt\r\nkeyfile /etc/mosquitto/certs/server.key\n"})}),"\n",(0,r.jsx)(t.p,{children:"Then restart the service:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"service mosquitto restart && service mosquitto status\n"})}),"\n",(0,r.jsx)(t.h4,{id:"testing-the-connection",children:"Testing the Connection"}),"\n",(0,r.jsxs)(t.p,{children:["All you need to establish a server connection is the ",(0,r.jsx)(t.code,{children:"ca.crt"})," file on your client machine. Then you can try to subscribe to the last-will topic of your camera and should receive it's online status:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'mosquitto_sub -h debian11 -t \'cameras/117/status/connection\' -p 8883 --insecure --cafile ca.crt --tls-version tlsv1.2 -u admin -P instar -v\r\n\r\ncameras/117/status/connection {"val":"online"}\r\ncameras/117/status/connection {"val":"offline"}\r\ncameras/117/status/connection {"val":"online"}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Or with the ",(0,r.jsx)(t.strong,{children:"MQTT Explorer"}),":"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Mosquitto2 MQTT Broker",src:n(499190).Z+"",width:"1014",height:"640"})}),"\n",(0,r.jsxs)(t.p,{children:["Add the ",(0,r.jsx)(t.code,{children:"ca.crt"})," file here:"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Mosquitto2 MQTT Broker",src:n(813184).Z+"",width:"1007",height:"460"})}),"\n",(0,r.jsx)(t.h4,{id:"client-certificates",children:"Client Certificates"}),"\n",(0,r.jsx)(t.p,{children:"For more security, you can add client certificates, which need to be signed by the server."}),"\n",(0,r.jsx)(t.h4,{id:"creating-a-client-certificate",children:"Creating a client certificate"}),"\n",(0,r.jsxs)(t.p,{children:["Generate client certificates for the MQTT clients. ",(0,r.jsx)(t.strong,{children:"Important"}),": Don\u2019t use the server name as FQDN:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"openssl genrsa -out client.key 4096\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"openssl req -out client.csr -key client.key -new\r\n\r\nYou are about to be asked to enter information that will be incorporated\r\ninto your certificate request.\r\nWhat you are about to enter is what is called a Distinguished Name or a DN.\r\nThere are quite a few fields but you can leave some blank\r\nFor some fields there will be a default value,\r\nIf you enter '.', the field will be left blank.\r\n-----\r\nCountry Name (2 letter code) [AU]:\r\nState or Province Name (full name) [Some-State]:\r\nLocality Name (eg, city) []:\r\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:INSTAR\r\nOrganizational Unit Name (eg, section) []:\r\nCommon Name (e.g. server FQDN or YOUR name) []:mqtt.client\r\nEmail Address []:\r\n\r\nPlease enter the following 'extra' attributes\r\nto be sent with your certificate request\r\nA challenge password []:\r\nAn optional company name []:\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"openssl x509 -req -in client.csr -CA ca.crt --CAkey ca.key --CAcreateserial -out client.crt -days 1825\r\n\r\nSignature ok\r\nsubject=C = AU, ST = Some-State, O = INSTAR, CN = mqtt.client\r\nGetting CA Private Key\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"chown mosquitto:mosquitto client.{csr,crt,key}\n"})}),"\n",(0,r.jsx)(t.p,{children:"Restart the Mosquitto server:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"service mosquitto restart && service mosquitto status\n"})}),"\n",(0,r.jsx)(t.h4,{id:"update-the-mosquitto-server-configuration",children:"Update the Mosquitto Server Configuration"}),"\n",(0,r.jsxs)(t.p,{children:["To enforce the usage of client certificates, you will need to add ",(0,r.jsx)(t.code,{children:"require_certificate true"})," to your listener configuration:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yml",children:"# -----------------------------------------------------------------\r\n# Certificate based SSL/TLS support\r\n# -----------------------------------------------------------------\r\nlistener 8883\r\ntls_version tlsv1.2\r\ncafile /etc/mosquitto/certs/ca.crt\r\ncertfile /etc/mosquitto/certs/server.crt\r\nkeyfile /etc/mosquitto/certs/server.key\r\nrequire_certificate true\n"})}),"\n",(0,r.jsx)(t.h4,{id:"testing-the-connection-1",children:"Testing the Connection"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'mosquitto_sub -h debian11 -t \'cameras/117/status/connection\' -p 8883 --insecure --cafile ca.crt --cert client.crt --key client.key --tls-version tlsv1.2 -u admin -P instar -v\r\n\r\ncameras/117/status/connection {"val":"online"}\n'})}),"\n",(0,r.jsx)(t.p,{children:"For the MQTT Explorer upload the Client Key and Cert:"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Mosquitto2 MQTT Broker",src:n(522410).Z+"",width:"1019",height:"571"})}),"\n",(0,r.jsx)(t.h2,{id:"connect-your-instar-ip-camera",children:"Connect your INSTAR IP Camera"}),"\n",(0,r.jsx)(t.p,{children:"To connect your INSTAR camera you first have to do 2 things:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Combine the ",(0,r.jsx)(t.code,{children:"client.key"})," and ",(0,r.jsx)(t.code,{children:"client.crt"})," into a single file called ",(0,r.jsx)(t.code,{children:"client.pem"}),":"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"-----BEGIN RSA PRIVATE KEY-----\r\nMIIJKAIBAAKCAgEAorc0ouM2Uh0pBlZ5IbCSonwOACUCPQ+FqWjhRl5FbAAke2iK\r\n\r\n...\r\n\r\nl6hxaLG33DoTvYoEbjBEmLtsBAz4sdnTGi2z6HOYfMsqGjMehPJmr2XH/kA=\r\n-----END RSA PRIVATE KEY-----\r\n-----BEGIN CERTIFICATE-----\r\nMIIFIDCCAwgCFHLf6A9ycbmW6ExF+DBGE3T3qhFAMA0GCSqGSIb3DQEBCwUAMFAx\r\n\r\n...\r\n\r\nCVSpxYNxMG6gIpeIFrTogygOfdc=\r\n-----END CERTIFICATE-----\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsxs)(t.li,{children:["Take the ",(0,r.jsx)(t.code,{children:"ca.crt"})," and save it as ",(0,r.jsx)(t.code,{children:"ca.pem"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Now open your camera's SSL Cert menu, add the ",(0,r.jsx)(t.code,{children:"client.pem"})," as your custom certificate and enable it:"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Mosquitto2 MQTT Broker",src:n(37262).Z+"",width:"948",height:"854"})}),"\n",(0,r.jsxs)(t.p,{children:["And secondly add the ",(0,r.jsx)(t.code,{children:"ca.pem"})," to the Custom CA Store of your camera:"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Mosquitto2 MQTT Broker",src:n(139035).Z+"",width:"1063",height:"525"})}),"\n",(0,r.jsxs)(t.p,{children:["Configure the client to use your MQTT brokers ",(0,r.jsx)(t.strong,{children:"Hostname"})," instead of it's local IP to be able to activate the ",(0,r.jsx)(t.strong,{children:"Verify Certificate"})," option:"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Mosquitto2 MQTT Broker",src:n(706252).Z+"",width:"947",height:"767"})}),"\n",(0,r.jsxs)(t.p,{children:["Start your MQTT client and check the ",(0,r.jsx)(t.code,{children:"http://debian11/tmpfs/mqtt-log"})," - you should see it connect on port ",(0,r.jsx)(t.code,{children:"8883"})," using ",(0,r.jsx)(t.strong,{children:"TLS"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"2022-2-18 4:11:11: [Info] Config: Version 2\r\n2022-2-18 4:11:11: [Info] Config: Units loaded: 283\r\n2022-2-18 4:11:11: [Info] Config: Memory required: 40749\r\n2022-2-18 4:11:11: [Info] Authenticate with Mqtt-Broker\r\n2022-2-18 4:11:11: [Info] Activate TLS\r\n2022-2-18 4:11:11: [Info] Connect to Mqtt-Broker debian11 on port 8883...\r\n2022-2-18 4:11:11: [Info] Synchronize Cgi-Server with Mqtt-Broker\r\n2022-2-18 4:11:11: [Info] Mqtt listen thread has been started.\r\n2022-2-18 4:11:11: [Info] Synchronize Cgi-Server with Mqtt-Broker\r\n2022-2-18 4:11:12: [Info] Adapter connected!\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.ah)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},603905:(e,t,n)=>{n.d(t,{ah:()=>l});var r=n(667294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),h=l(n),m=i,p=h["".concat(c,".").concat(m)]||h[m]||d[m]||s;return n?r.createElement(p,o(o({ref:t},u),{},{components:n})):r.createElement(p,o({ref:t},u))}));u.displayName="MDXCreateElement"},332014:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Mosquitto2_Broker_01-5ae8f61bf9ebcd9af6fad332db059338.png"},295135:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Mosquitto2_Broker_02-09a6355ecc5ebebc65ee7216a34b483c.png"},159562:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Mosquitto2_Broker_03-80d58d8c03492fe75d935556dd1ff3fb.png"},747788:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Mosquitto2_Broker_04-c2a81f5b204350f8144843088eedfe96.png"},282571:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Mosquitto2_Broker_05-0fb5a1b5a2b1e93e1b1400b0d83a9bf4.png"},499190:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Mosquitto2_Broker_06-d9a6501da366813cfae1dbec80dbb4ba.png"},813184:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Mosquitto2_Broker_07-48662b02209b8dd16d92d48521f56778.png"},522410:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Mosquitto2_Broker_08-0dad0d164bdec7d1fcec4b1112dadab6.png"},37262:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Mosquitto2_Broker_09-e913aafe3d5b36029890eba777843163.png"},139035:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Mosquitto2_Broker_10-af28ed2051bcea94db91923e43b70d4e.png"},706252:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Mosquitto2_Broker_11-5100e12de27ee21cc284f18cee3e24e7.png"},496948:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-027d6cb82627f4093030484d7bfca6fd.jpg"}}]);