"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[55866],{566962:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var s=r(474848),t=r(28453);const i={sidebar_position:9060,slug:"2019-11-08",title:"Adding an OBS Stream to your Website",tags:["LINUX","Smarthome","IoT","Docker","NGINX"]},a=void 0,l={id:"DevOps/NGINX/2019-11-08--nginx-rtmp-website/index",title:"Adding an OBS Stream to your Website",description:"Koh Rong, Cambodia",source:"@site/docs/DevOps/NGINX/2019-11-08--nginx-rtmp-website/index.md",sourceDirName:"DevOps/NGINX/2019-11-08--nginx-rtmp-website",slug:"/DevOps/NGINX/2019-11-08--nginx-rtmp-website/2019-11-08",permalink:"/docs/DevOps/NGINX/2019-11-08--nginx-rtmp-website/2019-11-08",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/NGINX/2019-11-08--nginx-rtmp-website/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Smarthome",permalink:"/docs/tags/smarthome"},{label:"IoT",permalink:"/docs/tags/io-t"},{label:"Docker",permalink:"/docs/tags/docker"},{label:"NGINX",permalink:"/docs/tags/nginx"}],version:"current",sidebarPosition:9060,frontMatter:{sidebar_position:9060,slug:"2019-11-08",title:"Adding an OBS Stream to your Website",tags:["LINUX","Smarthome","IoT","Docker","NGINX"]},sidebar:"tutorialSidebar",previous:{title:"Securing Webservers - Apache and NGINX",permalink:"/docs/DevOps/NGINX/2020-07-29--securing-apache-and-nginx/2020-07-29"},next:{title:"Building an RTMP Streaming Server with Podman",permalink:"/docs/DevOps/NGINX/2019-11-07--nginx-rtmp-streaming-container/2019-11-07"}},o={},c=[{value:"Update the NGINX Configuration File",id:"update-the-nginx-configuration-file",level:2},{value:"RTMP Module Config",id:"rtmp-module-config",level:3},{value:"HTTP Server Config",id:"http-server-config",level:3},{value:"Complete nginx.conf",id:"complete-nginxconf",level:3},{value:"Test your Stream",id:"test-your-stream",level:2},{value:"From existing rtmp stream already in h264",id:"from-existing-rtmp-stream-already-in-h264",level:2},{value:"From local webcam",id:"from-local-webcam",level:2},{value:"Embed within website",id:"embed-within-website",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Koh Rong, Cambodia",src:r(794928).A+"",width:"1500",height:"638"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#update-the-nginx-configuration-file",children:"Update the NGINX Configuration File"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#rtmp-module-config",children:"RTMP Module Config"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#http-server-config",children:"HTTP Server Config"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#complete-nginxconf",children:"Complete nginx.conf"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#test-your-stream",children:"Test your Stream"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#from-existing-rtmp-stream-already-in-h264",children:"From existing rtmp stream already in h264"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#from-local-webcam",children:"From local webcam"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#embed-within-website",children:"Embed within website"})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["This tutorial starts where the last ended. I setup OBS to re-stream my INSTAR IP cameras RTSP stream to the NGINX RTMP module and tested that I was able to access this RTMP stream with a VLC player. I now want to embed this video stream into a website (",(0,s.jsx)(n.a,{href:"https://docs.peer5.com/guides/setting-up-hls-live-streaming-server-using-nginx/",children:"Reference"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"update-the-nginx-configuration-file",children:"Update the NGINX Configuration File"}),"\n",(0,s.jsx)(n.h3,{id:"rtmp-module-config",children:"RTMP Module Config"}),"\n",(0,s.jsx)(n.p,{children:"Our current RTMP setup looks like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cfg",children:" rtmp {\r\n         server {\r\n                 listen 1935;\r\n                 chunk_size 4096;\r\n\r\n                 application live {\r\n                         live on;\r\n                         record off;\r\n                 }\r\n         }\r\n }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We will be using stream as our stream name so our endpoint will be: ",(0,s.jsx)(n.code,{children:"rtmp://localhost/show/stream"})," . Which will later be available as ",(0,s.jsx)(n.code,{children:"http://localhost:8080/hls/stream.m3u8"}),". For good HLS experience we recommend using 3 seconds fragments with 60 seconds playlist:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cfg",children:"rtmp {\r\n    server {\r\n        listen 1935; # Listen on standard RTMP port\r\n        chunk_size 4096;\r\n\r\n        application show {\r\n            live on;\r\n            # Turn on HLS\r\n            hls on;\r\n            hls_path /mnt/hls/;\r\n            hls_fragment 3;\r\n            hls_playlist_length 60;\r\n            # disable consuming the stream from nginx as rtmp\r\n            deny play all;\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that the example points ",(0,s.jsx)(n.code,{children:"/mnt/hls/"})," as the target path for the hls playlist and video files. You can change this to a different directory but make sure that nginx have write permissions:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir /mnt/hls/\r\nchown -R <nginx user>:<nginx user> /mnt/hls/\r\nchmod 777 /mnt/hls\n"})}),"\n",(0,s.jsx)(n.h3,{id:"http-server-config",children:"HTTP Server Config"}),"\n",(0,s.jsx)(n.p,{children:"Since HLS consists of static files, a simple http server can be set up with two additions, correct MIME types and CORS headers."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cfg",children:"server {\r\n    listen 8080;\r\n\r\n    location /hls {\r\n        # Disable cache\r\n        add_header Cache-Control no-cache;\r\n\r\n        # CORS setup\r\n        add_header 'Access-Control-Allow-Origin' '*' always;\r\n        add_header 'Access-Control-Expose-Headers' 'Content-Length';\r\n\r\n        # allow CORS preflight requests\r\n        if ($request_method = 'OPTIONS') {\r\n            add_header 'Access-Control-Allow-Origin' '*';\r\n            add_header 'Access-Control-Max-Age' 1728000;\r\n            add_header 'Content-Type' 'text/plain charset=UTF-8';\r\n            add_header 'Content-Length' 0;\r\n            return 204;\r\n        }\r\n\r\n        types {\r\n            application/vnd.apple.mpegurl m3u8;\r\n            video/mp2t ts;\r\n        }\r\n\r\n        root /mnt/;\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"complete-nginxconf",children:"Complete nginx.conf"}),"\n",(0,s.jsxs)(n.p,{children:["The default location for nginx conf is ",(0,s.jsx)(n.code,{children:"/usr/local/nginx/conf/nginx.conf"})," or ",(0,s.jsx)(n.code,{children:"/etc/nginx/nginx.conf"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cfg",children:"worker_processes  auto;\r\nevents {\r\n    worker_connections  1024;\r\n}\r\n\r\n# RTMP configuration\r\nrtmp {\r\n    server {\r\n        listen 1935; # Listen on standard RTMP port\r\n        chunk_size 4096;\r\n\r\n        application show {\r\n            live on;\r\n            # Turn on HLS\r\n            hls on;\r\n            hls_path /mnt/hls/;\r\n            hls_fragment 3;\r\n            hls_playlist_length 60;\r\n            # disable consuming the stream from nginx as rtmp\r\n            deny play all;\r\n        }\r\n    }\r\n}\r\n\r\nhttp {\r\n    sendfile off;\r\n    tcp_nopush on;\r\n    directio 512;\r\n    default_type application/octet-stream;\r\n\r\n    server {\r\n        listen 8080;\r\n\r\n        location / {\r\n            # Disable cache\r\n            add_header 'Cache-Control' 'no-cache';\r\n\r\n            # CORS setup\r\n            add_header 'Access-Control-Allow-Origin' '*' always;\r\n            add_header 'Access-Control-Expose-Headers' 'Content-Length';\r\n\r\n            # allow CORS preflight requests\r\n            if ($request_method = 'OPTIONS') {\r\n                add_header 'Access-Control-Allow-Origin' '*';\r\n                add_header 'Access-Control-Max-Age' 1728000;\r\n                add_header 'Content-Type' 'text/plain charset=UTF-8';\r\n                add_header 'Content-Length' 0;\r\n                return 204;\r\n            }\r\n\r\n            types {\r\n                application/dash+xml mpd;\r\n                application/vnd.apple.mpegurl m3u8;\r\n                video/mp2t ts;\r\n            }\r\n\r\n            root /mnt/;\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Restart nginx with:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"/usr/local/nginx/sbin/nginx -s stop\r\n/usr/local/nginx/sbin/nginx -t\r\n/usr/local/nginx/sbin/nginx\n"})}),"\n",(0,s.jsx)(n.h2,{id:"test-your-stream",children:"Test your Stream"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"NGINX RTMP Streaming Server",src:r(60835).A+"",width:"1081",height:"827"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"NGINX RTMP Streaming Server",src:r(723976).A+"",width:"932",height:"647"})}),"\n",(0,s.jsx)(n.h2,{id:"from-existing-rtmp-stream-already-in-h264",children:"From existing rtmp stream already in h264"}),"\n",(0,s.jsxs)(n.p,{children:["if you have an existing rtmp stream in the correct codec, you can skip ffmpeg and tell nginx to pull the stream directly. In order to do so add a ",(0,s.jsx)(n.a,{href:"https://github.com/arut/nginx-rtmp-module/wiki/Directives#pull",children:"pull directive"})," under application section in nginx.conf like so:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cfg",children:"application show {\r\n    live on;\r\n    pull rtmp://example.com:4567/sports/channel3 live=1;\r\n    # to change the local stream name use this syntax: ... live=1 name=ch3;\r\n\r\n    # other directives...\r\n    # hls_...\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"from-local-webcam",children:"From local webcam"}),"\n",(0,s.jsx)(n.p,{children:"To achieve the stream encoding and muxing we will use the almighty ffmpeg."}),"\n",(0,s.jsxs)(n.p,{children:["To install ffmpeg using ",(0,s.jsx)(n.a,{href:"https://launchpad.net/~mc3man/+archive/ubuntu/bionic-prop",children:"PPA"})," run these commands"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"add-apt-repository ppa:mc3man/bionic-prop\r\napt-get update\r\napt-get install ffmpeg\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ffmpeg -i rtsp://192.168.2.117/12 -vcodec libx264 -vprofile baseline -acodec aac -strict -2 -f flv rtmp://localhost:1935/show/stream\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-re"})," - consume stream on media's native bitrate (and not as fast as possible)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-f"})," - use video4linux2 plugin"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-i"})," - select physical device to capture from"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-vcodec"})," - specify video codec to output"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-vprofile"})," - use x264 baseline profile"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-acodec"})," - use aac audio codec"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-strict"})," - allow using the experimental aac codec"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-f"})," - specify format to output"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rtmp://localhost/show/stream"})," - rtmp endpoint to stream to. if the target port is not 1935 is should be included in the uri."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The last path component is the stream name - that means that multiple channels can be pushed using different names"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cfg",children:"rtmp {\r\n    server {\r\n        listen 1935; # Listen on standard RTMP port\r\n        chunk_size 4096;\r\n\r\n        application show {\r\n\r\n            # Once receive stream, transcode for adaptive streaming\r\n            # This single ffmpeg command takes the input and transforms\r\n            # the source into 4 different streams with different bitrate\r\n            # and quality. P.S. The scaling done here respects the aspect\r\n            # ratio of the input.\r\n\r\n            exec ffmpeg -i rtmp://192.168.2.111/appname/streamname -vcodec libx264 -vprofile baseline -acodec aac -strict -2 -f flv rtmp://localhost/show/stream\r\n\r\n            live on;\r\n            # Turn on HLS\r\n            hls on;\r\n            hls_path /mnt/hls/;\r\n            hls_fragment 3;\r\n            hls_playlist_length 60;\r\n            # disable consuming the stream from nginx as rtmp\r\n            deny play all;\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Restart nginx with:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"/usr/local/nginx/sbin/nginx -s stop\r\n/usr/local/nginx/sbin/nginx -t\r\n/usr/local/nginx/sbin/nginx\n"})}),"\n",(0,s.jsx)(n.h2,{id:"embed-within-website",children:"Embed within website"}),"\n",(0,s.jsx)(n.p,{children:"Now that we are pushing our stream into nginx, a manifest file in the format stream-name.m3u8 is created in the target folder along with the video fragments."}),"\n",(0,s.jsxs)(n.p,{children:["For our example, the manifest is available at: ",(0,s.jsx)(n.a,{href:"http://localhost:8080/hls/stream.m3u8",children:"http://localhost:8080/hls/stream.m3u8"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For testing our new HLS live stream we will use ",(0,s.jsx)(n.a,{href:"http://videojs.com/",children:"videojs5"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<video\r\n  id="autoplay"\r\n  width="720"\r\n  height="360"\r\n  class="video-js vjs-default-skin vjs-big-play-centered"\r\n  controls\r\n>\r\n  <source\r\n    src="http://192.168.2.111:8080/hls/stream.m3u8"\r\n    type="application/x-mpegURL"\r\n  />\r\n</video>\r\n\r\n<link href="//vjs.zencdn.net/5.7.1/video-js.css" rel="stylesheet" />\r\n<script src="//vjs.zencdn.net/5.7.1/video.js"><\/script>\r\n<script src="//videojs.github.io/videojs-contrib-hls/node_modules/videojs-contrib-hls/dist/videojs.hls.min.js"><\/script>\r\n\r\n<script>\r\n  var player = videojs(\'autoplay\')\r\n  player.play()\r\n<\/script>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://html5boilerplate.com",children:"HTML5 Boilerplate"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},60835:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/NGINX_RTMP_Streaming_Server_01-ddf60aa5b8970abcd588bcfc00dce24f.png"},723976:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/NGINX_RTMP_Streaming_Server_02-bec616fd88209448f9d863d7bd55d4f5.png"},794928:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-8d2d91e3e0054cd91340c6e3d05d419a.jpg"},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var s=r(296540);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);