"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[72325],{536362:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>a});var r=e(785893),i=e(603905);const o={sidebar_position:8090,slug:"2022-03-26",title:"MQTT Clients",authors:"mpolinowski",tags:["LINUX"]},c=void 0,s={id:"Automation_and_Robotics/MQTT/2022-03-26--mqtt-clients/index",title:"MQTT Clients",description:"Guangzhou, China",source:"@site/docs/Automation_and_Robotics/MQTT/2022-03-26--mqtt-clients/index.md",sourceDirName:"Automation_and_Robotics/MQTT/2022-03-26--mqtt-clients",slug:"/Automation_and_Robotics/MQTT/2022-03-26--mqtt-clients/2022-03-26",permalink:"/docs/Automation_and_Robotics/MQTT/2022-03-26--mqtt-clients/2022-03-26",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Automation_and_Robotics/MQTT/2022-03-26--mqtt-clients/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:8090,frontMatter:{sidebar_position:8090,slug:"2022-03-26",title:"MQTT Clients",authors:"mpolinowski",tags:["LINUX"]},sidebar:"tutorialSidebar",previous:{title:"Building Eclipse Mosquitto v2 from Source",permalink:"/docs/Automation_and_Robotics/MQTT/2022-03-27--build-mosquitto-from-source/2022-03-27"},next:{title:"Mosquitto v2 MQTT Broker on Debian Bullseye",permalink:"/docs/Automation_and_Robotics/MQTT/2022-02-01--mosquitto-2-broker/2022-02-01"}},l={},a=[{value:"Golang",id:"golang",level:2},{value:"Project Setup",id:"project-setup",level:3},{value:"Connect the Client",id:"connect-the-client",level:3},{value:"Subscribe to a Topic",id:"subscribe-to-a-topic",level:3},{value:"Publish to a Topic",id:"publish-to-a-topic",level:3},{value:"Encryption",id:"encryption",level:3},{value:"Full Code Example (no-TLS)",id:"full-code-example-no-tls",level:3},{value:"Full Code Example (self-signed TLS Certificate)",id:"full-code-example-self-signed-tls-certificate",level:3},{value:"Full Code Example (CA TLS Certificate)",id:"full-code-example-ca-tls-certificate",level:3}];function d(t){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.ah)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Guangzhou, China",src:e(160914).Z+"",width:"1500",height:"583"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#golang",children:"Golang"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#project-setup",children:"Project Setup"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#connect-the-client",children:"Connect the Client"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#subscribe-to-a-topic",children:"Subscribe to a Topic"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#publish-to-a-topic",children:"Publish to a Topic"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#encryption",children:"Encryption"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#full-code-example-no-tls",children:"Full Code Example (no-TLS)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#full-code-example-self-signed-tls-certificate",children:"Full Code Example (self-signed TLS Certificate)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#full-code-example-ca-tls-certificate",children:"Full Code Example (CA TLS Certificate)"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"golang",children:"Golang"}),"\n",(0,r.jsx)(n.h3,{id:"project-setup",children:"Project Setup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo $GOPATH\r\n/home/myuser/go\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir /home/myuser/go/src/go-mqtt && cd /home/myuser/go/src/go-mqtt\r\ngo mod init go-mqtt\r\ngo get github.com/eclipse/paho.mqtt.golang@latest\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"cat go.mod\r\n\r\nmodule go-mqtt\r\n\r\ngo 1.18\r\n\r\nrequire (\r\n        github.com/eclipse/paho.mqtt.golang v1.3.5 // indirect\r\n        github.com/gorilla/websocket v1.4.2 // indirect\r\n        golang.org/x/net v0.0.0-20200425230154-ff2c4b7c35a0 // indirect\r\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"connect-the-client",children:"Connect the Client"}),"\n",(0,r.jsxs)(n.p,{children:["The first step is to configure the client with the broker address, port, client id, username, etc. This is done in ",(0,r.jsx)(n.strong,{children:"Paho MQTT"})," via ",(0,r.jsx)(n.code,{children:"mqtt.NewClientOptions"}),". I am going to set three callbacks:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"OnConnect"}),": called when the client is connected to the server."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"OnConnectionLost"}),": called when the client is disconnected from the server."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"MessageHandler"}),": called when a message is received from the server."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The MQTT Broker I am using is an INSTAR IP camera on the local IP ",(0,r.jsx)(n.code,{children:"192.168.2.117"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"MQTT Clients",src:e(592602).Z+"",width:"1186",height:"708"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"nano /home/myuser/go/src/go-mqtt/main.go\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"fmt"\r\n\t"time"\r\n\r\n\tmqtt "github.com/eclipse/paho.mqtt.golang"\r\n)\r\n\r\nvar messagePubHandler mqtt.MessageHandler = func(client mqtt.Client, msg mqtt.Message) {\r\n\tfmt.Printf("%s received on topic %s\\n", msg.Payload(), msg.Topic())\r\n}\r\n\r\nvar connectHandler mqtt.OnConnectHandler = func(client mqtt.Client) {\r\n\tfmt.Println("Connected")\r\n}\r\n\r\nvar connectionLostHandler mqtt.ConnectionLostHandler = func(client mqtt.Client, err error) {\r\n\tfmt.Printf("Connection Lost: %s\\n", err.Error())\r\n}\r\n\r\nvar broker = "192.168.2.117"\r\nvar port = 1883\r\nvar now = time.Now().Format(time.RFC850)\r\n\r\nfunc main() {\r\n\t// client configuration\r\n\toptions := mqtt.NewClientOptions()\r\n\toptions.AddBroker(fmt.Sprintf("tcp://%s:%d", broker, port))\r\n\toptions.SetClientID("go_mqtt_client")\r\n  options.SetUsername("admin")\r\n  options.SetPassword("instar")\r\n\r\n\t// mqtt event callbacks\r\n\toptions.SetDefaultPublishHandler(messagePubHandler)\r\n\toptions.OnConnect = connectHandler\r\n\toptions.OnConnectionLost = connectionLostHandler\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["To connect call ",(0,r.jsx)(n.code,{children:"client.Connect()"}),", wait for the connection and handle potential errors:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"  // connect the client\r\n\tclient := mqtt.NewClient(options)\r\n\ttoken := client.Connect()\r\n\tif token.Wait() && token.Error() != nil {\r\n\t  panic(token.Error())\r\n\t}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"subscribe-to-a-topic",children:"Subscribe to a Topic"}),"\n",(0,r.jsxs)(n.p,{children:["To subscribe, call the method ",(0,r.jsx)(n.code,{children:"client.Subscribe"})," with three parameters:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic"}),": string with the subscription topic"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"qos"}),": ",(0,r.jsx)(n.code,{children:"0"})," (",(0,r.jsx)(n.em,{children:"fire-and-forget"}),"), ",(0,r.jsx)(n.code,{children:"1"})," (",(0,r.jsx)(n.em,{children:"re-send if missed"}),") or ",(0,r.jsx)(n.code,{children:"2"})," (",(0,r.jsx)(n.em,{children:"make sure it is only received once"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"callback"}),": a function to be called when a message in this topic is received. It can be nil so only the default handler will be called"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'  // subscribe topic\r\n\ttopic := "client/go/timestamp"\r\n\ttoken = client.Subscribe(topic, 1, nil)\r\n\ttoken.Wait()\r\n\tfmt.Println("Subscribed to topic %s\\n", topic)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"publish-to-a-topic",children:"Publish to a Topic"}),"\n",(0,r.jsxs)(n.p,{children:["To publish a message, call the method ",(0,r.jsx)(n.code,{children:"client.Publish"}),". It receives four parameters:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic"}),": same topic as before - I am going to send a timestamp for 10-times before disconnecting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"qos"}),": ",(0,r.jsx)(n.code,{children:"0"})," (",(0,r.jsx)(n.em,{children:"fire-and-forget"}),"), ",(0,r.jsx)(n.code,{children:"1"})," (",(0,r.jsx)(n.em,{children:"re-send if missed"}),") or ",(0,r.jsx)(n.code,{children:"2"})," (",(0,r.jsx)(n.em,{children:"make sure it is only received once"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"retained"}),": boolean indicating whether the message must be retained by the server"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"payload"}),": message to be publish under the topic"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'  num := 10\r\n\tfor i := 0; i < num; i++ {\r\n\t\ttext := fmt.Sprintf("Message: %s", now)\r\n\t\ttoken = client.Publish(topic, 0, false, text)\r\n\t\ttoken.Wait()\r\n\t\ttime.Sleep(time.Second)\r\n\t}\r\n\r\n\tclient.Disconnect(100)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"MQTT Clients",src:e(740346).Z+"",width:"1007",height:"469"})}),"\n",(0,r.jsx)(n.h3,{id:"encryption",children:"Encryption"}),"\n",(0,r.jsxs)(n.p,{children:["Add ",(0,r.jsx)(n.code,{children:"tls.Config"})," with your broker certificates:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func NewTlsConfig() *tls.Config {\r\n\tcertpool := x509.NewCertPool()\r\n\tcert, err := ioutil.ReadFile("cert/pcert.pem")\r\n\tif err != nil {\r\n\t\tlog.Fatalln(err.Error())\r\n\t}\r\n\r\n\tcertpool.AppendCertsFromPEM(cert)\r\n\treturn &tls.Config{\r\n\t\tInsecureSkipVerify: true,\r\n\t\tRootCAs:            certpool,\r\n\t}\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["To use your INSTAR IP cameras broker with encryption, click on ",(0,r.jsx)(n.strong,{children:"Download Camera's certificate"})," in the MQTT configuration (s. first screenshot above) and download it to ",(0,r.jsx)(n.code,{children:"cert/"}),". Or use the ",(0,r.jsx)(n.strong,{children:"client.crt"})," ",(0,r.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/MQTT/2022-02-01--mosquitto-2-broker/2022-02-01#creating-self-signed-certificates",children:"generated here"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"E.g.:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"-----BEGIN CERTIFICATE-----\r\nMIIEAzCCAuugAwIBAgIUBY1hlCGvdj4NhBXkZ/uLUZNILAwwDQYJKoZIhvcNAQEL\r\nBQAwgZAxCzAJBgNVBAYTAkdCMRcwFQYDVQQIDA5Vbml0ZWQgS2luZ2RvbTEOMAwG\r\nA1UEBwwFRGVyYnkxEjAQBgNVBAoMCU1vc3F1aXR0bzELMAkGA1UECwwCQ0ExFjAU\r\nBgNVBAMMDW1vc3F1aXR0by5vcmcxHzAdBgkqhkiG9w0BCQEWEHJvZ2VyQGF0Y2hv\r\nby5vcmcwHhcNMjAwNjA5MTEwNjM5WhcNMzAwNjA3MTEwNjM5WjCBkDELMAkGA1UE\r\nBhMCR0IxFzAVBgNVBAgMDlVuaXRlZCBLaW5nZG9tMQ4wDAYDVQQHDAVEZXJieTES\r\nMBAGA1UECgwJTW9zcXVpdHRvMQswCQYDVQQLDAJDQTEWMBQGA1UEAwwNbW9zcXVp\r\ndHRvLm9yZzEfMB0GCSqGSIb3DQEJARYQcm9nZXJAYXRjaG9vLm9yZzCCASIwDQYJ\r\nKoZIhvcNAQEBBQADggEPADCCAQoCggEBAME0HKmIzfTOwkKLT3THHe+ObdizamPg\r\nUZmD64Tf3zJdNeYGYn4CEXbyP6fy3tWc8S2boW6dzrH8SdFf9uo320GJA9B7U1FW\r\nTe3xda/Lm3JFfaHjkWw7jBwcauQZjpGINHapHRlpiCZsquAthOgxW9SgDgYlGzEA\r\ns06pkEFiMw+qDfLo/sxFKB6vQlFekMeCymjLCbNwPJyqyhFmPWwio/PDMruBTzPH\r\n3cioBnrJWKXc3OjXdLGFJOfj7pP0j/dr2LH72eSvv3PQQFl90CZPFhrCUcRHSSxo\r\nE6yjGOdnz7f6PveLIB574kQORwt8ePn0yidrTC1ictikED3nHYhMUOUCAwEAAaNT\r\nMFEwHQYDVR0OBBYEFPVV6xBUFPiGKDyo5V3+Hbh4N9YSMB8GA1UdIwQYMBaAFPVV\r\n6xBUFPiGKDyo5V3+Hbh4N9YSMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL\r\nBQADggEBAGa9kS21N70ThM6/Hj9D7mbVxKLBjVWe2TPsGfbl3rEDfZ+OKRZ2j6AC\r\n6r7jb4TZO3dzF2p6dgbrlU71Y/4K0TdzIjRj3cQ3KSm41JvUQ0hZ/c04iGDg/xWf\r\n+pp58nfPAYwuerruPNWmlStWAXf0UTqRtg4hQDWBuUFDJTuWuuBvEXudz74eh/wK\r\nsMwfu1HFvjy5Z0iMDU8PUDepjVolOCue9ashlS4EB5IECdSR2TItnAIiIwimx839\r\nLdUdRudafMu5T5Xma182OC0/u/xRlEm+tvKGGmfFcN0piqVl8OrSPBgIlb+1IKJE\r\nm/XriWr/Cq4h/JfB7NTsezVslgkBaoU=\r\n-----END CERTIFICATE-----\n"})}),"\n",(0,r.jsxs)(n.p,{children:["And add this configuration to the options by the method ",(0,r.jsx)(n.strong,{children:"SetTLSConfig"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'\t// client configuration\r\n\ttlsConfig := NewTlsConfig()\r\n\topts := mqtt.NewClientOptions()\r\n\topts.SetTLSConfig(tlsConfig)\r\n\t// use tcp:// instead of ssl://  for none-tls\r\n\t// opts.AddBroker(fmt.Sprintf("tcp://%s:%d", broker, port))\r\n\topts.AddBroker(fmt.Sprintf("ssl://%s:%d", broker, port))\r\n\topts.SetClientID("go_mqtt_client")\r\n\topts.SetUsername("admin")\r\n\topts.SetPassword("instar")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"full-code-example-no-tls",children:"Full Code Example (no-TLS)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"fmt"\r\n\t"log"\r\n\t"time"\r\n\r\n\tmqtt "github.com/eclipse/paho.mqtt.golang"\r\n)\r\n\r\nvar port = 1883\r\nvar broker = "192.168.2.117"\r\nvar topic = "client/go/timestamp"\r\nvar now = time.Now().Format(time.RFC850)\r\n\r\nvar messagePubHandler mqtt.MessageHandler = func(client mqtt.Client, msg mqtt.Message) {\r\n\tfmt.Printf("%s received on topic %s\\n", msg.Payload(), msg.Topic())\r\n}\r\n\r\nvar connectHandler mqtt.OnConnectHandler = func(client mqtt.Client) {\r\n\tfmt.Println("Connected")\r\n}\r\n\r\nvar connectionLostHandler mqtt.ConnectionLostHandler = func(client mqtt.Client, err error) {\r\n\tfmt.Printf("Connection Lost: %s\\n", err.Error())\r\n}\r\n\r\nfunc main() {\r\n\t// client configuration\r\n\topts := mqtt.NewClientOptions()\r\n\topts.AddBroker(fmt.Sprintf("tcp://%s:%d", broker, port))\r\n\topts.SetClientID("go_mqtt_client")\r\n\topts.SetUsername("admin")\r\n\topts.SetPassword("instar")\r\n\r\n\t// mqtt event callbacks\r\n\topts.SetDefaultPublishHandler(messagePubHandler)\r\n\topts.OnConnect = connectHandler\r\n\topts.OnConnectionLost = connectionLostHandler\r\n\r\n\t// connect the client\r\n\tclient := mqtt.NewClient(opts)\r\n\ttoken := client.Connect()\r\n\tif token.Wait() && token.Error() != nil {\r\n\t\tpanic(token.Error())\r\n\t}\r\n\r\n\tsubscribe(client)\r\n\tpublish(client)\r\n\r\n\tclient.Disconnect(100)\r\n}\r\n\r\n// subscribe to topic\r\nfunc subscribe(client mqtt.Client) {\r\n\ttoken := client.Subscribe(topic, 1, nil)\r\n\ttoken.Wait()\r\n\tfmt.Printf("Subscribed to topic %s\\n", topic)\r\n}\r\n\r\n// publish to topic\r\nfunc publish(client mqtt.Client) {\r\n\tnum := 10\r\n\tfor i := 0; i < num; i++ {\r\n\t\ttext := fmt.Sprintf("Message %s", now)\r\n\t\ttoken := client.Publish(topic, 0, false, text)\r\n\t\ttoken.Wait()\r\n\t\ttime.Sleep(time.Second)\r\n\t}\r\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"full-code-example-self-signed-tls-certificate",children:"Full Code Example (self-signed TLS Certificate)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"crypto/tls"\r\n\t"crypto/x509"\r\n\t"fmt"\r\n\t"io/ioutil"\r\n\t"log"\r\n\t"time"\r\n\r\n\tmqtt "github.com/eclipse/paho.mqtt.golang"\r\n)\r\n\r\nvar port = 8883\r\nvar broker = "192.168.2.117"\r\nvar topic = "client/go/timestamp"\r\nvar clientID = "go_mqtt_client"\r\nvar username = "admin"\r\nvar password = "instar"\r\nvar certificate = "cert/pcert.pem"\r\nvar now = time.Now().Format(time.RFC850)\r\n\r\nvar messagePubHandler mqtt.MessageHandler = func(client mqtt.Client, msg mqtt.Message) {\r\n\tfmt.Printf("%s received on topic %s\\n", msg.Payload(), msg.Topic())\r\n}\r\n\r\nvar connectHandler mqtt.OnConnectHandler = func(client mqtt.Client) {\r\n\tfmt.Println("Connected")\r\n}\r\n\r\nvar connectionLostHandler mqtt.ConnectionLostHandler = func(client mqtt.Client, err error) {\r\n\tfmt.Printf("Connection Lost: %s\\n", err.Error())\r\n}\r\n\r\nfunc main() {\r\n\t// client configuration\r\n\ttlsConfig := NewTlsConfig()\r\n\topts := mqtt.NewClientOptions()\r\n\topts.SetTLSConfig(tlsConfig)\r\n\topts.AddBroker(fmt.Sprintf("ssl://%s:%d", broker, port))\r\n\topts.SetClientID(clientID)\r\n\topts.SetUsername(username)\r\n\topts.SetPassword(password)\r\n\r\n\t// mqtt event callbacks\r\n\topts.SetDefaultPublishHandler(messagePubHandler)\r\n\topts.OnConnect = connectHandler\r\n\topts.OnConnectionLost = connectionLostHandler\r\n\r\n\t// connect the client\r\n\tclient := mqtt.NewClient(opts)\r\n\ttoken := client.Connect()\r\n\tif token.Wait() && token.Error() != nil {\r\n\t\tpanic(token.Error())\r\n\t}\r\n\r\n\tsubscribe(client)\r\n\tpublish(client)\r\n\r\n\tclient.Disconnect(100)\r\n}\r\n\r\n// subscribe to topic\r\nfunc subscribe(client mqtt.Client) {\r\n\ttoken := client.Subscribe(topic, 1, nil)\r\n\ttoken.Wait()\r\n\tfmt.Printf("Subscribed to topic %s\\n", topic)\r\n}\r\n\r\n// publish to topic\r\nfunc publish(client mqtt.Client) {\r\n\tnum := 10\r\n\tfor i := 0; i < num; i++ {\r\n\t\ttext := fmt.Sprintf("Message %s", now)\r\n\t\ttoken := client.Publish(topic, 0, false, text)\r\n\t\ttoken.Wait()\r\n\t\ttime.Sleep(time.Second)\r\n\t}\r\n}\r\n\r\n// self-signed Cert\r\nfunc NewTlsConfig() *tls.Config {\r\n\tcertpool := x509.NewCertPool()\r\n\tcert, err := ioutil.ReadFile(certificate)\r\n\tif err != nil {\r\n\t\tlog.Fatalln(err.Error())\r\n\t}\r\n\r\n\tcertpool.AppendCertsFromPEM(cert)\r\n\treturn &tls.Config{\r\n\t\tInsecureSkipVerify: true,\r\n\t\tRootCAs:            certpool,\r\n\t}\r\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"full-code-example-ca-tls-certificate",children:"Full Code Example (CA TLS Certificate)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"crypto/tls"\r\n\t"crypto/x509"\r\n\t"fmt"\r\n\t"io/ioutil"\r\n\t"time"\r\n\r\n\tMQTT "github.com/eclipse/paho.mqtt.golang"\r\n)\r\n\r\nvar port = 1888\r\nvar portSSL = 8883\r\nvar broker = "192.168.2.111"\r\nvar topic = "go/client/hi"\r\nvar clientID = "go_mqtt_client"\r\nvar username = "admin"\r\nvar password = "instar"\r\nvar caCert = "cert/instar/ca.crt"\r\nvar clientCert = "cert/instar/client.crt"\r\nvar clientKey = "cert/instar/client.key"\r\nvar now = time.Now().Format(time.RFC850)\r\n\r\nfunc NewTLSConfig() *tls.Config {\r\n\t// Import trusted certificates from CAfile.pem.\r\n\t// Alternatively, manually add CA certificates to\r\n\t// default openssl CA bundle.\r\n\tcertpool := x509.NewCertPool()\r\n\tpemCerts, err := ioutil.ReadFile(caCert)\r\n\tif err == nil {\r\n\t\tcertpool.AppendCertsFromPEM(pemCerts)\r\n\t}\r\n\r\n\t// Import client certificate/key pair\r\n\tcert, err := tls.LoadX509KeyPair(clientCert, clientKey)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\t// Just to print out the client certificate..\r\n\tcert.Leaf, err = x509.ParseCertificate(cert.Certificate[0])\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\t// fmt.Println(cert.Leaf)\r\n\r\n\t// Create tls.Config with desired tls properties\r\n\treturn &tls.Config{\r\n\t\t// RootCAs = certs used to verify server cert.\r\n\t\tRootCAs: certpool,\r\n\t\t// ClientAuth = whether to request cert from server.\r\n\t\t// Since the server is set up for SSL, this happens\r\n\t\t// anyways.\r\n\t\tClientAuth: tls.NoClientCert,\r\n\t\t// ClientCAs = certs used to validate client cert.\r\n\t\tClientCAs: nil,\r\n\t\t// InsecureSkipVerify = verify that cert contents\r\n\t\t// match server. IP matches what is in cert etc.\r\n\t\tInsecureSkipVerify: true,\r\n\t\t// Certificates = list of certs client sends to server.\r\n\t\tCertificates: []tls.Certificate{cert},\r\n\t}\r\n}\r\n\r\nvar f MQTT.MessageHandler = func(client MQTT.Client, msg MQTT.Message) {\r\n\tfmt.Printf("TOPIC: %s\\n", msg.Topic())\r\n\tfmt.Printf("MSG: %s\\n", msg.Payload())\r\n}\r\n\r\nfunc main() {\r\n\ttlsconfig := NewTLSConfig()\r\n\r\n\topts := MQTT.NewClientOptions()\r\n\t// opts.AddBroker(fmt.Sprintf("mqtt://%s:%d", broker, port))\r\n\topts.AddBroker(fmt.Sprintf("mqtts://%s:%d", broker, portSSL))\r\n\topts.SetClientID(clientID).SetTLSConfig(tlsconfig)\r\n\topts.SetDefaultPublishHandler(f)\r\n\topts.SetUsername(username)\r\n\topts.SetPassword(password)\r\n\r\n\t// Start the connection\r\n\tc := MQTT.NewClient(opts)\r\n\tif token := c.Connect(); token.Wait() && token.Error() != nil {\r\n\t\tpanic(token.Error())\r\n\t}\r\n\r\n\tc.Subscribe(topic, 0, nil)\r\n\r\n\ti := 0\r\n\tfor range time.Tick(time.Duration(1) * time.Second) {\r\n\t\tif i == 5 {\r\n\t\t\tbreak\r\n\t\t}\r\n\t\ttext := fmt.Sprintf("%d Timestamp: %s", i, now)\r\n\t\tc.Publish(topic, 0, false, text)\r\n\t\ti++\r\n\t}\r\n\r\n\tc.Disconnect(250)\r\n}\n'})})]})}function p(t={}){const{wrapper:n}={...(0,i.ah)(),...t.components};return n?(0,r.jsx)(n,{...t,children:(0,r.jsx)(d,{...t})}):d(t)}},603905:(t,n,e)=>{e.d(n,{ah:()=>a});var r=e(667294);function i(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function o(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function c(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?o(Object(e),!0).forEach((function(n){i(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function s(t,n){if(null==t)return{};var e,r,i=function(t,n){if(null==t)return{};var e,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||(i[e]=t[e]);return i}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(i[e]=t[e])}return i}var l=r.createContext({}),a=function(t){var n=r.useContext(l),e=n;return t&&(e="function"==typeof t?t(n):c(c({},n),t)),e},d={inlineCode:"code",wrapper:function(t){var n=t.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(t,n){var e=t.components,i=t.mdxType,o=t.originalType,l=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),m=a(e),h=i,u=m["".concat(l,".").concat(h)]||m[h]||d[h]||o;return e?r.createElement(u,c(c({ref:n},p),{},{components:e})):r.createElement(u,c({ref:n},p))}));p.displayName="MDXCreateElement"},592602:(t,n,e)=>{e.d(n,{Z:()=>r});const r=e.p+"assets/images/MQTT_Clients_01-3ff734462657854e250377278493dd2c.png"},740346:(t,n,e)=>{e.d(n,{Z:()=>r});const r=e.p+"assets/images/MQTT_Clients_02-091bd40fa0ea5c88b7791dbc5326fbd4.png"},160914:(t,n,e)=>{e.d(n,{Z:()=>r});const r=e.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-8ced3c54d38a6194434c5e7d8e5c77ba.jpg"}}]);