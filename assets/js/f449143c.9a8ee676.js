"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[86537],{985929:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var s=r(474848),t=r(28453);const o={sidebar_position:6080,slug:"2021-09-07",title:"Introduction to Websockets",authors:"mpolinowski",tags:["Javascript"]},c=void 0,i={id:"Development/Javascript/2021-09-07--intro-to-websockets/index",title:"Introduction to Websockets",description:"Tsim Sha Tsui, Hong Kong",source:"@site/docs/Development/Javascript/2021-09-07--intro-to-websockets/index.md",sourceDirName:"Development/Javascript/2021-09-07--intro-to-websockets",slug:"/Development/Javascript/2021-09-07--intro-to-websockets/2021-09-07",permalink:"/docs/Development/Javascript/2021-09-07--intro-to-websockets/2021-09-07",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Javascript/2021-09-07--intro-to-websockets/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"}],version:"current",sidebarPosition:6080,frontMatter:{sidebar_position:6080,slug:"2021-09-07",title:"Introduction to Websockets",authors:"mpolinowski",tags:["Javascript"]},sidebar:"tutorialSidebar",previous:{title:"HTML Video over Websockets",permalink:"/docs/Development/Javascript/2021-09-08--websockets-html-video/2021-09-08"},next:{title:"React Dashboard for MQTT",permalink:"/docs/Development/Javascript/2021-06-04--mqtt-dashboard-react/2021-06-04"}},a={},l=[{value:"TCP &amp; UDP in Node.js",id:"tcp--udp-in-nodejs",level:2},{value:"TCP Server",id:"tcp-server",level:3},{value:"UDP Server",id:"udp-server",level:3},{value:"HTTP in Node.js",id:"http-in-nodejs",level:2},{value:"Websockets in Node.js",id:"websockets-in-nodejs",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Tsim Sha Tsui, Hong Kong",src:r(657879).A+"",width:"1500",height:"400"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#tcp--udp-in-nodejs",children:"TCP & UDP in Node.js"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#tcp-server",children:"TCP Server"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#udp-server",children:"UDP Server"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#http-in-nodejs",children:"HTTP in Node.js"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#websockets-in-nodejs",children:"Websockets in Node.js"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"tcp--udp-in-nodejs",children:"TCP & UDP in Node.js"}),"\n",(0,s.jsx)(n.h3,{id:"tcp-server",children:"TCP Server"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const net = require("net")\r\n\r\nconst port = 8080\r\n\r\nconst server = net.createServer(socket => {\r\n    socket.write("Hello.")\r\n    socket.on("data", data => {\r\n        console.log(data.toString())\r\n    })\r\n})\r\n\r\nserver.listen(port)\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can run this file in Node.js:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"node tcp.js\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And connect to it using ",(0,s.jsx)(n.strong,{children:"Telnet"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"telnet 127.0.0.1 8080\r\nHello\n"})}),"\n",(0,s.jsx)(n.p,{children:"Everything you type after that will be logged in your server console."}),"\n",(0,s.jsx)(n.h3,{id:"udp-server",children:"UDP Server"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const dgram = require('dgram');\r\nconst socket = dgram.createSocket('udp4');\r\n\r\nconst port = 8081\r\n\r\nsocket.on('message', (msg, rinfo) => {\r\n    console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\r\n});\r\n\r\nsocket.bind(port);\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'echo "hi" | nc -w1 -u 192.168.2.112 8081\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"server got: hi\r\n from 192.168.2.110:44757\n"})}),"\n",(0,s.jsx)(n.h2,{id:"http-in-nodejs",children:"HTTP in Node.js"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"var http = require('http')\r\nvar url = require('url')\r\nvar fs = require('fs')\r\nvar path = require('path')\r\nvar baseDirectory = __dirname   // or whatever base directory you want\r\n\r\nvar port = 80\r\n\r\nhttp.createServer(function (request, response) {\r\n    try {\r\n        var requestUrl = url.parse(request.url)\r\n\r\n        // need to use path.normalize so people can't access directories underneath baseDirectory\r\n        var fsPath = baseDirectory+path.normalize(requestUrl.pathname)\r\n\r\n        var fileStream = fs.createReadStream(fsPath)\r\n        fileStream.pipe(response)\r\n        fileStream.on('open', function() {\r\n             response.writeHead(200)\r\n        })\r\n        fileStream.on('error',function(e) {\r\n             response.writeHead(404)     // assume the file doesn't exist\r\n             response.end()\r\n        })\r\n   } catch(e) {\r\n        response.writeHead(500)\r\n        response.end()     // end the response so browsers don't hang\r\n        console.log(e.stack)\r\n   }\r\n}).listen(port)\r\n\r\nconsole.log(\"listening on port \"+port)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html lang="en">\r\n    <head>\r\n        <meta charset="UTF-8">\r\n        <meta name="viewport" content= "width=device-width, initial-scale=1.0">\r\n        <meta http-equiv="X-UA-Compatible" content="IE=edge">\r\n        <title>A HTML Page</title>\r\n    </head>\r\n    <body>\r\n        <h1>Just a Test</h1>\r\n    </body>\r\n</html>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Run ",(0,s.jsx)(n.code,{children:"node http.js"})," and open the page inside your web browser or run the following from your Terminal:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl htttp://localhost/index.html\r\n\r\n<!DOCTYPE html>\r\n<html lang="en">\r\n    <head>\r\n        <meta charset="UTF-8">\r\n        <meta name="viewport" content= "width=device-width, initial-scale=1.0">\r\n        <meta http-equiv="X-UA-Compatible" content="IE=edge">\r\n        <title>A HTML Page</title>\r\n    </head>\r\n    <body>\r\n        <h1>Just a Test</h1>\r\n    </body>\r\n</html>\n'})}),"\n",(0,s.jsx)(n.h2,{id:"websockets-in-nodejs",children:"Websockets in Node.js"}),"\n",(0,s.jsx)(n.p,{children:"Building a Websocket server in Node.js - starting by creating a basic http /tcp server:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const http = require("http")\r\nconst port = 8888\r\n\r\nconst server = http.createServer((req, res) => {\r\n    console.log("Request received")\r\n})\r\n\r\nserver.listen(port, () => console.log("Websocket Server listening on Port "+port))\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Run the server with Node.js and try sending a GET request from your browser on ",(0,s.jsx)(n.code,{children:"http://localhost:8888/"})," - the line ",(0,s.jsx)(n.code,{children:"Request received"})," should appear every time you send an request:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"node index.js\r\nWebsocket Server listening on Port 8888\r\nRequest received\n"})}),"\n",(0,s.jsx)(n.p,{children:"The server now is able to receive HTTP GET request. I now want to upgrade incoming requests to a websocket connection:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const http = require("http")\r\nconst WebSocket = require("websocket").server\r\nlet connection = null;\r\nconst port = 8888\r\n\r\nconst server = http.createServer((req, res) => {\r\n    console.log("Request received")\r\n})\r\n\r\nconst websocket = new WebSocket({\r\n    "httpServer": server\r\n})\r\n\r\nwebsocket.on("request", request=> {\r\n    connection = request.accept(null, request.origin);\r\n    connection.on("open", () => console.log("Websocket connection established"))\r\n    connection.on("message", message => {\r\n        console.log(`message: ${message.utf8Data}`)\r\n    })\r\n    connection.on("close", () => console.log("Websocket connection closed"))\r\n})\r\n\r\nserver.listen(port, () => console.log("Websocket Server listening on Port "+port))\n'})}),"\n",(0,s.jsx)(n.p,{children:"Install the websocket module and re-run the server - sending an HTTP GET request should now initialize the websocket connection:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm init -y\r\nnpm install websocket\r\nnode index.js\n"})}),"\n",(0,s.jsx)(n.p,{children:"And I can use my browser console as the client application and send a message to my server:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'ws = new WebSocket("ws://localhost:8888")\r\nws.onmessage = message => console.log(`${message.data}`)\r\nws.send("Hi")\n'})}),"\n",(0,s.jsx)(n.p,{children:"To send a message from the Server to the Client I can add another to the server script:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const http = require("http");\r\nconst WebSocket = require("websocket").server;\r\nlet connection = null;\r\nconst port = 8888;\r\n\r\nconst server = http.createServer((req, res) => {\r\n    console.log("Request received")\r\n});\r\n\r\nconst websocket = new WebSocket({\r\n    "httpServer": server\r\n});\r\n\r\nwebsocket.on("request", request=> {\r\n    connection = request.accept(null, request.origin);\r\n    connection.on("open", () => console.log("Websocket connection established"))\r\n    connection.on("message", message => {\r\n        console.log(`message: ${message.utf8Data}`)\r\n    })\r\n    connection.on("close", () => console.log("Websocket connection closed"))\r\n\r\n    heartBeat();\r\n});\r\n\r\nserver.listen(port, () => console.log("Websocket Server listening on Port "+port));\r\n\r\nfunction heartBeat(){\r\n    connection.send(`I am still here`);\r\n    setTimeout(heartBeat, 30000);\r\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Websockets in Node.js",src:r(106469).A+"",width:"952",height:"466"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},106469:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/WebSockets_in_Nodejs_01-8b3ed6c7f64f487defb97cf6f2b7b7fe.png"},657879:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-10ecd0d57f9ab6e91272171108738e03.jpg"},28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>i});var s=r(296540);const t={},o=s.createContext(t);function c(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);