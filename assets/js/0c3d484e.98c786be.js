"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[12428],{199831:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>l});var a=o(474848),s=o(28453);const t={sidebar_position:3960,slug:"2022-11-18",title:"Deploy Grav CMS with Hashicorp Nomad",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"],description:"Using Nomad to deploy the Grav open source flat-file CMS"},r=void 0,i={id:"DevOps/Hashicorp/2022-11-18-hashicorp-nomad-grav/index",title:"Deploy Grav CMS with Hashicorp Nomad",description:"Using Nomad to deploy the Grav open source flat-file CMS",source:"@site/docs/DevOps/Hashicorp/2022-11-18-hashicorp-nomad-grav/index.md",sourceDirName:"DevOps/Hashicorp/2022-11-18-hashicorp-nomad-grav",slug:"/DevOps/Hashicorp/2022-11-18-hashicorp-nomad-grav/2022-11-18",permalink:"/docs/DevOps/Hashicorp/2022-11-18-hashicorp-nomad-grav/2022-11-18",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-11-18-hashicorp-nomad-grav/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Consul",permalink:"/docs/tags/consul"},{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:3960,frontMatter:{sidebar_position:3960,slug:"2022-11-18",title:"Deploy Grav CMS with Hashicorp Nomad",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"],description:"Using Nomad to deploy the Grav open source flat-file CMS"},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Nomad - Working with Consul Connect",permalink:"/docs/DevOps/Hashicorp/2022-11-24-hashicorp-consul-connect/2022-11-24"},next:{title:"Deploy Mautic with Hashicorp Nomad",permalink:"/docs/DevOps/Hashicorp/2022-11-16-hashicorp-nomad-mautic/2022-11-16"}},c={},l=[{value:"Docker-Compose",id:"docker-compose",level:2},{value:"Nomad Job",id:"nomad-job",level:2},{value:"Complete Job File",id:"complete-job-file",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Shen Zhen, China",src:o(115341).A+"",width:"2230",height:"839"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#docker-compose",children:"Docker-Compose"})}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#nomad-job",children:"Nomad Job"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#complete-job-file",children:"Complete Job File"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://getgrav.org/",children:"Grav"})," is a Fast, Simple, and Flexible file-based Web-platform."]}),"\n",(0,a.jsx)(n.h2,{id:"docker-compose",children:"Docker-Compose"}),"\n",(0,a.jsxs)(n.p,{children:["To test the container we can use ",(0,a.jsx)(n.code,{children:"docker compose up -d"})," - make sure the ",(0,a.jsx)(n.code,{children:"/opt/grav/config"})," dir exists and can be written to by your Docker user:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yml",children:'version: "3.9"\n\nservices:\n  grav:\n    image: linuxserver/grav:latest\n    container_name: grav\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=America/New_York\n    volumes:\n      - /opt/grav/config:/config\n    ports:\n      - 8080:80\n    restart: unless-stopped\n'})}),"\n",(0,a.jsx)(n.h2,{id:"nomad-job",children:"Nomad Job"}),"\n",(0,a.jsxs)(n.p,{children:["In Nomad we first need to create the volumes on our host in ",(0,a.jsx)(n.em,{children:"/etc/nomad.d/client.hcl"})," and then define it here:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'volume "grav_config" {\n    type      = "host"\n    read_only = false\n    source    = "grav_config"\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"It can then be mounted into the container:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'volume_mount {\n    volume      = "grav_config"\n    destination = "/config"\n    read_only   = false\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"complete-job-file",children:"Complete Job File"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'job "grav" {\n  datacenters = ["dc1"]\n    group "grav" {\n        \n        network {\n            mode = "host"\n            port "http" {\n                to = 80\n            }\n        }\n\n        update {\n            max_parallel = 1\n            min_healthy_time  = "10s"\n            healthy_deadline  = "5m"\n            progress_deadline = "10m"\n            auto_revert = true\n            auto_promote = true\n            canary = 1\n        }\n\n        restart {\n            attempts = 10\n            interval = "5m"\n            delay    = "25s"\n            mode     = "delay"\n        }\n\n        volume "grav_config" {\n            type      = "host"\n            read_only = false\n            source    = "grav_config"\n        }\n\n        service {\n            name = "grav-frontend"\n            port = "http"\n            tags = [\n                "frontend"\n            ]\n\n            check {\n                name     = "HTTP Health"\n                path     = "/"\n                type     = "http"\n                protocol = "http"\n                interval = "10s"\n                timeout  = "2s"\n            }\n        }\n\n        task "grav-frontend" {\n            driver = "docker"\n\n            volume_mount {\n                volume      = "grav_config"\n                destination = "/config"\n                read_only   = false\n            }\n\n            config {\n                image = "linuxserver/grav:latest"\n                ports = ["http"]\n                network_mode = "host"\n                force_pull = false\n            }\n\n            env {\n              PUID= "1000"\n              PGID= "1000"\n              TZ = "America/New_York"\n            }\n\n            resources {\n                cpu    = 100\n                memory = 300\n            }\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Deploy the Grav CMS with Hashicorp Nomad",src:o(728801).A+"",width:"1103",height:"725"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Deploy the Grav CMS with Hashicorp Nomad",src:o(779818).A+"",width:"1458",height:"890"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},728801:(e,n,o)=>{o.d(n,{A:()=>a});const a=o.p+"assets/images/Grav_CMS_with_Docker_01-4cd4007a3b2e869f54310be6eba679af.png"},779818:(e,n,o)=>{o.d(n,{A:()=>a});const a=o.p+"assets/images/Grav_CMS_with_Docker_02-dba3ba5b869bc0f30eb9fe168bf89575.png"},115341:(e,n,o)=>{o.d(n,{A:()=>a});const a=o.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"},28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>i});var a=o(296540);const s={},t=a.createContext(s);function r(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);