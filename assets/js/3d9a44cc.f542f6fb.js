"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[35570],{454326:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var t=r(474848),s=r(28453);const i={sidebar_position:9020,slug:"2019-02-01",title:"Kubernetes Traefik Ingress",authors:"mpolinowski",tags:["LINUX","Docker","Kubernetes"]},a=void 0,o={id:"DevOps/Kubernetes/2019-02-01--kubernetes-traefik-ingress/index",title:"Kubernetes Traefik Ingress",description:"Tanna, Vanuatu",source:"@site/docs/DevOps/Kubernetes/2019-02-01--kubernetes-traefik-ingress/index.mdx",sourceDirName:"DevOps/Kubernetes/2019-02-01--kubernetes-traefik-ingress",slug:"/DevOps/Kubernetes/2019-02-01--kubernetes-traefik-ingress/2019-02-01",permalink:"/docs/DevOps/Kubernetes/2019-02-01--kubernetes-traefik-ingress/2019-02-01",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Kubernetes/2019-02-01--kubernetes-traefik-ingress/index.mdx",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Docker",permalink:"/docs/tags/docker"},{label:"Kubernetes",permalink:"/docs/tags/kubernetes"}],version:"current",sidebarPosition:9020,frontMatter:{sidebar_position:9020,slug:"2019-02-01",title:"Kubernetes Traefik Ingress",authors:"mpolinowski",tags:["LINUX","Docker","Kubernetes"]},sidebar:"tutorialSidebar",previous:{title:"Red Hat OpenShift 3 Container Platform",permalink:"/docs/DevOps/Kubernetes/2019-03-02--installing-openshift-3-on-centos-7/2019-03-02"},next:{title:"Kubernetes the Chinese Way",permalink:"/docs/DevOps/Kubernetes/2019-01-27--kubernetes-the-chinese-way/2019-01-27"}},c={},l=[{value:"Getting Started with the Traefik Reverse Proxy",id:"getting-started-with-the-traefik-reverse-proxy",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Deploy Traefik using a Deployment or DaemonSet",id:"deploy-traefik-using-a-deployment-or-daemonset",level:2},{value:"Submitting an Ingress to the Cluster",id:"submitting-an-ingress-to-the-cluster",level:2},{value:"Path-based Routing",id:"path-based-routing",level:2},{value:"User Authentication",id:"user-authentication",level:2},{value:"Creating the Secret",id:"creating-the-secret",level:3},{value:"Add a TLS Certificate to the Ingress",id:"add-a-tls-certificate-to-the-ingress",level:2},{value:"Name-based Routing",id:"name-based-routing",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Tanna, Vanuatu",src:r(758289).A+"",width:"1979",height:"1021"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#getting-started-with-the-traefik-reverse-proxy",children:"Getting Started with the Traefik Reverse Proxy"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#prerequisites",children:"Prerequisites"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#deploy-traefik-using-a-deployment-or-daemonset",children:"Deploy Traefik using a Deployment or DaemonSet"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#submitting-an-ingress-to-the-cluster",children:"Submitting an Ingress to the Cluster"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#path-based-routing",children:"Path-based Routing"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#user-authentication",children:"User Authentication"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#creating-the-secret",children:"Creating the Secret"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#add-a-tls-certificate-to-the-ingress",children:"Add a TLS Certificate to the Ingress"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#name-based-routing",children:"Name-based Routing"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["This article is still WIP - better check out the ",(0,t.jsx)(n.a,{href:"/docs/DevOps/Kubernetes/2019-01-22--kubernetes-nginx-ingress/2019-01-22",children:"NGINX Ingress"})," instead..."]})}),"\n",(0,t.jsxs)(n.p,{children:["Before we explored the ",(0,t.jsx)(n.a,{href:"/docs/DevOps/Kubernetes/2019-01-22--kubernetes-nginx-ingress/2019-01-22",children:"NGINX Ingress"})," to route traffic onto Services inside our Kubernetes Cluster. But there are a couple of options that we can choose from here:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/kubernetes/ingress-nginx/blob/master/README.md",children:"Nginx"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/heptio/contour",children:"Contour"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.haproxy.com/blog/haproxy_ingress_controller_for_kubernetes/",children:"HAProxy"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://appscode.com/products/voyager/",children:"Voyager"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.traefik.io",children:"Traefik"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"getting-started-with-the-traefik-reverse-proxy",children:"Getting Started with the Traefik Reverse Proxy"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/containous/traefik",children:"Traefik"})," is a modern HTTP reverse proxy and load balancer that makes deploying microservices easy. Traefik integrates with your existing infrastructure components and configures itself automatically and dynamically. Pointing Traefik at your orchestrator - e.g. ",(0,t.jsx)(n.a,{href:"/docs/DevOps/Kubernetes/2019-01-15--creating-a-kubernetes-cluster/2019-01-15",children:"Kubernetes"})," should be the only configuration step you need."]}),"\n",(0,t.jsxs)(n.p,{children:["Traditional reverse-proxies require that you configure each route that will connect paths and subdomains to each microservice. Traefik listens to your service registry/orchestrator API (",(0,t.jsx)(n.a,{href:"https://docs.traefik.io/configuration/backends/etcd/",children:"etcd"})," / ",(0,t.jsx)(n.a,{href:"https://docs.traefik.io/configuration/backends/kubernetes/",children:"Kubernetes"}),") and instantly generates the routes so your microservices are connected to the outside world -- without further intervention from your part."]}),"\n",(0,t.jsxs)(n.p,{children:["The example configuration files that we are working with are available in the ",(0,t.jsx)(n.a,{href:"https://github.com/containous/traefik/tree/v1.7/examples/k8s",children:"Traefik Github repository"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.p,{children:["Kubernetes introduces ",(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/reference/access-authn-authz/rbac/",children:"Role Based Access Control (RBAC)"})," in 1.6+ to allow fine-grained control of Kubernetes resources and API."]}),"\n",(0,t.jsxs)(n.p,{children:["If your cluster is configured with RBAC, you will need to authorize Traefik to use the Kubernetes API. There are two ways to set up the proper permission: Via ",(0,t.jsx)(n.strong,{children:"namespace-specific RoleBindings"})," or a single, global ",(0,t.jsx)(n.strong,{children:"ClusterRoleBinding"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["RoleBindings per namespace enable to restrict granted permissions to the very namespaces only that Traefik is watching over, thereby following the least-privileges principle. This is the preferred approach if Traefik is not supposed to watch all namespaces, and the set of namespaces does not change dynamically. Otherwise, a single ",(0,t.jsx)(n.strong,{children:"ClusterRoleBinding"})," must be employed."]}),"\n",(0,t.jsxs)(n.p,{children:["But for the sake of simplicity, this guide will use a ",(0,t.jsx)(n.strong,{children:"ClusterRoleBinding"})," with the following ",(0,t.jsx)(n.a,{href:"https://github.com/containous/traefik/blob/v1.7/examples/k8s/traefik-rbac.yaml",children:"YAML file"}),":"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"traefik-rbac.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'---\r\nkind: ClusterRole\r\napiVersion: rbac.authorization.k8s.io/v1beta1\r\nmetadata:\r\n  name: traefik-ingress-controller\r\nrules:\r\n  - apiGroups:\r\n      - ""\r\n    resources:\r\n      - services\r\n      - endpoints\r\n      - secrets\r\n    verbs:\r\n      - get\r\n      - list\r\n      - watch\r\n  - apiGroups:\r\n      - extensions\r\n    resources:\r\n      - ingresses\r\n    verbs:\r\n      - get\r\n      - list\r\n      - watch\r\n  - apiGroups:\r\n    - extensions\r\n    resources:\r\n    - ingresses/status\r\n    verbs:\r\n    - update\r\n---\r\nkind: ClusterRoleBinding\r\napiVersion: rbac.authorization.k8s.io/v1beta1\r\nmetadata:\r\n  name: traefik-ingress-controller\r\nroleRef:\r\n  apiGroup: rbac.authorization.k8s.io\r\n  kind: ClusterRole\r\n  name: traefik-ingress-controller\r\nsubjects:\r\n- kind: ServiceAccount\r\n  name: traefik-ingress-controller\r\n  namespace: monitoring\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Traefik Ingress for your Kubernetes Cluster",src:r(694693).A+"",width:"805",height:"647"})}),"\n",(0,t.jsx)(n.p,{children:"Apply the configuration with the following Kubernete command (change the URL to the local path, if you decided to store the file above locally):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f https://raw.githubusercontent.com/containous/traefik/v1.7/examples/k8s/traefik-rbac.yaml\n"})}),"\n",(0,t.jsx)(n.h2,{id:"deploy-traefik-using-a-deployment-or-daemonset",children:"Deploy Traefik using a Deployment or DaemonSet"}),"\n",(0,t.jsxs)(n.p,{children:["It is possible to use Traefik with a ",(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",children:"Deployment"})," or a ",(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",children:"DaemonSet"})," object, whereas both options have their own pros and cons:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The scalability can be much better when using a Deployment, because you will have a Single-Pod-per-Node model when using a DaemonSet, whereas you may need less replicas based on your environment when using a Deployment."}),"\n",(0,t.jsx)(n.li,{children:"DaemonSets automatically scale to new nodes, when the nodes join the cluster, whereas Deployment pods are only scheduled on new nodes if required."}),"\n",(0,t.jsx)(n.li,{children:"DaemonSets ensure that only one replica of pods run on any single node. Deployments require affinity settings if you want to ensure that two pods don't end up on the same node."}),"\n",(0,t.jsxs)(n.li,{children:["DaemonSets can be run with the ",(0,t.jsx)(n.em,{children:"NET_BIND_SERVICE"})," capability, which will allow it to bind to port 80/443/etc on each host. This will allow bypassing the kube-proxy, and reduce traffic hops. Note that this is against the Kubernetes ",(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/configuration/overview/#services",children:"Best Practices Guidelines"}),", and raises the potential for scheduling/scaling issues. Despite potential issues, this remains the choice for most ingress controllers."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["I am going to use the Deployment here - but the configuration file for the DemonSet does not look s different and can be ",(0,t.jsx)(n.a,{href:"https://github.com/containous/traefik/tree/v1.7/examples/k8s/traefik-ds.yaml",children:"downloaded here"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The Deployment objects looks like this (see below) and can be ",(0,t.jsx)(n.a,{href:"https://github.com/containous/traefik/tree/v1.7/examples/k8s/traefik-deployment.yaml",children:"downloaded here"}),":"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"traefik-deployment.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\r\napiVersion: v1\r\nkind: ServiceAccount\r\nmetadata:\r\n  name: traefik-ingress-controller\r\n  namespace: monitoring\r\n  \r\n---\r\nkind: Deployment\r\napiVersion: extensions/v1beta1\r\nmetadata:\r\n  name: traefik-ingress-controller\r\n  namespace: monitoring\r\n  labels:\r\n    k8s-app: traefik-ingress-lb\r\nspec:\r\n  replicas: 1\r\n  selector:\r\n    matchLabels:\r\n      k8s-app: traefik-ingress-lb\r\n  template:\r\n    metadata:\r\n      labels:\r\n        k8s-app: traefik-ingress-lb\r\n        name: traefik-ingress-lb\r\n    spec:\r\n      serviceAccountName: traefik-ingress-controller\r\n      terminationGracePeriodSeconds: 60\r\n      containers:\r\n      - image: traefik\r\n        name: traefik-ingress-lb\r\n        ports:\r\n        - name: http\r\n          containerPort: 80\r\n          hostPort: 8080\r\n        - name: admin\r\n          containerPort: 8080\r\n        args:\r\n        - --api\r\n        - --kubernetes\r\n        - --logLevel=INFO\r\n        - --defaultentrypoints=http\r\n        - --entrypoints=Name:http Address::80\r\n        \r\n---\r\nkind: Service\r\napiVersion: v1\r\nmetadata:\r\n  name: traefik-ingress-service\r\n  namespace: monitoring\r\nspec:\r\n  selector:\r\n    k8s-app: traefik-ingress-lb\r\n  ports:\r\n    - protocol: TCP\r\n      port: 80\r\n      name: http\r\n    - protocol: TCP\r\n      port: 8080\r\n      name: admin\r\n  externalIPs:\r\n    - 172.56.4.112\n"})}),"\n",(0,t.jsx)(n.p,{children:"To deploy Traefik to your cluster start by applying the YAML files with kubectl:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f https://raw.githubusercontent.com/containous/traefik/v1.7/examples/k8s/traefik-deployment.yaml\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can verify that the Ingress pod was started with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl --namespace=kube-system get pods\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Traefik Ingress for your Kubernetes Cluster",src:r(466862).A+"",width:"804",height:"226"})}),"\n",(0,t.jsx)(n.h2,{id:"submitting-an-ingress-to-the-cluster",children:"Submitting an Ingress to the Cluster"}),"\n",(0,t.jsxs)(n.p,{children:["Lets start by creating a Service and an Ingress that will expose the ",(0,t.jsx)(n.a,{href:"https://github.com/containous/traefik#web-ui",children:"Traefik Web UI"})," (the configuration file can be ",(0,t.jsx)(n.a,{href:"https://github.com/containous/traefik/tree/v1.7/examples/k8s/ui.yaml",children:"downloaded here"}),"):"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"ui.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: traefik-web-ui\r\n  namespace: monitoring\r\nspec:\r\n  selector:\r\n    k8s-app: traefik-ingress-lb\r\n  ports:\r\n  - name: http\r\n    port: 80\r\n    targetPort: 8080\r\n---\r\napiVersion: extensions/v1beta1\r\nkind: Ingress\r\nmetadata:\r\n  name: traefik-web-ui\r\n  namespace: monitoring\r\nspec:\r\n  rules:\r\n    http:\r\n      paths:\r\n      - path: /\r\n        backend:\r\n          serviceName: traefik-web-ui\r\n          servicePort: http\n"})}),"\n",(0,t.jsx)(n.p,{children:"Apply the service to your cluster with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f https://raw.githubusercontent.com/containous/traefik/v1.7/examples/k8s/ui.yaml\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["This setup assigns a host domain ",(0,t.jsx)(n.code,{children:"traefik-ui.minikube"})," to your cluster ingress you can add an entry in our ",(0,t.jsx)(n.code,{children:"/etc/hosts"})," file to route ",(0,t.jsx)(n.code,{children:"traefik-ui.minikube"})," to our cluster. In production you would want to add your real DNS entries here!"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/DevOps/Kubernetes/2019-01-22--kubernetes-nginx-ingress/2019-01-22#creating-the-load-balancing-service",children:"As seen before"}),", we can add the Kubernetes Master WAN IP address, e.g. ",(0,t.jsx)(n.code,{children:"externalIPs: 172.56.4.112"}),", to the service configuration to be able to access the service over the internet"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Adding these two modifications, we end up with a YAML file looking like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\r\n---\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: traefik-web-ui\r\n  namespace: monitoring\r\nspec:\r\n  selector:\r\n    k8s-app: traefik-ingress-lb\r\n  ports:\r\n  - name: http\r\n    port: 80\r\n    targetPort: 8080\r\n  externalIPs:\r\n    - 172.56.4.112\r\n---\r\napiVersion: extensions/v1beta1\r\nkind: Ingress\r\nmetadata:\r\n  name: traefik-web-ui\r\n  namespace: monitoring\r\nspec:\r\n  rules:\r\n  - host: traefik-ui.minikube\r\n    http:\r\n      paths:\r\n      - path: /\r\n        backend:\r\n          serviceName: traefik-web-ui\r\n          servicePort: http\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When you access the URL with your browser, you should now be greeted by the ",(0,t.jsx)(n.a,{href:"https://github.com/containous/traefik#web-ui",children:"Traefik Dashboard"}),":"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Traefik Ingress for your Kubernetes Cluster",src:r(166359).A+"",width:"796",height:"761"})}),"\n",(0,t.jsx)(n.h2,{id:"path-based-routing",children:"Path-based Routing"}),"\n",(0,t.jsxs)(n.p,{children:["First lets start by launching the pods for three websites. ",(0,t.jsx)(n.strong,{children:"Note"}),": I am using 3 Node.js apps that means they are Node.js/Express.js servers that host web content on a specific port. In my case those ports are ",(0,t.jsx)(n.code,{children:"7777"}),", ",(0,t.jsx)(n.code,{children:"7778"})," and ",(0,t.jsx)(n.code,{children:"7779"}),". They were uploaded to Dockerhub and can be accessed by referencing ",(0,t.jsx)(n.code,{children:"- image: your-docker-hub-account/your-docker-image-name-on-docker-hub"}),":"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"app1.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\r\nkind: Deployment\r\napiVersion: extensions/v1beta1\r\nmetadata:\r\n  name: wiki-de\r\n  labels:\r\n    app: wiki-frontend\r\nspec:\r\n  replicas: 1\r\n  selector:\r\n    matchLabels:\r\n      app: wiki-frontend\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: wiki-frontend\r\n        version: v2.1.0\r\n    spec:\r\n      containers:\r\n      - image: mpolinowski/my-docker-image:latest\r\n        imagePullPolicy: Always\r\n        name: wiki-de\r\n        ports:\r\n        - containerPort: 7779\r\n      restartPolicy: Always\r\n\r\n---\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: wiki-de\r\nspec:\r\n  ports:\r\n  - name: http\r\n    targetPort: 7779\r\n    port: 7779\r\n  selector:\r\n    app: wiki-frontend\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"app2.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\r\nkind: Deployment\r\napiVersion: extensions/v1beta1\r\nmetadata:\r\n  name: wiki-en\r\n  labels:\r\n    app: wiki-frontend\r\nspec:\r\n  replicas: 1\r\n  selector:\r\n    matchLabels:\r\n      app: wiki-frontend\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: wiki-frontend\r\n        version: v2.1.0\r\n    spec:\r\n      containers:\r\n      - image: mpolinowski/my-docker-image-en:latest\r\n        imagePullPolicy: Always\r\n        name: wiki-en\r\n        ports:\r\n        - containerPort: 7777\r\n      restartPolicy: Always\r\n\r\n---\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: wiki-en\r\nspec:\r\n  ports:\r\n  - name: http\r\n    targetPort: 7777\r\n    port: 7777\r\n  selector:\r\n    app: wiki-frontend\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"app3.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\r\nkind: Deployment\r\napiVersion: extensions/v1beta1\r\nmetadata:\r\n  name: wiki-fr\r\n  labels:\r\n    app: wiki-frontend\r\nspec:\r\n  replicas: 1\r\n  selector:\r\n    matchLabels:\r\n      app: wiki-frontend\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: wiki-frontend\r\n        version: v2.1.0\r\n    spec:\r\n      containers:\r\n      - image: mpolinowski/my-docker-image-fr:latest\r\n        imagePullPolicy: Always\r\n        name: wiki-frontend\r\n        ports:\r\n        - containerPort: 7778\r\n      restartPolicy: Always\r\n\r\n---\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: wiki-fr\r\nspec:\r\n  ports:\r\n  - name: http\r\n    targetPort: 7778\r\n    port: 7778\r\n  selector:\r\n    app: wiki-frontend\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now we can submit an ingress for the 3 web apps:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: extensions/v1beta1\r\nkind: Ingress\r\nmetadata:\r\n  name: wiki-frontend\r\n  annotations:\r\n    kubernetes.io/ingress.class: traefik\r\n    traefik.frontend.rule.type: PathPrefixStrip\r\nspec:\r\n  rules:\r\n  - host: my.domain.com\r\n    http:\r\n      paths:\r\n      - path: /de\r\n        backend:\r\n          serviceName: wiki-de\r\n          servicePort: http\r\n      - path: /en\r\n        backend:\r\n          serviceName: wiki-en\r\n          servicePort: http\r\n      - path: /fr\r\n        backend:\r\n          serviceName: wiki-fr\r\n          servicePort: http\n"})}),"\n",(0,t.jsx)(n.h2,{id:"user-authentication",children:"User Authentication"}),"\n",(0,t.jsxs)(n.p,{children:["It's possible to protect access to Traefik through basic authentication. See the ",(0,t.jsx)(n.a,{href:"https://docs.traefik.io/configuration/backends/kubernetes",children:"Kubernetes Ingress"})," configuration page for syntactical details and restrictions."]}),"\n",(0,t.jsx)(n.h3,{id:"creating-the-secret",children:"Creating the Secret"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"htpasswd"})," to create a file containing the username and the MD5-encoded password (on Centos you might have to install it first ",(0,t.jsx)(n.code,{children:"yum install -y httpd-tools"}),"). You will be prompted for a password which you will have to enter twice:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"htpasswd -c ./auth myusername\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["Now use ",(0,t.jsx)(n.code,{children:"kubectl"})," to create a secret in the ",(0,t.jsx)(n.code,{children:"monitoring"})," namespace using the file created by ",(0,t.jsx)(n.code,{children:"htpasswd"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl create namespace monitoring\r\nkubectl create secret generic mysecret --from-file auth --namespace=monitoring\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You have to swap the ",(0,t.jsx)(n.strong,{children:"kube-system"})," with the ",(0,t.jsx)(n.strong,{children:"monitoring"})," namespace in the config files (see below)"]}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Attach the following annotations to the Ingress object:"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:'traefik.ingress.kubernetes.io/auth-type: "basic"'})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:'traefik.ingress.kubernetes.io/auth-secret: "mysecret"'})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["They specify basic authentication and reference the Secret ",(0,t.jsx)(n.code,{children:"mysecret"})," containing the credentials."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"HOW DO YOU CONFIGURE THE THE BASIC AUTHENTICATION? WIP"})}),"\n",(0,t.jsx)(n.h2,{id:"add-a-tls-certificate-to-the-ingress",children:"Add a TLS Certificate to the Ingress"}),"\n",(0,t.jsx)(n.p,{children:"To setup an HTTPS-protected ingress, you can leverage the TLS feature of the ingress resource:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'apiVersion: extensions/v1beta1\r\nkind: Ingress\r\nmetadata:\r\n  name: traefik-web-ui\r\n  namespace: monitoring\r\n  annotations:\r\n    traefik.ingress.kubernetes.io/auth-type: "basic"\r\n    traefik.ingress.kubernetes.io/auth-secret: "mysecret"\r\nspec:\r\n  rules:\r\n  - host: my.domain.com\r\n    http:\r\n      paths:\r\n      - path: /\r\n        backend:\r\n          serviceName: traefik-web-ui\r\n          servicePort: https\r\n  tls:\r\n   - secretName: traefik-ui-tls-cert\n'})}),"\n",(0,t.jsx)(n.p,{children:"We now need to provide the TLS certificate via a Kubernetes secret in the same namespace as the ingress. The following two commands will generate a new certificate and create a secret containing the key and cert files:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=traefik-ui.minikube"\r\nkubectl -n kube-system create secret tls traefik-ui-tls-cert --key=tls.key --cert=tls.crt\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Since I am already using fully qualified Domain - and I have used ",(0,t.jsx)(n.a,{href:"https://certbot.eff.org/lets-encrypt/centosrhel7-other",children:"Certbot"})," to generate an TLS certificate - I can use those files for my domain inside the ingress."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note"}),": that the certificate that you generated with Certbot can be found in ",(0,t.jsx)(n.code,{children:"/etc/letsencrypt/live/my.domain.com"})," - where ",(0,t.jsx)(n.em,{children:"my.domain.com"})," is the domain you created the certificate for. Furthermore, Certbot generates a couple of ",(0,t.jsx)(n.em,{children:"*.pem"})," files instead of a ",(0,t.jsx)(n.em,{children:"*.key"})," and ",(0,t.jsx)(n.em,{children:"*.crt"}),". In the kubectl command above use ",(0,t.jsx)(n.code,{children:"privkey.pem"})," as the ",(0,t.jsx)(n.strong,{children:"key"})," file and ",(0,t.jsx)(n.code,{children:"fullchain.pem"})," as your ",(0,t.jsx)(n.strong,{children:"crt"})," file (see ",(0,t.jsx)(n.a,{href:"https://stackoverflow.com/questions/50389883/generate-crt-key-ssl-files-from-lets-encrypt-from-scratch",children:"Stackoverflow"})," for details):"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Traefik Ingress for your Kubernetes Cluster",src:r(44216).A+"",width:"800",height:"158"})}),"\n",(0,t.jsx)(n.p,{children:"The resulting command will look something like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl -n kube-system create secret tls traefik-ui-tls-cert --key=/etc/letsencrypt/live/my.domain.com/privkey.pem --cert=/etc/letsencrypt/live/my.domain.com/fullchain.pem\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You receive a reply ",(0,t.jsx)(n.code,{children:"secret/traefik-ui-tls-cert created"}),"!"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"HOW DO YOU CONFIGURE THE SERVICE FOR HTTPS? WIP"})}),"\n",(0,t.jsx)(n.p,{children:"You can add a TLS entrypoint by adding the following args to the container spec:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"--defaultentrypoints=http,https\r\n--entrypoints=Name:https Address::443 TLS\r\n--entrypoints=Name:http Address::80\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"traefik-deployment.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'---\r\napiVersion: v1\r\nkind: ServiceAccount\r\nmetadata:\r\n  name: traefik-ingress-controller\r\n  namespace: monitoring\r\n  annotations:\r\n    traefik.ingress.kubernetes.io/auth-type: "basic"\r\n    traefik.ingress.kubernetes.io/auth-secret: "mysecret"\r\n  \r\n---\r\nkind: Deployment\r\napiVersion: extensions/v1beta1\r\nmetadata:\r\n  name: traefik-ingress-controller\r\n  namespace: monitoring\r\n  annotations:\r\n    traefik.ingress.kubernetes.io/auth-type: "basic"\r\n    traefik.ingress.kubernetes.io/auth-secret: "mysecret"\r\n  labels:\r\n    k8s-app: traefik-ingress-lb\r\nspec:\r\n  replicas: 1\r\n  selector:\r\n    matchLabels:\r\n      k8s-app: traefik-ingress-lb\r\n  template:\r\n    metadata:\r\n      labels:\r\n        k8s-app: traefik-ingress-lb\r\n        name: traefik-ingress-lb\r\n    spec:\r\n      serviceAccountName: traefik-ingress-controller\r\n      terminationGracePeriodSeconds: 60\r\n      containers:\r\n      - image: traefik\r\n        name: traefik-ingress-lb\r\n        ports:\r\n        - name: http\r\n          containerPort: 80\r\n          hostPort: 8080\r\n        - name: https\r\n          containerPort: 443\r\n          hostPort: 443\r\n        - name: admin\r\n          containerPort: 8080\r\n        args:\r\n        - --api\r\n        - --kubernetes\r\n        - --logLevel=INFO\r\n        - --defaultentrypoints=https,http\r\n        - --entrypoints=Name:https Address::443 TLS\r\n        - --entrypoints=Name:http Address::80\r\n        \r\n---\r\nkind: Service\r\napiVersion: v1\r\nmetadata:\r\n  name: traefik-ingress-service\r\n  namespace: monitoring\r\n  annotations:\r\n    traefik.ingress.kubernetes.io/auth-type: "basic"\r\n    traefik.ingress.kubernetes.io/auth-secret: "mysecret"\r\nspec:\r\n  selector:\r\n    k8s-app: traefik-ingress-lb\r\n  ports:\r\n    - protocol: TCP\r\n      port: 80\r\n      name: http\r\n    - protocol: TCP\r\n      port: 443\r\n      name: https\r\n    - protocol: TCP\r\n      port: 8080\r\n      name: admin\r\n  type: NodePort\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"ui.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'---\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: traefik-web-ui\r\n  namespace: monitoring\r\n  annotations:\r\n    traefik.ingress.kubernetes.io/auth-type: "basic"\r\n    traefik.ingress.kubernetes.io/auth-secret: "mysecret"\r\nspec:\r\n  selector:\r\n    k8s-app: traefik-ingress-lb\r\n  ports:\r\n  - name: http\r\n    port: 80\r\n    targetPort: 8080\r\n  - name: https\r\n    protocol: TCP\r\n    port: 443\r\n    targetPort: 443\r\n  externalIPs:\r\n    - 172.56.4.112\r\n---\r\napiVersion: extensions/v1beta1\r\nkind: Ingress\r\nmetadata:\r\n  name: traefik-web-ui\r\n  namespace: monitoring\r\n  annotations:\r\n    traefik.ingress.kubernetes.io/auth-type: "basic"\r\n    traefik.ingress.kubernetes.io/auth-secret: "mysecret"\r\nspec:\r\n  rules:\r\n  - host: my.domain.com\r\n    http:\r\n      paths:\r\n      - path: /\r\n        backend:\r\n          serviceName: traefik-web-ui\r\n          servicePort: https\r\n  tls:\r\n   - secretName: traefik-ui-tls-cert\n'})}),"\n",(0,t.jsx)(n.h2,{id:"name-based-routing",children:"Name-based Routing"})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},694693:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/kubernetes-traefik-ingress_01-94516171af04abbc8c3ee76a128b1125.png"},466862:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/kubernetes-traefik-ingress_02-ace63b8982f3e4f6468213b4818afd18.png"},166359:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/kubernetes-traefik-ingress_03-0df32c10297d821ae9707da1fc32299e.png"},44216:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/kubernetes-traefik-ingress_04-3df3881c655aff5f96e43008621a2363.png"},758289:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/photo-34445481222_d3b67160da_o-653547e2ea32ba21f5f8ec162c1579ce.jpg"},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(296540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);