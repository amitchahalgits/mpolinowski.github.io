"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[69638],{523274:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var t=n(785893),s=n(603905);const a={sidebar_position:9050,slug:"2017-07-04",title:"Random Password Generator",authors:"mpolinowski",tags:["Javascript","React"]},o=void 0,i={id:"Development/Javascript/2017-07-04--random-password-generator/index",title:"Random Password Generator",description:"Tana Island, Vanuatu",source:"@site/docs/Development/Javascript/2017-07-04--random-password-generator/index.mdx",sourceDirName:"Development/Javascript/2017-07-04--random-password-generator",slug:"/Development/Javascript/2017-07-04--random-password-generator/2017-07-04",permalink:"/docs/Development/Javascript/2017-07-04--random-password-generator/2017-07-04",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Javascript/2017-07-04--random-password-generator/index.mdx",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"},{label:"React",permalink:"/docs/tags/react"}],version:"current",sidebarPosition:9050,frontMatter:{sidebar_position:9050,slug:"2017-07-04",title:"Random Password Generator",authors:"mpolinowski",tags:["Javascript","React"]},sidebar:"tutorialSidebar",previous:{title:"Food Caloric Table App",permalink:"/docs/Development/Javascript/2017-07-22--caloric-burn/2017-07-22"},next:{title:"Node Express Static",permalink:"/docs/Development/Javascript/2016-08-11--node-express-static-wiki/2016-08-11"}},c={},p=[{value:"Create the Express App",id:"create-the-express-app",level:2},{value:"Create the React App",id:"create-the-react-app",level:2},{value:"Concurrently",id:"concurrently",level:2},{value:"Create Static Version of our React App",id:"create-static-version-of-our-react-app",level:2}];function l(e){const r={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.ah)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{alt:"Tana Island, Vanuatu",src:n(238381).Z+"",width:"1500",height:"823"})}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["This is a create-react-app demo based on the article ",(0,t.jsx)(r.a,{href:"https://daveceddia.com/create-react-app-express-production/",children:"Create React App with Express in Production"})," by Dave Ceddia. We want to use the React App generator to create static pages from our React Pass-Gen App, routed through a Node/Express Server."]}),"\n",(0,t.jsxs)(r.p,{children:["The original article went on to deploy the app to Heroku - please refer to the original article about that. What we do differently here, is adding a way to comfortably edit (hot reloading) our app in an development environment using the package ",(0,t.jsx)(r.a,{href:"https://github.com/kimmobrunfeldt/concurrently",children:"Concurrently"}),". This allows us to run both, the Express and React App, inside one terminal and automatically switch to serving a static representation of our React App inside Express, once we switch to a production environment."]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://github.com/mpolinowski/random-pass-gen",children:"Github"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#create-the-express-app",children:"Create the Express App"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#create-the-react-app",children:"Create the React App"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#concurrently",children:"Concurrently"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#create-static-version-of-our-react-app",children:"Create Static Version of our React App"})}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"create-the-express-app",children:"Create the Express App"}),"\n",(0,t.jsx)(r.p,{children:"Create a directory and cd in to it with your Terminal or Git Bash. You can initialize your app with npm:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"npm init\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Now we need to add two packages through npm: our ",(0,t.jsx)(r.a,{href:"https://expressjs.com",children:"express router"})," and a ",(0,t.jsx)(r.a,{href:"https://www.npmjs.com/package/password-generator",children:"password generator"}),", and we will use Express to provides a single API endpoint, ",(0,t.jsx)(r.strong,{children:"/api/passwords"}),". We use the ",(0,t.jsx)(r.em,{children:"--save"})," to add those dependencies to our package.json file."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"npm install --save express password-generator\n"})}),"\n",(0,t.jsx)(r.p,{children:"Create a file called index.js, which will be the Express app, and type this in:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"const express = require('express');\r\nconst path = require('path');\r\nconst generatePassword = require('password-generator');\r\n\r\nconst app = express();\r\n\r\n// Serve static files from the React app\r\n// Use this to just simulate a production environment - it always! serves the static files /client/build\r\n// ------------------------------------------------\r\n// app.use(express.static(path.join(__dirname, 'client/build')));\r\n// ------------------------------------------------\r\n// this statement will use the live react app in development,\r\n// but will expect you to have a static version of the app in /client/build once you switch to production\r\n// remove if above case is uncommented!\r\nif (process.env.NODE_ENV === 'production') {\r\n  app.use(express.static('client/build'));\r\n}\r\n\r\n// Put all API endpoints under '/api'\r\napp.get('/api/passwords', (req, res) => {\r\n  const count = 5;\r\n\r\n  // Generate some passwords\r\n  const passwords = Array.from(Array(count).keys()).map(i =>\r\n    generatePassword(12, false)\r\n  )\r\n\r\n  // Return them as json\r\n  res.json(passwords);\r\n\r\n  console.log(`Sent ${count} passwords`);\r\n});\r\n\r\n// The 'catchall' handler: for any request that doesn't\r\n// match one above, send back React's index.html file.\r\napp.get('*', (req, res) => {\r\n  res.sendFile(path.join(__dirname+'/client/build/index.html'));\r\n});\r\n\r\nconst port = process.env.PORT || 5000;\r\napp.listen(port);\r\n\r\nconsole.log(`Password generator listening on ${port}`);\n"})}),"\n",(0,t.jsxs)(r.p,{children:["We\u2019re also going to need a \u201cstart\u201d script in package.json, to be able to start our app with the ",(0,t.jsx)(r.strong,{children:"npm start"})," command. Open package.json and add a scripts section at the bottom. The full file should look something like this:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:"{\r\n  'name': 'random-pass-gen',\r\n  'version': '1.0.0',\r\n  'description': 'create-react-app demo',\r\n  'main': 'index.js',\r\n  'scripts': {\r\n    'test': 'echo \\'Error: no test specified\\' && exit 1'\r\n  },\r\n  'author': 'Mike Polinowski',\r\n  'license': 'ISC',\r\n  'dependencies': {\r\n    'express': '^4.15.4',\r\n    'password-generator': '^2.1.0'\r\n  },\r\n  'scripts': {\r\n    'start': 'node index.js'\r\n  }\r\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["We can test our app with ",(0,t.jsx)(r.strong,{children:"npm start"})," and opening the following URL inside our Browser (or CURL): ",(0,t.jsx)(r.em,{children:(0,t.jsx)(r.a,{href:"http://localhost:5000/api/passwords",children:"http://localhost:5000/api/passwords"})}),". The start command starts our Node/Express Server on our localhost with the port defined inside index.js (5000). Calling the API endpoint /api/password gives us access to the password generator."]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{alt:"React Password Generator",src:n(844324).Z+"",width:"1448",height:"712"})}),"\n",(0,t.jsx)(r.h2,{id:"create-the-react-app",children:"Create the React App"}),"\n",(0,t.jsxs)(r.p,{children:["We\u2019re going to use ",(0,t.jsx)(r.a,{href:"https://github.com/facebookincubator/create-react-app",children:"Create React App"})," to generate a project. We will run this React App in our dev environment inside the subfolder ",(0,t.jsx)(r.em,{children:"/client"}),". But we will create a static version of our app inside ",(0,t.jsx)(r.em,{children:"client/build"})," (as already defined inside ",(0,t.jsx)(r.strong,{children:"index.js"})," of our Express App) once we move to a production environment. This generation of a static version is part of the functionality offered by create-react-app."]}),"\n",(0,t.jsx)(r.p,{children:"If you don\u2019t have Create React App installed yet, do that first:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"npm install -g create-react-app\n"})}),"\n",(0,t.jsx)(r.p,{children:"Generate the React app inside the Express app directory:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"create-react-app client\n"})}),"\n",(0,t.jsxs)(r.p,{children:["To test the app, cd in to the ",(0,t.jsx)(r.em,{children:"/client"})," directory and run ",(0,t.jsx)(r.strong,{children:"npm start"}),". This will run the create-react-app starter app with some boilerplate code on port 3000:"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{alt:"React Password Generator",src:n(446017).Z+"",width:"832",height:"915"})}),"\n",(0,t.jsx)(r.p,{children:"Create React App will proxy API requests from the React app to the Express app if we add a \u201cproxy\u201d key in package.json like this:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:"'proxy': 'http://localhost:5000'\n"})}),"\n",(0,t.jsx)(r.p,{children:"This goes in client/package.json, not in the Express app\u2019s package.json!"}),"\n",(0,t.jsxs)(r.p,{children:["Now we want to replace the boilerplate app with our own - the code is located inside ",(0,t.jsx)(r.em,{children:"/client/src/app.js"}),". We will replace it with the following code:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-jsx",children:"import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  // Initialize state\r\n  state = { passwords: [] }\r\n\r\n  // Fetch passwords after first mount\r\n  componentDidMount() {\r\n    this.getPasswords();\r\n  }\r\n\r\n  getPasswords = () => {\r\n    // Get the passwords and store them in state\r\n    fetch('/api/passwords')\r\n      .then(res => res.json())\r\n      .then(passwords => this.setState({ passwords }));\r\n  }\r\n\r\n  render() {\r\n    const { passwords } = this.state;\r\n\r\n    return (\r\n      <div className='App'>\r\n        {/* Render the passwords if we have them */}\r\n        {passwords.length ? (\r\n          <div>\r\n            <h1>5 Passwords.</h1>\r\n            <ul className='passwords'>\r\n              {/*\r\n                Generally it's bad to use 'index' as a key.\r\n                It's ok for this example because there will always\r\n                be the same number of passwords, and they never\r\n                change positions in the array.\r\n              */}\r\n              {passwords.map((password, index) =>\r\n                <li key={index}>\r\n                  {password}\r\n                </li>\r\n              )}\r\n            </ul>\r\n            <button\r\n              className='more'\r\n              onClick={this.getPasswords}>\r\n              Get More\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          // Render a helpful message otherwise\r\n          <div>\r\n            <h1>No passwords :(</h1>\r\n            <button\r\n              className='more'\r\n              onClick={this.getPasswords}>\r\n              Try Again?\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\n"})}),"\n",(0,t.jsxs)(r.p,{children:["And while we are add it, just add some styling in ",(0,t.jsx)(r.em,{children:"/client/src/app.css"})," to make our app look pretty:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-css",children:".App {\r\n  text-align: center;\r\n  font-family: 'Courier New', monospace;\r\n  width: 100%;\r\n}\r\n\r\nh1 {\r\n  font-weight: normal;\r\n  font-size: 42px;\r\n}\r\n\r\n.passwords {\r\n  list-style: none;\r\n  padding: 0;\r\n  font-size: 32px;\r\n  margin-bottom: 2em;\r\n}\r\n\r\n.more {\r\n  font-size: 32px;\r\n  font-family: 'Courier New', monospace;\r\n  border: 2px solid #000;\r\n  background-color: #fff;\r\n  padding: 10px 25px;\r\n}\r\n.more:hover {\r\n  background-color: #FDD836;\r\n}\r\n.more:active {\r\n  background-color: #FFEFA9;\r\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["When you restart your app now (inside the client director), you will see our Password Generator in all it's glory on ",(0,t.jsx)(r.em,{children:"localhost:3000"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"concurrently",children:"Concurrently"}),"\n",(0,t.jsxs)(r.p,{children:["Our React app (on Port 3000) is already proxying to our Express App (on Port 5000). But we would have to use two terminals to run both apps at once - which is something you can try now, if you like. Our React app is already up. Now open a second terminal inside the top-level directory and ",(0,t.jsx)(r.strong,{children:"npm start"})," the express app. When you open your browser on Port 5000, you will see our app!"]}),"\n",(0,t.jsx)(r.p,{children:"This setup is nice, because it allows you to edit your app and have it hot-reloading inside your browser!"}),"\n",(0,t.jsxs)(r.p,{children:["But we want to have this dev-environment run with a single command. As well as have our app decide whether to serve directly from the React App or look for a static build instead, based on the NODE_ENV (Production or Development). This is where ",(0,t.jsx)(r.a,{href:"https://github.com/kimmobrunfeldt/concurrently",children:"Concurrently"})," comes to the rescue. We already explained how this works ",(0,t.jsx)(r.a,{href:"https://github.com/mpolinowski/caloric-burn#concurrently",children:"here"})," - so we don't have to go into too much details."]}),"\n",(0,t.jsx)(r.p,{children:"We first have to install the package on the top-level directory:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"npm install --save-dev concurrently\n"})}),"\n",(0,t.jsx)(r.p,{children:"Then add npm start scripts to the top-level package.json file:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:"'scripts': {\r\n  'start-dev': 'concurrently \\'npm run server\\' \\'npm run client\\'',\r\n  'server': 'node index.js',\r\n  'client': 'node start-client.js',\r\n  'start': 'node index.js'\r\n},\n"})}),"\n",(0,t.jsxs)(r.p,{children:["And add the ",(0,t.jsx)(r.strong,{children:"start-client.js"})," file to start our React app from the top-level:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"const args = [ 'start' ];\r\nconst opts = { stdio: 'inherit', cwd: 'client', shell: true };\r\nrequire('child_process').spawn('npm', args, opts);\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Now run ",(0,t.jsx)(r.strong,{children:"npm start"})," in the top level and you will see that both the Express App and React App will be started:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"$ npm start\r\n\r\n> random-pass-gen@1.0.0 start E:\\random-pass-gen\r\n> concurrently 'npm run server' 'npm run client'\r\n...\r\nPassword generator listening on 5000\r\n...\r\nStarting the development server...\r\nYou can now view client in the browser.\r\nhttp://localhost:3000/\n"})}),"\n",(0,t.jsx)(r.h2,{id:"create-static-version-of-our-react-app",children:"Create Static Version of our React App"}),"\n",(0,t.jsxs)(r.p,{children:["Make sure that you are inside the ",(0,t.jsx)(r.em,{children:"/client"})," directory and execute:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"npm run build\n"})}),"\n",(0,t.jsxs)(r.p,{children:["which is a command that was defined by create-react-app (",(0,t.jsx)(r.strong,{children:"react-scripts"}),") inside ",(0,t.jsx)(r.em,{children:"/client/package.json"}),". It will create a optimized static version of our app inside ",(0,t.jsx)(r.em,{children:"/client/build"}),". This is the folder that we already told our Express App (see index.js in the top-level directory) would contain our static content. To test if the static content is served correctly by our Express App, just set your NODE_ENV to production - or just comment out the following inside ",(0,t.jsx)(r.em,{children:"/index.js"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"if (process.env.NODE_ENV === 'production') {\r\n  app.use(express.static('client/build'));\r\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"and use this statement instead:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"app.use(express.static(path.join(__dirname, 'client/build')));\n"})}),"\n",(0,t.jsx)(r.p,{children:"So by opening our Express App on port 5000 we will have our Express App serving our React App as static content from the /build folder:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"npm run server\n"})}),"\n",(0,t.jsx)(r.p,{children:"You can access it from your browser:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:" http://localhost:3000\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{alt:"React Password Generator",src:n(390509).Z+"",width:"491",height:"561"})})]})}function d(e={}){const{wrapper:r}={...(0,s.ah)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},603905:(e,r,n)=>{n.d(r,{ah:()=>p});var t=n(667294);function s(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){s(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,s=function(e,r){if(null==e)return{};var n,t,s={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(s[n]=e[n]);return s}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=t.createContext({}),p=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},l={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),h=p(n),u=s,m=h["".concat(c,".").concat(u)]||h[u]||l[u]||a;return n?t.createElement(m,o(o({ref:r},d),{},{components:n})):t.createElement(m,o({ref:r},d))}));d.displayName="MDXCreateElement"},446017:(e,r,n)=>{n.d(r,{Z:()=>t});const t=n.p+"assets/images/boilerplate-page-dd1e44ef988c7acaaa70b4bd0a7d1e0e.png"},844324:(e,r,n)=>{n.d(r,{Z:()=>t});const t=n.p+"assets/images/password-generator-working-dac6805a683fae013e56ddea8da09fae.png"},390509:(e,r,n)=>{n.d(r,{Z:()=>t});const t=n.p+"assets/images/password-generator-f61290158c813bb21a2a16f809468aab.gif"},238381:(e,r,n)=>{n.d(r,{Z:()=>t});const t=n.p+"assets/images/photo-34445476982_dccd0eb8e7_o-2364c72590cac313a3c2e1d562a10bda.png"}}]);