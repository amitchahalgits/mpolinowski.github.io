"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[60471],{321739:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var s=r(785893),t=r(603905);const a={sidebar_position:4660,slug:"2023-02-22",title:"Tensorflow 2 - An (Re)Introduction 2023 (3)",authors:"mpolinowski",tags:["Python","Machine Learning","Tensorflow"],description:"Matrix multiplications, Squeeze, One-hot and Numpy"},o=void 0,i={id:"IoT-and-Machine-Learning/ML/2023-02-22-tensorflow-tensors-3/index",title:"Tensorflow 2 - An (Re)Introduction 2023 (3)",description:"Matrix multiplications, Squeeze, One-hot and Numpy",source:"@site/docs/IoT-and-Machine-Learning/ML/2023-02-22-tensorflow-tensors-3/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2023-02-22-tensorflow-tensors-3",slug:"/IoT-and-Machine-Learning/ML/2023-02-22-tensorflow-tensors-3/2023-02-22",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-02-22-tensorflow-tensors-3/2023-02-22",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2023-02-22-tensorflow-tensors-3/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Tensorflow",permalink:"/docs/tags/tensorflow"}],version:"current",sidebarPosition:4660,frontMatter:{sidebar_position:4660,slug:"2023-02-22",title:"Tensorflow 2 - An (Re)Introduction 2023 (3)",authors:"mpolinowski",tags:["Python","Machine Learning","Tensorflow"],description:"Matrix multiplications, Squeeze, One-hot and Numpy"},sidebar:"tutorialSidebar",previous:{title:"Tensorflow 2 - Neural Network Regression",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-02-23-tensorflow-neural-network-regression/2023-02-23"},next:{title:"Tensorflow 2 - An (Re)Introduction 2023 (2)",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-02-21-tensorflow-tensors-2/2023-02-21"}},l={},c=[{value:"Tensorflow Fundamentals",id:"tensorflow-fundamentals",level:2},{value:"Matrix Multiplication",id:"matrix-multiplication",level:3},{value:"Reshape",id:"reshape",level:3},{value:"Transpose",id:"transpose",level:3},{value:"Dot-Product",id:"dot-product",level:3},{value:"Squeeze",id:"squeeze",level:3},{value:"One-hot Encoding",id:"one-hot-encoding",level:3},{value:"Square, Square Root and Log",id:"square-square-root-and-log",level:3},{value:"Tensors and Numpy Arrays",id:"tensors-and-numpy-arrays",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.ah)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Mong Kok, Hong Kong",src:r(451207).Z+"",width:"2830",height:"1272"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#tensorflow-fundamentals",children:"Tensorflow Fundamentals"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#matrix-multiplication",children:"Matrix Multiplication"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#reshape",children:"Reshape"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#transpose",children:"Transpose"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#dot-product",children:"Dot-Product"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#squeeze",children:"Squeeze"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#one-hot-encoding",children:"One-hot Encoding"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#square-square-root-and-log",children:"Square, Square Root and Log"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#tensors-and-numpy-arrays",children:"Tensors and Numpy Arrays"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/mpolinowski/tf-2023",children:"Github Repository"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"See also:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Fun, fun, tensors: ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-19-tensorflow-introduction/2023-02-19",children:"Tensor Constants, Variables and Attributes"}),", ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-21-tensorflow-tensors-2/2023-02-21",children:"Tensor Indexing, Expanding and Manipulations"}),", ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-22-tensorflow-tensors-3/2023-02-22",children:"Matrix multiplications, Squeeze, One-hot and Numpy"})]}),"\n",(0,s.jsxs)(n.li,{children:["Tensorflow 2 - Neural Network Regression: ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-23-tensorflow-neural-network-regression/2023-02-23",children:"Building a Regression Model"}),", ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-24-tensorflow-neural-network-regression-evaluation/2023-02-24",children:"Model Evaluation"}),", ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-25-tensorflow-neural-network-regression-experiments/2023-02-25",children:"Model Optimization"}),", ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-26-tensorflow-neural-network-regression-real-dataset/2023-02-26",children:'Working with a "Real" Dataset'}),", ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-26-tensorflow-neural-network-regression-data-preprocessing/2023-02-26",children:"Feature Scaling"})]}),"\n",(0,s.jsxs)(n.li,{children:["Tensorflow 2 - Neural Network Classification: ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-27-tensorflow-neural-network-classification/2023-02-27",children:"Non-linear Data and Activation Functions"}),", ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-28-tensorflow-neural-network-classification-model-evaluation/2023-02-28",children:"Model Evaluation and Performance Improvement"}),", ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-02-tensorflow-neural-network-multi-classification/2023-03-02",children:"Multiclass Classification Problems"})]}),"\n",(0,s.jsxs)(n.li,{children:["Tensorflow 2 - Convolutional Neural Networks: ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-03-tensorflow-convolutional-neural-network-binary-classifications/2023-03-03",children:"Binary Image Classification"}),", ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-05-tensorflow-convolutional-neural-network-multiclass-classifications/2023-03-05",children:"Multiclass Image Classification"})]}),"\n",(0,s.jsxs)(n.li,{children:["Tensorflow 2 - Transfer Learning: ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-06-tensorflow-transfer-learning-feature-extraction/2023-03-06",children:"Feature Extraction"}),", ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-11-tensorflow-transfer-learning-fine-tuning/2023-03-11",children:"Fine-Tuning"}),", ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-16-tensorflow-transfer-learning-scaling/2023-03-16",children:"Scaling"})]}),"\n",(0,s.jsxs)(n.li,{children:["Tensorflow 2 - Unsupervised Learning: ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-24-tensorflow-unsupervised-learning-autoencoders/2023-03-24",children:"Autoencoder Feature Detection"}),", ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-26-tensorflow-unsupervised-learning-autoencoders-super-resolution/2023-03-26",children:"Autoencoder Super-Resolution"}),", ",(0,s.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-26-tensorflow-unsupervised-learning-generative-adversial-networks/2023-03-26",children:"Generative Adverserial Networks"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"tensorflow-fundamentals",children:"Tensorflow Fundamentals"}),"\n",(0,s.jsx)(n.h3,{id:"matrix-multiplication",children:"Matrix Multiplication"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"[[2, 4],    [[2, 4],\n [3, 5]]     [3, 5]]\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"tensor = tf.constant([[2, 4],\n                       [3, 5]])\n\nprint(tensor)\n# tf.Tensor(\n# [[2 4]\n#  [3 5]], shape=(2, 2), dtype=int32)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Tensorflow 2 - An (Re)Introduction 2023",src:r(37518).Z+"",width:"1564",height:"219"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"tf.linalg.matmul"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"# matrix multiplications\nresult = tf.matmul(tensor, tensor)\nprint(result)\n# tf.Tensor(\n# [[16 28]\n#  [21 37]], shape=(2, 2), dtype=int32)\n"})}),"\n",(0,s.jsx)(n.p,{children:"To multiply two matrices they:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Need to have matching inner dimensions (first row dim of 1st matrix = first col dim of 2nd matrix). e.g.:"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["[3 x ",(0,s.jsx)(n.strong,{children:"3"}),"] x [",(0,s.jsx)(n.strong,{children:"3"})," x 2]"]}),"\n",(0,s.jsx)(n.p,{children:"To multiply matrices that don't comply with this rule they need to be reshaped, e.g.:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"# multiplying matrices with mis-matched shape\ntensor1 = tf.constant([[1, 2],\n                        [3, 4],\n                        [5, 6]])\n\ntensor2 = tf.constant([[1, 2],\n                        [3, 4],\n                        [5, 6]])\n\n# matrix multiplications\nresult = tf.matmul(tensor1, tensor2)\n# Matrix size-incompatible: In[0]: [3,2], In[1]: [3,2] [Op:MatMul]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"reshape",children:"Reshape"}),"\n",(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.code,{children:"tf.reshape()"})," to make both matrices compatible - ",(0,s.jsx)(n.code,{children:"(3, 2)"})," x ",(0,s.jsx)(n.code,{children:"(2, 3)"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"# reshape `tensor2` to make them compatible:\ntensor3 = tf.reshape(tensor2, shape=(2, 3))\nprint(tensor3)\n# tf.Tensor(\n# [[1 2 3]\n#  [4 5 6]], shape=(2, 3), dtype=int32)\n\n# and try again\nresult = tf.matmul(tensor1, tensor3)\nprint(result)\n# tf.Tensor(\n# [[ 9 12 15]\n#  [19 26 33]\n#  [29 40 51]], shape=(3, 3), dtype=int32)\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"and the resulting matrix has the shape of the outer dimensions"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In the example above we multiplied ",(0,s.jsx)(n.code,{children:"tensor1"})," with a shape of ",(0,s.jsx)(n.code,{children:"[3, 2]"})," with ",(0,s.jsx)(n.code,{children:"tensor3"})," with ",(0,s.jsx)(n.code,{children:"[2, 3]"}),". So the resulting Tensor has a shape of ",(0,s.jsx)(n.code,{children:"[3, 3]"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When you reshape ",(0,s.jsx)(n.code,{children:"tensor1"})," instead of ",(0,s.jsx)(n.code,{children:"tensor2"})," to make the multiplication work you end up with a tensor of shape ",(0,s.jsx)(n.code,{children:"[2, 2]"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"# reshape `tensor1` to make them compatible:\ntensor4 = tf.reshape(tensor1, shape=(2, 3))\nprint(tensor4)\n# tf.Tensor(\n# [[1 2 3]\n#  [4 5 6]], shape=(2, 3), dtype=int32)\n\n# and try again\nresult = tf.matmul(tensor4, tensor2)\nprint(result)\n# tf.Tensor(\n# [[22 28]\n#  [49 64]], shape=(2, 2), dtype=int32)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"transpose",children:"Transpose"}),"\n",(0,s.jsx)(n.p,{children:"The transpose function flips the axis of our tensor instead of shuffling the it's elements to get the right shape with the re-shape function:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"# transpose - instead of re-shape -`tensor1` to make them compatible:\ntensor5 = tf.transpose(tensor1)\nprint(tensor5)\n# tf.Tensor(\n# [[1 3 5]\n#  [2 4 6]], shape=(2, 3), dtype=int32)\n\n# and try again\nresult = tf.matmul(tensor5, tensor2)\nprint(result)\n# tf.Tensor(\n# [[35 44]\n#  [44 56]], shape=(2, 2), dtype=int32)\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Original Tensor"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"tf.Tensor(\n  [[1, 2],\n   [3, 4],\n   [5, 6]])\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Re-shaped Tensor"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"tf.Tensor(\n[[1 2 3]\n [4 5 6]], shape=(2, 3), dtype=int32)\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Transposed Tensor"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"tf.Tensor(\n[[1 3 5]\n [2 4 6]], shape=(2, 3), dtype=int32)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dot-product",children:"Dot-Product"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"tf.tensordot()"})," allows us to perform the same operation like with ",(0,s.jsx)(n.em,{children:"tf.matmul()"})," - but here we are able to define the axes we want to use for the multiplication:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"# dot-product\nresult = tf.tensordot(tensor5, tensor2, axes=1)\nprint(result)\n# tf.Tensor(\n# [[35 44]\n#  [44 56]], shape=(2, 2), dtype=int32)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"squeeze",children:"Squeeze"}),"\n",(0,s.jsxs)(n.p,{children:["Squueze allows us to remove axis with a size of ",(0,s.jsx)(n.code,{children:"1"})," from a tensor:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"# squeezing\ntf.random.set_seed(42)\n## create a tensor with additional dimensions\ntensor_unsqueezed = tf.constant(tf.random.uniform(shape=[42]), shape=[1, 1, 1, 1, 42])\nprint(tensor_unsqueezed)\n# tf.Tensor(\n# [[[[[0.6645621  0.44100678 0.3528825  0.46448255 0.03366041 0.68467236\n#      0.74011743 0.8724445  0.22632635 0.22319686 0.3103881  0.7223358\n#      0.13318717 0.5480639  0.5746088  0.8996835  0.00946367 0.5212307\n#      0.6345445  0.1993283  0.72942245 0.54583454 0.10756552 0.6767061\n#      0.6602763  0.33695042 0.60141766 0.21062577 0.8527372  0.44062173\n#      0.9485276  0.23752594 0.81179297 0.5263394  0.494308   0.21612847\n#      0.8457197  0.8718841  0.3083862  0.6868038  0.23764038 0.7817228 ]]]]], shape=(1, 1, 1, 1, 42), dtype=float32)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"# remove all dimensions of size 1\ntensor_squeezed = tf.squeeze(tensor_unsqueezed)\nprint(tensor_squeezed)\n# tf.Tensor(\n# [0.6645621  0.44100678 0.3528825  0.46448255 0.03366041 0.68467236\n#  0.74011743 0.8724445  0.22632635 0.22319686 0.3103881  0.7223358\n#  0.13318717 0.5480639  0.5746088  0.8996835  0.00946367 0.5212307\n#  0.6345445  0.1993283  0.72942245 0.54583454 0.10756552 0.6767061\n#  0.6602763  0.33695042 0.60141766 0.21062577 0.8527372  0.44062173\n#  0.9485276  0.23752594 0.81179297 0.5263394  0.494308   0.21612847\n#  0.8457197  0.8718841  0.3083862  0.6868038  0.23764038 0.7817228 ], shape=(42,), dtype=float32)\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"shape=(1, 1, 1, 1, 42)"})," => ",(0,s.jsx)(n.code,{children:"shape=(42,)"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"one-hot-encoding",children:"One-hot Encoding"}),"\n",(0,s.jsx)(n.p,{children:"One hot encoding transforms categorical features to a format that works better with classification and regression algorithms:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"# one-hot encoding\n## create a list\na_list = [0, 1, 2, 3, 4]\n## encode\nprint(tf.one_hot(a_list, depth=5))\n# tf.Tensor(\n# [[1. 0. 0. 0. 0.]\n#  [0. 1. 0. 0. 0.]\n#  [0. 0. 1. 0. 0.]\n#  [0. 0. 0. 1. 0.]\n#  [0. 0. 0. 0. 1.]], shape=(5, 5), dtype=float32)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here we are starting with a list and it is turned into a tensor where the position of a value of ",(0,s.jsx)(n.code,{children:"1"})," assigns the corresponding class:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"[0, 1, 2, 3, 4]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The first element of the list is a zero. So the this element belongs to class ",(0,s.jsx)(n.code,{children:"0"})," which is represented by the value ",(0,s.jsx)(n.code,{children:"1"})," below. For all other classes ",(0,s.jsx)(n.code,{children:"1"})," - ",(0,s.jsx)(n.code,{children:"4"})," the value is ",(0,s.jsx)(n.code,{children:"0"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:" [[1. 0. 0. 0. 0.]\n [0. 1. 0. 0. 0.]\n [0. 0. 1. 0. 0.]\n [0. 0. 0. 1. 0.]\n [0. 0. 0. 0. 1.]]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We can also replace the ",(0,s.jsx)(n.code,{children:"1"}),"s and ",(0,s.jsx)(n.code,{children:"0"}),"s here with other values:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"## encode and assign values\nprint(tf.one_hot(a_list, depth=5, on_value=100, off_value=-100))\n# tf.Tensor(\n# [[ 100 -100 -100 -100 -100]\n#  [-100  100 -100 -100 -100]\n#  [-100 -100  100 -100 -100]\n#  [-100 -100 -100  100 -100]\n#  [-100 -100 -100 -100  100]], shape=(5, 5), dtype=int32)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"square-square-root-and-log",children:"Square, Square Root and Log"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'# square, square root and log\ntensor_not_squared = tf.range(1, 10)\nprint(tensor_not_squared)\n# tf.Tensor([1 2 3 4 5 6 7 8 9], shape=(9,), dtype=int32)\n\n# square all values\ntensor_squared = tf.square(tensor_not_squared)\nprint(tensor_squared)\n# tf.Tensor([ 1  4  9 16 25 36 49 64 81], shape=(9,), dtype=int32)\n\n# square all values\ntensor_unsquared = tf.sqrt(tf.cast(tensor_squared, dtype="float16")) # needs non-int type\nprint(tensor_unsquared)\n# tf.Tensor([1. 2. 3. 4. 5. 6. 7. 8. 9.], shape=(9,), dtype=float16)\n\n# get log\ntensor_log = tf.math.log(tf.cast(tensor_unsquared, dtype="float16")) # needs float\nprint(tensor_log)\n# tf.Tensor([0.     0.6934 1.099  1.387  1.609  1.792  1.946  2.08   2.197 ], shape=(9,), dtype=float16)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"tensors-and-numpy-arrays",children:"Tensors and Numpy Arrays"}),"\n",(0,s.jsx)(n.p,{children:"Numpy array and Tensorflow tensors can be transformed into each other:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"# numpy arrays\n## numpy array -> tensorflow tensor\ntf_np_array = tf.constant(np.array([1., 2., 3., 4., 5.]))\nprint(tf_np_array)\n# tf.Tensor([1. 2. 3. 4. 5.], shape=(5,), dtype=float64)\n\n## tensorflow tensor -> numpy array\nnp_tf_tensor = np.array(tf_np_array)\nprint(np_tf_tensor, type(np_tf_tensor))\n# [1. 2. 3. 4. 5.] <class 'numpy.ndarray'>\n\n## tensorflow tensor -> numpy array\n## just a different method\nnp_tf_tensor2 = tf_np_array.numpy()\nprint(np_tf_tensor2, type(np_tf_tensor2))\n# [1. 2. 3. 4. 5.] <class 'numpy.ndarray'>\n\n## extract a single value from a tensor\nmy_value = tf_np_array.numpy()[0]\nprint(my_value)\n# 1.0\n"})}),"\n",(0,s.jsx)(n.p,{children:"Note that the default types assigned differ depending on what you use:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"## different default types!\nnumpy_tensor = tf.constant(np.array([1., 2., 3., 4., 5.]))\nprint(numpy_tensor)\n# tf.Tensor([1. 2. 3. 4. 5.], shape=(5,), dtype=float64)\n\ntf_tensor = tf.constant([1., 2., 3., 4., 5.])\nprint(tf_tensor)\n# tf.Tensor([1. 2. 3. 4. 5.], shape=(5,), dtype=float32)\n"})}),"\n",(0,s.jsx)(n.p,{children:"While Numpy offers a lot of functions that can be employed in data processing Tensorflow is able to make use of a GPU or TPU to accelerate the computation. For large datasets you should always Tensorflow tensors instead of Numpy arrays when possible:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"# make sure you have GPU/TPU support\nprint(tf.config.list_physical_devices())\n# [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU'), PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\nprint(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))\n# Num GPUs Available:  1\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nvidia-smi\nWed Feb 22 15:33:18 2023       \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 525.89.02    Driver Version: 525.89.02    CUDA Version: 12.0     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  NVIDIA GeForce ...  Off  | 00000000:01:00.0  On |                  N/A |\n|  0%   55C    P8    11W / 130W |    858MiB /  6144MiB |     20%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.ah)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>c});var s=r(667294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,s)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,s,t=function(e,n){if(null==e)return{};var r,s,t={},a=Object.keys(e);for(s=0;s<a.length;s++)r=a[s],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)r=a[s],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var l=s.createContext({}),c=function(e){var n=s.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},d={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},h=s.forwardRef((function(e,n){var r=e.components,t=e.mdxType,a=e.originalType,l=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),p=c(r),u=t,f=p["".concat(l,".").concat(u)]||p[u]||d[u]||a;return r?s.createElement(f,o(o({ref:n},h),{},{components:r})):s.createElement(f,o({ref:n},h))}));h.displayName="MDXCreateElement"},37518:(e,n,r)=>{r.d(n,{Z:()=>s});const s=r.p+"assets/images/Matrix_Multiplication_01-66f9788e4cb9d6b5a619c93633e8f0bd.png"},451207:(e,n,r)=>{r.d(n,{Z:()=>s});const s=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-f80e63ee872dae25129198058ac93b4e.jpg"}}]);