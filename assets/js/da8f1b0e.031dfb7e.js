"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[87573],{356767:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=r(785893),o=r(603905);const i={sidebar_position:4070,slug:"2022-09-24",title:"NGINX Ingress with Nomad",authors:"mpolinowski",tags:["LINUX","Security","NGINX","Nomad","Consul"],description:"Provision a containerized NGINX ingress using Hashicorp Nomad."},s=void 0,a={id:"DevOps/Hashicorp/2022-09-24--nomad-nginx-ingress/index",title:"NGINX Ingress with Nomad",description:"Provision a containerized NGINX ingress using Hashicorp Nomad.",source:"@site/docs/DevOps/Hashicorp/2022-09-24--nomad-nginx-ingress/index.md",sourceDirName:"DevOps/Hashicorp/2022-09-24--nomad-nginx-ingress",slug:"/DevOps/Hashicorp/2022-09-24--nomad-nginx-ingress/2022-09-24",permalink:"/docs/DevOps/Hashicorp/2022-09-24--nomad-nginx-ingress/2022-09-24",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-09-24--nomad-nginx-ingress/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Security",permalink:"/docs/tags/security"},{label:"NGINX",permalink:"/docs/tags/nginx"},{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Consul",permalink:"/docs/tags/consul"}],version:"current",sidebarPosition:4070,frontMatter:{sidebar_position:4070,slug:"2022-09-24",title:"NGINX Ingress with Nomad",authors:"mpolinowski",tags:["LINUX","Security","NGINX","Nomad","Consul"],description:"Provision a containerized NGINX ingress using Hashicorp Nomad."},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Nomad to set up an OSTicket Helpdesk - Part I",permalink:"/docs/DevOps/Hashicorp/2022-10-21-hashicorp-nomad-for-osticket-part-i/2022-10-21"},next:{title:"Secure Timeserver - Deploying a NTS Server using Hashicorp Nomad",permalink:"/docs/DevOps/Hashicorp/2022-09-22--nomad-nts-timeserver/2022-09-22"}},c={},l=[{value:"NGINX Ingress with Nomad",id:"nginx-ingress-with-nomad",level:2},{value:"Preparation",id:"preparation",level:2},{value:"Certbot",id:"certbot",level:3},{value:"Nomad Job File",id:"nomad-job-file",level:2}];function d(n){const e={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.ah)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{alt:"TST, Hong Kong",src:r(386638).Z+"",width:"1500",height:"517"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#nginx-ingress-with-nomad",children:"NGINX Ingress with Nomad"})}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"#preparation",children:"Preparation"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#certbot",children:"Certbot"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#nomad-job-file",children:"Nomad Job File"})}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"nginx-ingress-with-nomad",children:"NGINX Ingress with Nomad"}),"\n",(0,t.jsxs)(e.p,{children:["Running several web applications on a single server usually requires a web proxy to handle to have a single ingress to your server that handles TLS encryption. I ",(0,t.jsx)(e.a,{href:"/docs/DevOps/NGINX/2021-02-22-nginx-docker-ingress/2021-02-22/",children:"already prepared a NGINX Ingress template"})," that can be used to spin up an Ingress inside a Docker container:"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://github.com/mpolinowski/nginx_docker_ingress",children:"Github Repository"})}),"\n",(0,t.jsx)(e.p,{children:"Let's migrate this to Nomad."}),"\n",(0,t.jsx)(e.h2,{id:"preparation",children:"Preparation"}),"\n",(0,t.jsx)(e.h3,{id:"certbot",children:"Certbot"}),"\n",(0,t.jsxs)(e.p,{children:["First I need to create an TLS certificate with ",(0,t.jsx)(e.a,{href:"https://certbot.eff.org/instructions?ws=other&os=debiantesting",children:"certbot"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"apt install certbot\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Since NGINX will be running inside a docker container we cannot use the ",(0,t.jsx)(e.code,{children:"--nginx"})," flag to auto-configure NGINX to use the certificate. Instead we have to use:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"certbot certonly --standalone\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Before"})," running this command make sure that you have a domain pointing towards your server, e.g. ",(0,t.jsx)(e.code,{children:"my.server.com"})," and you will have to have opened port ",(0,t.jsx)(e.code,{children:"80"}),", e.g. ",(0,t.jsx)(e.code,{children:"ufw allow 80/tcp"})," to have certbot verify your domain!"]}),"\n",(0,t.jsxs)(e.p,{children:["The command is going to create your certificates in ",(0,t.jsx)(e.code,{children:"/etc/letsencrypt/live/my.server.com"})," which we will have to provide as a volume to the Nomad process - check out the ",(0,t.jsx)(e.a,{href:"/docs/DevOps/Hashicorp/2022-09-22--nomad-nts-timeserver/2022-09-22#hashicorp-nomad",children:"Hashicorp Nomad Client Configuration"})," for how to configure the client on your server that should run the NGNIX ingress."]}),"\n",(0,t.jsx)(e.h2,{id:"nomad-job-file",children:"Nomad Job File"}),"\n",(0,t.jsxs)(e.p,{children:["There are two ways on how to provide the NGINX configuration to your Docker container. The first one is to source your configuration in a Git repository and add it to your Nomad job using the ",(0,t.jsx)(e.strong,{children:"Artifact"})," stanza inside the ",(0,t.jsx)(e.strong,{children:"Task"})," directive:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'artifact {\r\n        source      = "git::git@my.gitlab.com:nginx_ingress.git"\r\n        destination = "local/nginx"\r\n        options {\r\n          sshkey = "${base64encode(file(pathexpand("/etc/nomad.d/.ssh/id_rsa")))}"\r\n          depth = 1\r\n        }\r\n      }\n'})}),"\n",(0,t.jsxs)(e.p,{children:["Create an SSH key ",(0,t.jsx)(e.code,{children:"/etc/nomad.d/.ssh/id_rsa"})," and add it to your Git repository to allow Nomad to clone it. Now you can mount the ",(0,t.jsx)(e.code,{children:"local/nginx"})," directory as volumes:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'config {\r\n        network_mode = "host"\r\n        image = "nginx:alpine"\r\n        ports = ["http","https"]\r\n        volumes = [\r\n          "local/nginx/configuration/conf.d:/etc/nginx/conf.d",\r\n          "local/nginx/configuration/ssl:/etc/nginx/ssl",\r\n          "local/nginx/configuration/nginx.conf:/etc/nginx/nginx.conf"\r\n        ]\r\n      }\n'})}),"\n",(0,t.jsxs)(e.p,{children:["But I don't want to create another repo and just use the ",(0,t.jsx)(e.strong,{children:"Template"})," stanza to generate the entire configuration from my job file:"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"nginx_ingress.nomad"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'job "nginx_ingress" {\r\n  datacenters = ["nginxNTS"]\r\n\r\n  group "nginx" {\r\n    count = 1\r\n\r\n    network {\r\n      mode = "host"\r\n      port "http" {\r\n          static = "80"\r\n      }\r\n      port "https" {\r\n          static = "443"\r\n      }\r\n    }\r\n\r\n    service {\r\n        name = "nginx-ingress"\r\n        port = "http"\r\n\r\n        check {\r\n            name     = "HTTP Health"\r\n            path     = "/"\r\n            type     = "http"\r\n            protocol = "http"\r\n            interval = "10s"\r\n            timeout  = "2s"\r\n        }\r\n    }\r\n\r\n    volume "letsencrypt" {\r\n        type      = "host"\r\n        read_only = true\r\n        source    = "letsencrypt"\r\n    }\r\n\r\n    task "ingress_container" {\r\n      driver = "docker"\r\n\r\n      volume_mount {\r\n            volume      = "letsencrypt"\r\n            destination = "/opt/letsencrypt" #in the container\r\n            read_only   = false\r\n      }\r\n\r\n      config {\r\n        network_mode = "host"\r\n        image = "nginx:alpine"\r\n        ports = ["http","https"]\r\n        volumes = [\r\n          "local/nginx/nginx.conf:/etc/nginx/nginx.conf",\r\n          "local/nginx/dhparam.pem:/etc/nginx/ssl/dhparam.pem",\r\n          "local/nginx/ssl-params.conf:/etc/nginx/ssl/ssl-params.conf",\r\n          "local/nginx/default.conf:/etc/nginx/conf.d/default.conf",\r\n          "local/nginx/buffers.conf:/etc/nginx/conf.d/buffers.conf",\r\n          "local/nginx/timeouts.conf:/etc/nginx/conf.d/timeouts.conf",\r\n          "local/nginx/header.conf:/etc/nginx/conf.d/header.conf",\r\n          "local/nginx/cache.conf:/etc/nginx/conf.d/cache.conf",\r\n          "local/nginx/gzip.conf:/etc/nginx/conf.d/gzip.conf",\r\n          "local/nginx/index.html:/usr/share/nginx/html/index.html"\r\n        ]\r\n      }\r\n\r\n      template {\r\n        data = <<EOH\r\nuser  nginx;\r\nworker_processes  auto;\r\nworker_rlimit_nofile  15000;\r\npid  /var/run/nginx.pid;\r\ninclude /usr/share/nginx/modules/*.conf;\r\n\r\n\r\nevents {\r\n    worker_connections  2048;\r\n    multi_accept on;\r\n    use epoll;\r\n}\r\n\r\n\r\nhttp {\r\n    default_type   application/octet-stream;\r\n    # access_log   /var/log/nginx/access.log;\r\n    # activate the server access log only when needed\r\n    access_log     off;\r\n    error_log      /var/log/nginx/error.log;\r\n    # don\'t display server version on error pages\r\n    server_tokens  off;\r\n    server_names_hash_bucket_size 64;\r\n    include        /etc/nginx/mime.types;\r\n    sendfile       on;\r\n    tcp_nopush     on;\r\n    tcp_nodelay    on;\r\n\r\n    charset utf-8;\r\n    source_charset utf-8;\r\n    charset_types text/xml text/plain text/vnd.wap.wml application/javascript application/rss+xml;\r\n    \r\n    include /etc/nginx/conf.d/default.conf;\r\n    include /etc/nginx/conf.d/buffers.conf;\r\n    include /etc/nginx/conf.d/timeouts.conf;\r\n    include /etc/nginx/conf.d/cache.conf;\r\n    include /etc/nginx/conf.d/gzip.conf;\r\n}\r\n        EOH\r\n\r\n        destination = "local/nginx/nginx.conf"\r\n      }\r\n\r\n      template {\r\n        data = <<EOH\r\nserver {\r\n    listen 80;\r\n    listen [::]:80;\r\n\r\n    server_name my.server.com;\r\n\r\n    return 301 https://$server_name$request_uri;\r\n}\r\n\r\n\r\nserver {\r\n    listen 443 ssl http2 default_server;\r\n    listen [::]:443 ssl;\r\n    ssl_certificate /opt/letsencrypt/live/my.server.com/fullchain.pem;\r\n    ssl_certificate_key /opt/letsencrypt/live/my.server.com/privkey.pem;\r\n    include ssl/ssl-params.conf;\r\n    include /etc/nginx/conf.d/header.conf;\r\n\r\n    server_name  my.server.com;\r\n\r\n    #access_log  /var/log/nginx/host.access.log  main;\r\n\r\n    location / {\r\n        root   /usr/share/nginx/html;\r\n        index  index.html index.htm;\r\n    }\r\n\r\n    #error_page  404              /404.html;\r\n\r\n    # redirect server error pages to the static page /50x.html\r\n    #\r\n    error_page   500 502 503 504  /50x.html;\r\n    location = /50x.html {\r\n        root   /usr/share/nginx/html;\r\n    }\r\n}\r\n        EOH\r\n\r\n        destination = "local/nginx/default.conf"\r\n      }\r\n\r\n      template {\r\n        data = <<EOH\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Hello World!</title>\r\n    <style>\r\n    html { color-scheme: light dark; }\r\n    body { width: 35em; margin: 0 auto;\r\n    font-family: Tahoma, Verdana, Arial, sans-serif; }\r\n    </style>\r\n</head>\r\n<body>\r\n    <h1>Hello World!</h1>\r\n</body>\r\n</html>\r\n        EOH\r\n\r\n        destination = "local/nginx/index.html"\r\n      }\r\n\r\n      template {\r\n        data = <<EOH\r\n-----BEGIN DH PARAMETERS-----\r\nMIICCAKCAgEAt59...\r\n...dfszADFDGV346dfzxg9AC=\r\n-----END DH PARAMETERS-----\r\n        EOH\r\n\r\n        destination = "local/nginx/dhparam.pem"\r\n      }\r\n\r\n      template {\r\n        data = <<EOH\r\nssl_protocols TLSv1.3;\r\nssl_prefer_server_ciphers on;\r\nssl_dhparam /etc/nginx/ssl/dhparam.pem;\r\nssl_ciphers ECDH+AESGCM:ECDH+CHACHA20:ECDH+AES256:ECDH+AES128:!aNULL:!SHA1:!AESCCM;\r\nssl_conf_command Options PrioritizeChaCha;\r\nssl_conf_command Ciphersuites TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256;\r\nssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0\r\nssl_session_timeout  10m;\r\nssl_session_cache shared:SSL:10m;\r\nssl_session_tickets off; # Requires nginx >= 1.5.9\r\nssl_stapling on; # Requires nginx >= 1.3.7\r\nssl_stapling_verify on; # Requires nginx => 1.3.7\r\nresolver 8.8.8.8 8.8.4.4 valid=300s;\r\nresolver_timeout 5s;\r\nadd_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;\r\nadd_header X-Frame-Options "";\r\nadd_header X-Content-Type-Options nosniff;\r\nadd_header X-XSS-Protection "1; mode=block";\r\n        EOH\r\n\r\n        destination = "local/nginx/ssl-params.conf"\r\n      }\r\n\r\n      template {\r\n        data = <<EOH\r\nclient_body_buffer_size 10k;\r\nclient_header_buffer_size 1k;\r\nclient_max_body_size 8m;\r\nlarge_client_header_buffers 2 1k;\r\n# Directive needs to be increased for certain site types to prevent ERROR 400\r\n# large_client_header_buffers 4 32k;\r\n        EOH\r\n\r\n        destination = "local/nginx/buffers.conf"\r\n      }\r\n\r\n      template {\r\n        data = <<EOH\r\nadd_header                Cache-Control  "public, must-revalidate, proxy-revalidate, max-age=0";\r\nproxy_set_header          X-Forwarded-For $proxy_add_x_forwarded_for;\r\nproxy_set_header          X-NginX-Proxy true;\r\nproxy_set_header          X-Real-IP $remote_addr;\r\nproxy_set_header          X-Forwarded-Proto http;\r\nproxy_hide_header         X-Frame-Options;\r\nproxy_set_header          Accept-Encoding "";\r\nproxy_http_version        1.1;\r\nproxy_set_header          Upgrade $http_upgrade;\r\nproxy_set_header          Connection "upgrade";\r\nproxy_set_header          Host $host;\r\nproxy_cache_bypass        $http_upgrade;\r\nproxy_max_temp_file_size  0;\r\nproxy_redirect            off;\r\nproxy_read_timeout        240s;\r\n        EOH\r\n\r\n        destination = "local/nginx/header.conf"\r\n      }\r\n\r\n      template {\r\n        data = <<EOH\r\nopen_file_cache max=1500 inactive=20s;\r\nopen_file_cache_valid 30s;\r\nopen_file_cache_min_uses 5;\r\nopen_file_cache_errors off;\r\n        EOH\r\n\r\n        destination = "local/nginx/cache.conf"\r\n      }\r\n\r\n      template {\r\n        data = <<EOH\r\nclient_header_timeout 3m;\r\nclient_body_timeout 3m;\r\nkeepalive_timeout 100;\r\nkeepalive_requests 1000;\r\nsend_timeout 3m;\r\n        EOH\r\n\r\n        destination = "local/nginx/timeouts.conf"\r\n      }\r\n\r\n      template {\r\n        data = <<EOH\r\ngzip on;\r\ngzip_disable "msie6";\r\ngzip_vary on;\r\ngzip_proxied any;\r\ngzip_comp_level 5;\r\ngzip_min_length 256;\r\ngzip_buffers 16 8k;\r\ngzip_http_version 1.1;\r\ngzip_types text/plain text/css application/json application/javascript\r\ntext/xml application/xml application/xml+rss text/javascript\r\nimage/svg+xml application/xhtml+xml application/atom+xml;\r\n        EOH\r\n\r\n        destination = "local/nginx/gzip.conf"\r\n      }\r\n\r\n    }\r\n  }\r\n}\n'})})]})}function p(n={}){const{wrapper:e}={...(0,o.ah)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},603905:(n,e,r)=>{r.d(e,{ah:()=>l});var t=r(667294);function o(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function i(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function s(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){o(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function a(n,e){if(null==n)return{};var r,t,o=function(n,e){if(null==n)return{};var r,t,o={},i=Object.keys(n);for(t=0;t<i.length;t++)r=i[t],e.indexOf(r)>=0||(o[r]=n[r]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(t=0;t<i.length;t++)r=i[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(o[r]=n[r])}return o}var c=t.createContext({}),l=function(n){var e=t.useContext(c),r=e;return n&&(r="function"==typeof n?n(e):s(s({},e),n)),r},d={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},p=t.forwardRef((function(n,e){var r=n.components,o=n.mdxType,i=n.originalType,c=n.parentName,p=a(n,["components","mdxType","originalType","parentName"]),h=l(r),g=o,m=h["".concat(c,".").concat(g)]||h[g]||d[g]||i;return r?t.createElement(m,s(s({ref:e},p),{},{components:r})):t.createElement(m,s({ref:e},p))}));p.displayName="MDXCreateElement"},386638:(n,e,r)=>{r.d(e,{Z:()=>t});const t=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-ec671595d585b88a85b017a7908fb619.jpg"}}]);