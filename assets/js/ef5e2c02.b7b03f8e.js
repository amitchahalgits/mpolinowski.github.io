"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[68704],{727324:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var t=r(785893),o=r(603905);const s={sidebar_position:6070,slug:"2021-09-08",title:"HTML Video over Websockets",authors:"mpolinowski",tags:["Javascript"]},i=void 0,a={id:"Development/Javascript/2021-09-08--websockets-html-video/index",title:"HTML Video over Websockets",description:"Shenzhen, China",source:"@site/docs/Development/Javascript/2021-09-08--websockets-html-video/index.md",sourceDirName:"Development/Javascript/2021-09-08--websockets-html-video",slug:"/Development/Javascript/2021-09-08--websockets-html-video/2021-09-08",permalink:"/docs/Development/Javascript/2021-09-08--websockets-html-video/2021-09-08",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Javascript/2021-09-08--websockets-html-video/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"}],version:"current",sidebarPosition:6070,frontMatter:{sidebar_position:6070,slug:"2021-09-08",title:"HTML Video over Websockets",authors:"mpolinowski",tags:["Javascript"]},sidebar:"tutorialSidebar",previous:{title:"HAProxy Loadbalancing and Websockets",permalink:"/docs/Development/Javascript/2021-09-09--websocket-HAproxy/2021-09-09"},next:{title:"Introduction to Websockets",permalink:"/docs/Development/Javascript/2021-09-07--intro-to-websockets/2021-09-07"}},c={},d=[{value:"HTML Frontend (WS Client)",id:"html-frontend-ws-client",level:2},{value:"Websocket Server",id:"websocket-server",level:2},{value:"User Notifications",id:"user-notifications",level:2},{value:"Auto-Reconnect the Websocket",id:"auto-reconnect-the-websocket",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.ah)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Shenzhen, China",src:r(577913).Z+"",width:"1500",height:"374"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#html-frontend-ws-client",children:"HTML Frontend (WS Client)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#websocket-server",children:"Websocket Server"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#user-notifications",children:"User Notifications"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#auto-reconnect-the-websocket",children:"Auto-Reconnect the Websocket"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["This is a frontend client for the INSTAR WQHD (",(0,t.jsx)(n.code,{children:"IN-9408 2k+"}),") camera websocket server. It connects to the server and displays the camera's live video stream inside an HTML5 video tag."]}),"\n",(0,t.jsx)(n.h2,{id:"html-frontend-ws-client",children:"HTML Frontend (WS Client)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"HTML Video over Websockets",src:r(46599).Z+"",width:"1050",height:"972"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset="UTF-8">\r\n        <meta http-equiv="Content-Security-Policy"  content="connect-src * \'unsafe-inline\';">\r\n        \x3c!-- Bootstrap CSS --\x3e\r\n        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous"><link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">\r\n        <style>\r\n            /* override styles here */\r\n            .notie-container {\r\n            box-shadow: none;\r\n            }\r\n        </style>\r\n    </head>\r\n    <body>\r\n        <nav class="navbar sticky-top navbar-dark bg-dark mb-3">\r\n            <div class="container-fluid">\r\n                <a class="navbar-brand" href="#">\r\n                    <img src="instar.svg" alt="" width="156" height="45" class="d-inline-block">\r\n                </a>\r\n                <div class="d-flex text-light me-2" id="status">\r\n                </div>\r\n            </div>\r\n        </nav>\r\n        <div class="container-fluid">\r\n            <div class="row justify-content-between">\r\n                <div class="col">\r\n                    <div class="container-md" id="connection_paramter">\r\n                        <table class="table table-hover">\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope="col">Websocket</th>\r\n                                <th scope="col">Configuration</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <th width="200px" scope="row">WS Protocol</th>\r\n                                <td>\r\n                                    <select id="protocol" class="form-select">\r\n                                        <option value="ws" selected="selected">ws</option>\r\n                                        <option value="wss">wss</option>\r\n                                    </select>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th scope="row">WS Hostname</th>\r\n                                <td>\r\n                                    <div class="input-group">\r\n                                        <input type="text" class="form-control" id="hostname" value="192.168.2.19"/>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th scope="row">WS Port</th>\r\n                                <td>\r\n                                    <div class="input-group">\r\n                                        <input type="text" class="form-control" id="port" value="80"/>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th scope="row">WS Endpoint</th>\r\n                                <td>\r\n                                    <div class="input-group">\r\n                                        <input type="text" class="form-control" id="endpoint" value="/ws" />\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th scope="row">Connection</th>\r\n                                <td>\r\n                                    <div class="d-flex gap-2">\r\n                                        <button type="button" class="btn btn-primary p-2 flex-grow-1" id="btnConnect" onclick="onConnectClick()">\r\n                                        Connect\r\n                                        </button>\r\n                                        <button type="button" class="btn btn-danger p-2 flex-grow-1" id="btnDisconnect" onclick="onDisconnectClick()" disabled>\r\n                                            Disconnect\r\n                                        </button>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div class="col">\r\n                    <div class="container-md" id="message">\r\n                        <table class="table table-hover">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th colspan="2" scope="col">h.264 Stream</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th scope="row">Username</th>\r\n                                    <td>\r\n                                        <div class="input-group">\r\n                                            <input type="text" class="form-control" id="username" value="admin"/>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th scope="row">Password</th>\r\n                                    <td>\r\n                                        <div class="input-group">\r\n                                            <input type="password" class="form-control" id="password" value="instar" />\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td colspan="2">\r\n                                        <div class="input-group">\r\n                                            <select id="wsmessage" class="form-select">\r\n                                                <option value="livestream" selected="selected">Start</option>\r\n                                                <option value="stop">Stop</option>\r\n                                            </select>\r\n                                            \x3c!-- <input type="text" class="form-control" id="wsmessage" value="livestream"> --\x3e\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td colspan="2">\r\n                                        <div class="d-flex">\r\n                                            <button type="button" class="btn btn-success p-2 flex-grow-1" id="btnSend" onclick="onSendClick()" disabled>\r\n                                                Send Message\r\n                                            </button>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div class="container-fluid">\r\n                <div class="row" id="message">\r\n\r\n                    <div class="col align-self-center">\r\n                        <video playsinline muted controls preload="none" width="100%"></video>\r\n                    </div>\r\n\r\n                    <div class="accordion accordion mb-5" id="accordionFlushExample">\r\n                        <div class="accordion-item">\r\n                          <h2 class="accordion-header" id="headingOne">\r\n                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">\r\n                                Incoming Messages\r\n                            </button>\r\n                          </h2>\r\n                          <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionFlushExample">\r\n                            <div class="input-group">\r\n                                <textarea class="form-control" id="incomingMsgOutput" rows="10" cols="20" disabled="disabled"></textarea>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        \x3c!-- Scripts --\x3e\r\n        \x3c!-- Websocket Client --\x3e\r\n        <script src="wsclient.js"><\/script>\r\n        \x3c!-- Bootstrap JS and Popper.js --\x3e\r\n        \x3c!-- <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js" integrity="sha384-W8fXfP3gkOKtndU4JGtKDvXbO53Wy8SZCQHczT5FMiiqmQfUpWbYdTil/SxwZgAN" crossorigin="anonymous"><\/script> --\x3e\r\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.min.js" integrity="sha384-skAcpIdS7UcVUC05LJ9Dxay8AXcDYfBJqt1CJ85S/CFujBsIzCIv+l9liuYLaMQ/" crossorigin="anonymous"><\/script>\r\n        <script src="https://unpkg.com/notie"><\/script>\r\n        <script src="reconnecting-websocket.min.js"><\/script>\r\n    </body>\r\n</html>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"websocket-server",children:"Websocket Server"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'\r\nvar ws_protocol = document.getElementById("protocol");\r\nvar ws_hostname = document.getElementById("hostname");\r\nvar ws_port     = document.getElementById("port");\r\nvar ws_endpoint = document.getElementById("endpoint");\r\nvar cam_username = document.getElementById("username");\r\nvar cam_password = document.getElementById("password");\r\n\r\nvar queue = [];\r\nvar video = null;\r\nvar webSocket   = null;\r\nvar sourceBuffer = null;\r\nvar streamingStarted = false;\r\n\r\n// Display ws pre-connected state\r\nvar statusBadge = document.getElementById("status");\r\nconst idle = `<h4><span class="badge bg-primary">WS Client</span></h4>`\r\nstatusBadge.innerHTML = idle;\r\n\r\n// Init the Media Source and add event listener\r\nfunction initMediaSource() {\r\n    video = document.querySelector(\'video\');\r\n    video.onerror = elementError;\r\n    video.loop = false;\r\n    video.addEventListener(\'canplay\', (event) => {\r\n        console.log(\'Video can start, but not sure it will play through.\');\r\n        video.play();\r\n    });\r\n    video.addEventListener(\'paused\', (event) => {\r\n        console.log(\'Video paused for buffering...\');\r\n        setTimeout(function() { video.play(); }, 2000);\r\n    });\r\n    \r\n    /* NOTE: Chrome will not play the video if we define audio here\r\n    * and the stream does not include audio */\r\n    var mimeCodec = \'video/mp4; codecs="avc1.4D0033, mp4a.40.2"\';\r\n    //var mimeCodec = \'video/mp4; codecs=avc1.42E01E,mp4a.40.2\'; baseline\r\n    //var mimeCodec = \'video/mp4; codecs=avc1.4d002a,mp4a.40.2\'; main\r\n    //var mimeCodec = \'video/mp4; codecs="avc1.64001E, mp4a.40.2"\'; high\r\n\r\n    if (!window.MediaSource) {\r\n        console.error("No Media Source API available");\r\n        document.getElementById("incomingMsgOutput").value += "error: No Media Source API available" + "\\r\\n";\r\n        return;\r\n    }\r\n    \r\n    if (!MediaSource.isTypeSupported(mimeCodec)) {\r\n        console.error("Unsupported MIME type or codec: " + mimeCodec);\r\n        document.getElementById("incomingMsgOutput").value += "error: Unsupported MIME type or codec" + "\\r\\n";\r\n        return;\r\n    }\r\n    \r\n    var ms = new MediaSource();\r\n    video.src = window.URL.createObjectURL(ms);\r\n    ms.addEventListener(\'sourceopen\', onMediaSourceOpen);\r\n    \r\n    function onMediaSourceOpen() {\r\n        sourceBuffer = ms.addSourceBuffer(mimeCodec);\r\n        sourceBuffer.addEventListener("updateend",loadPacket);\r\n        sourceBuffer.addEventListener("onerror", sourceError);\r\n    }\r\n    \r\n    function loadPacket() { // called when sourceBuffer is ready for more\r\n        if (!sourceBuffer.updating) {\r\n            if (queue.length>0) {\r\n                data = queue.shift(); // pop from the beginning\r\n                appendToBuffer(data);\r\n            } else { // the queue runs empty, so we must force-feed the next packet\r\n                streamingStarted = false;\r\n            }\r\n        }\r\n        else {}\r\n    }\r\n    \r\n    function sourceError(event) {\r\n        console.log("Media source error");\r\n    }\r\n    \r\n    function elementError(event) {\r\n        console.log("Media element error");\r\n    }\r\n}\r\n\r\n// Append AV data to source buffer\r\nfunction appendToBuffer(videoChunk) {\r\n    if (videoChunk) {\r\n        sourceBuffer.appendBuffer(videoChunk);\r\n    }\r\n}\r\n\r\n// Event handler for clicking on button "Connect"\r\nfunction onConnectClick() {\r\n     // Makes sure that user typed username and message before sending\r\n     if ((ws_protocol.value === \'\') || (ws_hostname.value === \'\') || (ws_port.value === \'\') || (ws_endpoint.value === \'\') ||(cam_username === \'\') || (cam_password === \'\')) {\r\n        errorToast("Please fill out all the configuration fields above!");\r\n        return false;\r\n    } else {\r\n        initMediaSource();\r\n        document.getElementById("incomingMsgOutput").value = "";\r\n        document.getElementById("btnConnect").disabled    = true;\r\n        openWSConnection(ws_protocol.value, ws_hostname.value, ws_port.value, ws_endpoint.value);\r\n        successToast("Send the \'Start\' message to start the video stream.");\r\n        }    \r\n}\r\n\r\n// Event handler for clicking on button "Disconnect"\r\nfunction onDisconnectClick() {\r\n    document.getElementById("btnDisconnect").disabled = true;\r\n    webSocket.close();\r\n    video.pause();\r\n}\r\n\r\n// Adding confirmations with notie.js\r\nfunction successToast(msg) {\r\n    notie.alert({\r\n        type: \'success\', // optional, default = 4, enum: [1, 2, 3, 4, 5, \'success\', \'warning\', \'error\', \'info\', \'neutral\']\r\n        text: msg,\r\n        stay: false, // optional, default = false\r\n        time: 3, // optional, default = 3, minimum = 1,\r\n        position: \'bottom\' // optional, default = \'top\', enum: [\'top\', \'bottom\']\r\n    })\r\n}\r\n\r\n//Adding alerts with notie.js\r\nfunction errorToast(msg) {\r\n    notie.alert({\r\n        type: \'error\', // optional, default = 4, enum: [1, 2, 3, 4, 5, \'success\', \'warning\', \'error\', \'info\', \'neutral\']\r\n        text: msg,\r\n        stay: false, // optional, default = false\r\n        time: 3, // optional, default = 3, minimum = 1,\r\n        position: \'bottom\' // optional, default = \'top\', enum: [\'top\', \'bottom\']\r\n    })\r\n}\r\n\r\n// Open a new WebSocket connection using the given parameters\r\nfunction openWSConnection(protocol, hostname, port, endpoint) {\r\n    \r\n    var webSocketURL = null;\r\n    var keepAliveCount = 0;\r\n    \r\n    webSocketURL = protocol + "://" + hostname + ":" + port + endpoint;\r\n    console.log("openWSConnection::Connecting to: " + webSocketURL);\r\n\r\n    const offline = `<h4><span class="badge bg-danger">Disconnected</span></h4>`\r\n    const online = `<h4><span class="badge bg-success">Connected</span></h4>`\r\n    \r\n    let statusBadge = document.getElementById("status");\r\n\r\n    try {\r\n        // webSocket = new WebSocket(webSocketURL);\r\n        webSocket = new ReconnectingWebSocket(webSocketURL);\r\n        webSocket.debug = true;\r\n        webSocket.timeoutInterval = 3000;\r\n        webSocket.onopen = function(openEvent) {\r\n            var open = JSON.stringify(openEvent, null, 4);\r\n            console.log("WebSocket open");\r\n            document.getElementById("btnSend").disabled       = false;\r\n            document.getElementById("btnConnect").disabled    = true;\r\n            document.getElementById("btnDisconnect").disabled = false;\r\n            document.getElementById("incomingMsgOutput").value += "WebSocket connected" + "\\r\\n";\r\n            statusBadge.innerHTML = online\r\n        };\r\n        webSocket.onclose = function (closeEvent) {\r\n            var closed = JSON.stringify(closeEvent, null, 4);\r\n            console.log("WebSocket closed");\r\n            document.getElementById("btnSend").disabled       = true;\r\n            document.getElementById("btnConnect").disabled    = false;\r\n            document.getElementById("btnDisconnect").disabled = true;\r\n            document.getElementById("incomingMsgOutput").value += "WebSocket closed" + "\\r\\n";\r\n            statusBadge.innerHTML = offline\r\n        };\r\n        webSocket.onerror = function (errorEvent) {\r\n            var error = JSON.stringify(errorEvent, null, 4);\r\n            console.log("WebSocket ERROR: " + error);\r\n            document.getElementById("btnConnect").disabled    = false;\r\n            document.getElementById("incomingMsgOutput").value += "error: Websocket connection failed" + "\\r\\n";\r\n            statusBadge.innerHTML = offline\r\n        };\r\n        webSocket.onmessage = function (messageEvent) {\r\n            var wsMsg = messageEvent.data;\r\n            if (typeof wsMsg === \'string\') {\r\n            \tif (wsMsg.indexOf("error:") == 0) {\r\n                \tdocument.getElementById("incomingMsgOutput").value += wsMsg + "\\r\\n";\r\n            \t} else {\r\n                \tdocument.getElementById("incomingMsgOutput").value += "echo message: " + wsMsg + "\\r\\n";\r\n            \t}\r\n            } else {\r\n                var arrayBuffer;\r\n                var fileReader = new FileReader();\r\n                fileReader.onload = function(event) {\r\n                    arrayBuffer = event.target.result;\r\n                    var data = new Uint8Array(arrayBuffer);\r\n                    document.getElementById("incomingMsgOutput").value += "received: " + data.length + " bytes\\r\\n";\r\n                    if (!streamingStarted) {\r\n                        appendToBuffer(arrayBuffer);\r\n                        streamingStarted=true;\r\n                        return;\r\n                    }\r\n                    queue.push(arrayBuffer); // add to the end\r\n                };\r\n                fileReader.readAsArrayBuffer(wsMsg);\r\n                /* NOTE: the web server has a idle-timeout of 60 seconds,\r\n                 so we need to send a keep-alive message regulary */\r\n                keepAliveCount++;\r\n                if (keepAliveCount >= 10 && webSocket.readyState == WebSocket.OPEN) {\r\n                    keepAliveCount = 0;\r\n                    webSocket.send("keep-alive");\r\n                }\r\n            }\r\n        };\r\n    } catch (exception) {\r\n        console.error(exception);\r\n    }\r\n}\r\n\r\n// Send a message to the WebSocket server\r\nfunction onSendClick() {\r\n    if (webSocket.readyState != WebSocket.OPEN) {\r\n        console.error("webSocket is not open: " + webSocket.readyState);\r\n        return;\r\n    }\r\n    var msg = document.getElementById("wsmessage").value;\r\n    webSocket.send(msg);\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"user-notifications",children:"User Notifications"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/Development/Javascript/2021-09-10--notifications-alerts-as-toast/2021-09-10",children:"Adding toast notifications with Notie.js"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"auto-reconnect-the-websocket",children:"Auto-Reconnect the Websocket"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/Development/Javascript/2021-09-10--websocket-recconects/2021-09-10",children:"Make sure that the connection is always re-established with ReconnectingWebsockets"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,o.ah)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>d});var t=r(667294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),d=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},l={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=d(r),m=o,v=p["".concat(c,".").concat(m)]||p[m]||l[m]||s;return r?t.createElement(v,i(i({ref:n},u),{},{components:r})):t.createElement(v,i({ref:n},u))}));u.displayName="MDXCreateElement"},577913:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-dd2c04030bd344a6c433c240ed2c2bba.jpg"},46599:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/ws_html_video_01-1248c1a608e0e7c871f0582d5017c3c2.png"}}]);