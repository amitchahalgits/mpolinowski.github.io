"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[32749],{3905:(n,e,t)=>{t.d(e,{Zo:()=>d,kt:()=>f});var a=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},o=Object.keys(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var l=a.createContext({}),p=function(n){var e=a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},d=function(n){var e=p(n.components);return a.createElement(l.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,l=n.parentName,d=s(n,["components","mdxType","originalType","parentName"]),u=p(t),f=r,c=u["".concat(l,".").concat(f)]||u[f]||m[f]||o;return t?a.createElement(c,i(i({ref:e},d),{},{components:t})):a.createElement(c,i({ref:e},d))}));function f(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:r,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},65333:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const o={sidebar_position:4670,slug:"2023-02-21",title:"Tensorflow 2 - An (Re)Introduction 2023 (2)",authors:"mpolinowski",tags:["Python","Machine Learning","Tensorflow"],description:"Tensor Indexing, Expanding and Manipulations"},i=void 0,s={unversionedId:"IoT-and-Machine-Learning/ML/2023-02-21-tensorflow-tensors-2/index",id:"IoT-and-Machine-Learning/ML/2023-02-21-tensorflow-tensors-2/index",title:"Tensorflow 2 - An (Re)Introduction 2023 (2)",description:"Tensor Indexing, Expanding and Manipulations",source:"@site/docs/IoT-and-Machine-Learning/ML/2023-02-21-tensorflow-tensors-2/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2023-02-21-tensorflow-tensors-2",slug:"/IoT-and-Machine-Learning/ML/2023-02-21-tensorflow-tensors-2/2023-02-21",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-02-21-tensorflow-tensors-2/2023-02-21",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2023-02-21-tensorflow-tensors-2/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Tensorflow",permalink:"/docs/tags/tensorflow"}],version:"current",sidebarPosition:4670,frontMatter:{sidebar_position:4670,slug:"2023-02-21",title:"Tensorflow 2 - An (Re)Introduction 2023 (2)",authors:"mpolinowski",tags:["Python","Machine Learning","Tensorflow"],description:"Tensor Indexing, Expanding and Manipulations"},sidebar:"tutorialSidebar",previous:{title:"Tensorflow 2 - An (Re)Introduction 2023 (3)",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-02-22-tensorflow-tensors-3/2023-02-22"},next:{title:"Tensorflow 2 - An (Re)Introduction 2023",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-02-19-tensorflow-introduction/2023-02-19"}},l={},p=[{value:"Tensorflow Fundamentals",id:"tensorflow-fundamentals",level:2},{value:"Indexing Tensors",id:"indexing-tensors",level:3},{value:"Expanding Tensors",id:"expanding-tensors",level:3},{value:"Manipulating Tensors",id:"manipulating-tensors",level:3},{value:"Changing the Datatype",id:"changing-the-datatype",level:3},{value:"Aggregation",id:"aggregation",level:3},{value:"Variance and Standard Deviation",id:"variance-and-standard-deviation",level:3},{value:"Positional Maximum and Minimum",id:"positional-maximum-and-minimum",level:3}],d={toc:p};function m(n){let{components:e,...o}=n;return(0,r.kt)("wrapper",(0,a.Z)({},d,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Guangzhou, China",src:t(27060).Z,width:"2830",height:"1272"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#tensorflow-fundamentals"},"Tensorflow Fundamentals"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#indexing-tensors"},"Indexing Tensors")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#expanding-tensors"},"Expanding Tensors")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#manipulating-tensors"},"Manipulating Tensors")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#changing-the-datatype"},"Changing the Datatype")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#aggregation"},"Aggregation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#variance-and-standard-deviation"},"Variance and Standard Deviation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#positional-maximum-and-minimum"},"Positional Maximum and Minimum"))))),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"See also:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Fun, fun, tensors: ",(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-02-19-tensorflow-introduction/2023-02-19"},"1"),", ",(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-02-21-tensorflow-tensors-2/2023-02-21"},"2"),", ",(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-02-22-tensorflow-tensors-3/2023-02-22"},"3")),(0,r.kt)("li",{parentName:"ul"},"Tensorflow 2 - Neural Network Regression: ",(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-02-23-tensorflow-neural-network-regression/2023-02-23"},"Building a Regression Model"))),(0,r.kt)("h2",{id:"tensorflow-fundamentals"},"Tensorflow Fundamentals"),(0,r.kt)("h3",{id:"indexing-tensors"},"Indexing Tensors"),(0,r.kt)("p",null,"To get an insight into what kind data a tensor contains we can visualize parts of it. For example get the first 2 elements of each dimension:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# tensor with 4 dimensions\nrank_4_tensor = tf.zeros(shape=[2, 3, 4, 5])\n# get 2 elements of each dimension\nprint(rank_4_tensor[:2, :2, :2, :2])\n# tf.Tensor(\n# [[[[0. 0.]\n#    [0. 0.]]\n\n#   [[0. 0.]\n#    [0. 0.]]]\n\n\n#  [[[0. 0.]\n#    [0. 0.]]\n\n#   [[0. 0.]\n#    [0. 0.]]]], shape=(2, 2, 2, 2), dtype=float32)\n")),(0,r.kt)("p",null,'Or, only retrieve the first element of all but the "x" dimension:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# get first element of all but the 4th dimension\nprint(rank_4_tensor[:1, :1, :1, :])\n# tf.Tensor([[[[0. 0. 0. 0. 0.]]]], shape=(1, 1, 1, 5), dtype=float32)\n\n# get first element of all but the 3rd dimension\nprint(rank_4_tensor[:1, :1, :, :1])\n# tf.Tensor(\n# [[[[0.]\n#    [0.]\n#    [0.]\n#    [0.]]]], shape=(1, 1, 4, 1), dtype=float32)\n\n# get first element of all but the 2nd dimension\nprint(rank_4_tensor[:1, :, :1, :1])\n# tf.Tensor(\n# [[[[0.]]\n\n#   [[0.]]\n\n#   [[0.]]]], shape=(1, 3, 1, 1), dtype=float32)\n\n\n# get first element of all but the 1st dimension\nprint(rank_4_tensor[:, :1, :1, :1])\n# tf.Tensor(\n# [[[[0.]]]\n\n\n#  [[[0.]]]], shape=(2, 1, 1, 1), dtype=float32)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# tensor with 2 dimensions\nrank_2_tensor = tf.constant([[44, 88], [22, 77]])\nprint(rank_2_tensor.ndim)\n# 2\n\n# show last element of each row\nprint(rank_2_tensor[:, -1])\n# tf.Tensor([88 77], shape=(2,), dtype=int32)\n")),(0,r.kt)("h3",{id:"expanding-tensors"},"Expanding Tensors"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"tf.newaxis")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# add dimension to tensor\nrank_3_tensor = rank_2_tensor[..., tf.newaxis]\n# dot notation equals: rank_2_tensor[:, :, tf.newaxis]\n\nprint(rank_2_tensor)\n# tf.Tensor(\n# [[44 88]\n#  [22 77]], shape=(2, 2), dtype=int32)\n\nprint(rank_3_tensor)\n# tf.Tensor(\n# [[[44]\n#   [88]]\n\n#  [[22]\n#   [77]]], shape=(2, 2, 1), dtype=int32)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"tf.expand_dims()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Expand the final axis (-1)\nrank_5_tensor = tf.expand_dims(rank_4_tensor, axis=-1)\nprint(rank_5_tensor.shape)\n# (2, 3, 4, 5, 1)\n\n# Expand the 0 axis\nrank_5_tensor = tf.expand_dims(rank_4_tensor, axis=0)\nprint(rank_5_tensor.shape)\n# (2, 3, 4, 5, 1)\n")),(0,r.kt)("h3",{id:"manipulating-tensors"},"Manipulating Tensors"),(0,r.kt)("p",null,"Basic tensor operations ",(0,r.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"/"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# tensor manipulation\noriginal_tensor = tf.constant([[44, 66], [33, 77]])\n\ntensor_add = original_tensor + 4\nprint(tensor_add)\n# tf.Tensor(\n# [[48 70]\n#  [37 81]], shape=(2, 2), dtype=int32)\n\ntensor_subtract = original_tensor - 4\nprint(tensor_subtract)\n# tf.Tensor(\n# [[40 62]\n#  [29 73]], shape=(2, 2), dtype=int32)\n\ntensor_multiply = original_tensor * 99\nprint(tensor_multiply)\n# tf.Tensor(\n# [[4356 6534]\n#  [3267 7623]], shape=(2, 2), dtype=int32)\n")),(0,r.kt)("p",null,"To be able to use GPU acceleration we should use the ",(0,r.kt)("inlineCode",{parentName:"p"},"tf.math()")," functions instead:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"print(tf.multiply(original_tensor, 99))\n# tf.Tensor(\n# [[4356 6534]\n#  [3267 7623]], shape=(2, 2), dtype=int32)\n")),(0,r.kt)("h3",{id:"changing-the-datatype"},"Changing the Datatype"),(0,r.kt)("p",null,"Reducing the precision of your data to speed up a training:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# reducing precision 32 -> 16\ntensor_float_16 = tf.cast(tensor_float, dtype=tf.float16)\nprint(tensor_float_16.dtype)\n# <dtype: 'float16'>\n")),(0,r.kt)("p",null,"Increasing precision to minimize rounding error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# increasing precision\ntensor_int = tf.constant([9, 14])\nprint(tensor_int)\n# tf.Tensor([ 9 14], shape=(2,), dtype=int32)\n\ntensor_int_to_float_16 = tf.cast(tensor_int, dtype=tf.float16)\nprint(tensor_int_to_float_16)\n# tf.Tensor([ 9. 14.], shape=(2,), dtype=float16)\n\ntensor_division = tf.divide(tensor_int_to_float_16, tensor_float_16)\nprint(tensor_division)\n# tf.Tensor([0.9854 1.007 ], shape=(2,), dtype=float16)\n")),(0,r.kt)("h3",{id:"aggregation"},"Aggregation"),(0,r.kt)("p",null,"Get the ",(0,r.kt)("strong",{parentName:"p"},"absolute values")," of all elements inside a tensor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# aggregation\ntensor_random = tf.constant(np.random.randint(-100, 100, size=42))\nprint(tensor_random)\n# tf.Tensor(\n# [-32 -45  41 -23  -6 -66  90  63   1 -74 -66 -92  99  19 -97  94  50  51\n#  -69 -60 -15  24  33  10 -86  74  92  55  95  30  91   7  44  55  35 -82\n#   38  99  93 -92 -39  21], shape=(42,), dtype=int64)\n\n## show absolute value\nprint(tf.abs(tensor_random))\n# tf.Tensor(\n# [32 45 41 23  6 66 90 63  1 74 66 92 99 19 97 94 50 51 69 60 15 24 33 10\n#  86 74 92 55 95 30 91  7 44 55 35 82 38 99 93 92 39 21], shape=(42,), dtype=int64)\n")),(0,r.kt)("p",null,"Get the ",(0,r.kt)("strong",{parentName:"p"},"minimum value"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"## show minimum value\nprint(tf.reduce_min(tensor_random))\n# tf.Tensor(-97, shape=(), dtype=int64)\n")),(0,r.kt)("p",null,"Get the ",(0,r.kt)("strong",{parentName:"p"},"maximum value"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"## show maximum value\nprint(tf.reduce_max(tensor_random))\n# tf.Tensor(99, shape=(), dtype=int64)\n")),(0,r.kt)("p",null,"Get the ",(0,r.kt)("strong",{parentName:"p"},"mean of all elements")," of a tensor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"## show mean value\nprint(tf.reduce_mean(tensor_random))\n# tf.Tensor(10, shape=(), dtype=int64)\n")),(0,r.kt)("p",null,"Get the ",(0,r.kt)("strong",{parentName:"p"},"sum of all elements")," of a tensor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"## show sum\nprint(tf.reduce_sum(tensor_random))\n# tf.Tensor(460, shape=(), dtype=int64)\n")),(0,r.kt)("h3",{id:"variance-and-standard-deviation"},"Variance and Standard Deviation"),(0,r.kt)("p",null,"Calculating the ",(0,r.kt)("strong",{parentName:"p"},"Standard Deviation")," and ",(0,r.kt)("strong",{parentName:"p"},"Variance")," of a tensor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"import tensorflow_probability as tfp\n\n## calculate variance\nprint(tf.math.reduce_variance(tf.cast(tensor_random, dtype=tf.float16))) # needs type float\nprint(tfp.stats.variance(tensor_random))\n# tf.Tensor(3921.0, shape=(), dtype=float16)\n# tf.Tensor(3921, shape=(), dtype=int64)\n\n## calculate standard deviation\nprint(tf.math.reduce_std(tf.cast(tensor_random, dtype=tf.float16))) # needs type float\nprint(tfp.stats.stddev(tf.cast(tensor_random, dtype=tf.float16))) # needs type float\n# tf.Tensor(62.62, shape=(), dtype=float16)\n# tf.Tensor(62.62, shape=(), dtype=float16)\n")),(0,r.kt)("h3",{id:"positional-maximum-and-minimum"},"Positional Maximum and Minimum"),(0,r.kt)("p",null,"Before we determined the highest value within a tensor. But we often also need to determine the position as well, e.g."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Probabilities"),(0,r.kt)("th",{parentName:"tr",align:null},"class A"),(0,r.kt)("th",{parentName:"tr",align:null},"class B"),(0,r.kt)("th",{parentName:"tr",align:null},"class C"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Input A"),(0,r.kt)("td",{parentName:"tr",align:null},"0.9982"),(0,r.kt)("td",{parentName:"tr",align:null},"0.0011"),(0,r.kt)("td",{parentName:"tr",align:null},"0.3456")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Input B"),(0,r.kt)("td",{parentName:"tr",align:null},"0.0011"),(0,r.kt)("td",{parentName:"tr",align:null},"0.9982"),(0,r.kt)("td",{parentName:"tr",align:null},"0.3456")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Input C"),(0,r.kt)("td",{parentName:"tr",align:null},"0.3456"),(0,r.kt)("td",{parentName:"tr",align:null},"0.0011"),(0,r.kt)("td",{parentName:"tr",align:null},"0.9982")))),(0,r.kt)("p",null,"This table assigns probabilities to inputs how likely it is that they belong to a label (class). Here we need to extract the highest probability and also it's position within the matrix to make the assignment."),(0,r.kt)("p",null,"Let's create a tensor with a fixed seed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# positional maximum & minimum\ntf.random.set_seed(42)\ntensor_const_seed = tf.random.uniform(shape=[42])\nprint(tensor_const_seed)\n# tf.Tensor(\n# [0.6645621  0.44100678 0.3528825  0.46448255 0.03366041 0.68467236\n#  0.74011743 0.8724445  0.22632635 0.22319686 0.3103881  0.7223358\n#  0.13318717 0.5480639  0.5746088  0.8996835  0.00946367 0.5212307\n#  0.6345445  0.1993283  0.72942245 0.54583454 0.10756552 0.6767061\n#  0.6602763  0.33695042 0.60141766 0.21062577 0.8527372  0.44062173\n#  0.9485276  0.23752594 0.81179297 0.5263394  0.494308   0.21612847\n#  0.8457197  0.8718841  0.3083862  0.6868038  0.23764038 0.7817228 ], shape=(42,), dtype=float32)\n")),(0,r.kt)("p",null,"The element with the maximum value ",(0,r.kt)("strong",{parentName:"p"},"0.9485276")," is in position ",(0,r.kt)("strong",{parentName:"p"},"30"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"## find positional maximum\nprint(tf.reduce_max(tensor_const_seed))\nprint(tf.argmax(tensor_const_seed))\n# tf.Tensor(0.9485276, shape=(), dtype=float32)\n# tf.Tensor(30, shape=(), dtype=int64)\n")),(0,r.kt)("p",null,"The element with the minimum value ",(0,r.kt)("strong",{parentName:"p"},"0.009463668")," is in position ",(0,r.kt)("strong",{parentName:"p"},"16"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"## find positional minimum\nprint(tf.reduce_min(tensor_const_seed))\nprint(tf.argmin(tensor_const_seed))\n# tf.Tensor(0.009463668, shape=(), dtype=float32)\n# tf.Tensor(16, shape=(), dtype=int64)\n")),(0,r.kt)("p",null,"We can also use the positional index to find the corresponding value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"## find value by position index\nprint(tensor_const_seed[tf.argmax(tensor_const_seed)])\nprint(tensor_const_seed[tf.argmin(tensor_const_seed)])\n# tf.Tensor(0.9485276, shape=(), dtype=float32)\n# tf.Tensor(0.009463668, shape=(), dtype=float32\n")))}m.isMDXComponent=!0},27060:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-f80e63ee872dae25129198058ac93b4e.jpg"}}]);