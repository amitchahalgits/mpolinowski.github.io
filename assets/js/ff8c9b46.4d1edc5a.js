"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[75155],{116241:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=r(785893),t=r(603905);const i={sidebar_position:3864,slug:"2023-12-22",title:"Hashicorp Terraform - Docker Provider 2024",authors:"mpolinowski",tags:["Terraform","LINUX"],description:"Build, change, and destroy Docker infrastructure using Terraform."},s=void 0,o={id:"DevOps/Hashicorp/2023-12-22-hashicorp-terraform-docker-2024/index",title:"Hashicorp Terraform - Docker Provider 2024",description:"Build, change, and destroy Docker infrastructure using Terraform.",source:"@site/docs/DevOps/Hashicorp/2023-12-22-hashicorp-terraform-docker-2024/index.md",sourceDirName:"DevOps/Hashicorp/2023-12-22-hashicorp-terraform-docker-2024",slug:"/DevOps/Hashicorp/2023-12-22-hashicorp-terraform-docker-2024/2023-12-22",permalink:"/docs/DevOps/Hashicorp/2023-12-22-hashicorp-terraform-docker-2024/2023-12-22",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2023-12-22-hashicorp-terraform-docker-2024/index.md",tags:[{label:"Terraform",permalink:"/docs/tags/terraform"},{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:3864,frontMatter:{sidebar_position:3864,slug:"2023-12-22",title:"Hashicorp Terraform - Docker Provider 2024",authors:"mpolinowski",tags:["Terraform","LINUX"],description:"Build, change, and destroy Docker infrastructure using Terraform."},sidebar:"tutorialSidebar",previous:{title:"Opentofu vs Hashicorp Terraform",permalink:"/docs/DevOps/Hashicorp/2023-12-23-opentofu-vs-terraform/2023-12-22"},next:{title:"Hashicorp Terraform - Docker Provider 2023",permalink:"/docs/DevOps/Hashicorp/2023-10-22-hashicorp-terraform-docker-2023/2023-10-22"}},l={},c=[{value:"Installation Linux",id:"installation-linux",level:2},{value:"Get Started - Docker",id:"get-started---docker",level:2},{value:"Hello World",id:"hello-world",level:3},{value:"Deployment Variables",id:"deployment-variables",level:3},{value:"Variables by String Input",id:"variables-by-string-input",level:4},{value:".tfvsrs File",id:"tfvsrs-file",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Variables Precedence",id:"variables-precedence",level:4},{value:"Query Data with Outputs",id:"query-data-with-outputs",level:3},{value:"Destroy Infrastructure",id:"destroy-infrastructure",level:3},{value:"Real World",id:"real-world",level:2},{value:"ntfy Server",id:"ntfy-server",level:3},{value:"Run the Container",id:"run-the-container",level:4}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.ah)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Shen Zhen, China",src:r(984086).Z+"",width:"2230",height:"839"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#installation-linux",children:"Installation Linux"})}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#get-started---docker",children:"Get Started - Docker"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#hello-world",children:"Hello World"})}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#deployment-variables",children:"Deployment Variables"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#variables-by-string-input",children:"Variables by String Input"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#tfvsrs-file",children:".tfvsrs File"})}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#environment-variables",children:"Environment Variables"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#variables-precedence",children:"Variables Precedence"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#query-data-with-outputs",children:"Query Data with Outputs"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#destroy-infrastructure",children:"Destroy Infrastructure"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#real-world",children:"Real World"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#ntfy-server",children:"ntfy Server"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#run-the-container",children:"Run the Container"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Back to Terraform!"}),"\n",(0,a.jsxs)(n.p,{children:["I have been experimenting with Terraform as a provider for containerized apps ",(0,a.jsx)(n.a,{href:"/docs/DevOps/Hashicorp/2023-10-22-hashicorp-terraform-docker-2023/2023-10-22",children:"before"})," but got distracted... this is probably going to be largely a repeat of what I did last time... so let's see where I left off."]}),"\n",(0,a.jsx)(n.h2,{id:"installation-linux",children:"Installation Linux"}),"\n",(0,a.jsx)(n.p,{children:"I already installed Terraform but it is now outdated:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"terraform version\nTerraform v1.6.2\non linux_amd64\n\nYour version of Terraform is out of date! The latest version\nis 1.7.1. You can update by downloading from https://www.terraform.io/downloads.html\n"})}),"\n",(0,a.jsx)(n.p,{children:"So let's update:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"wget https://releases.hashicorp.com/terraform/1.7.1/terraform_1.7.1_linux_amd64.zip\nwget https://releases.hashicorp.com/terraform/1.7.1/terraform_1.7.1_SHA256SUMS\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"sha256sum terraform_1.7.1_linux_amd64.zip\nsha256sum -c terraform_1.7.1_SHA256SUMS\n\n> terraform_1.7.1_linux_amd64.zip: OK\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"unzip terraform_1.7.1_linux_amd64.zip\nrm terraform_1.7.1_linux_amd64.zip\n\nsudo mv terraform /usr/bin/terraform\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"terraform version\nTerraform v1.7.1\non linux_amd64\n"})}),"\n",(0,a.jsx)(n.h2,{id:"get-started---docker",children:"Get Started - Docker"}),"\n",(0,a.jsx)(n.p,{children:"Build, change, and destroy Docker infrastructure using Terraform. Step-by-step, command-line tutorials will walk you through the Terraform basics for the first time."}),"\n",(0,a.jsx)(n.h3,{id:"hello-world",children:"Hello World"}),"\n",(0,a.jsxs)(n.p,{children:["Create a file ",(0,a.jsx)(n.code,{children:"main.tf"})," inside a sub-dir (all job files need to be located in their own directory):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'terraform {\n  required_providers {\n    docker = {\n      source  = "kreuzwerker/docker"\n      version = "~> 3.0.2"\n    }\n  }\n}\n\nprovider "docker" {}\n\nresource "docker_image" "nginx" {\n  name         = "nginx:latest"\n  keep_locally = false\n}\n\nresource "docker_container" "nginx" {\n  image = docker_image.nginx.image_id\n  name  = "tutorial"\n  ports {\n    internal = 80\n    external = 8000\n  }\n}\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"terraform fmt\n> main.tf\n\nterraform validate\n> Error: Missing required provider\n> \n> This configuration requires provider registry.terraform.io/kreuzwerker/docker, but that provider > isn't available. You may be able to install it automatically by running: terraform init\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'terraform init\n\n> Initializing provider plugins...\n> - Finding kreuzwerker/docker versions matching "~> 3.0.1"...\n> - Installing kreuzwerker/docker v3.0.2...\n> - Installed kreuzwerker/docker v3.0.2 (self-signed, key ID BD080C4571C6104C)\n\n> Terraform has been successfully initialized!\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"terraform validate\n> Success! The configuration is valid.\n"})}),"\n",(0,a.jsx)(n.p,{children:"Provision the NGINX server container with apply. When Terraform asks you to confirm, type yes and press ENTER:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"terraform apply\n> Apply complete! Resources: 2 added, 0 changed, 0 destroyed.\n"})}),"\n",(0,a.jsx)(n.p,{children:"Inspect the current state using:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"terraform show\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"terraform state list\n> docker_container.nginx\n> docker_image.nginx\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Run ",(0,a.jsx)(n.code,{children:"docker ps"})," to view the NGINX container running in Docker via Terraform:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker ps\n\nCONTAINER ID   IMAGE          STATUS         PORTS                  NAMES\ndbf501b456a2   a8758716bb6a   Up 3 minutes   0.0.0.0:8000->80/tcp   tutorial\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"curl localhost:8000\n\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n...\n"})}),"\n",(0,a.jsx)(n.h3,{id:"deployment-variables",children:"Deployment Variables"}),"\n",(0,a.jsxs)(n.p,{children:["Change the ",(0,a.jsx)(n.code,{children:"docker_container.nginx"})," resource under the provider block in ",(0,a.jsx)(n.code,{children:"main.tf"})," by replacing the ",(0,a.jsx)(n.code,{children:"ports.external"})," value of ",(0,a.jsx)(n.code,{children:"8000"})," with ",(0,a.jsx)(n.code,{children:"8888"})," and choose a different name for the container. But to make it a bit more interesting ~ let's use variables to define default values."]}),"\n",(0,a.jsxs)(n.p,{children:["Create a new file called ",(0,a.jsx)(n.code,{children:"variables.tf"})," with a block defining our variables:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'variable "ingress_image_version" {\n    description = "Version of the NGINX ingress image"\n    type = string\n    default = "nginx:latest"\n}\n\nvariable "ingress_http_external" {\n    description = "External http port of the NGINX ingress"\n    type = number\n    default = 8080\n}\n\nvariable "ingress_http_internal" {\n    description = "Internal http port of the NGINX ingress"\n    type = number\n    default = 80\n}\n\nvariable "ingress_container_name" {\n    description = "Name of the NGINX ingress container"\n    type = string\n    default = "ingress"\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["These values will now be used if no value is provided, e.g. ",(0,a.jsx)(n.code,{children:'terraform apply -var "ingress_image_version=nginx:alpine"'})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'resource "docker_image" "nginx" {\n  name         = var.ingress_image_version\n  keep_locally = false\n}\n\nresource "docker_container" "nginx" {\n  image = docker_image.nginx.image_id\n  name  = var.ingress_container_name\n  ports {\n    internal = var.ingress_http_internal\n    external = var.ingress_http_external\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["After changing the configuration, run ",(0,a.jsx)(n.code,{children:"terraform apply"})," again to see how Terraform will apply this change to the existing resources:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'terraform validate\n> Success! The configuration is valid.\n\nterraform apply -var "ingress_image_version=nginx:alpine"\n> Apply complete! Resources: 2 added, 0 changed, 2 destroyed.\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker ps\n\nCONTAINER ID   IMAGE          STATUS         PORTS                   NAMES\nf6e5cfed277c   a8758716bb6a   Up 17 seconds  0.0.0.0:8888->80/tcp    ingress\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker images\nREPOSITORY           TAG       IMAGE ID       CREATED        SIZE\nnginx                alpine    2b70e4aaac6b   3 months ago   42.6MB\n"})}),"\n",(0,a.jsx)(n.h4,{id:"variables-by-string-input",children:"Variables by String Input"}),"\n",(0,a.jsx)(n.p,{children:"Remove the default value to force a user input when the job is started:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'variable "ingress_http_external" {\n    description = "External http port of the NGINX ingress"\n    type = number\n}\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"terraform apply\n\nvar.ingress_http_external\n  External http port of the NGINX ingress\n\n  Enter a value:\n"})}),"\n",(0,a.jsx)(n.h3,{id:"tfvsrs-file",children:".tfvsrs File"}),"\n",(0,a.jsxs)(n.p,{children:["Instead of specifying the variables inside the variables file we can create a ",(0,a.jsx)(n.code,{children:"terraform.tfvars"})," file with all the information. We still need to instantiate the variable inside ",(0,a.jsx)(n.code,{children:"variables.tf"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'variable "ingress_image_version" {\n    description = "Version of the NGINX ingress image"\n    type = string\n}\n\nvariable "ingress_http_external" {\n    description = "External http port of the NGINX ingress"\n    type = number\n}\n\nvariable "ingress_http_internal" {\n    description = "Internal http port of the NGINX ingress"\n    type = number\n}\n\nvariable "ingress_container_name" {\n    description = "Name of the NGINX ingress container"\n    type = string\n} \n'})}),"\n",(0,a.jsxs)(n.p,{children:["But all the user editable information will be inside the ",(0,a.jsx)(n.code,{children:"terraform.tfvars"})," file:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'ingress_image_version="nginx:latest"\ningress_http_external=8888\ningress_http_internal=80\ningress_container_name= "ingress"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,a.jsx)(n.p,{children:"To avoid leaking - e.g. credentials - to your source management system you can use environment variables instead of adding those values to your tf code. In the following example I edited the hostname and external port that Docker should use for my container:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'resource "docker_container" "nginx" {\n  image    = docker_image.nginx.image_id\n  name     = var.container_name\n  hostname = var.HOSTNAME\n  ports {\n    internal = 80\n    external = var.EXT_PORT\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["These variables need to be declared in the ",(0,a.jsx)(n.code,{children:"variables.tf"})," file:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'variable "HOSTNAME" {\n  description = "Name of the Docker host"\n  type        = string\n}\n\nvariable "EXT_PORT" {\n  description = "External port forwarded to the ingress container"\n  type        = string\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Now export the values you want to set for those variables from your terminal:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"export TF_VAR_HOSTNAME=docker_hostname\nexport TF_VAR_EXT_PORT=7777\n"})}),"\n",(0,a.jsx)(n.p,{children:"Apply the changes and verify that the container is now using the new external port:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"terraform apply\ndocker ps\n\nCONTAINER ID   IMAGE          STATUS        PORTS                   NAMES\n5cd4ef649771   bc649bab30d1   Up 5 seconds  0.0.0.0:7777--\x3e80/tcp   nginx-ingress\n"})}),"\n",(0,a.jsx)(n.h4,{id:"variables-precedence",children:"Variables Precedence"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-var"})," and ",(0,a.jsx)(n.code,{children:"-var-file"})," option for ",(0,a.jsx)(n.code,{children:"terraform apply"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"*.auto.tfvars"})," | ",(0,a.jsx)(n.code,{children:"*.auto.tfvars.json"})]}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"terraform.tfvars.json"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"terraform.tfvars"})}),"\n",(0,a.jsx)(n.li,{children:"Environment variables"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"query-data-with-outputs",children:"Query Data with Outputs"}),"\n",(0,a.jsxs)(n.p,{children:["Create a file called ",(0,a.jsx)(n.code,{children:"outputs.tf"})," and add the configuration below to define outputs for your container's ID and the image ID:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'output "container_id" {\n  description = "ID of the Docker container"\n  value       = docker_container.nginx.id\n}\n\noutput "image_id" {\n  description = "ID of the Docker image"\n  value       = docker_image.nginx.id\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You must apply this configuration before you can use these output values. Apply your configuration now. Respond to the confirmation prompt with ",(0,a.jsx)(n.code,{children:"yes"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'terraform apply\n\nApply complete! Resources: 2 added, 0 changed, 2 destroyed.\n\nOutputs:\n\ncontainer_id = "bec760237e437fb6ed8fe31c57fbfa5b3620f5684e7687d853c86a7049161907"\nimage_id = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6nginx:latest"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Terraform prints output values to the screen when you apply your configuration. Query the outputs with the ",(0,a.jsx)(n.code,{children:"terraform output"})," command."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'container_id = "bec760237e437fb6ed8fe31c57fbfa5b3620f5684e7687d853c86a7049161907"\nimage_id = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6nginx:latest"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"destroy-infrastructure",children:"Destroy Infrastructure"}),"\n",(0,a.jsx)(n.p,{children:"To stop the container and destroy the resources created in this tutorial, run terraform destroy. When Terraform asks you to confirm, type yes and press ENTER:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"terraform destroy\nDestroy complete! Resources: 2 destroyed.\n"})}),"\n",(0,a.jsx)(n.h2,{id:"real-world",children:"Real World"}),"\n",(0,a.jsx)(n.h3,{id:"ntfy-server",children:"ntfy Server"}),"\n",(0,a.jsxs)(n.p,{children:["Let's try to deploy ",(0,a.jsx)(n.a,{href:"/docs/DevOps/Provisioning/2024-01-17--ntfy-notification-service/2024-01-17",children:"ntfy"})," using Terraform. The Docker-Compose file for it looks like this:"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"docker-compose.yml"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yml",children:'version: "3"\n\nservices:\n  ntfy:\n    image: binwiederhier/ntfy\n    container_name: ntfy\n    command:\n      - serve\n    environment:\n      - TZ=UTC    # optional: set desired timezone\n    user: 1002:1002 # replace with the user/group or uid/gid\n    volumes:\n      - ./cache:/var/cache/ntfy\n      - ./config:/etc/ntfy\n      - ./db:/var/lib/ntfy/\n    ports:\n      - 8000:80 # exposed on port 8000 (you can change it)\n    restart: unless-stopped\n'})}),"\n",(0,a.jsxs)(n.p,{children:["There are a lot more parameters in here that need to be added - ",(0,a.jsx)(n.a,{href:"https://registry.terraform.io/providers/kreuzwerker/docker/latest/docs",children:"see Terraform Docs"}),":"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"./variables.tf"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'variable "image_version" {\n  description = "Version of the ntfy Docker image"\n  type        = string\n}\n\nvariable "container_name" {\n  description = "Name of the ntfy Docker container"\n  type        = string\n}\n\nvariable "http_internal" {\n  description = "Internal http port of the nfty service"\n  type        = number\n}\n\nvariable "http_external" {\n  description = "External http port of the nfty service"\n  type        = number\n}\n\n// variable "volume_mounts" {\n//   description = "List of all the volume mounts"\n//   type        = list(any)\n//   default = [\n//     {\n//       volume_name    = "cache"\n//       host_path      = "/opt/nfty/cache/"\n//       container_path = "/var/cache/ntfy/"\n//       type           = "bind"\n//       read_only      = false\n//     },\n//     {\n//       volume_name    = "user_db"\n//       host_path      = "/opt/nfty/lib/"\n//       container_path = "/var/lib/ntfy/"\n//       type           = "bind"\n//       read_only      = false\n//     },\n//     {\n//       volume_name    = "log"\n//       host_path      = "/opt/nfty/log/"\n//       container_path = "/var/log/"\n//       type           = "bind"\n//       read_only      = false\n//     }\n//   ]\n// }\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"./terraform.tfvars"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'image_version  = "binwiederhier/ntfy:latest"\ncontainer_name = "ntfy"\nhttp_internal  = 80\nhttp_external  = 8080\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"./main.tf"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'terraform {\n  required_providers {\n    docker = {\n      source  = "kreuzwerker/docker"\n      version = "~> 3.0.1"\n    }\n  }\n}\n\nprovider "docker" {}\n\nresource "docker_image" "ntfy" {\n  name         = var.image_version\n  keep_locally = false\n}\n\nresource "docker_container" "ntfy" {\n  image    = docker_image.ntfy.image_id\n  name     = var.container_name\n  user     = "1002:1002"\n  start    = true\n  must_run = true\n  restart  = "unless-stopped"\n\n  ports {\n    internal = var.http_internal\n    external = var.http_external\n  }\n\n  command = [\n    "serve"\n  ]\n\n  env = [\n    "TZ=UTC"\n  ]\n\n  // dynamic "volumes" {\n  //   for_each = var.volume_mounts\n  //   iterator = each\n  //   content {\n  //     volume_name    = each.value.volume_name\n  //     host_path      = each.value.host_path\n  //     container_path = each.value.container_path\n  //     read_only      = each.value.read_only\n  //   }\n  // }\n\n    upload {\n    file = "/var/cache/ntfy/cache.db"\n    source = "./cache/cache.db"\n  }\n\n  upload {\n    file = "/var/lib/ntfy/user.db"\n    source = "./lib/user.db"\n  }\n\n  upload {\n    content = <<EOF\nbase-url: "http://192.168.2.112"\nlisten-http: ":80"\ncache-file: "/var/cache/ntfy/cache.db"\ncache-duration: "12h"\nauth-file: /var/lib/ntfy/user.db\nauth-default-access: "deny-all"\nbehind-proxy: false\nattachment-cache-dir: "/var/cache/ntfy/attachments"\nattachment-total-size-limit: "5G"\nattachment-file-size-limit: "15M"\nattachment-expiry-duration: "3h"\nweb-root: /ntfy\nenable-signup: false\nenable-login: true\nenable-reservations: true\nlog-level: info\nlog-format: json\nlog-file: /var/log/ntfy.log\n      EOF\n\n    file = "/etc/ntfy/server.yml"\n  }\n\n  healthcheck {\n    test     = ["CMD", "curl", "-f", "http://localhost:8080/ntfy"]\n    interval = "15s"\n    timeout  = "2s"\n    retries  = 5\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"I was not able to get the volume mounts to work. I guess that Terraform handles the file system similar to Nomad - which means that you would have to configure Terraform to access the file system instead of being locked in inside the Docker overlay. But I cannot find any documentation for it."}),"\n",(0,a.jsxs)(n.p,{children:["So I replaced all volume mounts with file uploads. ",(0,a.jsx)(n.strong,{children:"Note"})," that you have to start ",(0,a.jsx)(n.code,{children:"ntfy"})," once and create your users, subscriptions and permissions. Then copy the ",(0,a.jsx)(n.code,{children:"cache.db"})," and ",(0,a.jsx)(n.code,{children:"user.db"})," to where you want to Terraform to pick them up on your next deployment."]}),"\n",(0,a.jsx)(n.h4,{id:"run-the-container",children:"Run the Container"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"terraform init\n> Terraform has been successfully initialized!\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"terraform fmt\n> main.tf\n> terraform.tfvars\n> variables.tf\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"terraform validate\n> Success! The configuration is valid.\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"terraform apply\n> Apply complete! Resources: 1 added, 0 changed, 0 destroyed.\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"terraform destroy\n> Destroy complete! Resources: 2 destroyed.\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.ah)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>c});var a=r(667294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var l=a.createContext({}),c=function(e){var n=a.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,i=e.originalType,l=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),p=c(r),u=t,m=p["".concat(l,".").concat(u)]||p[u]||d[u]||i;return r?a.createElement(m,s(s({ref:n},h),{},{components:r})):a.createElement(m,s({ref:n},h))}));h.displayName="MDXCreateElement"},984086:(e,n,r)=>{r.d(n,{Z:()=>a});const a=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"}}]);