"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[30878],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>m});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),p=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},c=function(e){var a=p(e.components);return n.createElement(s.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return t?n.createElement(f,i(i({ref:a},c),{},{components:t})):n.createElement(f,i({ref:a},c))}));function m(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},96989:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=t(87462),r=(t(67294),t(3905));const o={sidebar_position:4290,slug:"2023-08-02",title:"Tensorflow Image Classifier - Data Pre-processing",authors:"mpolinowski",tags:["Python","Machine Learning"],description:"Blue print image classifier using Tensorflow and Keras Applications pre-trained models"},i=void 0,l={unversionedId:"IoT-and-Machine-Learning/ML/2023-08-02-tensorflow-i-know-flowers-preprocessing/index",id:"IoT-and-Machine-Learning/ML/2023-08-02-tensorflow-i-know-flowers-preprocessing/index",title:"Tensorflow Image Classifier - Data Pre-processing",description:"Blue print image classifier using Tensorflow and Keras Applications pre-trained models",source:"@site/docs/IoT-and-Machine-Learning/ML/2023-08-02-tensorflow-i-know-flowers-preprocessing/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2023-08-02-tensorflow-i-know-flowers-preprocessing",slug:"/IoT-and-Machine-Learning/ML/2023-08-02-tensorflow-i-know-flowers-preprocessing/2023-08-02",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-08-02-tensorflow-i-know-flowers-preprocessing/2023-08-02",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2023-08-02-tensorflow-i-know-flowers-preprocessing/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"}],version:"current",sidebarPosition:4290,frontMatter:{sidebar_position:4290,slug:"2023-08-02",title:"Tensorflow Image Classifier - Data Pre-processing",authors:"mpolinowski",tags:["Python","Machine Learning"],description:"Blue print image classifier using Tensorflow and Keras Applications pre-trained models"},sidebar:"tutorialSidebar",previous:{title:"Tensorflow Image Classifier - Data-efficient Image Transformers",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-08-03-tensorflow-i-know-flowers-deit/2023-08-03"},next:{title:"Tensorflow Image Classifier - Introduction",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-08-01-tensorflow-i-know-flowers-intro/2023-08-01"}},s={},p=[{value:"Image Dataset Preparation",id:"image-dataset-preparation",level:2},{value:"Get Image Dataset from Local Directory",id:"get-image-dataset-from-local-directory",level:2},{value:"Resize to 224,224,3",id:"resize-to-2242243",level:3},{value:"Train Test Split",id:"train-test-split",level:3}],c={toc:p};function u(e){let{components:a,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,o,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Angkor Wat, Cambodia",src:t(40309).Z,width:"1500",height:"706"})),(0,r.kt)("h1",{id:"tf-image-classifier"},"Tf Image Classifier"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://mpolinowski.github.io/docs/IoT-and-Machine-Learning/ML/2023-08-01-tensorflow-i-know-flowers-intro/2023-08-01"},"Overview - Model Evaluation & Deployment"))),(0,r.kt)("h2",{id:"image-dataset-preparation"},"Image Dataset Preparation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from glob import glob\nimport matplotlib.pyplot as plt\nimport os\nfrom skimage import (\n    io,\n    color,\n    exposure,\n    transform,\n    feature\n)\nfrom sklearn.model_selection import train_test_split\nimport splitfolders # pip install split-folders\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"SEED = 42\n")),(0,r.kt)("h2",{id:"get-image-dataset-from-local-directory"},"Get Image Dataset from Local Directory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"data_dir = os.listdir('../dataset/Flower_Dataset/complete')\nprint(data_dir)\n# ['Gladiolus', 'Adenium', 'Alpinia_Purpurata', 'Alstroemeria', 'Amaryllis', 'Anthurium_Andraeanum', 'Antirrhinum', 'Aquilegia', 'Billbergia_Pyramidalis', 'Cattleya', 'Cirsium', 'Coccinia_Grandis', 'Crocus', 'Cyclamen', 'Dahlia', 'Datura_Metel', 'Dianthus_Barbatus', 'Digitalis', 'Echinacea_Purpurea', 'Echinops_Bannaticus', 'Fritillaria_Meleagris', 'Gaura', 'Gazania', 'Gerbera', 'Guzmania', 'Helianthus_Annuus', 'Iris_Pseudacorus', 'Leucanthemum', 'Malvaceae', 'Narcissus_Pseudonarcissus', 'Nerine', 'Nymphaea_Tetragona', 'Paphiopedilum', 'Passiflora', 'Pelargonium', 'Petunia', 'Platycodon_Grandiflorus', 'Plumeria', 'Poinsettia', 'Primula', 'Protea_Cynaroides', 'Rose', 'Rudbeckia', 'Strelitzia_Reginae', 'Tropaeolum_Majus', 'Tussilago', 'Viola', 'Zantedeschia_Aethiopica']\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"glob('../dataset/Flower_Dataset/complete/{}/*.jpg'.format('Viola'))\n\n# ['../dataset/Flower_Dataset/complete/Viola/Viola_185.jpg',\n#  '../dataset/Flower_Dataset/complete/Viola/Viola_186.jpg',\n#  '../dataset/Flower_Dataset/complete/Viola/Viola_187.jpg',\n#  ...\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"all_files = []\nfor subfolder in data_dir:\n    all_files += glob('../dataset/Flower_Dataset/complete/{}/*.jpg'.format(subfolder))\n    \nlen(all_files)\n# 12278\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"data_collection = io.ImageCollection(all_files)\ndata_collection.files\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"len(data_collection)\n")),(0,r.kt)("h3",{id:"resize-to-2242243"},"Resize to 224,224,3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"c = 0\n\nfor image in data_collection:\n    # print(data_collection.files[c]) # debug file read errors\n    img_ori = io.imread(data_collection.files[c], as_gray=False)\n    img_thumb = transform.resize(img_ori, output_shape=(224, 224, 3), anti_aliasing=True)\n    plt.imsave(data_collection.files[c], img_thumb)\n    c = c + 1\n")),(0,r.kt)("h3",{id:"train-test-split"},"Train Test Split"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'input_folder = "../dataset/Flower_Dataset/complete"\noutput_folder = "../dataset/Flower_Dataset/split"\n\nsplitfolders.ratio(input_folder, output=output_folder, seed=SEED, ratio=(.75, .25))\n')))}u.isMDXComponent=!0},40309:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-4b4c922f390788acb724c3c274da1ef9.jpg"}}]);