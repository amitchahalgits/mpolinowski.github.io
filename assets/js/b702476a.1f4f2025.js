"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[31365],{3905:(t,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>g});var e=n(67294);function l(t,a,n){return a in t?Object.defineProperty(t,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[a]=n,t}function r(t,a){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);a&&(e=e.filter((function(a){return Object.getOwnPropertyDescriptor(t,a).enumerable}))),n.push.apply(n,e)}return n}function i(t){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){l(t,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(t,a,Object.getOwnPropertyDescriptor(n,a))}))}return t}function p(t,a){if(null==t)return{};var n,e,l=function(t,a){if(null==t)return{};var n,e,l={},r=Object.keys(t);for(e=0;e<r.length;e++)n=r[e],a.indexOf(n)>=0||(l[n]=t[n]);return l}(t,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(e=0;e<r.length;e++)n=r[e],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var m=e.createContext({}),d=function(t){var a=e.useContext(m),n=a;return t&&(n="function"==typeof t?t(a):i(i({},a),t)),n},u=function(t){var a=d(t.components);return e.createElement(m.Provider,{value:a},t.children)},k={inlineCode:"code",wrapper:function(t){var a=t.children;return e.createElement(e.Fragment,{},a)}},N=e.forwardRef((function(t,a){var n=t.components,l=t.mdxType,r=t.originalType,m=t.parentName,u=p(t,["components","mdxType","originalType","parentName"]),N=d(n),g=l,o=N["".concat(m,".").concat(g)]||N[g]||k[g]||r;return n?e.createElement(o,i(i({ref:a},u),{},{components:n})):e.createElement(o,i({ref:a},u))}));function g(t,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof t||l){var r=n.length,i=new Array(r);i[0]=N;var p={};for(var m in a)hasOwnProperty.call(a,m)&&(p[m]=a[m]);p.originalType=t,p.mdxType="string"==typeof t?t:l,i[1]=p;for(var d=2;d<r;d++)i[d]=n[d];return e.createElement.apply(null,i)}return e.createElement.apply(null,n)}N.displayName="MDXCreateElement"},65251:(t,a,n)=>{n.r(a),n.d(a,{assets:()=>m,contentTitle:()=>i,default:()=>k,frontMatter:()=>r,metadata:()=>p,toc:()=>d});var e=n(87462),l=(n(67294),n(3905));const r={sidebar_position:4610,slug:"2023-06-23",title:"AutoML with AutoGluon for Timeseries Forecasts",authors:"mpolinowski",tags:["Python","Machine Learning","AutoGluon","Cheating"],description:"Using Amazon SageMaker / AutoGluon to find your perfect model fit."},i=void 0,p={unversionedId:"IoT-and-Machine-Learning/AIOps/2023-06-23-automl-with-autogluon-timeseries-forecast/index",id:"IoT-and-Machine-Learning/AIOps/2023-06-23-automl-with-autogluon-timeseries-forecast/index",title:"AutoML with AutoGluon for Timeseries Forecasts",description:"Using Amazon SageMaker / AutoGluon to find your perfect model fit.",source:"@site/docs/IoT-and-Machine-Learning/AIOps/2023-06-23-automl-with-autogluon-timeseries-forecast/index.md",sourceDirName:"IoT-and-Machine-Learning/AIOps/2023-06-23-automl-with-autogluon-timeseries-forecast",slug:"/IoT-and-Machine-Learning/AIOps/2023-06-23-automl-with-autogluon-timeseries-forecast/2023-06-23",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-06-23-automl-with-autogluon-timeseries-forecast/2023-06-23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/AIOps/2023-06-23-automl-with-autogluon-timeseries-forecast/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"AutoGluon",permalink:"/docs/tags/auto-gluon"},{label:"Cheating",permalink:"/docs/tags/cheating"}],version:"current",sidebarPosition:4610,frontMatter:{sidebar_position:4610,slug:"2023-06-23",title:"AutoML with AutoGluon for Timeseries Forecasts",authors:"mpolinowski",tags:["Python","Machine Learning","AutoGluon","Cheating"],description:"Using Amazon SageMaker / AutoGluon to find your perfect model fit."},sidebar:"tutorialSidebar",previous:{title:"AIOps",permalink:"/docs/category/aiops"},next:{title:"AutoML with AutoGluon for Multi-Modal Data NLP",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-06-21-automl-with-autogluon-multiclass-nlp/2023-06-21"}},m={},d=[{value:"Installation",id:"installation",level:2},{value:"Single Variate Forecasting",id:"single-variate-forecasting",level:2},{value:"Data Preprocessing",id:"data-preprocessing",level:3},{value:"Model Training",id:"model-training",level:3},{value:"Model Evaluation",id:"model-evaluation",level:3},{value:"Visualization",id:"visualization",level:4},{value:"Multi Variate Forecasting - Future Covariants",id:"multi-variate-forecasting---future-covariants",level:2},{value:"Data Preprocessing",id:"data-preprocessing-1",level:3},{value:"Model Training",id:"model-training-1",level:3},{value:"Model Predictions",id:"model-predictions",level:3},{value:"Visualization",id:"visualization-1",level:4},{value:"Multi Variate Forecasting - Past Covariants",id:"multi-variate-forecasting---past-covariants",level:2},{value:"Data Preprocessing",id:"data-preprocessing-2",level:3},{value:"Model Training",id:"model-training-2",level:3},{value:"Model Predictions",id:"model-predictions-1",level:3},{value:"Visualization",id:"visualization-2",level:4}],u={toc:d};function k(t){let{components:a,...r}=t;return(0,l.kt)("wrapper",(0,e.Z)({},u,r,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"TST, HongKong",src:n(99684).Z,width:"1500",height:"575"})),(0,l.kt)("h1",{id:"automl-with-autogluon-for-timeseries-forecasts"},"AutoML with AutoGluon for Timeseries Forecasts"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Part 1: ",(0,l.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/AIOps/2023-06-18-automl-with-autogluon-tabular-data/2023-06-18"},"AutoML with AutoGluon for Tabular Data")),(0,l.kt)("li",{parentName:"ul"},"Part 2: ",(0,l.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/AIOps/2023-06-21-automl-with-autogluon-multiclass-nlp/2023-06-21"},"AutoML with AutoGluon for Multi-Modal Data")),(0,l.kt)("li",{parentName:"ul"},"Part 3: AutoML with AutoGluon for Timeseries Forecasts")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/autogluon/autogluon"},"AutoGluon")," automates machine learning tasks enabling you to easily achieve strong predictive performance in your applications. With just a few lines of code, you can train and deploy high-accuracy machine learning and deep learning models on image, text, time series, and tabular data."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/automl-gluon-tabular-data/tree/master/04_Time_Series_Predictions"},"Github Repository")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#automl-with-autogluon-for-timeseries-forecasts"},"AutoML with AutoGluon for Timeseries Forecasts"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#installation"},"Installation")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#single-variate-forecasting"},"Single Variate Forecasting"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#data-preprocessing"},"Data Preprocessing")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#model-training"},"Model Training")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#model-evaluation"},"Model Evaluation"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#visualization"},"Visualization")))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#multi-variate-forecasting---future-covariants"},"Multi Variate Forecasting - Future Covariants"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#data-preprocessing-1"},"Data Preprocessing")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#model-training-1"},"Model Training")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#model-predictions"},"Model Predictions"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#visualization-1"},"Visualization")))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#multi-variate-forecasting---past-covariants"},"Multi Variate Forecasting - Past Covariants"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#data-preprocessing-2"},"Data Preprocessing")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#model-training-2"},"Model Training")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#model-predictions-1"},"Model Predictions"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#visualization-2"},"Visualization"))))))))),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://auto.gluon.ai/stable/install.html"},"Installing AutoGluon")," with GPU support:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'pip install -U pip\npip install -U setuptools wheel\npip install torch==1.13.1+cu117 torchvision==0.14.1+cu117 --extra-index-url https://download.pytorch.org/whl/cu117\npip install autogluon\n# for visualizations\npip install bokeh==2.0.1"\n')),(0,l.kt)("h2",{id:"single-variate-forecasting"},"Single Variate Forecasting"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# get dataset\n!wget https://raw.githubusercontent.com/databricks/Spark-The-Definitive-Guide/master/data/retail-data/all/online-retail-dataset.csv -P dataset\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from autogluon.timeseries import TimeSeriesDataFrame, TimeSeriesPredictor\nimport matplotlib.pyplot as plt\nfrom datetime import datetime as dt\nimport pandas as pd\nimport seaborn as sns\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"SEED = 42\nMODEL_PATH = 'model'\n")),(0,l.kt)("h3",{id:"data-preprocessing"},"Data Preprocessing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"df = pd.read_csv('dataset/online-retail-dataset.csv')\ndf.head(5)\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"InvoiceNo"),(0,l.kt)("th",{parentName:"tr",align:null},"StockCode"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Quantity"),(0,l.kt)("th",{parentName:"tr",align:null},"InvoiceDate"),(0,l.kt)("th",{parentName:"tr",align:null},"UnitPrice"),(0,l.kt)("th",{parentName:"tr",align:null},"CustomerID"),(0,l.kt)("th",{parentName:"tr",align:null},"Country"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"536365"),(0,l.kt)("td",{parentName:"tr",align:null},"85123A"),(0,l.kt)("td",{parentName:"tr",align:null},"WHITE HANGING HEART T-LIGHT HOLDER"),(0,l.kt)("td",{parentName:"tr",align:null},"6"),(0,l.kt)("td",{parentName:"tr",align:null},"12/1/2010 8:26"),(0,l.kt)("td",{parentName:"tr",align:null},"2.55"),(0,l.kt)("td",{parentName:"tr",align:null},"17850.0"),(0,l.kt)("td",{parentName:"tr",align:null},"United Kingdom")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"536365"),(0,l.kt)("td",{parentName:"tr",align:null},"71053"),(0,l.kt)("td",{parentName:"tr",align:null},"WHITE METAL LANTERN"),(0,l.kt)("td",{parentName:"tr",align:null},"6"),(0,l.kt)("td",{parentName:"tr",align:null},"12/1/2010 8:26"),(0,l.kt)("td",{parentName:"tr",align:null},"3.39"),(0,l.kt)("td",{parentName:"tr",align:null},"17850.0"),(0,l.kt)("td",{parentName:"tr",align:null},"United Kingdom")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"536365"),(0,l.kt)("td",{parentName:"tr",align:null},"84406B"),(0,l.kt)("td",{parentName:"tr",align:null},"CREAM CUPID HEARTS COAT HANGER"),(0,l.kt)("td",{parentName:"tr",align:null},"8"),(0,l.kt)("td",{parentName:"tr",align:null},"12/1/2010 8:26"),(0,l.kt)("td",{parentName:"tr",align:null},"2.75"),(0,l.kt)("td",{parentName:"tr",align:null},"17850.0"),(0,l.kt)("td",{parentName:"tr",align:null},"United Kingdom")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"536365"),(0,l.kt)("td",{parentName:"tr",align:null},"84029G"),(0,l.kt)("td",{parentName:"tr",align:null},"KNITTED UNION FLAG HOT WATER BOTTLE"),(0,l.kt)("td",{parentName:"tr",align:null},"6"),(0,l.kt)("td",{parentName:"tr",align:null},"12/1/2010 8:26"),(0,l.kt)("td",{parentName:"tr",align:null},"3.39"),(0,l.kt)("td",{parentName:"tr",align:null},"17850.0"),(0,l.kt)("td",{parentName:"tr",align:null},"United Kingdom")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"536365"),(0,l.kt)("td",{parentName:"tr",align:null},"84029E"),(0,l.kt)("td",{parentName:"tr",align:null},"RED WOOLLY HOTTIE WHITE HEART."),(0,l.kt)("td",{parentName:"tr",align:null},"6"),(0,l.kt)("td",{parentName:"tr",align:null},"12/1/2010 8:26"),(0,l.kt)("td",{parentName:"tr",align:null},"3.39"),(0,l.kt)("td",{parentName:"tr",align:null},"17850.0"),(0,l.kt)("td",{parentName:"tr",align:null},"United Kingdom")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"df.info()\n# <class 'pandas.core.frame.DataFrame'>\n# RangeIndex: 541909 entries, 0 to 541908\n# Data columns (total 8 columns):\n#  #   Column       Non-Null Count   Dtype  \n# ---  ------       --------------   -----  \n#  0   InvoiceNo    541909 non-null  object \n#  1   StockCode    541909 non-null  object \n#  2   Description  540455 non-null  object \n#  3   Quantity     541909 non-null  int64  \n#  4   InvoiceDate  541909 non-null  object \n#  5   UnitPrice    541909 non-null  float64\n#  6   CustomerID   406829 non-null  float64\n#  7   Country      541909 non-null  object \n# dtypes: float64(2), int64(1), object(5)\n# memory usage: 33.1+ MB\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# only sample last 10.000 items\n# df_sample = df.iloc[-10000:]\n# take all items\ndf_sample = df.copy()\n\n# renaming columns\ndf_sample.rename(columns={'InvoiceNo': 'item_id', 'InvoiceDate': 'timestamp'}, inplace=True)\n# create sale total price\ndf_sample['target'] = df_sample['Quantity'] * df_sample['UnitPrice']\ndf_sample['item_id'] = 'online_sales'\n# create single variant timeseries\ndf_sample.drop(\n    ['StockCode', 'Description', 'CustomerID', 'Country', 'Quantity', 'UnitPrice'],\n    axis=1, inplace=True)\ndf_sample.head(5)\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"item_id"),(0,l.kt)("th",{parentName:"tr",align:null},"timestamp"),(0,l.kt)("th",{parentName:"tr",align:null},"target"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"online_sales"),(0,l.kt)("td",{parentName:"tr",align:null},"12/1/2010 8:26"),(0,l.kt)("td",{parentName:"tr",align:null},"20.40")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"online_sales"),(0,l.kt)("td",{parentName:"tr",align:null},"12/1/2010 8:26"),(0,l.kt)("td",{parentName:"tr",align:null},"27.80")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"online_sales"),(0,l.kt)("td",{parentName:"tr",align:null},"12/1/2010 8:26"),(0,l.kt)("td",{parentName:"tr",align:null},"2.60")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"online_sales"),(0,l.kt)("td",{parentName:"tr",align:null},"12/1/2010 8:26"),(0,l.kt)("td",{parentName:"tr",align:null},"5.85")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"online_sales"),(0,l.kt)("td",{parentName:"tr",align:null},"12/1/2010 8:26"),(0,l.kt)("td",{parentName:"tr",align:null},"19.90")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# reformat timestamp to remove time from date\ndf_sample['timestamp'] = pd.to_datetime(df_sample['timestamp']).dt.strftime('%m/%d/%Y')\ndf_sample.head(5)\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"item_id"),(0,l.kt)("th",{parentName:"tr",align:null},"target"),(0,l.kt)("th",{parentName:"tr",align:null},"timestamp"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"online_sales"),(0,l.kt)("td",{parentName:"tr",align:null},"16.6"),(0,l.kt)("td",{parentName:"tr",align:null},"12/23/2010")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"online_sales"),(0,l.kt)("td",{parentName:"tr",align:null},"8.5"),(0,l.kt)("td",{parentName:"tr",align:null},"12/23/2010")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"online_sales"),(0,l.kt)("td",{parentName:"tr",align:null},"20.8"),(0,l.kt)("td",{parentName:"tr",align:null},"12/23/2010")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"online_sales"),(0,l.kt)("td",{parentName:"tr",align:null},"20.8"),(0,l.kt)("td",{parentName:"tr",align:null},"12/23/2010")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"online_sales"),(0,l.kt)("td",{parentName:"tr",align:null},"20.8"),(0,l.kt)("td",{parentName:"tr",align:null},"12/23/2010")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# groupby date and sum() up the sales\ndf_sample = df_sample.groupby(\n    ['item_id', 'timestamp']).sum()\n\nprint(df_sample.info())\n# MultiIndex: 305 entries, ('online_sales', '01/04/2011') to ('online_sales', '12/23/2010')\ndf_sample.head(5)\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"item_id"),(0,l.kt)("th",{parentName:"tr",align:null},"timestamp"),(0,l.kt)("th",{parentName:"tr",align:null},"target"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"online_sales"),(0,l.kt)("td",{parentName:"tr",align:null},"01/04/2011"),(0,l.kt)("td",{parentName:"tr",align:null},"15584.29")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"01/05/2011"),(0,l.kt)("td",{parentName:"tr",align:null},"75076.22")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"01/07/2011"),(0,l.kt)("td",{parentName:"tr",align:null},"81417.78")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"01/09/2011"),(0,l.kt)("td",{parentName:"tr",align:null},"32131.53")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"df_sample.loc['online_sales']['target'].plot(\n    title='Sales Volume by Date',\n    figsize=(10,5),\n    rot=45,\n    legend=True\n)\nplt.savefig('assets/AutoGluon_AutoML_TimeSeries_01.webp', bbox_inches='tight')\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"AutoML with AutoGluon for Timeseries Data",src:n(63293).Z,width:"857",height:"522"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"df_sample.to_csv('dataset/single_variant_ts.csv', index=True)\n")),(0,l.kt)("h3",{id:"model-training"},"Model Training"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"ValueError: Frequency not provided and cannot be inferred. This is often due to the time index of the data being\nirregularly sampled. Please ensure that the data set used has a uniform time index, or create the\n",(0,l.kt)("inlineCode",{parentName:"p"},"TimeSeriesPredictor")," setting ",(0,l.kt)("inlineCode",{parentName:"p"},"ignore_time_index=True"),".")),(0,l.kt)("p",null,"AutoGluon does not like irregular timeseries ",(0,l.kt)("strong",{parentName:"p"},"AT ALL"),"... I manually fixed the ",(0,l.kt)("inlineCode",{parentName:"p"},"timestamp")," column with regular, daily interval. Docs recommend auto-filling for missing data before model training."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"train_data = TimeSeriesDataFrame('dataset/single_variant_ts.csv')\ntrain_data.describe()\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"target"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"count"),(0,l.kt)("td",{parentName:"tr",align:null},"305.000000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mean"),(0,l.kt)("td",{parentName:"tr",align:null},"31959.829292")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"std"),(0,l.kt)("td",{parentName:"tr",align:null},"17414.261664")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"min"),(0,l.kt)("td",{parentName:"tr",align:null},"-1566.230000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"25%"),(0,l.kt)("td",{parentName:"tr",align:null},"20728.140000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"50%"),(0,l.kt)("td",{parentName:"tr",align:null},"27978.410000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"75%"),(0,l.kt)("td",{parentName:"tr",align:null},"42912.400000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"max"),(0,l.kt)("td",{parentName:"tr",align:null},"112141.110000")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# create a predictor for 30 days (30 row in dataset) forcast\nsv_predictor = TimeSeriesPredictor(\n    prediction_length=30,\n    path=MODEL_PATH,\n    target='target',\n    eval_metric='sMAPE'\n)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"sv_predictor.fit(\n    train_data,\n    time_limit=800,\n    presets=\"medium_quality\"\n)\n\n# Training complete. Models trained: ['Naive', 'SeasonalNaive', 'Theta', 'AutoETS', 'RecursiveTabular', 'DeepAR', 'WeightedEnsemble']\n# Total runtime: 146.36 s\n# Best model: WeightedEnsemble\n# Best model score: -0.2301\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"sv_predictor.fit_summary()\n")),(0,l.kt)("p",null,"Estimated performance of each model:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"model"),(0,l.kt)("th",{parentName:"tr",align:null},"score_val"),(0,l.kt)("th",{parentName:"tr",align:null},"pred_time_val"),(0,l.kt)("th",{parentName:"tr",align:null},"fit_time_marginal"),(0,l.kt)("th",{parentName:"tr",align:null},"fit_order"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"WeightedEnsemble"),(0,l.kt)("td",{parentName:"tr",align:null},"-0.321595"),(0,l.kt)("td",{parentName:"tr",align:null},"1.042651"),(0,l.kt)("td",{parentName:"tr",align:null},"1.881647"),(0,l.kt)("td",{parentName:"tr",align:null},"7")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"RecursiveTabular"),(0,l.kt)("td",{parentName:"tr",align:null},"-0.321595"),(0,l.kt)("td",{parentName:"tr",align:null},"1.042651"),(0,l.kt)("td",{parentName:"tr",align:null},"0.757291"),(0,l.kt)("td",{parentName:"tr",align:null},"5")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"DeepAR"),(0,l.kt)("td",{parentName:"tr",align:null},"-0.384756"),(0,l.kt)("td",{parentName:"tr",align:null},"0.095033"),(0,l.kt)("td",{parentName:"tr",align:null},"69.751811"),(0,l.kt)("td",{parentName:"tr",align:null},"6")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"AutoETS"),(0,l.kt)("td",{parentName:"tr",align:null},"-0.385364"),(0,l.kt)("td",{parentName:"tr",align:null},"22.865800"),(0,l.kt)("td",{parentName:"tr",align:null},"0.012004"),(0,l.kt)("td",{parentName:"tr",align:null},"4")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"Theta"),(0,l.kt)("td",{parentName:"tr",align:null},"-0.397785"),(0,l.kt)("td",{parentName:"tr",align:null},"24.269135"),(0,l.kt)("td",{parentName:"tr",align:null},"0.009619"),(0,l.kt)("td",{parentName:"tr",align:null},"3")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"5"),(0,l.kt)("td",{parentName:"tr",align:null},"SeasonalNaive"),(0,l.kt)("td",{parentName:"tr",align:null},"-0.403544"),(0,l.kt)("td",{parentName:"tr",align:null},"5.162711"),(0,l.kt)("td",{parentName:"tr",align:null},"0.010179"),(0,l.kt)("td",{parentName:"tr",align:null},"2")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"6"),(0,l.kt)("td",{parentName:"tr",align:null},"Naive"),(0,l.kt)("td",{parentName:"tr",align:null},"-0.403544"),(0,l.kt)("td",{parentName:"tr",align:null},"5.572433"),(0,l.kt)("td",{parentName:"tr",align:null},"0.009085"),(0,l.kt)("td",{parentName:"tr",align:null},"1")))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Number of models trained: 7"),"\n",(0,l.kt)("em",{parentName:"p"},"Types of models trained:"),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"{'MultiWindowBacktestingModel', 'TimeSeriesGreedyEnsemble'}")),(0,l.kt)("h3",{id:"model-evaluation"},"Model Evaluation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# return a 1 month forcast on the training data\nsv_predictions = sv_predictor.predict(train_data, random_seed=SEED)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"sv_predictions\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"mean"),(0,l.kt)("th",{parentName:"tr",align:null},"0.1"),(0,l.kt)("th",{parentName:"tr",align:null},"0.2"),(0,l.kt)("th",{parentName:"tr",align:null},"0.3"),(0,l.kt)("th",{parentName:"tr",align:null},"0.4"),(0,l.kt)("th",{parentName:"tr",align:null},"0.5"),(0,l.kt)("th",{parentName:"tr",align:null},"0.6"),(0,l.kt)("th",{parentName:"tr",align:null},"0.7"),(0,l.kt)("th",{parentName:"tr",align:null},"0.8"),(0,l.kt)("th",{parentName:"tr",align:null},"0.9"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"item_id"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"online_sales"),(0,l.kt)("td",{parentName:"tr",align:null},"2011-10-16"),(0,l.kt)("td",{parentName:"tr",align:null},"35231.549892"),(0,l.kt)("td",{parentName:"tr",align:null},"14821.287291"),(0,l.kt)("td",{parentName:"tr",align:null},"21889.080854"),(0,l.kt)("td",{parentName:"tr",align:null},"26885.810628"),(0,l.kt)("td",{parentName:"tr",align:null},"31139.108555"),(0,l.kt)("td",{parentName:"tr",align:null},"35389.176845"),(0,l.kt)("td",{parentName:"tr",align:null},"39525.311786"),(0,l.kt)("td",{parentName:"tr",align:null},"43747.076754"),(0,l.kt)("td",{parentName:"tr",align:null},"48715.574839"),(0,l.kt)("td",{parentName:"tr",align:null},"55619.827997")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-10-17"),(0,l.kt)("td",{parentName:"tr",align:null},"37319.098400"),(0,l.kt)("td",{parentName:"tr",align:null},"9315.489680"),(0,l.kt)("td",{parentName:"tr",align:null},"18992.518673"),(0,l.kt)("td",{parentName:"tr",align:null},"25927.428089"),(0,l.kt)("td",{parentName:"tr",align:null},"31800.990269"),(0,l.kt)("td",{parentName:"tr",align:null},"37256.964611"),(0,l.kt)("td",{parentName:"tr",align:null},"42685.962390"),(0,l.kt)("td",{parentName:"tr",align:null},"48685.278476"),(0,l.kt)("td",{parentName:"tr",align:null},"55741.918605"),(0,l.kt)("td",{parentName:"tr",align:null},"65278.986905")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-10-18"),(0,l.kt)("td",{parentName:"tr",align:null},"38623.633612"),(0,l.kt)("td",{parentName:"tr",align:null},"5142.371285"),(0,l.kt)("td",{parentName:"tr",align:null},"16610.764052"),(0,l.kt)("td",{parentName:"tr",align:null},"24909.974641"),(0,l.kt)("td",{parentName:"tr",align:null},"32018.253338"),(0,l.kt)("td",{parentName:"tr",align:null},"38569.692694"),(0,l.kt)("td",{parentName:"tr",align:null},"45201.922577"),(0,l.kt)("td",{parentName:"tr",align:null},"52390.855571"),(0,l.kt)("td",{parentName:"tr",align:null},"60646.930906"),(0,l.kt)("td",{parentName:"tr",align:null},"72387.928409")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-10-19"),(0,l.kt)("td",{parentName:"tr",align:null},"40741.301758"),(0,l.kt)("td",{parentName:"tr",align:null},"1946.154973"),(0,l.kt)("td",{parentName:"tr",align:null},"15539.068760"),(0,l.kt)("td",{parentName:"tr",align:null},"25137.953113"),(0,l.kt)("td",{parentName:"tr",align:null},"33223.044572"),(0,l.kt)("td",{parentName:"tr",align:null},"40765.606934"),(0,l.kt)("td",{parentName:"tr",align:null},"48463.165389"),(0,l.kt)("td",{parentName:"tr",align:null},"56628.990736"),(0,l.kt)("td",{parentName:"tr",align:null},"66077.743741"),(0,l.kt)("td",{parentName:"tr",align:null},"79722.836483")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-10-20"),(0,l.kt)("td",{parentName:"tr",align:null},"49296.101707"),(0,l.kt)("td",{parentName:"tr",align:null},"6303.232915"),(0,l.kt)("td",{parentName:"tr",align:null},"21458.815514"),(0,l.kt)("td",{parentName:"tr",align:null},"31910.941266"),(0,l.kt)("td",{parentName:"tr",align:null},"40964.792632"),(0,l.kt)("td",{parentName:"tr",align:null},"49394.712059"),(0,l.kt)("td",{parentName:"tr",align:null},"57908.461563"),(0,l.kt)("td",{parentName:"tr",align:null},"66841.601504"),(0,l.kt)("td",{parentName:"tr",align:null},"77474.686240"),(0,l.kt)("td",{parentName:"tr",align:null},"92186.915812")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-10-21"),(0,l.kt)("td",{parentName:"tr",align:null},"42399.179004"),(0,l.kt)("td",{parentName:"tr",align:null},"-4222.418692"),(0,l.kt)("td",{parentName:"tr",align:null},"11966.114749"),(0,l.kt)("td",{parentName:"tr",align:null},"23324.147218"),(0,l.kt)("td",{parentName:"tr",align:null},"33287.622759"),(0,l.kt)("td",{parentName:"tr",align:null},"42457.754199"),(0,l.kt)("td",{parentName:"tr",align:null},"51587.049946"),(0,l.kt)("td",{parentName:"tr",align:null},"61400.403661"),(0,l.kt)("td",{parentName:"tr",align:null},"72842.296970"),(0,l.kt)("td",{parentName:"tr",align:null},"88931.093472")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-10-22"),(0,l.kt)("td",{parentName:"tr",align:null},"33619.926637"),(0,l.kt)("td",{parentName:"tr",align:null},"-17087.154419"),(0,l.kt)("td",{parentName:"tr",align:null},"364.144617"),(0,l.kt)("td",{parentName:"tr",align:null},"12901.404480"),(0,l.kt)("td",{parentName:"tr",align:null},"23491.862364"),(0,l.kt)("td",{parentName:"tr",align:null},"33662.238893"),(0,l.kt)("td",{parentName:"tr",align:null},"43520.884464"),(0,l.kt)("td",{parentName:"tr",align:null},"54164.964907"),(0,l.kt)("td",{parentName:"tr",align:null},"66630.573647"),(0,l.kt)("td",{parentName:"tr",align:null},"84037.471194")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-10-23"),(0,l.kt)("td",{parentName:"tr",align:null},"39042.384772"),(0,l.kt)("td",{parentName:"tr",align:null},"-14703.540432"),(0,l.kt)("td",{parentName:"tr",align:null},"3853.552955"),(0,l.kt)("td",{parentName:"tr",align:null},"17218.430626"),(0,l.kt)("td",{parentName:"tr",align:null},"28519.710014"),(0,l.kt)("td",{parentName:"tr",align:null},"39090.598639"),(0,l.kt)("td",{parentName:"tr",align:null},"49763.392538"),(0,l.kt)("td",{parentName:"tr",align:null},"60939.668264"),(0,l.kt)("td",{parentName:"tr",align:null},"74324.111121"),(0,l.kt)("td",{parentName:"tr",align:null},"92676.374673")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-10-24"),(0,l.kt)("td",{parentName:"tr",align:null},"37314.733017"),(0,l.kt)("td",{parentName:"tr",align:null},"-19270.824930"),(0,l.kt)("td",{parentName:"tr",align:null},"233.744114"),(0,l.kt)("td",{parentName:"tr",align:null},"14092.680263"),(0,l.kt)("td",{parentName:"tr",align:null},"26011.109933"),(0,l.kt)("td",{parentName:"tr",align:null},"37258.663681"),(0,l.kt)("td",{parentName:"tr",align:null},"48286.522116"),(0,l.kt)("td",{parentName:"tr",align:null},"60254.494754"),(0,l.kt)("td",{parentName:"tr",align:null},"74152.628169"),(0,l.kt)("td",{parentName:"tr",align:null},"93725.394967")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-10-25"),(0,l.kt)("td",{parentName:"tr",align:null},"40035.277581"),(0,l.kt)("td",{parentName:"tr",align:null},"-19730.031575"),(0,l.kt)("td",{parentName:"tr",align:null},"823.364529"),(0,l.kt)("td",{parentName:"tr",align:null},"15754.378083"),(0,l.kt)("td",{parentName:"tr",align:null},"28379.185360"),(0,l.kt)("td",{parentName:"tr",align:null},"40095.125237"),(0,l.kt)("td",{parentName:"tr",align:null},"51768.504080"),(0,l.kt)("td",{parentName:"tr",align:null},"64369.746415"),(0,l.kt)("td",{parentName:"tr",align:null},"78969.545369"),(0,l.kt)("td",{parentName:"tr",align:null},"99392.125068")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-10-26"),(0,l.kt)("td",{parentName:"tr",align:null},"43809.551647"),(0,l.kt)("td",{parentName:"tr",align:null},"-18581.300915"),(0,l.kt)("td",{parentName:"tr",align:null},"2831.155428"),(0,l.kt)("td",{parentName:"tr",align:null},"18233.929143"),(0,l.kt)("td",{parentName:"tr",align:null},"31493.221895"),(0,l.kt)("td",{parentName:"tr",align:null},"43799.325572"),(0,l.kt)("td",{parentName:"tr",align:null},"56059.960500"),(0,l.kt)("td",{parentName:"tr",align:null},"69262.074053"),(0,l.kt)("td",{parentName:"tr",align:null},"84846.687611"),(0,l.kt)("td",{parentName:"tr",align:null},"106247.592685")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-10-27"),(0,l.kt)("td",{parentName:"tr",align:null},"40978.233969"),(0,l.kt)("td",{parentName:"tr",align:null},"-24604.018712"),(0,l.kt)("td",{parentName:"tr",align:null},"-2246.682396"),(0,l.kt)("td",{parentName:"tr",align:null},"14204.335705"),(0,l.kt)("td",{parentName:"tr",align:null},"28124.915072"),(0,l.kt)("td",{parentName:"tr",align:null},"41120.107016"),(0,l.kt)("td",{parentName:"tr",align:null},"53865.685435"),(0,l.kt)("td",{parentName:"tr",align:null},"67632.214997"),(0,l.kt)("td",{parentName:"tr",align:null},"83850.112737"),(0,l.kt)("td",{parentName:"tr",align:null},"106498.851884")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-10-28"),(0,l.kt)("td",{parentName:"tr",align:null},"41743.192227"),(0,l.kt)("td",{parentName:"tr",align:null},"-26024.978536"),(0,l.kt)("td",{parentName:"tr",align:null},"-2645.385307"),(0,l.kt)("td",{parentName:"tr",align:null},"14166.811130"),(0,l.kt)("td",{parentName:"tr",align:null},"28273.284258"),(0,l.kt)("td",{parentName:"tr",align:null},"41561.178311"),(0,l.kt)("td",{parentName:"tr",align:null},"54943.112404"),(0,l.kt)("td",{parentName:"tr",align:null},"69180.700278"),(0,l.kt)("td",{parentName:"tr",align:null},"86004.451402"),(0,l.kt)("td",{parentName:"tr",align:null},"109515.329421")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-10-29"),(0,l.kt)("td",{parentName:"tr",align:null},"38315.939169"),(0,l.kt)("td",{parentName:"tr",align:null},"-32037.733749"),(0,l.kt)("td",{parentName:"tr",align:null},"-7961.047361"),(0,l.kt)("td",{parentName:"tr",align:null},"9530.292590"),(0,l.kt)("td",{parentName:"tr",align:null},"24433.420394"),(0,l.kt)("td",{parentName:"tr",align:null},"38430.213583"),(0,l.kt)("td",{parentName:"tr",align:null},"52199.831968"),(0,l.kt)("td",{parentName:"tr",align:null},"67014.321833"),(0,l.kt)("td",{parentName:"tr",align:null},"84580.597330"),(0,l.kt)("td",{parentName:"tr",align:null},"108781.710477")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-10-30"),(0,l.kt)("td",{parentName:"tr",align:null},"40790.730787"),(0,l.kt)("td",{parentName:"tr",align:null},"-31714.294692"),(0,l.kt)("td",{parentName:"tr",align:null},"-6632.032918"),(0,l.kt)("td",{parentName:"tr",align:null},"11250.135692"),(0,l.kt)("td",{parentName:"tr",align:null},"26624.395493"),(0,l.kt)("td",{parentName:"tr",align:null},"40830.333814"),(0,l.kt)("td",{parentName:"tr",align:null},"55083.397136"),(0,l.kt)("td",{parentName:"tr",align:null},"70254.854690"),(0,l.kt)("td",{parentName:"tr",align:null},"88116.212266"),(0,l.kt)("td",{parentName:"tr",align:null},"113018.777994")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-10-31"),(0,l.kt)("td",{parentName:"tr",align:null},"39601.428364"),(0,l.kt)("td",{parentName:"tr",align:null},"-35269.325656"),(0,l.kt)("td",{parentName:"tr",align:null},"-9299.692907"),(0,l.kt)("td",{parentName:"tr",align:null},"9073.426874"),(0,l.kt)("td",{parentName:"tr",align:null},"24982.993094"),(0,l.kt)("td",{parentName:"tr",align:null},"39702.658833"),(0,l.kt)("td",{parentName:"tr",align:null},"54402.247423"),(0,l.kt)("td",{parentName:"tr",align:null},"70171.210127"),(0,l.kt)("td",{parentName:"tr",align:null},"88614.257154"),(0,l.kt)("td",{parentName:"tr",align:null},"114229.722423")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-11-01"),(0,l.kt)("td",{parentName:"tr",align:null},"43321.091336"),(0,l.kt)("td",{parentName:"tr",align:null},"-33495.290752"),(0,l.kt)("td",{parentName:"tr",align:null},"-7238.416761"),(0,l.kt)("td",{parentName:"tr",align:null},"11718.451027"),(0,l.kt)("td",{parentName:"tr",align:null},"27982.345746"),(0,l.kt)("td",{parentName:"tr",align:null},"43267.875515"),(0,l.kt)("td",{parentName:"tr",align:null},"58529.011730"),(0,l.kt)("td",{parentName:"tr",align:null},"74809.030961"),(0,l.kt)("td",{parentName:"tr",align:null},"93805.173651"),(0,l.kt)("td",{parentName:"tr",align:null},"120492.849400")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-11-02"),(0,l.kt)("td",{parentName:"tr",align:null},"39873.310897"),(0,l.kt)("td",{parentName:"tr",align:null},"-39638.237188"),(0,l.kt)("td",{parentName:"tr",align:null},"-12259.488831"),(0,l.kt)("td",{parentName:"tr",align:null},"7259.635658"),(0,l.kt)("td",{parentName:"tr",align:null},"24107.774345"),(0,l.kt)("td",{parentName:"tr",align:null},"39944.400252"),(0,l.kt)("td",{parentName:"tr",align:null},"55573.550817"),(0,l.kt)("td",{parentName:"tr",align:null},"72172.974172"),(0,l.kt)("td",{parentName:"tr",align:null},"91871.915068"),(0,l.kt)("td",{parentName:"tr",align:null},"119270.200045")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-11-03"),(0,l.kt)("td",{parentName:"tr",align:null},"38897.212691"),(0,l.kt)("td",{parentName:"tr",align:null},"-42509.220460"),(0,l.kt)("td",{parentName:"tr",align:null},"-14725.370733"),(0,l.kt)("td",{parentName:"tr",align:null},"5465.492686"),(0,l.kt)("td",{parentName:"tr",align:null},"22784.085743"),(0,l.kt)("td",{parentName:"tr",align:null},"38756.254195"),(0,l.kt)("td",{parentName:"tr",align:null},"54814.426553"),(0,l.kt)("td",{parentName:"tr",align:null},"72198.679766"),(0,l.kt)("td",{parentName:"tr",align:null},"92621.915745"),(0,l.kt)("td",{parentName:"tr",align:null},"120534.229094")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-11-04"),(0,l.kt)("td",{parentName:"tr",align:null},"45310.748490"),(0,l.kt)("td",{parentName:"tr",align:null},"-37919.694783"),(0,l.kt)("td",{parentName:"tr",align:null},"-9357.164960"),(0,l.kt)("td",{parentName:"tr",align:null},"11175.946162"),(0,l.kt)("td",{parentName:"tr",align:null},"28815.300995"),(0,l.kt)("td",{parentName:"tr",align:null},"45152.634721"),(0,l.kt)("td",{parentName:"tr",align:null},"61626.068300"),(0,l.kt)("td",{parentName:"tr",align:null},"79239.016639"),(0,l.kt)("td",{parentName:"tr",align:null},"99980.063552"),(0,l.kt)("td",{parentName:"tr",align:null},"128811.104239")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-11-05"),(0,l.kt)("td",{parentName:"tr",align:null},"40524.113111"),(0,l.kt)("td",{parentName:"tr",align:null},"-45095.463685"),(0,l.kt)("td",{parentName:"tr",align:null},"-15760.925828"),(0,l.kt)("td",{parentName:"tr",align:null},"5668.926472"),(0,l.kt)("td",{parentName:"tr",align:null},"23679.488279"),(0,l.kt)("td",{parentName:"tr",align:null},"40503.121411"),(0,l.kt)("td",{parentName:"tr",align:null},"57398.500638"),(0,l.kt)("td",{parentName:"tr",align:null},"75497.467474"),(0,l.kt)("td",{parentName:"tr",align:null},"96633.997752"),(0,l.kt)("td",{parentName:"tr",align:null},"126117.225307")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-11-06"),(0,l.kt)("td",{parentName:"tr",align:null},"40806.692620"),(0,l.kt)("td",{parentName:"tr",align:null},"-46676.736613"),(0,l.kt)("td",{parentName:"tr",align:null},"-16544.120931"),(0,l.kt)("td",{parentName:"tr",align:null},"5068.030397"),(0,l.kt)("td",{parentName:"tr",align:null},"23563.217104"),(0,l.kt)("td",{parentName:"tr",align:null},"40845.487542"),(0,l.kt)("td",{parentName:"tr",align:null},"58063.833664"),(0,l.kt)("td",{parentName:"tr",align:null},"76565.798203"),(0,l.kt)("td",{parentName:"tr",align:null},"98222.894111"),(0,l.kt)("td",{parentName:"tr",align:null},"128465.220975")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-11-07"),(0,l.kt)("td",{parentName:"tr",align:null},"43503.676450"),(0,l.kt)("td",{parentName:"tr",align:null},"-46255.703438"),(0,l.kt)("td",{parentName:"tr",align:null},"-15315.077993"),(0,l.kt)("td",{parentName:"tr",align:null},"6965.648074"),(0,l.kt)("td",{parentName:"tr",align:null},"25902.252457"),(0,l.kt)("td",{parentName:"tr",align:null},"43336.311215"),(0,l.kt)("td",{parentName:"tr",align:null},"61053.512552"),(0,l.kt)("td",{parentName:"tr",align:null},"80111.716545"),(0,l.kt)("td",{parentName:"tr",align:null},"102295.131332"),(0,l.kt)("td",{parentName:"tr",align:null},"133194.560977")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-11-08"),(0,l.kt)("td",{parentName:"tr",align:null},"39830.233893"),(0,l.kt)("td",{parentName:"tr",align:null},"-51545.615185"),(0,l.kt)("td",{parentName:"tr",align:null},"-20027.924158"),(0,l.kt)("td",{parentName:"tr",align:null},"2662.824619"),(0,l.kt)("td",{parentName:"tr",align:null},"21906.346012"),(0,l.kt)("td",{parentName:"tr",align:null},"39980.482428"),(0,l.kt)("td",{parentName:"tr",align:null},"58006.295602"),(0,l.kt)("td",{parentName:"tr",align:null},"77399.156839"),(0,l.kt)("td",{parentName:"tr",align:null},"99888.163672"),(0,l.kt)("td",{parentName:"tr",align:null},"131151.589197")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-11-09"),(0,l.kt)("td",{parentName:"tr",align:null},"36990.513044"),(0,l.kt)("td",{parentName:"tr",align:null},"-56523.526649"),(0,l.kt)("td",{parentName:"tr",align:null},"-24495.447993"),(0,l.kt)("td",{parentName:"tr",align:null},"-1066.945972"),(0,l.kt)("td",{parentName:"tr",align:null},"18732.001915"),(0,l.kt)("td",{parentName:"tr",align:null},"37151.279157"),(0,l.kt)("td",{parentName:"tr",align:null},"55520.419680"),(0,l.kt)("td",{parentName:"tr",align:null},"75331.859267"),(0,l.kt)("td",{parentName:"tr",align:null},"98382.970785"),(0,l.kt)("td",{parentName:"tr",align:null},"130468.262942")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-11-10"),(0,l.kt)("td",{parentName:"tr",align:null},"42656.625332"),(0,l.kt)("td",{parentName:"tr",align:null},"-52222.084277"),(0,l.kt)("td",{parentName:"tr",align:null},"-19714.514788"),(0,l.kt)("td",{parentName:"tr",align:null},"3802.223665"),(0,l.kt)("td",{parentName:"tr",align:null},"23887.046793"),(0,l.kt)("td",{parentName:"tr",align:null},"42525.441250"),(0,l.kt)("td",{parentName:"tr",align:null},"61225.057142"),(0,l.kt)("td",{parentName:"tr",align:null},"81332.468161"),(0,l.kt)("td",{parentName:"tr",align:null},"104820.044505"),(0,l.kt)("td",{parentName:"tr",align:null},"137808.305522")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-11-11"),(0,l.kt)("td",{parentName:"tr",align:null},"44756.329828"),(0,l.kt)("td",{parentName:"tr",align:null},"-52548.031615"),(0,l.kt)("td",{parentName:"tr",align:null},"-18656.197064"),(0,l.kt)("td",{parentName:"tr",align:null},"5288.754038"),(0,l.kt)("td",{parentName:"tr",align:null},"25734.360637"),(0,l.kt)("td",{parentName:"tr",align:null},"44828.240961"),(0,l.kt)("td",{parentName:"tr",align:null},"63986.351020"),(0,l.kt)("td",{parentName:"tr",align:null},"84378.816506"),(0,l.kt)("td",{parentName:"tr",align:null},"108611.618683"),(0,l.kt)("td",{parentName:"tr",align:null},"142140.108263")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-11-12"),(0,l.kt)("td",{parentName:"tr",align:null},"37905.655743"),(0,l.kt)("td",{parentName:"tr",align:null},"-60991.102805"),(0,l.kt)("td",{parentName:"tr",align:null},"-27099.347751"),(0,l.kt)("td",{parentName:"tr",align:null},"-2388.499412"),(0,l.kt)("td",{parentName:"tr",align:null},"18511.776221"),(0,l.kt)("td",{parentName:"tr",align:null},"38050.389629"),(0,l.kt)("td",{parentName:"tr",align:null},"57546.974229"),(0,l.kt)("td",{parentName:"tr",align:null},"78416.261580"),(0,l.kt)("td",{parentName:"tr",align:null},"102719.966853"),(0,l.kt)("td",{parentName:"tr",align:null},"136415.925032")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-11-13"),(0,l.kt)("td",{parentName:"tr",align:null},"44715.800505"),(0,l.kt)("td",{parentName:"tr",align:null},"-55633.323514"),(0,l.kt)("td",{parentName:"tr",align:null},"-20782.285358"),(0,l.kt)("td",{parentName:"tr",align:null},"3913.667987"),(0,l.kt)("td",{parentName:"tr",align:null},"24980.451031"),(0,l.kt)("td",{parentName:"tr",align:null},"44809.798552"),(0,l.kt)("td",{parentName:"tr",align:null},"64605.937576"),(0,l.kt)("td",{parentName:"tr",align:null},"85704.112222"),(0,l.kt)("td",{parentName:"tr",align:null},"110433.920792"),(0,l.kt)("td",{parentName:"tr",align:null},"144866.205041")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2011-11-14"),(0,l.kt)("td",{parentName:"tr",align:null},"38863.458282"),(0,l.kt)("td",{parentName:"tr",align:null},"-62877.590928"),(0,l.kt)("td",{parentName:"tr",align:null},"-28234.112477"),(0,l.kt)("td",{parentName:"tr",align:null},"-2844.261356"),(0,l.kt)("td",{parentName:"tr",align:null},"18802.531926"),(0,l.kt)("td",{parentName:"tr",align:null},"38951.660430"),(0,l.kt)("td",{parentName:"tr",align:null},"59170.908563"),(0,l.kt)("td",{parentName:"tr",align:null},"80678.533877"),(0,l.kt)("td",{parentName:"tr",align:null},"105966.185779"),(0,l.kt)("td",{parentName:"tr",align:null},"141098.465744")))),(0,l.kt)("h4",{id:"visualization"},"Visualization"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def plot_predictions(train_data, predictions, item_id, target_column, titel, ylabel):\n    plt.figure(figsize=(12,5))\n    plt.title(titel)\n    plt.xlabel('Date')\n    plt.ylabel(ylabel)\n    # timeseries data\n    y_train = train_data.loc[item_id][target_column]\n    plt.plot(y_train, label=\"Timeseries Data\")\n    # forcast data\n    y_pred = predictions.loc[item_id]\n    plt.plot(y_pred['mean'], label=\"Mean Forecast\")\n    # confidence intervals\n    plt.fill_between(\n        y_pred.index , y_pred['0.1'], y_pred['0.9'],\n        color='red', alpha=0.1, label='10%-90% Confidence Range'\n    )\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"plot_predictions(\n    train_data, sv_predictions,\n    item_id='online_sales', target_column='target',\n    titel='30 Days Sales Prediction with Confidence Interval',\n    ylabel = 'Sales Volume'\n)\nplt.savefig('assets/AutoGluon_AutoML_TimeSeries_02.webp', bbox_inches='tight')\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"AutoML with AutoGluon for Timeseries Data",src:n(44067).Z,width:"1034",height:"470"})),(0,l.kt)("h2",{id:"multi-variate-forecasting---future-covariants"},"Multi Variate Forecasting - Future Covariants"),(0,l.kt)("p",null,"Add known factors that affected your time series data in the past to future prediction - e.g. holidays on restaurant revenues."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# get dataset\n!wget https://github.com/DaviRolim/datasets/raw/master/RestaurantVisitors.csv -P dataset\n")),(0,l.kt)("h3",{id:"data-preprocessing-1"},"Data Preprocessing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"df = pd.read_csv('dataset/RestaurantVisitors.csv')\ndf.tail(5)\n# dataset contains unknowns -> will be used for prediction\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"date"),(0,l.kt)("th",{parentName:"tr",align:null},"weekday"),(0,l.kt)("th",{parentName:"tr",align:null},"holiday"),(0,l.kt)("th",{parentName:"tr",align:null},"holiday_name"),(0,l.kt)("th",{parentName:"tr",align:null},"rest1"),(0,l.kt)("th",{parentName:"tr",align:null},"rest2"),(0,l.kt)("th",{parentName:"tr",align:null},"rest3"),(0,l.kt)("th",{parentName:"tr",align:null},"rest4"),(0,l.kt)("th",{parentName:"tr",align:null},"total"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"512"),(0,l.kt)("td",{parentName:"tr",align:null},"5/27/2017"),(0,l.kt)("td",{parentName:"tr",align:null},"Saturday"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"na"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"513"),(0,l.kt)("td",{parentName:"tr",align:null},"5/28/2017"),(0,l.kt)("td",{parentName:"tr",align:null},"Sunday"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"na"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"514"),(0,l.kt)("td",{parentName:"tr",align:null},"5/29/2017"),(0,l.kt)("td",{parentName:"tr",align:null},"Monday"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"Memorial Day"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"515"),(0,l.kt)("td",{parentName:"tr",align:null},"5/30/2017"),(0,l.kt)("td",{parentName:"tr",align:null},"Tuesday"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"na"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"516"),(0,l.kt)("td",{parentName:"tr",align:null},"5/31/2017"),(0,l.kt)("td",{parentName:"tr",align:null},"Wednesday"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"na"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"df.info()\n# there are `517` entries but only `478` have a total\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"Column"),(0,l.kt)("th",{parentName:"tr",align:null},"Non-Null Count"),(0,l.kt)("th",{parentName:"tr",align:null},"Dtype"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"date"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"517 non-null")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"weekday"),(0,l.kt)("td",{parentName:"tr",align:null},"517 non-null"),(0,l.kt)("td",{parentName:"tr",align:null},"object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"holiday"),(0,l.kt)("td",{parentName:"tr",align:null},"517 non-null"),(0,l.kt)("td",{parentName:"tr",align:null},"int64")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"holiday_name"),(0,l.kt)("td",{parentName:"tr",align:null},"517 non-null"),(0,l.kt)("td",{parentName:"tr",align:null},"object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"rest1"),(0,l.kt)("td",{parentName:"tr",align:null},"478 non-null"),(0,l.kt)("td",{parentName:"tr",align:null},"float64")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"5"),(0,l.kt)("td",{parentName:"tr",align:null},"rest2"),(0,l.kt)("td",{parentName:"tr",align:null},"478 non-null"),(0,l.kt)("td",{parentName:"tr",align:null},"float64")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"6"),(0,l.kt)("td",{parentName:"tr",align:null},"rest3"),(0,l.kt)("td",{parentName:"tr",align:null},"478 non-null"),(0,l.kt)("td",{parentName:"tr",align:null},"float64")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"7"),(0,l.kt)("td",{parentName:"tr",align:null},"rest4"),(0,l.kt)("td",{parentName:"tr",align:null},"478 non-null"),(0,l.kt)("td",{parentName:"tr",align:null},"float64")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"8"),(0,l.kt)("td",{parentName:"tr",align:null},"total"),(0,l.kt)("td",{parentName:"tr",align:null},"478 non-null"),(0,l.kt)("td",{parentName:"tr",align:null},"float64")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"df_sample = df.copy()\n\n# renaming columns\ndf_sample.rename(columns={'total': 'target', 'date': 'timestamp'}, inplace=True)\ndf_sample['item_id'] = 'restaurant_visitors'\n\n# get numeric representation of weekday from timestamp\ndatetimes = pd.to_datetime(df_sample['timestamp'])\ndf_sample['timestamp'] = datetimes\ndf_sample['weekday'] = datetimes.dt.day_of_week\n\n# drop not needed\ndf_sample.drop(\n    ['rest1', 'rest2', 'rest3', 'rest4', 'holiday_name'],\n    axis=1, inplace=True)\n\ndf_sample.tail(5)\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"timestamp"),(0,l.kt)("th",{parentName:"tr",align:null},"weekday"),(0,l.kt)("th",{parentName:"tr",align:null},"holiday"),(0,l.kt)("th",{parentName:"tr",align:null},"target"),(0,l.kt)("th",{parentName:"tr",align:null},"item_id"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"512"),(0,l.kt)("td",{parentName:"tr",align:null},"2017-05-27"),(0,l.kt)("td",{parentName:"tr",align:null},"5"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"restaurant_visitors")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"513"),(0,l.kt)("td",{parentName:"tr",align:null},"2017-05-28"),(0,l.kt)("td",{parentName:"tr",align:null},"6"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"restaurant_visitors")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"514"),(0,l.kt)("td",{parentName:"tr",align:null},"2017-05-29"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"restaurant_visitors")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"515"),(0,l.kt)("td",{parentName:"tr",align:null},"2017-05-30"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"restaurant_visitors")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"516"),(0,l.kt)("td",{parentName:"tr",align:null},"2017-05-31"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"restaurant_visitors")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# split missing data for prediction\ndf_sample.iloc[:478].to_csv('dataset/mv_known_series.csv', index=False)\ndf_sample.iloc[478:].drop('target',axis=1).to_csv('dataset/mv_unknown_series.csv', index=False)\n")),(0,l.kt)("h3",{id:"model-training-1"},"Model Training"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"train_data = TimeSeriesDataFrame('dataset/mv_known_series.csv')\ntrain_data.head(5)\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"weekday"),(0,l.kt)("th",{parentName:"tr",align:null},"holiday"),(0,l.kt)("th",{parentName:"tr",align:null},"target"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"item_id"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"restaurant_visitors"),(0,l.kt)("td",{parentName:"tr",align:null},"2016-01-01"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"296.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2016-01-02"),(0,l.kt)("td",{parentName:"tr",align:null},"5"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"191.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2016-01-03"),(0,l.kt)("td",{parentName:"tr",align:null},"6"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"202.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2016-01-04"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"105.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2016-01-05"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"98.0")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# create a predictor for the length of the unknown series\nmv_predictor = TimeSeriesPredictor(\n    prediction_length=len(df_sample.iloc[478:]),\n    path=MODEL_PATH,\n    target='target',\n    known_covariates_names = ['weekday', 'holiday'],\n    eval_metric='sMAPE'\n)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"mv_predictor.fit(\n    train_data,\n    time_limit=800,\n    presets=\"high_quality\"\n)\n\n# Training complete. Models trained: ['Naive', 'SeasonalNaive', 'Theta', 'AutoETS', 'RecursiveTabular', 'DeepAR', 'TemporalFusionTransformer', 'PatchTST', 'AutoARIMA', 'WeightedEnsemble']\n# Total runtime: 470.02 s\n# Best model: WeightedEnsemble\n# Best model score: -0.1501\n")),(0,l.kt)("h3",{id:"model-predictions"},"Model Predictions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"future_series = TimeSeriesDataFrame('dataset/mv_unknown_series.csv')\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"future_series.head(5)\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"weekday"),(0,l.kt)("th",{parentName:"tr",align:null},"holiday"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"item_id"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"restaurant_visitors"),(0,l.kt)("td",{parentName:"tr",align:null},"2017-04-23"),(0,l.kt)("td",{parentName:"tr",align:null},"6"),(0,l.kt)("td",{parentName:"tr",align:null},"0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2017-04-24"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2017-04-25"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2017-04-26"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2017-04-27"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"0")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"mv_predictions = mv_predictor.predict(train_data, known_covariates=future_series, random_seed=SEED)\n")),(0,l.kt)("h4",{id:"visualization-1"},"Visualization"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"plot_predictions(\n    train_data, mv_predictions,\n    item_id='restaurant_visitors', target_column='target',\n    titel='Restaurant Visitors 39 Days Predictions with Confidence Interval',\n    ylabel = 'Restaurant Revenue'\n)\nplt.savefig('assets/AutoGluon_AutoML_TimeSeries_03.webp', bbox_inches='tight')\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"AutoML with AutoGluon for Timeseries Data",src:n(4990).Z,width:"1005",height:"470"})),(0,l.kt)("h2",{id:"multi-variate-forecasting---past-covariants"},"Multi Variate Forecasting - Past Covariants"),(0,l.kt)("p",null,"The Air Quality dataset reports on the weather and the level of pollution each hour for five years at the US embassy in Beijing, China. The data includes the date-time, the PM2.5 concentration, and the weather information including dew point, temperature, pressure, wind direction, wind speed and the cumulative number of hours of snow and rain."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# get dataset\n!wget https://raw.githubusercontent.com/jyoti0225/Air-Pollution-Forecasting/master/AirPollution.csv -P dataset\n")),(0,l.kt)("h3",{id:"data-preprocessing-2"},"Data Preprocessing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# datetime is split up into 4 columns => combine\ndef parse(x):\n    return dt.strptime(x, '%Y %m %d %H')\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"df = pd.read_csv('dataset/AirPollution.csv', date_parser=parse,parse_dates=[\n    ['year', 'month', 'day', 'hour']\n])\n\ndf.head(5)\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"year_month_day_hour"),(0,l.kt)("th",{parentName:"tr",align:null},"No"),(0,l.kt)("th",{parentName:"tr",align:null},"pm2.5"),(0,l.kt)("th",{parentName:"tr",align:null},"DEWP"),(0,l.kt)("th",{parentName:"tr",align:null},"TEMP"),(0,l.kt)("th",{parentName:"tr",align:null},"PRES"),(0,l.kt)("th",{parentName:"tr",align:null},"cbwd"),(0,l.kt)("th",{parentName:"tr",align:null},"Iws"),(0,l.kt)("th",{parentName:"tr",align:null},"Is"),(0,l.kt)("th",{parentName:"tr",align:null},"Ir"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 00:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"-21"),(0,l.kt)("td",{parentName:"tr",align:null},"-11.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1021.0"),(0,l.kt)("td",{parentName:"tr",align:null},"NW"),(0,l.kt)("td",{parentName:"tr",align:null},"1.79"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 01:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"-21"),(0,l.kt)("td",{parentName:"tr",align:null},"-12.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1020.0"),(0,l.kt)("td",{parentName:"tr",align:null},"NW"),(0,l.kt)("td",{parentName:"tr",align:null},"4.92"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 02:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"-21"),(0,l.kt)("td",{parentName:"tr",align:null},"-11.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1019.0"),(0,l.kt)("td",{parentName:"tr",align:null},"NW"),(0,l.kt)("td",{parentName:"tr",align:null},"6.71"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 03:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"-21"),(0,l.kt)("td",{parentName:"tr",align:null},"-14.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1019.0"),(0,l.kt)("td",{parentName:"tr",align:null},"NW"),(0,l.kt)("td",{parentName:"tr",align:null},"9.84"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 04:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"5"),(0,l.kt)("td",{parentName:"tr",align:null},"NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"-20"),(0,l.kt)("td",{parentName:"tr",align:null},"-12.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1018.0"),(0,l.kt)("td",{parentName:"tr",align:null},"NW"),(0,l.kt)("td",{parentName:"tr",align:null},"12.97"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"df.info()\n# dataset contains missing pm2.5 values\n\n#  #   Column               Non-Null Count  Dtype         \n# ---  ------               --------------  -----         \n#  0   year_month_day_hour  43824 non-null  datetime64[ns]\n#  1   No                   43824 non-null  int64         \n#  2   pm2.5                41757 non-null  float64       \n#  3   DEWP                 43824 non-null  int64         \n#  4   TEMP                 43824 non-null  float64       \n#  5   PRES                 43824 non-null  float64       \n#  6   cbwd                 43824 non-null  object        \n#  7   Iws                  43824 non-null  float64       \n#  8   Is                   43824 non-null  int64         \n#  9   Ir                   43824 non-null  int64 \n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"df_sample = df.copy()\n\n# one-hot encode wind direction\none_hot_wind = pd.get_dummies(df['cbwd'], drop_first=True)\ndf_sample = pd.concat([df, one_hot_wind], axis=1, join=\"inner\")\n\n# renaming columns\ndf_sample.rename(columns={\n    'year_month_day_hour': 'timestamp',\n    'pm2.5': 'target',\n    'DEWP': 'dew_point',\n    'TEMP': 'temperature',\n    'PRES': 'pressure',\n    'NW': 'wind_direction_nw',\n    'SE': 'wind_direction_se',\n    'cv': 'wind_direction_cv',\n    'Iws': 'wind_speed',\n    'Is': 'snow',\n    'Ir': 'rain'}, inplace=True)\n\n# add item_id\ndf_sample['item_id'] = 'pm2_pollution'\n\n# fill missing targets with mean()\ndf_sample['target'] = df_sample['target'].fillna(df_sample['target'].mean())\n\n# make datetime object\ndatetimes = pd.to_datetime(df_sample['timestamp'])\ndf_sample['timestamp'] = datetimes\ndf_sample['weekday'] = datetimes.dt.day_of_week\n\n# drop not needed\ndf_sample.drop(['No', 'cbwd'], axis=1, inplace=True)\n\ndf_sample.head(5)\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"timestamp"),(0,l.kt)("th",{parentName:"tr",align:null},"target"),(0,l.kt)("th",{parentName:"tr",align:null},"dew_point"),(0,l.kt)("th",{parentName:"tr",align:null},"temperature"),(0,l.kt)("th",{parentName:"tr",align:null},"pressure"),(0,l.kt)("th",{parentName:"tr",align:null},"wind_speed"),(0,l.kt)("th",{parentName:"tr",align:null},"snow"),(0,l.kt)("th",{parentName:"tr",align:null},"rain"),(0,l.kt)("th",{parentName:"tr",align:null},"wind_direction_nw"),(0,l.kt)("th",{parentName:"tr",align:null},"wind_direction_se"),(0,l.kt)("th",{parentName:"tr",align:null},"wind_direction_cv"),(0,l.kt)("th",{parentName:"tr",align:null},"item_id"),(0,l.kt)("th",{parentName:"tr",align:null},"weekday"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 00:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"98.613215"),(0,l.kt)("td",{parentName:"tr",align:null},"-21"),(0,l.kt)("td",{parentName:"tr",align:null},"-11.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1021.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1.79"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"pm2_pollution"),(0,l.kt)("td",{parentName:"tr",align:null},"4")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 01:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"98.613215"),(0,l.kt)("td",{parentName:"tr",align:null},"-21"),(0,l.kt)("td",{parentName:"tr",align:null},"-12.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1020.0"),(0,l.kt)("td",{parentName:"tr",align:null},"4.92"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"pm2_pollution"),(0,l.kt)("td",{parentName:"tr",align:null},"4")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 02:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"98.613215"),(0,l.kt)("td",{parentName:"tr",align:null},"-21"),(0,l.kt)("td",{parentName:"tr",align:null},"-11.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1019.0"),(0,l.kt)("td",{parentName:"tr",align:null},"6.71"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"pm2_pollution"),(0,l.kt)("td",{parentName:"tr",align:null},"4")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 03:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"98.613215"),(0,l.kt)("td",{parentName:"tr",align:null},"-21"),(0,l.kt)("td",{parentName:"tr",align:null},"-14.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1019.0"),(0,l.kt)("td",{parentName:"tr",align:null},"9.84"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"pm2_pollution"),(0,l.kt)("td",{parentName:"tr",align:null},"4")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 04:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"98.613215"),(0,l.kt)("td",{parentName:"tr",align:null},"-20"),(0,l.kt)("td",{parentName:"tr",align:null},"-12.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1018.0"),(0,l.kt)("td",{parentName:"tr",align:null},"12.97"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"pm2_pollution"),(0,l.kt)("td",{parentName:"tr",align:null},"4")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"df_sample.to_csv('dataset/bj_airpollution.csv', index=False)\n")),(0,l.kt)("h3",{id:"model-training-2"},"Model Training"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"train_data = TimeSeriesDataFrame('dataset/bj_airpollution.csv')\ntrain_data.head(5)\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"target"),(0,l.kt)("th",{parentName:"tr",align:null},"dew_point"),(0,l.kt)("th",{parentName:"tr",align:null},"temperature"),(0,l.kt)("th",{parentName:"tr",align:null},"pressure"),(0,l.kt)("th",{parentName:"tr",align:null},"wind_speed"),(0,l.kt)("th",{parentName:"tr",align:null},"snow"),(0,l.kt)("th",{parentName:"tr",align:null},"rain"),(0,l.kt)("th",{parentName:"tr",align:null},"wind_direction_nw"),(0,l.kt)("th",{parentName:"tr",align:null},"wind_direction_se"),(0,l.kt)("th",{parentName:"tr",align:null},"wind_direction_cv"),(0,l.kt)("th",{parentName:"tr",align:null},"weekday"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"item_id"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pm2_pollution"),(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 00:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"98.613215"),(0,l.kt)("td",{parentName:"tr",align:null},"-21"),(0,l.kt)("td",{parentName:"tr",align:null},"-11.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1021.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1.79"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"4")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 01:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"98.613215"),(0,l.kt)("td",{parentName:"tr",align:null},"-21"),(0,l.kt)("td",{parentName:"tr",align:null},"-12.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1020.0"),(0,l.kt)("td",{parentName:"tr",align:null},"4.92"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"4")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 02:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"98.613215"),(0,l.kt)("td",{parentName:"tr",align:null},"-21"),(0,l.kt)("td",{parentName:"tr",align:null},"-11.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1019.0"),(0,l.kt)("td",{parentName:"tr",align:null},"6.71"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"4")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 03:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"98.613215"),(0,l.kt)("td",{parentName:"tr",align:null},"-21"),(0,l.kt)("td",{parentName:"tr",align:null},"-14.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1019.0"),(0,l.kt)("td",{parentName:"tr",align:null},"9.84"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"4")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 04:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"98.613215"),(0,l.kt)("td",{parentName:"tr",align:null},"-20"),(0,l.kt)("td",{parentName:"tr",align:null},"-12.0"),(0,l.kt)("td",{parentName:"tr",align:null},"1018.0"),(0,l.kt)("td",{parentName:"tr",align:null},"12.97"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"4")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# 30-day predictor\nbj_predictor = TimeSeriesPredictor(\n    prediction_length=24*30,\n    path=MODEL_PATH,\n    target='target',\n    eval_metric='sMAPE'\n)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"bj_predictor.fit(\n    train_data,\n    presets=\"high_quality\"\n)\n\n# Fitting simple weighted ensemble.\n#   -0.8465       = Validation score (-sMAPE)\n#   3.16    s     = Training runtime\n#   40.20   s     = Validation (prediction) runtime\n# Training complete. Models trained: ['Naive', 'SeasonalNaive', 'Theta', 'AutoETS', 'RecursiveTabular', 'DeepAR', 'PatchTST', 'AutoARIMA', 'WeightedEnsemble']\n# Total runtime: 693.53 s\n# Best model: WeightedEnsemble\n# Best model score: -0.8465\n")),(0,l.kt)("h3",{id:"model-predictions-1"},"Model Predictions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"bj_predictions = bj_predictor.predict(train_data, random_seed=SEED)\n")),(0,l.kt)("h4",{id:"visualization-2"},"Visualization"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"plot_predictions(\n    train_data, bj_predictions,\n    item_id='pm2_pollution', target_column='target',\n    titel='Beijing PM2 Air Pollution 30 Days Predictions with Confidence Interval',\n    ylabel = 'PM2 Measurement'\n)\nplt.savefig('assets/AutoGluon_AutoML_TimeSeries_04.webp', bbox_inches='tight')\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"AutoML with AutoGluon for Timeseries Data",src:n(30736).Z,width:"1017",height:"470"})))}k.isMDXComponent=!0},63293:(t,a,n)=>{n.d(a,{Z:()=>e});const e=n.p+"assets/images/AutoGluon_AutoML_TimeSeries_01-897999e02086dcfece28d3066e10d4dd.webp"},44067:(t,a,n)=>{n.d(a,{Z:()=>e});const e=n.p+"assets/images/AutoGluon_AutoML_TimeSeries_02-1848d2219529894b6ca6a0d6e85dbbe2.webp"},4990:(t,a,n)=>{n.d(a,{Z:()=>e});const e=n.p+"assets/images/AutoGluon_AutoML_TimeSeries_03-759ebab1c1c6f6ee0e9c27ac915ab541.webp"},30736:(t,a,n)=>{n.d(a,{Z:()=>e});const e=n.p+"assets/images/AutoGluon_AutoML_TimeSeries_04-48cb0da72d8f75a8fad003ff1afc4328.webp"},99684:(t,a,n)=>{n.d(a,{Z:()=>e});const e=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-a15d7463fa71afd7563b41d830022879.jpg"}}]);