"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[7077],{180861:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var i=n(785893),r=n(603905);const s={sidebar_position:9e3,slug:"2022-10-10",title:"Python - The Filesystem",authors:"mpolinowski",tags:["Python"],description:"Using Python to manipulate your Filesystem."},a=void 0,l={id:"Development/Python/2022-10-10-python-filesystem/index",title:"Python - The Filesystem",description:"Using Python to manipulate your Filesystem.",source:"@site/docs/Development/Python/2022-10-10-python-filesystem/index.md",sourceDirName:"Development/Python/2022-10-10-python-filesystem",slug:"/Development/Python/2022-10-10-python-filesystem/2022-10-10",permalink:"/docs/Development/Python/2022-10-10-python-filesystem/2022-10-10",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Python/2022-10-10-python-filesystem/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"}],version:"current",sidebarPosition:9e3,frontMatter:{sidebar_position:9e3,slug:"2022-10-10",title:"Python - The Filesystem",authors:"mpolinowski",tags:["Python"],description:"Using Python to manipulate your Filesystem."},sidebar:"tutorialSidebar",previous:{title:"Python - RE",permalink:"/docs/Development/Python/2022-10-12-python-regular-expressions/2022-10-12"},next:{title:"Python - Flask Frontend to generate Elasticsearch Docs from Sitemaps",permalink:"/docs/Development/Python/2022-10-09-python-flask-elasticsearch/2022-10-09"}},o={},d=[{value:"Pathlib",id:"pathlib",level:2},{value:"Write to File",id:"write-to-file",level:3},{value:"Create Empty Files",id:"create-empty-files",level:3},{value:"List Files in Directory",id:"list-files-in-directory",level:3},{value:"Rename Files",id:"rename-files",level:3},{value:"Get File Properties",id:"get-file-properties",level:3},{value:"Zip and Unzip",id:"zip-and-unzip",level:3},{value:"Downloading Code from Github",id:"downloading-code-from-github",level:2},{value:"Search",id:"search",level:3},{value:"Delete Files",id:"delete-files",level:3}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.ah)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Sham Sui Po, Hong Kong",src:n(105777).Z+"",width:"1500",height:"548"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"#pathlib",children:"Pathlib"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#write-to-file",children:"Write to File"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#create-empty-files",children:"Create Empty Files"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#list-files-in-directory",children:"List Files in Directory"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#rename-files",children:"Rename Files"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#get-file-properties",children:"Get File Properties"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#zip-and-unzip",children:"Zip and Unzip"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"#downloading-code-from-github",children:"Downloading Code from Github"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#search",children:"Search"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#delete-files",children:"Delete Files"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://github.com/mpolinowski/python-filesystem",children:"Github Repository"})}),"\n",(0,i.jsx)(t.h2,{id:"pathlib",children:"Pathlib"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:"from pathlib import Path\n\nprint(dir(Path))\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"['__bytes__', '__class__', '__class_getitem__', '__delattr__', '__dir__', '__doc__', '__enter__', '__eq__', '__exit__', '__format__', '__fspath__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rtruediv__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__truediv__', '_accessor', '_cached_cparts', '_cparts', '_drv', '_format_parsed_parts', '_from_parsed_parts', '_from_parts', '_hash', '_make_child', '_make_child_relpath', '_parse_args', '_parts', '_pparts', '_root', '_str', 'absolute', 'anchor', 'as_posix', 'as_uri', 'chmod', 'cwd', 'drive', 'exists', 'expanduser', 'glob', 'group', 'hardlink_to', 'home', 'is_absolute', 'is_block_device', 'is_char_device', 'is_dir', 'is_fifo', 'is_file', 'is_mount', 'is_relative_to', 'is_reserved', 'is_socket', 'is_symlink', 'iterdir', 'joinpath', 'lchmod', 'link_to', 'lstat', 'match', 'mkdir', 'name', 'open', 'owner', 'parent', 'parents', 'parts', 'read_bytes', 'read_text', 'readlink', 'relative_to', 'rename', 'replace', 'resolve', 'rglob', 'rmdir', 'root', 'samefile', 'stat', 'stem', 'suffix', 'suffixes', 'symlink_to', 'touch', 'unlink', 'with_name', 'with_stem', 'with_suffix', 'write_bytes', 'write_text']\n"})}),"\n",(0,i.jsx)(t.h3,{id:"write-to-file",children:"Write to File"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:'from pathlib import Path\n\npath = Path(\'files/test1.md\')\n\ncontent = """# Test 1\n\nthis is a test\n"""\n\nif not path.exists():\n    with open(path, \'w\') as file:\n        file.write(content)\n'})}),"\n",(0,i.jsx)(t.h3,{id:"create-empty-files",children:"Create Empty Files"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:"for i in range(0, 3):\n    filename = 'test' + str(i) + '.md'\n    filepath = root_dir / Path(filename)\n    filepath.touch()\n"})}),"\n",(0,i.jsx)(t.h3,{id:"list-files-in-directory",children:"List Files in Directory"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:"directory = Path('files')\n\nfor item in directory.iterdir():\n    with open(item, 'r') as file:\n        print(file.read())\n"})}),"\n",(0,i.jsx)(t.h3,{id:"rename-files",children:"Rename Files"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:"from pathlib import Path\n\nroot_dir = Path('files')\n\n# Replace the file extension\n\nfile = Path('files/test2.md')\nfilename = file.with_suffix('.csv')\nfile.rename(filename)\n\n# Add static prefix to filename\n\nfile_paths = root_dir.iterdir()\n\nfor path in file_paths:\n    if path.is_file():\n        new_filename = \"prefix_\" + path.stem + path.suffix\n        # print(new_filename)\n        new_path = path.with_name(new_filename)\n        path.rename(new_path)\n\n# Add suffix based on sub directory\n\nrecursive_paths = root_dir.glob('**/*')\n\nfor path in recursive_paths:\n    if path.is_file():\n        parent_folder = path.parts[-2]\n        # print(parent_folder)\n        new_filename = path.stem + '_' + parent_folder + path.suffix\n        # print(new_filename)\n        new_path = path.with_name(new_filename)\n        path.rename(new_path)\n"})}),"\n",(0,i.jsx)(t.h3,{id:"get-file-properties",children:"Get File Properties"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"Path()"})," gives us access to file properties:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:"path = Path('files/test1.md')\nstats = path.stat()\nprint(stats)\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Filesize: ",(0,i.jsx)(t.code,{children:"st_size"})]}),"\n",(0,i.jsxs)(t.li,{children:["File last accessed: ",(0,i.jsx)(t.code,{children:"st_atime"})]}),"\n",(0,i.jsxs)(t.li,{children:["File last modified: ",(0,i.jsx)(t.code,{children:"st_mtime"})]}),"\n",(0,i.jsxs)(t.li,{children:["File created: ",(0,i.jsx)(t.code,{children:"st_ctime"})]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"os.stat_result(st_mode=33279, st_ino=1809540, st_dev=2050, st_nlink=1, st_uid=1000, st_gid=1001, st_size=25, st_atime=1665554138, st_mtime=1665553956, st_ctime=1665574233)\n"})}),"\n",(0,i.jsx)(t.p,{children:"We can use those properties to further process the file:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:"from pathlib import Path\nfrom datetime import datetime\n\npath = Path('files/test1.md')\nstats = path.stat()\n\n# Get file size and set unit\ndef get_size():\n    file_bytes = stats.st_size\n    file_kilobytes = file_bytes / 1024\n    file_megabytes = file_kilobytes / 1024\n\n    if file_megabytes > 1:\n        return str(file_megabytes) + ' MB'\n    elif file_kilobytes > 1:\n        return str(file_kilobytes) + ' kB'\n    else:\n        return str(file_bytes) + ' B'\n\n# Get date last accessed and process timestamp\nlast_accessed = stats.st_ctime\ndate_accessed = datetime.fromtimestamp(last_accessed).strftime(\"%Y-%m-%d_%H:%M:%S\")\n\n\n\n# Append timestamp to file\nwith open(path, 'a') as file:\n    file.write('\\n' + date_accessed + ' | ' + get_size() + '\\n') \n"})}),"\n",(0,i.jsx)(t.h3,{id:"zip-and-unzip",children:"Zip and Unzip"}),"\n",(0,i.jsx)(t.p,{children:"Write to zip container and add timestamp:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:"from pathlib import Path\nfrom datetime import datetime\nimport zipfile\n\nroot_dir = Path('files/projectA')\n# get timestamp for archive name\nnow = datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\narchive_name = now + '_archive.zip'\narchive_path = root_dir / Path(archive_name)\n\n# write all markdown pages in dir to zip container\nwith zipfile.ZipFile(archive_path, 'w') as zf:\n    for path in root_dir.glob('*.md'):\n        zf.write(path)\n        # delete source files\n        # path.unlink()\n"})}),"\n",(0,i.jsx)(t.p,{children:"Unzip all containers from a directory recursively to individual destination folder:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:"# unzip all containers in root dir recursively\ndestination_path = Path('files/unzipped')\n\nfor path in root_dir.rglob('*.zip'):\n    with zipfile.ZipFile(path, 'r') as zf:\n        sub_dir = destination_path / Path(path.stem)\n        zf.extractall(path=sub_dir)\n"})}),"\n",(0,i.jsx)(t.h2,{id:"downloading-code-from-github",children:"Downloading Code from Github"}),"\n",(0,i.jsx)(t.p,{children:"Navigate to your project page and select the latest release to get the download URL. Then add a Python script to handle the HTTP download:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:"import requests\nimport tarfile\nimport os\n\nversion = '1.4.19'\nurl = 'https://github.com/hashicorp/terraform-provider-nomad/archive/refs/tags/v' + version + '.tar.gz'\n\narchive = requests.get(url).content\n\nwith open('src/terraform_provider_nomad.tar.gz', 'wb') as file:\n    file.write(archive)\n\n# extract all\narchive_extraction = tarfile.open('src/terraform_provider_nomad.tar.gz')\narchive_extraction.extractall('src')\narchive_extraction.close()\n\n# single file extraction\ncontainer_path = 'terraform-provider-nomad-' + version + '/CHANGELOG.md'\nfile_extraction = tarfile.open('./src/terraform_provider_nomad.tar.gz', 'r:gz')\nfile_extraction.extract(container_path,'./version')\nfile_extraction.close()\n\n# output\nos.remove(\"src/terraform_provider_nomad.tar.gz\")\nprint('INFO :: All files downloaded and extracted to src/terraform-provider-nomad-' + version)\nwith open('version/terraform-provider-nomad-' + version + '/CHANGELOG.md', 'r') as file:\n    print(file.read())\n"})}),"\n",(0,i.jsx)(t.h3,{id:"search",children:"Search"}),"\n",(0,i.jsx)(t.p,{children:"Find all files and folders that contain a search term:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:"from pathlib import Path\n\nroot_dir = Path('files')\nsearch_term = 'test'\n\nfor path in root_dir.rglob('*'):\n    if search_term in path.stem:\n        print(path.absolute())\n"})}),"\n",(0,i.jsx)(t.h3,{id:"delete-files",children:"Delete Files"}),"\n",(0,i.jsx)(t.p,{children:"Delete all zip container recursively from a root directory securely:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:"from pathlib import Path\n\nroot_dir = Path('files/projectA')\n\nfor path in root_dir.rglob(\"*.zip\"):\n    with open(path, 'wb') as file:\n        # overwrite with empty bytes to delete secure\n        file.write(b'')\n    # delete all zip files\n    path.unlink()\n"})}),"\n",(0,i.jsx)(t.p,{children:"And wrapping everything up into a PyQT6 desktop application:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Python - The Filesystem",src:n(546688).Z+"",width:"898",height:"174"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:"from PyQt6.QtWidgets import (\n    QApplication,\n    QVBoxLayout,\n    QHBoxLayout,\n    QPushButton,\n    QWidget,\n    QLabel,\n    QFileDialog\n)\nfrom pathlib import Path\n\ndef open_files():\n    global filenames\n    # return absolute path of user selected files\n    filenames, _ = QFileDialog.getOpenFileNames(window, 'Select files')\n    message.setText('\\n'.join(filenames))\n\ndef delete_files():\n    for filename in filenames:\n        path = Path(filename)\n        with open(path, 'wb') as file:\n            file.write(b'')\n        path.unlink()\n        message.setText('Deleted!')\n\n\napp = QApplication([])\nwindow = QWidget()\nwindow.setWindowTitle('Destroyer of Worlds')\n\n# set layout\n\nlayout_main = QVBoxLayout()\nlayout_top_container = QHBoxLayout()\nlayout_main.addLayout(layout_top_container)\nlayout_bottom_container = QHBoxLayout()\nlayout_main.addLayout(layout_bottom_container)\n\n# select files to delete\n\ndescription = QLabel('Select files for <font color=\"red\">deletion</font>: ')\nlayout_top_container.addWidget(description)\n\nopen_btn = QPushButton('Open Files')\nopen_btn.setToolTip('Open files and select for deletions.')\nlayout_top_container.addWidget(open_btn)\nopen_btn.clicked.connect(open_files)\n\n# delete selected files\n\ndel_btn = QPushButton('Delete Files')\ndel_btn.setToolTip('Permanently delete all selected files.')\nlayout_bottom_container.addWidget(del_btn)\ndel_btn.clicked.connect(delete_files)\n\n# show filepath of selected files\n\nmessage = QLabel('')\nlayout_main.addWidget(message)\n\n# run app\n\nwindow.setLayout(layout_main)\nwindow.show()\napp.exec()\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.ah)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},603905:(e,t,n)=>{n.d(t,{ah:()=>d});var i=n(667294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=i.createContext({}),d=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=d(n),_=r,f=h["".concat(o,".").concat(_)]||h[_]||c[_]||s;return n?i.createElement(f,a(a({ref:t},p),{},{components:n})):i.createElement(f,a({ref:t},p))}));p.displayName="MDXCreateElement"},105777:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-5f44d483789c3ce79f05418f930f5cd2.jpg"},546688:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/python-filesystem_01-7d9663ac4c2cf4d7ddafaad1a840ce25.png"}}]);