"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[38684],{28989:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>x,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var d=s(785893),r=s(603905);const i={sidebar_position:4530,slug:"2023-03-16",title:"Tensorflow 2 - Transfer Learning",authors:"mpolinowski",tags:["Python","Machine Learning","Tensorflow"],description:"Scale a pre-trained model to fit your needs"},t="Tensorflow Transfer Learning",l={id:"IoT-and-Machine-Learning/ML/2023-03-16-tensorflow-transfer-learning-scaling/index",title:"Tensorflow 2 - Transfer Learning",description:"Scale a pre-trained model to fit your needs",source:"@site/docs/IoT-and-Machine-Learning/ML/2023-03-16-tensorflow-transfer-learning-scaling/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2023-03-16-tensorflow-transfer-learning-scaling",slug:"/IoT-and-Machine-Learning/ML/2023-03-16-tensorflow-transfer-learning-scaling/2023-03-16",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-03-16-tensorflow-transfer-learning-scaling/2023-03-16",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2023-03-16-tensorflow-transfer-learning-scaling/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Tensorflow",permalink:"/docs/tags/tensorflow"}],version:"current",sidebarPosition:4530,frontMatter:{sidebar_position:4530,slug:"2023-03-16",title:"Tensorflow 2 - Transfer Learning",authors:"mpolinowski",tags:["Python","Machine Learning","Tensorflow"],description:"Scale a pre-trained model to fit your needs"},sidebar:"tutorialSidebar",previous:{title:"Tensorflow 2 - Unsupervised Learning",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-03-24-tensorflow-unsupervised-learning-autoencoders/2023-03-24"},next:{title:"Tensorflow 2 - Transfer Learning",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-03-11-tensorflow-transfer-learning-fine-tuning/2023-03-11"}},c={},a=[{value:"Model Scaling",id:"model-scaling",level:2},{value:"Get Data",id:"get-data",level:3},{value:"Model Building and Training",id:"model-building-and-training",level:3},{value:"Fine-tuning the Model",id:"fine-tuning-the-model",level:3},{value:"Saving and Restoring the Trained Model",id:"saving-and-restoring-the-trained-model",level:3},{value:"Evaluating Predictions",id:"evaluating-predictions",level:3},{value:"Accuracy Score",id:"accuracy-score",level:4},{value:"Confusion Matrix",id:"confusion-matrix",level:4},{value:"SciKit Learn Classification Report",id:"scikit-learn-classification-report",level:4},{value:"Run Predictions",id:"run-predictions",level:3},{value:"Find most Wrong Predictions",id:"find-most-wrong-predictions",level:3},{value:"Predict Custom Images",id:"predict-custom-images",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.ah)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{alt:"Victoria Harbour, Hongkong",src:s(561853).Z+"",width:"1500",height:"618"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.a,{href:"#tensorflow-transfer-learning",children:"Tensorflow Transfer Learning"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.a,{href:"#model-scaling",children:"Model Scaling"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"#get-data",children:"Get Data"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"#model-building-and-training",children:"Model Building and Training"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"#fine-tuning-the-model",children:"Fine-tuning the Model"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"#saving-and-restoring-the-trained-model",children:"Saving and Restoring the Trained Model"})}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.a,{href:"#evaluating-predictions",children:"Evaluating Predictions"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"#accuracy-score",children:"Accuracy Score"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"#confusion-matrix",children:"Confusion Matrix"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"#scikit-learn-classification-report",children:"SciKit Learn Classification Report"})}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"#run-predictions",children:"Run Predictions"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"#find-most-wrong-predictions",children:"Find most Wrong Predictions"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"#predict-custom-images",children:"Predict Custom Images"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.a,{href:"https://github.com/mpolinowski/tf-2023",children:"Github Repository"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.em,{children:"See also:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Fun, fun, tensors: ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-19-tensorflow-introduction/2023-02-19",children:"Tensor Constants, Variables and Attributes"}),", ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-21-tensorflow-tensors-2/2023-02-21",children:"Tensor Indexing, Expanding and Manipulations"}),", ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-22-tensorflow-tensors-3/2023-02-22",children:"Matrix multiplications, Squeeze, One-hot and Numpy"})]}),"\n",(0,d.jsxs)(n.li,{children:["Tensorflow 2 - Neural Network Regression: ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-23-tensorflow-neural-network-regression/2023-02-23",children:"Building a Regression Model"}),", ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-24-tensorflow-neural-network-regression-evaluation/2023-02-24",children:"Model Evaluation"}),", ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-25-tensorflow-neural-network-regression-experiments/2023-02-25",children:"Model Optimization"}),", ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-26-tensorflow-neural-network-regression-real-dataset/2023-02-26",children:'Working with a "Real" Dataset'}),", ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-26-tensorflow-neural-network-regression-data-preprocessing/2023-02-26",children:"Feature Scaling"})]}),"\n",(0,d.jsxs)(n.li,{children:["Tensorflow 2 - Neural Network Classification: ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-27-tensorflow-neural-network-classification/2023-02-27",children:"Non-linear Data and Activation Functions"}),", ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-02-28-tensorflow-neural-network-classification-model-evaluation/2023-02-28",children:"Model Evaluation and Performance Improvement"}),", ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-02-tensorflow-neural-network-multi-classification/2023-03-02",children:"Multiclass Classification Problems"})]}),"\n",(0,d.jsxs)(n.li,{children:["Tensorflow 2 - Convolutional Neural Networks: ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-03-tensorflow-convolutional-neural-network-binary-classifications/2023-03-03",children:"Binary Image Classification"}),", ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-05-tensorflow-convolutional-neural-network-multiclass-classifications/2023-03-05",children:"Multiclass Image Classification"})]}),"\n",(0,d.jsxs)(n.li,{children:["Tensorflow 2 - Transfer Learning: ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-06-tensorflow-transfer-learning-feature-extraction/2023-03-06",children:"Feature Extraction"}),", ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-11-tensorflow-transfer-learning-fine-tuning/2023-03-11",children:"Fine-Tuning"}),", ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-16-tensorflow-transfer-learning-scaling/2023-03-16",children:"Scaling"})]}),"\n",(0,d.jsxs)(n.li,{children:["Tensorflow 2 - Unsupervised Learning: ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-24-tensorflow-unsupervised-learning-autoencoders/2023-03-24",children:"Autoencoder Feature Detection"}),", ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-26-tensorflow-unsupervised-learning-autoencoders-super-resolution/2023-03-26",children:"Autoencoder Super-Resolution"}),", ",(0,d.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-03-26-tensorflow-unsupervised-learning-generative-adversial-networks/2023-03-26",children:"Generative Adverserial Networks"})]}),"\n"]}),"\n",(0,d.jsx)(n.h1,{id:"tensorflow-transfer-learning",children:"Tensorflow Transfer Learning"}),"\n",(0,d.jsx)(n.h2,{id:"model-scaling",children:"Model Scaling"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsx)(n.li,{children:"Pretraining EfficientNetB0 (10% of Dataset with 10 Classes)"}),"\n",(0,d.jsx)(n.li,{children:"Fine-Tuning (100% of Dataset with 10 Classes)"}),"\n",(0,d.jsx)(n.li,{children:"Scaling the Model to all 101 Classes (10% of Dataset with 101 Classes)"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"import datetime\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport random\nfrom sklearn.metrics import accuracy_score, classification_report\nimport tensorflow as tf\nfrom tensorflow.keras.utils import image_dataset_from_directory\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# export helper functions from above into helper script\nfrom helper import (create_tensorboard_callback,\n                    create_checkpoint_callback,\n                    plot_accuracy_curves,\n                    combine_training_curves,\n                    data_augmentation_layer_no_rescaling,\n                    plot_confusion_matrix)\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# global variables\nSEED = 42\nBATCH_SIZE = 32\nIMG_SHAPE = (224, 224)\n"})}),"\n",(0,d.jsx)(n.h3,{id:"get-data",children:"Get Data"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# preparing datasets\n# wget https://storage.googleapis.com/ztm_tf_course/food_vision/101_food_classes_10_percent.zip\n\ntraining_directory = \"../datasets/101_food_classes_10_percent/train\"\ntesting_directory = \"../datasets/101_food_classes_10_percent/test\"\n\ntraining_data_101_10 = image_dataset_from_directory(training_directory,\n                                              labels='inferred',\n                                              label_mode='categorical',\n                                              seed=SEED,\n                                              shuffle=True,\n                                              image_size=IMG_SHAPE,\n                                              batch_size=BATCH_SIZE)\n\ntesting_data_101_10 = image_dataset_from_directory(testing_directory,\n                                              labels='inferred',\n                                              label_mode='categorical',\n                                              seed=SEED,\n                                              shuffle=False,\n                                              image_size=IMG_SHAPE,\n                                              batch_size=BATCH_SIZE)\n\n# get class names\nclass_names_101_10 = training_data_101_10.class_names\nlen(class_names_101_10), class_names_101_10\n\n# Found 7575 files belonging to 101 classes.\n# Found 25250 files belonging to 101 classes.\n\n# (101,\n#  ['apple_pie',\n#   'baby_back_ribs',\n#   'baklava',\n#   'beef_carpaccio',\n#   'beef_tartare',\n#   'beet_salad',\n#   'beignets',\n#   'bibimbap',\n#   'bread_pudding',\n#   'breakfast_burrito',\n#   'bruschetta',\n#   'caesar_salad',\n#   'cannoli',\n#   'caprese_salad',\n#   'carrot_cake',\n#   'ceviche',\n#   'cheese_plate',\n#   'cheesecake',\n#   'chicken_curry',\n#   'chicken_quesadilla',\n#   'chicken_wings',\n#   'chocolate_cake',\n#   'chocolate_mousse',\n#   'churros',\n#   'clam_chowder',\n#   'club_sandwich',\n#   'crab_cakes',\n#   'creme_brulee',\n#   'croque_madame',\n#   'cup_cakes',\n#   'deviled_eggs',\n#   'donuts',\n#   'dumplings',\n#   'edamame',\n#   'eggs_benedict',\n#   'escargots',\n#   'falafel',\n#   'filet_mignon',\n#   'fish_and_chips',\n#   'foie_gras',\n#   'french_fries',\n#   'french_onion_soup',\n#   'french_toast',\n#   'fried_calamari',\n#   'fried_rice',\n#   'frozen_yogurt',\n#   'garlic_bread',\n#   'gnocchi',\n#   'greek_salad',\n#   'grilled_cheese_sandwich',\n#   'grilled_salmon',\n#   'guacamole',\n#   'gyoza',\n#   'hamburger',\n#   'hot_and_sour_soup',\n#   'hot_dog',\n#   'huevos_rancheros',\n#   'hummus',\n#   'ice_cream',\n#   'lasagna',\n#   'lobster_bisque',\n#   'lobster_roll_sandwich',\n#   'macaroni_and_cheese',\n#   'macarons',\n#   'miso_soup',\n#   'mussels',\n#   'nachos',\n#   'omelette',\n#   'onion_rings',\n#   'oysters',\n#   'pad_thai',\n#   'paella',\n#   'pancakes',\n#   'panna_cotta',\n#   'peking_duck',\n#   'pho',\n#   'pizza',\n#   'pork_chop',\n#   'poutine',\n#   'prime_rib',\n#   'pulled_pork_sandwich',\n#   'ramen',\n#   'ravioli',\n#   'red_velvet_cake',\n#   'risotto',\n#   'samosa',\n#   'sashimi',\n#   'scallops',\n#   'seaweed_salad',\n#   'shrimp_and_grits',\n#   'spaghetti_bolognese',\n#   'spaghetti_carbonara',\n#   'spring_rolls',\n#   'steak',\n#   'strawberry_shortcake',\n#   'sushi',\n#   'tacos',\n#   'takoyaki',\n#   'tiramisu',\n#   'tuna_tartare',\n#   'waffles'])\n"})}),"\n",(0,d.jsx)(n.h3,{id:"model-building-and-training",children:"Model Building and Training"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# create callbacks from helper.py\n## checkpoint callback\ncheckpoint_callback = create_checkpoint_callback(\n    dir_name='../checkpoints/transfer_learning_scaling',\n    experiment_name='101_classes_10_percent_dataset')\n\n## tensorboard callback\ntensorboard_callback = create_tensorboard_callback(\n    dir_name='../tensorboard/transfer_learning_scaling',\n    experiment_name='101_classes_10_percent_dataset')\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# get base model from keras applications\nbase_model = tf.keras.applications.efficientnet_v2.EfficientNetV2B0(\n    include_top=False\n)\nbase_model.trainable = False\n\n# build model using keras functional API\ninput_layer = tf.keras.layers.Input(shape=IMG_SHAPE+(3,), name='input_layer')\n# use image augmentation layer from helper.py\ndata = data_augmentation_layer_no_rescaling(input_layer)\n# run in inference mode so batchnorm statistics don't get updated\n# even after unfreezing the base model for fine-tuning\ndata = base_model(data, training=False)\ndata = tf.keras.layers.GlobalAveragePooling2D(name=\"global_average_pooling_layer\")(data)\noutput_layer = tf.keras.layers.Dense(len(class_names_101_10), activation=\"softmax\", name=\"output_layer\")(data)\n\nmodel = tf.keras.Model(input_layer, output_layer)\n\n# compile the model\nmodel.compile(loss='categorical_crossentropy',\n               optimizer=tf.keras.optimizers.Adam(),\n               metrics=['accuracy'])\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# fit the model\ntf.random.set_seed(SEED)\n## training epochs before fine-tuning\npretraining_epochs = 5\n\nhistory_model = model.fit(\n                training_data_101_10,\n                epochs=pretraining_epochs,\n                steps_per_epoch=len(training_data_101_10),\n                validation_data=testing_data_101_10,\n                # evaluate performance on 15% of the testing dataset\n                validation_steps=int(0.15 * len(testing_data_101_10)),\n                callbacks=[tensorboard_callback,\n                           checkpoint_callback])\n\n# Epoch 5/5\n# 73s 307ms/step - loss: 1.5557 - accuracy: 0.6176 - val_loss: 1.8671 - val_accuracy: 0.5246\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# evaluate performance on whole dataset\npre_training_results = model.evaluate(testing_data_101_10)\nprint(pre_training_results)\n\n# [1.5907552242279053, 0.5817425847053528]\n"})}),"\n",(0,d.jsx)(n.h3,{id:"fine-tuning-the-model",children:"Fine-tuning the Model"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# unfreeze entire model\nbase_model.trainable = True\n\n# keep only the last 5 layers trainable\nfor layer in base_model.layers[:-5]:\n    layer.trainable = False\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# list all layers in model\nfor layer in model.layers:\n    print(layer, layer.trainable)\n    \n# <keras.engine.input_layer.InputLayer object at 0x7f695c39b370> True\n# <keras.engine.sequential.Sequential object at 0x7f695c39a260> True\n# <keras.engine.functional.Functional object at 0x7f6943f0d300> True\n# <keras.layers.pooling.global_average_pooling2d.GlobalAveragePooling2D object at 0x7f6943f4e830> True\n# <keras.layers.core.dense.Dense object at 0x7f69400c0520> True\n    \n# layer 2 is the now only partly unfrozen imported model (efficientnetb0)\nfor layer_number, layer in enumerate(model.layers[2].layers):\n    print(layer_number, layer.name, layer.trainable)\n    \n# 0 input_1 False\n# 1 rescaling False\n# 2 normalization False\n# ...\n# 262 block6h_se_excite False\n# 263 block6h_project_conv False\n# 264 block6h_project_bn False\n# 265 block6h_drop True\n# 266 block6h_add True\n# 267 top_conv True\n# 268 top_bn True\n# 269 top_activation True\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# recompile the model with the new basemodel\n### to prevent overfitting / to better hold on to pre-training\n### the learning rate during fine-tuning should be lowered 10x\n### default Adam(lr)=1e-3 => 1e-4\nmodel.compile(loss='categorical_crossentropy',\n               optimizer=tf.keras.optimizers.Adam(learning_rate=1e-4),\n               metrics=['accuracy'])\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# continue training\ntf.random.set_seed(SEED)\nfine_tuning_epochs = pretraining_epochs + 5\n\nhistory_fine_tuning_model = model.fit(\n                training_data_101_10,\n                epochs=fine_tuning_epochs,\n                # start from last pre-training checkpoint\n                # training from epoch 6 - 10\n                initial_epoch = history_model.epoch[-1],\n                steps_per_epoch=len(training_data_101_10),\n                validation_data=testing_data_101_10,\n                # evaluate performance on 15% of the testing dataset\n                validation_steps=int(0.15 * len(testing_data_101_10)),\n                callbacks=[tensorboard_callback,\n                           checkpoint_callback])\n\n# Epoch 10/10\n# 70s 294ms/step - loss: 1.3161 - accuracy: 0.6547 - val_loss: 1.7494 - val_accuracy: 0.5469\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# evaluate performance on whole dataset\nfine_tuning_results = model.evaluate(testing_data_101_10)\nprint(fine_tuning_results)\n\n# pre_training_results\n# [1.5907552242279053, 0.5817425847053528]\n\n# fine_tuning_results\n# [1.513363242149353, 0.5931881070137024]\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'# print accuracy curves\nplot_accuracy_curves(history_model, "Pre-Training", history_fine_tuning_model, "Fine-Tuning")\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{alt:"Transfer Learning",src:s(857162).Z+"",width:"990",height:"505"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# the validation accuracy increase keeps slowing while training\n# accuracy goes up this points to an overfitting problem\ncombine_training_curves(history_model, history_fine_tuning_model, pretraining_epochs=5)\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{alt:"Transfer Learning",src:s(722617).Z+"",width:"671",height:"701"})}),"\n",(0,d.jsx)(n.p,{children:"The model keeps improving but there is a growing gap between training and validation. This means that the model is overfitting the test data. Leading to worse results during the validation run."}),"\n",(0,d.jsx)(n.h3,{id:"saving-and-restoring-the-trained-model",children:"Saving and Restoring the Trained Model"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'# saving the model\nmodels_path = "../saved_models/model_101_classes_10_percent_training_data"\n# model.save(models_path)\n# INFO:tensorflow:Assets written to: ../saved_models/model_101_classes_10_percent_training_data/assets\n'})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# load the model\nloaded_model = tf.keras.models.load_model(models_path)\n\n# verify the model was loaded correctly\nloaded_model_results = loaded_model.evaluate(testing_data_101_10)\nprint(loaded_model_results)\n\n# fine_tuning_results to compare\n# [1.513363242149353, 0.5931881070137024]\n\n# loaded_model_results are the same - it worked!\n# [1.513363242149353, 0.5931881070137024]\n"})}),"\n",(0,d.jsx)(n.h3,{id:"evaluating-predictions",children:"Evaluating Predictions"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# making predictions on all 25250 validation images for 101 classes\ntest_prediction_probabilities = loaded_model.predict(testing_data_101_10, verbose=1)\nprint(test_prediction_probabilities.shape)\n# (25250, 101)\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# display prediction probabilities for the first image\nprint(test_prediction_probabilities[:1])\n\n# [[2.03596894e-03 3.65167543e-05 2.17581794e-01 5.17010115e-08\n#   3.32512741e-06 2.29585039e-05 2.71960180e-05 1.80260338e-06\n#   5.30003861e-04 2.73975573e-04 1.06404877e-05 6.97153791e-06\n#   1.50283886e-04 2.78270818e-06 3.42393899e-03 2.25132797e-02\n#   2.40503272e-04 2.13146021e-04 1.64284266e-03 9.58332021e-05\n#   1.32550078e-03 2.55020423e-05 7.39933093e-05 1.92245971e-05\n#   8.13204853e-04 1.93982956e-03 8.89056770e-04 6.18012882e-06\n#   7.59714108e-04 8.36205290e-05 3.92342417e-06 2.00494527e-04\n#   2.51588156e-03 6.87084466e-05 7.40043120e-04 4.45897895e-05\n#   4.05072642e-04 4.21193661e-04 1.59948692e-02 2.43602030e-04\n#   1.10967096e-03 6.28277950e-04 5.56461528e-05 6.36936966e-05\n#   4.16825242e-05 8.82518361e-05 1.96498135e-04 4.21540433e-04\n#   1.76622216e-05 1.82788055e-02 4.08739754e-04 2.77833984e-04\n#   6.94064796e-02 7.92958029e-03 2.63221909e-06 3.67652555e-03\n#   1.11585250e-04 1.25307284e-04 5.01443865e-03 2.33431001e-05\n#   9.54853363e-07 6.14999968e-04 1.00202730e-03 6.56907330e-04\n#   1.59870205e-03 9.99520998e-05 5.11349281e-05 3.93474428e-03\n#   1.97406291e-04 3.40633960e-05 8.98707913e-06 1.06544203e-05\n#   5.15696120e-05 1.98621456e-05 5.94679965e-04 3.69085114e-06\n#   1.09817571e-04 2.08929856e-03 1.73596389e-04 2.66812931e-05\n#   1.44478225e-03 1.20244418e-04 1.30806561e-03 2.10159646e-06\n#   2.99385400e-04 5.72092354e-01 2.51285546e-02 1.11975627e-04\n#   4.98035988e-05 2.09982645e-05 3.76860640e-08 3.77362909e-07\n#   1.97288580e-03 1.36366225e-05 2.58001910e-05 1.10756594e-03\n#   6.64085674e-04 9.06130299e-05 4.01897114e-06 8.89552932e-04\n#   1.07155865e-04]]\n\n# the highest probabilty is `5.72092354e-01`\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'# get position of the class with the highest probability\narr = np.array(test_prediction_probabilities[:1])\npredicted_class = np.argmax(arr)\nprint(f"INFO :: The predicted Class Number is: {predicted_class}")\n# INFO :: The predicted Class Number is: 85\nprint(f"INFO :: The predicted Class is: {class_names_101_10[predicted_class]}")\n# INFO :: The predicted Class is: samosa\n'})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# get all predicted classes\npredicted_classes = test_prediction_probabilities.argmax(axis=1)\n\n# there are predicted classes for all validation images\nprint(predicted_classes.shape)\n# (25250,)\n\n# print the predicted classes for the first 10 images\nprint(predicted_classes[:10])\n# [85  0  0  8  8 78 29 46  0  0]\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# get all true labels from batched dataset\nprint(testing_data_101_10)\n# <BatchDataset element_spec=(TensorSpec(shape=(None, 224, 224, 3), dtype=tf.float32,name=None),\n#                            TensorSpec(shape=(None, 101), dtype=tf.float32, name=None))>\n\n# get class_names index value from unbatched dataset\ny_labels = []\nfor images, labels in testing_data_101_10.unbatch():\n    y_labels.append(labels.numpy().argmax())\n\n# display first result\nprint(y_labels[:10])\n\n# these are the true labels and should be identical to `predicted_classes[:10]` above\n# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# training dataset was not shuffled -> all 10 belong to the same class:\n# print(class_names_101_10[0])\n# apple_pie\n"})}),"\n",(0,d.jsx)(n.h4,{id:"accuracy-score",children:"Accuracy Score"}),"\n",(0,d.jsx)(n.p,{children:"Compare the predicted classes to the true classes to get the accuracy score for the model."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# use sklearn to determin the accuracy\nsk_accuracy = accuracy_score(y_true=y_labels,\n                            y_pred=predicted_classes)\nprint(sk_accuracy)\n# 0.5931881188118812 => same as validation_accuracy from tensorflow\n"})}),"\n",(0,d.jsx)(n.h4,{id:"confusion-matrix",children:"Confusion Matrix"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"plot_confusion_matrix(y_pred=y_labels, y_true=predicted_classes, classes=class_names_101_10)\n"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.img,{alt:"Transfer Learning",src:s(224395).Z+"",width:"1099",height:"952"}),"\n",(0,d.jsx)(n.img,{alt:"Transfer Learning",src:s(55791).Z+"",width:"200",height:"200"})]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"plot_confusion_matrix(y_pred=y_labels,\n                      y_true=predicted_classes,\n                      classes=class_names_101_10,\n                      figsize = (88, 88),\n                      text_size=8)\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{alt:"Transfer Learning",src:s(154304).Z+"",width:"6373",height:"6804"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.em,{children:"open in new tab to zoom in"})}),"\n",(0,d.jsxs)(n.p,{children:["We can see that the results are overall impressive. The ",(0,d.jsx)(n.code,{children:"59.3%"})," accuracy is mostly based on a couple of classes that might be hard to distinguish in general:"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"spaghetti_carbonara <-> spaghetti_bolongnese"}),"\n",(0,d.jsx)(n.li,{children:"prime_rib <-> steak"}),"\n",(0,d.jsx)(n.li,{children:"steak <-> filet_mignon"}),"\n",(0,d.jsx)(n.li,{children:"chicken_quesadilla <-> breakfast_burrito"}),"\n",(0,d.jsx)(n.li,{children:"hamburger <-> pulled_pork_sandwich"}),"\n",(0,d.jsx)(n.li,{children:"club_sandwich <-> grilled_cheese_sandwich"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"..."}),"\n",(0,d.jsx)(n.h4,{id:"scikit-learn-classification-report",children:"SciKit Learn Classification Report"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"print(classification_report(y_true=y_labels,\n                            y_pred=predicted_classes))\n"})}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"class #"}),(0,d.jsx)(n.th,{children:"classname"}),(0,d.jsx)(n.th,{children:"precision"}),(0,d.jsx)(n.th,{children:"recall"}),(0,d.jsx)(n.th,{children:"f1-score"}),(0,d.jsx)(n.th,{children:"support"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"apple_pie"}),(0,d.jsx)(n.td,{children:"0.36"}),(0,d.jsx)(n.td,{children:"0.25"}),(0,d.jsx)(n.td,{children:"0.29"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"1"}),(0,d.jsx)(n.td,{children:"baby_back_ribs"}),(0,d.jsx)(n.td,{children:"0.61"}),(0,d.jsx)(n.td,{children:"0.64"}),(0,d.jsx)(n.td,{children:"0.62"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"2"}),(0,d.jsx)(n.td,{children:"baklava"}),(0,d.jsx)(n.td,{children:"0.67"}),(0,d.jsx)(n.td,{children:"0.55"}),(0,d.jsx)(n.td,{children:"0.60"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"3"}),(0,d.jsx)(n.td,{children:"beef_carpaccio"}),(0,d.jsx)(n.td,{children:"0.69"}),(0,d.jsx)(n.td,{children:"0.57"}),(0,d.jsx)(n.td,{children:"0.62"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"4"}),(0,d.jsx)(n.td,{children:"beef_tartare"}),(0,d.jsx)(n.td,{children:"0.65"}),(0,d.jsx)(n.td,{children:"0.31"}),(0,d.jsx)(n.td,{children:"0.42"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"5"}),(0,d.jsx)(n.td,{children:"beet_salad"}),(0,d.jsx)(n.td,{children:"0.65"}),(0,d.jsx)(n.td,{children:"0.32"}),(0,d.jsx)(n.td,{children:"0.43"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"6"}),(0,d.jsx)(n.td,{children:"beignets"}),(0,d.jsx)(n.td,{children:"0.86"}),(0,d.jsx)(n.td,{children:"0.71"}),(0,d.jsx)(n.td,{children:"0.78"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"7"}),(0,d.jsx)(n.td,{children:"bibimbap"}),(0,d.jsx)(n.td,{children:"0.85"}),(0,d.jsx)(n.td,{children:"0.70"}),(0,d.jsx)(n.td,{children:"0.76"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"8"}),(0,d.jsx)(n.td,{children:"bread_pudding"}),(0,d.jsx)(n.td,{children:"0.30"}),(0,d.jsx)(n.td,{children:"0.52"}),(0,d.jsx)(n.td,{children:"0.38"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"9"}),(0,d.jsx)(n.td,{children:"breakfast_burrito"}),(0,d.jsx)(n.td,{children:"0.32"}),(0,d.jsx)(n.td,{children:"0.75"}),(0,d.jsx)(n.td,{children:"0.45"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"10"}),(0,d.jsx)(n.td,{children:"bruschetta"}),(0,d.jsx)(n.td,{children:"0.48"}),(0,d.jsx)(n.td,{children:"0.52"}),(0,d.jsx)(n.td,{children:"0.50"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"11"}),(0,d.jsx)(n.td,{children:"caesar_salad"}),(0,d.jsx)(n.td,{children:"0.63"}),(0,d.jsx)(n.td,{children:"0.62"}),(0,d.jsx)(n.td,{children:"0.62"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"12"}),(0,d.jsx)(n.td,{children:"cannoli"}),(0,d.jsx)(n.td,{children:"0.58"}),(0,d.jsx)(n.td,{children:"0.66"}),(0,d.jsx)(n.td,{children:"0.62"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"13"}),(0,d.jsx)(n.td,{children:"caprese_salad"}),(0,d.jsx)(n.td,{children:"0.53"}),(0,d.jsx)(n.td,{children:"0.60"}),(0,d.jsx)(n.td,{children:"0.56"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"14"}),(0,d.jsx)(n.td,{children:"carrot_cake"}),(0,d.jsx)(n.td,{children:"0.50"}),(0,d.jsx)(n.td,{children:"0.54"}),(0,d.jsx)(n.td,{children:"0.52"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"15"}),(0,d.jsx)(n.td,{children:"ceviche"}),(0,d.jsx)(n.td,{children:"0.36"}),(0,d.jsx)(n.td,{children:"0.31"}),(0,d.jsx)(n.td,{children:"0.33"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"16"}),(0,d.jsx)(n.td,{children:"cheese_plate"}),(0,d.jsx)(n.td,{children:"0.67"}),(0,d.jsx)(n.td,{children:"0.49"}),(0,d.jsx)(n.td,{children:"0.56"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"17"}),(0,d.jsx)(n.td,{children:"cheesecake"}),(0,d.jsx)(n.td,{children:"0.36"}),(0,d.jsx)(n.td,{children:"0.42"}),(0,d.jsx)(n.td,{children:"0.39"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"18"}),(0,d.jsx)(n.td,{children:"chicken_curry"}),(0,d.jsx)(n.td,{children:"0.65"}),(0,d.jsx)(n.td,{children:"0.35"}),(0,d.jsx)(n.td,{children:"0.46"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"19"}),(0,d.jsx)(n.td,{children:"chicken_quesadilla"}),(0,d.jsx)(n.td,{children:"0.70"}),(0,d.jsx)(n.td,{children:"0.38"}),(0,d.jsx)(n.td,{children:"0.49"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"20"}),(0,d.jsx)(n.td,{children:"chicken_wings"}),(0,d.jsx)(n.td,{children:"0.71"}),(0,d.jsx)(n.td,{children:"0.70"}),(0,d.jsx)(n.td,{children:"0.70"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"21"}),(0,d.jsx)(n.td,{children:"chocolate_cake"}),(0,d.jsx)(n.td,{children:"0.61"}),(0,d.jsx)(n.td,{children:"0.52"}),(0,d.jsx)(n.td,{children:"0.56"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"22"}),(0,d.jsx)(n.td,{children:"chocolate_mousse"}),(0,d.jsx)(n.td,{children:"0.44"}),(0,d.jsx)(n.td,{children:"0.35"}),(0,d.jsx)(n.td,{children:"0.39"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"23"}),(0,d.jsx)(n.td,{children:"churros"}),(0,d.jsx)(n.td,{children:"0.82"}),(0,d.jsx)(n.td,{children:"0.64"}),(0,d.jsx)(n.td,{children:"0.72"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"24"}),(0,d.jsx)(n.td,{children:"clam_chowder"}),(0,d.jsx)(n.td,{children:"0.71"}),(0,d.jsx)(n.td,{children:"0.78"}),(0,d.jsx)(n.td,{children:"0.74"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"25"}),(0,d.jsx)(n.td,{children:"club_sandwich"}),(0,d.jsx)(n.td,{children:"0.65"}),(0,d.jsx)(n.td,{children:"0.56"}),(0,d.jsx)(n.td,{children:"0.60"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"26"}),(0,d.jsx)(n.td,{children:"crab_cakes"}),(0,d.jsx)(n.td,{children:"0.36"}),(0,d.jsx)(n.td,{children:"0.55"}),(0,d.jsx)(n.td,{children:"0.43"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"27"}),(0,d.jsx)(n.td,{children:"creme_brulee"}),(0,d.jsx)(n.td,{children:"0.75"}),(0,d.jsx)(n.td,{children:"0.72"}),(0,d.jsx)(n.td,{children:"0.73"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"28"}),(0,d.jsx)(n.td,{children:"croque_madame"}),(0,d.jsx)(n.td,{children:"0.58"}),(0,d.jsx)(n.td,{children:"0.69"}),(0,d.jsx)(n.td,{children:"0.63"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"29"}),(0,d.jsx)(n.td,{children:"cup_cakes"}),(0,d.jsx)(n.td,{children:"0.66"}),(0,d.jsx)(n.td,{children:"0.82"}),(0,d.jsx)(n.td,{children:"0.73"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"30"}),(0,d.jsx)(n.td,{children:"deviled_eggs"}),(0,d.jsx)(n.td,{children:"0.89"}),(0,d.jsx)(n.td,{children:"0.55"}),(0,d.jsx)(n.td,{children:"0.68"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"31"}),(0,d.jsx)(n.td,{children:"donuts"}),(0,d.jsx)(n.td,{children:"0.74"}),(0,d.jsx)(n.td,{children:"0.74"}),(0,d.jsx)(n.td,{children:"0.74"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"32"}),(0,d.jsx)(n.td,{children:"dumplings"}),(0,d.jsx)(n.td,{children:"0.75"}),(0,d.jsx)(n.td,{children:"0.86"}),(0,d.jsx)(n.td,{children:"0.80"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"33"}),(0,d.jsx)(n.td,{children:"edamame"}),(0,d.jsx)(n.td,{children:"0.94"}),(0,d.jsx)(n.td,{children:"0.98"}),(0,d.jsx)(n.td,{children:"0.96"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"34"}),(0,d.jsx)(n.td,{children:"eggs_benedict"}),(0,d.jsx)(n.td,{children:"0.56"}),(0,d.jsx)(n.td,{children:"0.76"}),(0,d.jsx)(n.td,{children:"0.65"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"35"}),(0,d.jsx)(n.td,{children:"escargots"}),(0,d.jsx)(n.td,{children:"0.69"}),(0,d.jsx)(n.td,{children:"0.64"}),(0,d.jsx)(n.td,{children:"0.66"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"36"}),(0,d.jsx)(n.td,{children:"falafel"}),(0,d.jsx)(n.td,{children:"0.53"}),(0,d.jsx)(n.td,{children:"0.43"}),(0,d.jsx)(n.td,{children:"0.47"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"37"}),(0,d.jsx)(n.td,{children:"filet_mignon"}),(0,d.jsx)(n.td,{children:"0.27"}),(0,d.jsx)(n.td,{children:"0.51"}),(0,d.jsx)(n.td,{children:"0.35"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"38"}),(0,d.jsx)(n.td,{children:"fish_and_chips"}),(0,d.jsx)(n.td,{children:"0.60"}),(0,d.jsx)(n.td,{children:"0.75"}),(0,d.jsx)(n.td,{children:"0.66"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"39"}),(0,d.jsx)(n.td,{children:"foie_gras"}),(0,d.jsx)(n.td,{children:"0.42"}),(0,d.jsx)(n.td,{children:"0.16"}),(0,d.jsx)(n.td,{children:"0.23"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"40"}),(0,d.jsx)(n.td,{children:"french_fries"}),(0,d.jsx)(n.td,{children:"0.80"}),(0,d.jsx)(n.td,{children:"0.74"}),(0,d.jsx)(n.td,{children:"0.77"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"41"}),(0,d.jsx)(n.td,{children:"french_onion_soup"}),(0,d.jsx)(n.td,{children:"0.65"}),(0,d.jsx)(n.td,{children:"0.70"}),(0,d.jsx)(n.td,{children:"0.68"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"42"}),(0,d.jsx)(n.td,{children:"french_toast"}),(0,d.jsx)(n.td,{children:"0.54"}),(0,d.jsx)(n.td,{children:"0.50"}),(0,d.jsx)(n.td,{children:"0.52"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"43"}),(0,d.jsx)(n.td,{children:"fried_calamari"}),(0,d.jsx)(n.td,{children:"0.79"}),(0,d.jsx)(n.td,{children:"0.55"}),(0,d.jsx)(n.td,{children:"0.65"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"44"}),(0,d.jsx)(n.td,{children:"fried_rice"}),(0,d.jsx)(n.td,{children:"0.73"}),(0,d.jsx)(n.td,{children:"0.55"}),(0,d.jsx)(n.td,{children:"0.63"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"45"}),(0,d.jsx)(n.td,{children:"frozen_yogurt"}),(0,d.jsx)(n.td,{children:"0.83"}),(0,d.jsx)(n.td,{children:"0.82"}),(0,d.jsx)(n.td,{children:"0.82"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"46"}),(0,d.jsx)(n.td,{children:"garlic_bread"}),(0,d.jsx)(n.td,{children:"0.53"}),(0,d.jsx)(n.td,{children:"0.62"}),(0,d.jsx)(n.td,{children:"0.57"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"47"}),(0,d.jsx)(n.td,{children:"gnocchi"}),(0,d.jsx)(n.td,{children:"0.30"}),(0,d.jsx)(n.td,{children:"0.56"}),(0,d.jsx)(n.td,{children:"0.39"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"48"}),(0,d.jsx)(n.td,{children:"greek_salad"}),(0,d.jsx)(n.td,{children:"0.56"}),(0,d.jsx)(n.td,{children:"0.66"}),(0,d.jsx)(n.td,{children:"0.61"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"49"}),(0,d.jsx)(n.td,{children:"grilled_cheese_sandwich"}),(0,d.jsx)(n.td,{children:"0.37"}),(0,d.jsx)(n.td,{children:"0.45"}),(0,d.jsx)(n.td,{children:"0.41"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"50"}),(0,d.jsx)(n.td,{children:"grilled_salmon"}),(0,d.jsx)(n.td,{children:"0.53"}),(0,d.jsx)(n.td,{children:"0.34"}),(0,d.jsx)(n.td,{children:"0.42"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"51"}),(0,d.jsx)(n.td,{children:"guacamole"}),(0,d.jsx)(n.td,{children:"0.76"}),(0,d.jsx)(n.td,{children:"0.93"}),(0,d.jsx)(n.td,{children:"0.83"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"52"}),(0,d.jsx)(n.td,{children:"gyoza"}),(0,d.jsx)(n.td,{children:"0.62"}),(0,d.jsx)(n.td,{children:"0.58"}),(0,d.jsx)(n.td,{children:"0.60"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"53"}),(0,d.jsx)(n.td,{children:"hamburger"}),(0,d.jsx)(n.td,{children:"0.49"}),(0,d.jsx)(n.td,{children:"0.79"}),(0,d.jsx)(n.td,{children:"0.61"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"54"}),(0,d.jsx)(n.td,{children:"hot_and_sour_soup"}),(0,d.jsx)(n.td,{children:"0.72"}),(0,d.jsx)(n.td,{children:"0.86"}),(0,d.jsx)(n.td,{children:"0.78"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"55"}),(0,d.jsx)(n.td,{children:"hot_dog"}),(0,d.jsx)(n.td,{children:"0.65"}),(0,d.jsx)(n.td,{children:"0.88"}),(0,d.jsx)(n.td,{children:"0.75"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"56"}),(0,d.jsx)(n.td,{children:"huevos_rancheros"}),(0,d.jsx)(n.td,{children:"0.40"}),(0,d.jsx)(n.td,{children:"0.34"}),(0,d.jsx)(n.td,{children:"0.37"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"57"}),(0,d.jsx)(n.td,{children:"hummus"}),(0,d.jsx)(n.td,{children:"0.70"}),(0,d.jsx)(n.td,{children:"0.36"}),(0,d.jsx)(n.td,{children:"0.48"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"58"}),(0,d.jsx)(n.td,{children:"ice_cream"}),(0,d.jsx)(n.td,{children:"0.66"}),(0,d.jsx)(n.td,{children:"0.66"}),(0,d.jsx)(n.td,{children:"0.66"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"59"}),(0,d.jsx)(n.td,{children:"lasagna"}),(0,d.jsx)(n.td,{children:"0.48"}),(0,d.jsx)(n.td,{children:"0.49"}),(0,d.jsx)(n.td,{children:"0.49"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"60"}),(0,d.jsx)(n.td,{children:"lobster_bisque"}),(0,d.jsx)(n.td,{children:"0.77"}),(0,d.jsx)(n.td,{children:"0.67"}),(0,d.jsx)(n.td,{children:"0.71"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"61"}),(0,d.jsx)(n.td,{children:"lobster_roll_sandwich"}),(0,d.jsx)(n.td,{children:"0.69"}),(0,d.jsx)(n.td,{children:"0.64"}),(0,d.jsx)(n.td,{children:"0.66"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"62"}),(0,d.jsx)(n.td,{children:"macaroni_and_cheese"}),(0,d.jsx)(n.td,{children:"0.66"}),(0,d.jsx)(n.td,{children:"0.50"}),(0,d.jsx)(n.td,{children:"0.57"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"63"}),(0,d.jsx)(n.td,{children:"macarons"}),(0,d.jsx)(n.td,{children:"0.97"}),(0,d.jsx)(n.td,{children:"0.80"}),(0,d.jsx)(n.td,{children:"0.88"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"64"}),(0,d.jsx)(n.td,{children:"miso_soup"}),(0,d.jsx)(n.td,{children:"0.74"}),(0,d.jsx)(n.td,{children:"0.87"}),(0,d.jsx)(n.td,{children:"0.80"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"65"}),(0,d.jsx)(n.td,{children:"mussels"}),(0,d.jsx)(n.td,{children:"0.88"}),(0,d.jsx)(n.td,{children:"0.81"}),(0,d.jsx)(n.td,{children:"0.84"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"66"}),(0,d.jsx)(n.td,{children:"nachos"}),(0,d.jsx)(n.td,{children:"0.75"}),(0,d.jsx)(n.td,{children:"0.23"}),(0,d.jsx)(n.td,{children:"0.35"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"67"}),(0,d.jsx)(n.td,{children:"omelette"}),(0,d.jsx)(n.td,{children:"0.41"}),(0,d.jsx)(n.td,{children:"0.43"}),(0,d.jsx)(n.td,{children:"0.42"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"68"}),(0,d.jsx)(n.td,{children:"onion_rings"}),(0,d.jsx)(n.td,{children:"0.73"}),(0,d.jsx)(n.td,{children:"0.88"}),(0,d.jsx)(n.td,{children:"0.80"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"69"}),(0,d.jsx)(n.td,{children:"oysters"}),(0,d.jsx)(n.td,{children:"0.83"}),(0,d.jsx)(n.td,{children:"0.85"}),(0,d.jsx)(n.td,{children:"0.84"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"70"}),(0,d.jsx)(n.td,{children:"pad_thai"}),(0,d.jsx)(n.td,{children:"0.74"}),(0,d.jsx)(n.td,{children:"0.80"}),(0,d.jsx)(n.td,{children:"0.77"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"71"}),(0,d.jsx)(n.td,{children:"paella"}),(0,d.jsx)(n.td,{children:"0.86"}),(0,d.jsx)(n.td,{children:"0.45"}),(0,d.jsx)(n.td,{children:"0.59"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"72"}),(0,d.jsx)(n.td,{children:"pancakes"}),(0,d.jsx)(n.td,{children:"0.66"}),(0,d.jsx)(n.td,{children:"0.62"}),(0,d.jsx)(n.td,{children:"0.64"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"73"}),(0,d.jsx)(n.td,{children:"panna_cotta"}),(0,d.jsx)(n.td,{children:"0.56"}),(0,d.jsx)(n.td,{children:"0.44"}),(0,d.jsx)(n.td,{children:"0.49"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"74"}),(0,d.jsx)(n.td,{children:"peking_duck"}),(0,d.jsx)(n.td,{children:"0.58"}),(0,d.jsx)(n.td,{children:"0.59"}),(0,d.jsx)(n.td,{children:"0.59"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"75"}),(0,d.jsx)(n.td,{children:"pho"}),(0,d.jsx)(n.td,{children:"0.83"}),(0,d.jsx)(n.td,{children:"0.88"}),(0,d.jsx)(n.td,{children:"0.85"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"76"}),(0,d.jsx)(n.td,{children:"pizza"}),(0,d.jsx)(n.td,{children:"0.64"}),(0,d.jsx)(n.td,{children:"0.90"}),(0,d.jsx)(n.td,{children:"0.75"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"77"}),(0,d.jsx)(n.td,{children:"pork_chop"}),(0,d.jsx)(n.td,{children:"0.32"}),(0,d.jsx)(n.td,{children:"0.30"}),(0,d.jsx)(n.td,{children:"0.31"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"78"}),(0,d.jsx)(n.td,{children:"poutine"}),(0,d.jsx)(n.td,{children:"0.61"}),(0,d.jsx)(n.td,{children:"0.68"}),(0,d.jsx)(n.td,{children:"0.65"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"79"}),(0,d.jsx)(n.td,{children:"prime_rib"}),(0,d.jsx)(n.td,{children:"0.45"}),(0,d.jsx)(n.td,{children:"0.82"}),(0,d.jsx)(n.td,{children:"0.58"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"80"}),(0,d.jsx)(n.td,{children:"pulled_pork_sandwich"}),(0,d.jsx)(n.td,{children:"0.62"}),(0,d.jsx)(n.td,{children:"0.52"}),(0,d.jsx)(n.td,{children:"0.56"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"81"}),(0,d.jsx)(n.td,{children:"ramen"}),(0,d.jsx)(n.td,{children:"0.48"}),(0,d.jsx)(n.td,{children:"0.77"}),(0,d.jsx)(n.td,{children:"0.59"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"82"}),(0,d.jsx)(n.td,{children:"ravioli"}),(0,d.jsx)(n.td,{children:"0.36"}),(0,d.jsx)(n.td,{children:"0.29"}),(0,d.jsx)(n.td,{children:"0.32"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"83"}),(0,d.jsx)(n.td,{children:"red_velvet_cake"}),(0,d.jsx)(n.td,{children:"0.69"}),(0,d.jsx)(n.td,{children:"0.65"}),(0,d.jsx)(n.td,{children:"0.67"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"84"}),(0,d.jsx)(n.td,{children:"risotto"}),(0,d.jsx)(n.td,{children:"0.43"}),(0,d.jsx)(n.td,{children:"0.37"}),(0,d.jsx)(n.td,{children:"0.40"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"85"}),(0,d.jsx)(n.td,{children:"samosa"}),(0,d.jsx)(n.td,{children:"0.48"}),(0,d.jsx)(n.td,{children:"0.66"}),(0,d.jsx)(n.td,{children:"0.55"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"86"}),(0,d.jsx)(n.td,{children:"sashimi"}),(0,d.jsx)(n.td,{children:"0.88"}),(0,d.jsx)(n.td,{children:"0.77"}),(0,d.jsx)(n.td,{children:"0.82"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"87"}),(0,d.jsx)(n.td,{children:"scallops"}),(0,d.jsx)(n.td,{children:"0.37"}),(0,d.jsx)(n.td,{children:"0.33"}),(0,d.jsx)(n.td,{children:"0.35"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"88"}),(0,d.jsx)(n.td,{children:"seaweed_salad"}),(0,d.jsx)(n.td,{children:"0.91"}),(0,d.jsx)(n.td,{children:"0.77"}),(0,d.jsx)(n.td,{children:"0.83"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"89"}),(0,d.jsx)(n.td,{children:"shrimp_and_grits"}),(0,d.jsx)(n.td,{children:"0.44"}),(0,d.jsx)(n.td,{children:"0.43"}),(0,d.jsx)(n.td,{children:"0.43"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"90"}),(0,d.jsx)(n.td,{children:"spaghetti_bolognese"}),(0,d.jsx)(n.td,{children:"0.82"}),(0,d.jsx)(n.td,{children:"0.56"}),(0,d.jsx)(n.td,{children:"0.66"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"91"}),(0,d.jsx)(n.td,{children:"spaghetti_carbonara"}),(0,d.jsx)(n.td,{children:"0.66"}),(0,d.jsx)(n.td,{children:"0.96"}),(0,d.jsx)(n.td,{children:"0.78"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"92"}),(0,d.jsx)(n.td,{children:"spring_rolls"}),(0,d.jsx)(n.td,{children:"0.61"}),(0,d.jsx)(n.td,{children:"0.64"}),(0,d.jsx)(n.td,{children:"0.63"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"93"}),(0,d.jsx)(n.td,{children:"steak"}),(0,d.jsx)(n.td,{children:"0.32"}),(0,d.jsx)(n.td,{children:"0.29"}),(0,d.jsx)(n.td,{children:"0.31"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"94"}),(0,d.jsx)(n.td,{children:"strawberry_shortcake"}),(0,d.jsx)(n.td,{children:"0.54"}),(0,d.jsx)(n.td,{children:"0.58"}),(0,d.jsx)(n.td,{children:"0.56"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"95"}),(0,d.jsx)(n.td,{children:"sushi"}),(0,d.jsx)(n.td,{children:"0.74"}),(0,d.jsx)(n.td,{children:"0.51"}),(0,d.jsx)(n.td,{children:"0.61"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"96"}),(0,d.jsx)(n.td,{children:"tacos"}),(0,d.jsx)(n.td,{children:"0.69"}),(0,d.jsx)(n.td,{children:"0.32"}),(0,d.jsx)(n.td,{children:"0.44"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"97"}),(0,d.jsx)(n.td,{children:"takoyaki"}),(0,d.jsx)(n.td,{children:"0.75"}),(0,d.jsx)(n.td,{children:"0.57"}),(0,d.jsx)(n.td,{children:"0.65"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"98"}),(0,d.jsx)(n.td,{children:"tiramisu"}),(0,d.jsx)(n.td,{children:"0.42"}),(0,d.jsx)(n.td,{children:"0.47"}),(0,d.jsx)(n.td,{children:"0.45"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"99"}),(0,d.jsx)(n.td,{children:"tuna_tartare"}),(0,d.jsx)(n.td,{children:"0.36"}),(0,d.jsx)(n.td,{children:"0.35"}),(0,d.jsx)(n.td,{children:"0.35"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"100"}),(0,d.jsx)(n.td,{children:"waffles"}),(0,d.jsx)(n.td,{children:"0.79"}),(0,d.jsx)(n.td,{children:"0.65"}),(0,d.jsx)(n.td,{children:"0.71"}),(0,d.jsx)(n.td,{children:"250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"____________"}),(0,d.jsx)(n.td,{children:"__________"}),(0,d.jsx)(n.td,{children:"__________"}),(0,d.jsx)(n.td,{children:"_________"}),(0,d.jsx)(n.td,{children:"_________"}),(0,d.jsx)(n.td,{children:"_________"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"accuracy"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"0.59"}),(0,d.jsx)(n.td,{children:"25250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"macro avg"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"0.62"}),(0,d.jsx)(n.td,{children:"0.59"}),(0,d.jsx)(n.td,{children:"0.59"}),(0,d.jsx)(n.td,{children:"25250"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"weighted avg"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"0.62"}),(0,d.jsx)(n.td,{children:"0.59"}),(0,d.jsx)(n.td,{children:"0.59"}),(0,d.jsx)(n.td,{children:"25250"})]})]})]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# visualizing the F1 scores per class\nclassification_report_dict = classification_report(y_true=y_labels,\n                                                  y_pred=predicted_classes,\n                                                  output_dict=True)\n# {'0': {'precision': 0.36257309941520466,\n#   'recall': 0.248,\n#   'f1-score': 0.29453681710213775,\n#   'support': 250},\n#  '1': {'precision': 0.6060606060606061,\n#   'recall': 0.64,\n#   'f1-score': 0.622568093385214,\n#   'support': 250},\n#    ...\n\n\n# extract f1-scores from dictionary\nclass_f1_scores = {}\n\n## loop through classification report\nfor k, v in classification_report_dict.items():\n    # stop when you reach end of table => class# = accuracy\n    if k == \"accuracy\":\n        break\n    else:\n        # get class name and f1 score for class #\n        class_f1_scores[class_names_101_10[int(k)]] = v[\"f1-score\"]\n        \n# print(class_f1_scores)\n\n# {'apple_pie': 0.29453681710213775,\n#  'baby_back_ribs': 0.622568093385214,\n#  'baklava': 0.6008771929824562,\n#  ...\n\n# write it into a dataframe\nf1_scores = pd.DataFrame({\"classname\": list(class_f1_scores.keys()),\n                         \"f1-score\": list(class_f1_scores.values())}).sort_values(\"f1-score\", ascending=False)\n\nprint(f1_scores)\n"})}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"class #"}),(0,d.jsx)(n.th,{children:"classname"}),(0,d.jsx)(n.th,{children:"f1-score"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"33"}),(0,d.jsx)(n.td,{children:"edamame"}),(0,d.jsx)(n.td,{children:"0.958904"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"63"}),(0,d.jsx)(n.td,{children:"macarons"}),(0,d.jsx)(n.td,{children:"0.877729"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"75"}),(0,d.jsx)(n.td,{children:"pho"}),(0,d.jsx)(n.td,{children:"0.854369"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"65"}),(0,d.jsx)(n.td,{children:"mussels"}),(0,d.jsx)(n.td,{children:"0.844075"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"69"}),(0,d.jsx)(n.td,{children:"oysters"}),(0,d.jsx)(n.td,{children:"0.837945"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:".."}),(0,d.jsx)(n.td,{children:"..."}),(0,d.jsx)(n.td,{children:"..."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"82"}),(0,d.jsx)(n.td,{children:"ravioli"}),(0,d.jsx)(n.td,{children:"0.320713"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"77"}),(0,d.jsx)(n.td,{children:"pork_chop"}),(0,d.jsx)(n.td,{children:"0.309623"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"93"}),(0,d.jsx)(n.td,{children:"steak"}),(0,d.jsx)(n.td,{children:"0.307368"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"apple_pie"}),(0,d.jsx)(n.td,{children:"0.294537"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"39"}),(0,d.jsx)(n.td,{children:"foie_gras"}),(0,d.jsx)(n.td,{children:"0.228070"})]})]})]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"f1_bar_chart = f1_scores.plot.bar(x='classname',\n                                  y='f1-score',\n                                  title=\"F1 Scores vs Class Names\",\n                                  rot=70, legend=True,\n                                  figsize=(42,12))\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{alt:"Transfer Learning",src:s(186611).Z+"",width:"3308",height:"1161"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"f1_scores_inverse = f1_scores.sort_values(by=['f1-score'])\nf1_bar_chart = f1_scores_inverse.plot.barh(x='classname',\n                                  y='f1-score', fontsize=16,\n                                  title=\"F1 Scores vs Class Names\",\n                                  rot=0, legend=True,\n                                  figsize=(12,36))\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{alt:"Transfer Learning",src:s(885639).Z+"",width:"1265",height:"2844"})}),"\n",(0,d.jsx)(n.h3,{id:"run-predictions",children:"Run Predictions"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# load and preprocess custom images\ndef load_and_preprocess_image(filename, img_shape=224, normalize=True):\n    # load image\n    image = tf.io.read_file(filename)\n    \n    # decode image into tensor\n    image = tf.io.decode_image(image)\n    \n    # print(image.shape)\n    # resize image\n    # image = tf.image.resize(image, [img_shape[0], img_shape[1]])\n    image = tf.image.resize(image, [img_shape, img_shape])\n    # print(image.shape)\n    # models like efficientnet don't\n    #  need normalization -> make it optional\n    if normalize:\n        return image/255\n    else:\n        return image\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'# test prediction\nfile_path = "../datasets/101_food_classes_10_percent/train/caesar_salad/621878.jpg"\n# load and preprocess images\ntest_image = load_and_preprocess_image(file_path, img_shape=224, normalize=False)\n# test image is (224, 224, 3) but model expects batch shape (None, 224, 224, 3)\ntest_image_expanded = tf.expand_dims(test_image, axis=0)\n# get probabilities over all classes\nprediction_probabilities = model.predict(test_image_expanded)\nprint(prediction_probabilities)\n# get classname for highest probability\npredicted_class =  class_names_101_10[prediction_probabilities.argmax()]\nprint(prediction_probabilities.argmax())\nprint(predicted_class)\n\n# 1/1 [==============================] - 2s 2s/step\n# [[1.50316203e-06 6.54247488e-05 3.67346947e-05 2.69303378e-03\n#   6.89498498e-04 1.87405187e-03 5.24590746e-07 9.33061761e-04\n#   8.65595939e-06 3.25173722e-04 5.10892831e-04 3.65509897e-01\n#   5.99349778e-06 7.83709735e-02 2.39862379e-06 5.81788830e-03\n#   9.84990475e-05 3.48087779e-05 1.90171588e-04 1.23677682e-02\n#   6.14877135e-05 2.40283384e-08 2.12790405e-06 1.13999391e-07\n#   5.72356976e-06 7.92978518e-03 9.47913341e-03 7.58256647e-07\n#   1.09906327e-02 7.71022357e-08 2.06695331e-05 5.95029064e-07\n#   2.49674427e-04 6.92231743e-06 2.87168048e-04 3.15096986e-05\n#   4.69330046e-03 6.78624609e-04 7.83884199e-04 1.68355810e-03\n#   1.82755193e-05 9.03009493e-07 2.82402652e-05 1.71108084e-04\n#   8.81860105e-05 3.58489638e-06 3.93012015e-05 4.95287916e-03\n#   4.10611063e-01 2.75604805e-04 5.55841299e-03 1.80046377e-03\n#   6.12967357e-04 1.32623117e-03 3.72738782e-07 7.42003205e-04\n#   6.33771438e-03 1.89700077e-04 1.42778049e-06 1.78189657e-04\n#   2.83671682e-08 5.77349402e-03 1.16270230e-05 1.74992886e-06\n#   2.15548107e-06 1.77174807e-05 2.03449815e-03 7.82472896e-04\n#   3.88388798e-07 1.51169850e-04 2.83787904e-05 9.07634239e-06\n#   3.15053308e-06 2.30283586e-05 1.42191842e-04 3.49449765e-05\n#   2.96340950e-05 3.22835840e-05 3.79087487e-06 3.55910415e-05\n#   6.37637422e-05 1.73983644e-04 5.40133740e-04 6.14976784e-07\n#   1.03683116e-04 9.38189216e-04 1.80834774e-02 7.08847656e-04\n#   3.19155771e-03 3.94216222e-05 6.57606563e-07 1.21063601e-06\n#   9.14987270e-03 7.52260457e-05 2.20976843e-04 2.03661504e-03\n#   1.35101350e-02 1.15356571e-03 1.52835700e-08 1.37943309e-03\n#   1.31967667e-04]]\n# 48\n# greek_salad\n\n'})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'# run prediction on random test images\nlocation = testing_directory\n\nplt.figure(figsize=(17, 15))\n# pick random test images in random class\nfor i in range(9):\n    # get file paths\n    class_name = random.choice(class_names_101_10)\n    file_name = random.choice(os.listdir(location + "/" + class_name))\n    file_path = location + "/" + class_name + "/" + file_name\n    \n    # load and preprocess images\n    test_image = load_and_preprocess_image(file_path, img_shape=224, normalize=False)\n    # test image is (224, 224, 3) but model expects batch shape (None, 224, 224, 3)\n    test_image_expanded = tf.expand_dims(test_image, axis=0)\n    # get probabilities over all classes\n    prediction_probabilities = model.predict(test_image_expanded)\n    # get classname for highest probability\n    predicted_class =  class_names_101_10[prediction_probabilities.argmax()]\n    plt.subplot(3, 3, i+1)\n    # show normalized image\n    plt.imshow(test_image/255.)\n    if class_name == predicted_class:\n        title_color = \'green\'\n    else:\n        title_color = \'red\'\n    plt.title(f"Pred: {predicted_class} ({prediction_probabilities.max()*100:.2f} %), True: {class_name}",\n             c=title_color)\n    plt.axis(False)\n\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{alt:"Transfer Learning",src:s(2972).Z+"",width:"1340",height:"1197"})}),"\n",(0,d.jsx)(n.h3,{id:"find-most-wrong-predictions",children:"Find most Wrong Predictions"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# get all images in the test dataset\ntest_files = testing_directory + \"/*/*.jpg\"\ntest_file_paths = []\nfor file_path in testing_data_101_10.list_files(test_files, shuffle=False):\n    test_file_paths.append(file_path.numpy())\n    \nprint(test_file_paths[:1])\n# [b'../datasets/101_food_classes_10_percent/test/apple_pie/1011328.jpg']\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'# create dataframe with filepaths and pred evals\nprediction_quality = pd.DataFrame({"img_path": test_file_paths,\n                                  "y_true": y_labels,\n                                  "y_pred": predicted_classes,\n                                  "pred_conf": test_prediction_probabilities.max(axis=1),\n                                  "y_true_classname": [class_names_101_10[i] for i in y_labels],\n                                  "y_pred_classname": [class_names_101_10[i] for i in predicted_classes]})\n\nprediction_quality\n\n# the "most wrong" predictions are those where the the predicted and\n# true classname does not match but the prediction confidence is high:\n'})}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"#"}),(0,d.jsx)(n.th,{children:"img_path"}),(0,d.jsx)(n.th,{children:"y_true"}),(0,d.jsx)(n.th,{children:"y_pred"}),(0,d.jsx)(n.th,{children:"pred_conf"}),(0,d.jsx)(n.th,{children:"y_true_classname"}),(0,d.jsx)(n.th,{children:"y_pred_classname"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"85"}),(0,d.jsx)(n.td,{children:"0.498493"}),(0,d.jsx)(n.td,{children:"apple_pie"}),(0,d.jsx)(n.td,{children:"samosa"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"1"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"0.821453"}),(0,d.jsx)(n.td,{children:"apple_pie"}),(0,d.jsx)(n.td,{children:"apple_pie"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"2"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"0.413805"}),(0,d.jsx)(n.td,{children:"apple_pie"}),(0,d.jsx)(n.td,{children:"apple_pie"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"3"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"0.242082"}),(0,d.jsx)(n.td,{children:"apple_pie"}),(0,d.jsx)(n.td,{children:"apple_pie"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"4"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"8"}),(0,d.jsx)(n.td,{children:"0.625819"}),(0,d.jsx)(n.td,{children:"apple_pie"}),(0,d.jsx)(n.td,{children:"bread_pudding"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"..."}),(0,d.jsx)(n.td,{children:"..."}),(0,d.jsx)(n.td,{children:"..."}),(0,d.jsx)(n.td,{children:"..."}),(0,d.jsx)(n.td,{children:"..."}),(0,d.jsx)(n.td,{children:"..."}),(0,d.jsx)(n.td,{children:"..."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"25245"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"100"}),(0,d.jsx)(n.td,{children:"100"}),(0,d.jsx)(n.td,{children:"0.860823"}),(0,d.jsx)(n.td,{children:"waffles"}),(0,d.jsx)(n.td,{children:"waffles"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"25246"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"100"}),(0,d.jsx)(n.td,{children:"100"}),(0,d.jsx)(n.td,{children:"0.969415"}),(0,d.jsx)(n.td,{children:"waffles"}),(0,d.jsx)(n.td,{children:"waffles"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"25247"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"100"}),(0,d.jsx)(n.td,{children:"74"}),(0,d.jsx)(n.td,{children:"0.259333"}),(0,d.jsx)(n.td,{children:"waffles"}),(0,d.jsx)(n.td,{children:"peking_duck"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"25248"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"100"}),(0,d.jsx)(n.td,{children:"100"}),(0,d.jsx)(n.td,{children:"0.266893"}),(0,d.jsx)(n.td,{children:"waffles"}),(0,d.jsx)(n.td,{children:"waffles"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"25249"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"100"}),(0,d.jsx)(n.td,{children:"100"}),(0,d.jsx)(n.td,{children:"0.248541"}),(0,d.jsx)(n.td,{children:"waffles"}),(0,d.jsx)(n.td,{children:"waffles"})]})]})]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'# add bool comlumn for correct predictions\nprediction_quality["pred_correct"] = prediction_quality["y_true"] == prediction_quality["y_pred"]\n'})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'# create new dataframe with the 100 most wrong predictions\ntop_100_wrong = prediction_quality[prediction_quality["pred_correct"] == False].sort_values("pred_conf", ascending=False)[:100]\ntop_100_wrong\n'})}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"#"}),(0,d.jsx)(n.th,{children:"img_path"}),(0,d.jsx)(n.th,{children:"y_true"}),(0,d.jsx)(n.th,{children:"y_pred"}),(0,d.jsx)(n.th,{children:"pred_conf"}),(0,d.jsx)(n.th,{children:"y_true_classname"}),(0,d.jsx)(n.th,{children:"y_pred_classname"}),(0,d.jsx)(n.th,{children:"pred_correct"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"23797"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"95"}),(0,d.jsx)(n.td,{children:"86"}),(0,d.jsx)(n.td,{children:"0.997811"}),(0,d.jsx)(n.td,{children:"sushi"}),(0,d.jsx)(n.td,{children:"sashimi"}),(0,d.jsx)(n.td,{children:"False"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"10880"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"43"}),(0,d.jsx)(n.td,{children:"68"}),(0,d.jsx)(n.td,{children:"0.997761"}),(0,d.jsx)(n.td,{children:"fried_calamari"}),(0,d.jsx)(n.td,{children:"onion_rings"}),(0,d.jsx)(n.td,{children:"False"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"14482"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"57"}),(0,d.jsx)(n.td,{children:"51"}),(0,d.jsx)(n.td,{children:"0.997528"}),(0,d.jsx)(n.td,{children:"hummus"}),(0,d.jsx)(n.td,{children:"guacamole"}),(0,d.jsx)(n.td,{children:"False"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"17897"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"71"}),(0,d.jsx)(n.td,{children:"65"}),(0,d.jsx)(n.td,{children:"0.996058"}),(0,d.jsx)(n.td,{children:"paella"}),(0,d.jsx)(n.td,{children:"mussels"}),(0,d.jsx)(n.td,{children:"False"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"18001"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"72"}),(0,d.jsx)(n.td,{children:"67"}),(0,d.jsx)(n.td,{children:"0.995309"}),(0,d.jsx)(n.td,{children:"pancakes"}),(0,d.jsx)(n.td,{children:"omelette"}),(0,d.jsx)(n.td,{children:"False"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"..."}),(0,d.jsx)(n.td,{children:"..."}),(0,d.jsx)(n.td,{children:"..."}),(0,d.jsx)(n.td,{children:"..."}),(0,d.jsx)(n.td,{children:"..."}),(0,d.jsx)(n.td,{children:"..."}),(0,d.jsx)(n.td,{children:"..."}),(0,d.jsx)(n.td,{children:"..."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"13199"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"52"}),(0,d.jsx)(n.td,{children:"9"}),(0,d.jsx)(n.td,{children:"0.947564"}),(0,d.jsx)(n.td,{children:"gyoza"}),(0,d.jsx)(n.td,{children:"breakfast_burrito"}),(0,d.jsx)(n.td,{children:"False"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"20551"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"82"}),(0,d.jsx)(n.td,{children:"83"}),(0,d.jsx)(n.td,{children:"0.947554"}),(0,d.jsx)(n.td,{children:"ravioli"}),(0,d.jsx)(n.td,{children:"red_velvet_cake"}),(0,d.jsx)(n.td,{children:"False"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"5114"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"20"}),(0,d.jsx)(n.td,{children:"38"}),(0,d.jsx)(n.td,{children:"0.947265"}),(0,d.jsx)(n.td,{children:"chicken_wings"}),(0,d.jsx)(n.td,{children:"fish_and_chips"}),(0,d.jsx)(n.td,{children:"False"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"548"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"2"}),(0,d.jsx)(n.td,{children:"67"}),(0,d.jsx)(n.td,{children:"0.947076"}),(0,d.jsx)(n.td,{children:"baklava"}),(0,d.jsx)(n.td,{children:"omelette"}),(0,d.jsx)(n.td,{children:"False"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"15750"}),(0,d.jsx)(n.td,{children:"b'../datasets/101_food_classes_10_percent/test..."}),(0,d.jsx)(n.td,{children:"63"}),(0,d.jsx)(n.td,{children:"29"}),(0,d.jsx)(n.td,{children:"0.946876"}),(0,d.jsx)(n.td,{children:"macarons"}),(0,d.jsx)(n.td,{children:"cup_cakes"}),(0,d.jsx)(n.td,{children:"False"})]})]})]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"\n# what predictions are most often wrong\ngrouped_top_100_wrong_pred = top_100_wrong.groupby(['y_pred', 'y_pred_classname']).agg(', '.join).reset_index()\ngrouped_top_100_wrong_pred\n"})}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"#"}),(0,d.jsx)(n.th,{children:"y_pred"}),(0,d.jsx)(n.th,{children:"y_pred_classname"}),(0,d.jsx)(n.th,{children:"y_true_classname"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"2"}),(0,d.jsx)(n.td,{children:"baklava"}),(0,d.jsx)(n.td,{children:"garlic_bread"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"1"}),(0,d.jsx)(n.td,{children:"5"}),(0,d.jsx)(n.td,{children:"beet_salad"}),(0,d.jsx)(n.td,{children:"seaweed_salad"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"2"}),(0,d.jsx)(n.td,{children:"9"}),(0,d.jsx)(n.td,{children:"breakfast_burrito"}),(0,d.jsx)(n.td,{children:"chicken_quesadilla, pulled_pork_sandwich, chic..."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"3"}),(0,d.jsx)(n.td,{children:"12"}),(0,d.jsx)(n.td,{children:"cannoli"}),(0,d.jsx)(n.td,{children:"baklava"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"4"}),(0,d.jsx)(n.td,{children:"16"}),(0,d.jsx)(n.td,{children:"cheese_plate"}),(0,d.jsx)(n.td,{children:"cheesecake"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"5"}),(0,d.jsx)(n.td,{children:"20"}),(0,d.jsx)(n.td,{children:"chicken_wings"}),(0,d.jsx)(n.td,{children:"fish_and_chips, french_fries"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"6"}),(0,d.jsx)(n.td,{children:"26"}),(0,d.jsx)(n.td,{children:"crab_cakes"}),(0,d.jsx)(n.td,{children:"falafel"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"7"}),(0,d.jsx)(n.td,{children:"27"}),(0,d.jsx)(n.td,{children:"creme_brulee"}),(0,d.jsx)(n.td,{children:"hummus"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"8"}),(0,d.jsx)(n.td,{children:"28"}),(0,d.jsx)(n.td,{children:"croque_madame"}),(0,d.jsx)(n.td,{children:"poutine"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"9"}),(0,d.jsx)(n.td,{children:"29"}),(0,d.jsx)(n.td,{children:"cup_cakes"}),(0,d.jsx)(n.td,{children:"macarons, carrot_cake, macarons"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"10"}),(0,d.jsx)(n.td,{children:"31"}),(0,d.jsx)(n.td,{children:"donuts"}),(0,d.jsx)(n.td,{children:"escargots"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"11"}),(0,d.jsx)(n.td,{children:"32"}),(0,d.jsx)(n.td,{children:"dumplings"}),(0,d.jsx)(n.td,{children:"gyoza, macaroni_and_cheese"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"12"}),(0,d.jsx)(n.td,{children:"33"}),(0,d.jsx)(n.td,{children:"edamame"}),(0,d.jsx)(n.td,{children:"pho"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"13"}),(0,d.jsx)(n.td,{children:"38"}),(0,d.jsx)(n.td,{children:"fish_and_chips"}),(0,d.jsx)(n.td,{children:"chicken_wings"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"14"}),(0,d.jsx)(n.td,{children:"40"}),(0,d.jsx)(n.td,{children:"french_fries"}),(0,d.jsx)(n.td,{children:"macaroni_and_cheese, poutine"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"15"}),(0,d.jsx)(n.td,{children:"42"}),(0,d.jsx)(n.td,{children:"french_toast"}),(0,d.jsx)(n.td,{children:"waffles"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"16"}),(0,d.jsx)(n.td,{children:"45"}),(0,d.jsx)(n.td,{children:"frozen_yogurt"}),(0,d.jsx)(n.td,{children:"creme_brulee"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"17"}),(0,d.jsx)(n.td,{children:"46"}),(0,d.jsx)(n.td,{children:"garlic_bread"}),(0,d.jsx)(n.td,{children:"grilled_cheese_sandwich, grilled_cheese_sandwich"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"18"}),(0,d.jsx)(n.td,{children:"47"}),(0,d.jsx)(n.td,{children:"gnocchi"}),(0,d.jsx)(n.td,{children:"risotto, hummus"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"19"}),(0,d.jsx)(n.td,{children:"48"}),(0,d.jsx)(n.td,{children:"greek_salad"}),(0,d.jsx)(n.td,{children:"ceviche"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"20"}),(0,d.jsx)(n.td,{children:"51"}),(0,d.jsx)(n.td,{children:"guacamole"}),(0,d.jsx)(n.td,{children:"hummus, fried_rice, tuna_tartare, risotto, hum..."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"21"}),(0,d.jsx)(n.td,{children:"53"}),(0,d.jsx)(n.td,{children:"hamburger"}),(0,d.jsx)(n.td,{children:"pulled_pork_sandwich, eggs_benedict"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"22"}),(0,d.jsx)(n.td,{children:"54"}),(0,d.jsx)(n.td,{children:"hot_and_sour_soup"}),(0,d.jsx)(n.td,{children:"waffles, french_onion_soup, french_onion_soup"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"23"}),(0,d.jsx)(n.td,{children:"58"}),(0,d.jsx)(n.td,{children:"ice_cream"}),(0,d.jsx)(n.td,{children:"frozen_yogurt"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"24"}),(0,d.jsx)(n.td,{children:"64"}),(0,d.jsx)(n.td,{children:"miso_soup"}),(0,d.jsx)(n.td,{children:"cheesecake, scallops, lobster_bisque"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"25"}),(0,d.jsx)(n.td,{children:"65"}),(0,d.jsx)(n.td,{children:"mussels"}),(0,d.jsx)(n.td,{children:"paella, paella"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"26"}),(0,d.jsx)(n.td,{children:"67"}),(0,d.jsx)(n.td,{children:"omelette"}),(0,d.jsx)(n.td,{children:"pancakes, baklava"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"27"}),(0,d.jsx)(n.td,{children:"68"}),(0,d.jsx)(n.td,{children:"onion_rings"}),(0,d.jsx)(n.td,{children:"fried_calamari, fried_calamari, fried_calamari..."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"28"}),(0,d.jsx)(n.td,{children:"74"}),(0,d.jsx)(n.td,{children:"peking_duck"}),(0,d.jsx)(n.td,{children:"beef_carpaccio"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"29"}),(0,d.jsx)(n.td,{children:"75"}),(0,d.jsx)(n.td,{children:"pho"}),(0,d.jsx)(n.td,{children:"ramen, hot_and_sour_soup"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"30"}),(0,d.jsx)(n.td,{children:"76"}),(0,d.jsx)(n.td,{children:"pizza"}),(0,d.jsx)(n.td,{children:"chicken_quesadilla, french_onion_soup, hummus,..."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"31"}),(0,d.jsx)(n.td,{children:"78"}),(0,d.jsx)(n.td,{children:"poutine"}),(0,d.jsx)(n.td,{children:"peking_duck, takoyaki, spaghetti_bolognese, fr..."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"32"}),(0,d.jsx)(n.td,{children:"79"}),(0,d.jsx)(n.td,{children:"prime_rib"}),(0,d.jsx)(n.td,{children:"filet_mignon"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"33"}),(0,d.jsx)(n.td,{children:"81"}),(0,d.jsx)(n.td,{children:"ramen"}),(0,d.jsx)(n.td,{children:"miso_soup, chicken_curry"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"34"}),(0,d.jsx)(n.td,{children:"83"}),(0,d.jsx)(n.td,{children:"red_velvet_cake"}),(0,d.jsx)(n.td,{children:"cup_cakes, ravioli"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"35"}),(0,d.jsx)(n.td,{children:"85"}),(0,d.jsx)(n.td,{children:"samosa"}),(0,d.jsx)(n.td,{children:"peking_duck, spring_rolls, baklava"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"36"}),(0,d.jsx)(n.td,{children:"86"}),(0,d.jsx)(n.td,{children:"sashimi"}),(0,d.jsx)(n.td,{children:"sushi , sushi"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"37"}),(0,d.jsx)(n.td,{children:"91"}),(0,d.jsx)(n.td,{children:"spaghetti_carbonara"}),(0,d.jsx)(n.td,{children:"spaghetti_bolognese, spaghetti_bolognese, ravi..."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"38"}),(0,d.jsx)(n.td,{children:"92"}),(0,d.jsx)(n.td,{children:"spring_rolls"}),(0,d.jsx)(n.td,{children:"samosa"})]})]})]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"\n# what classes cause the most wrong predictions\ngrouped_top_100_wrong_cause = top_100_wrong.groupby(['y_true', 'y_true_classname']).agg(', '.join).reset_index()\ngrouped_top_100_wrong_cause\n"})}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"#"}),(0,d.jsx)(n.th,{children:"y_true"}),(0,d.jsx)(n.th,{children:"y_true_classname"}),(0,d.jsx)(n.th,{children:"y_pred_classname"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"2"}),(0,d.jsx)(n.td,{children:"baklava"}),(0,d.jsx)(n.td,{children:"cannoli, samosa, omelette"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"1"}),(0,d.jsx)(n.td,{children:"3"}),(0,d.jsx)(n.td,{children:"beef_carpaccio"}),(0,d.jsx)(n.td,{children:"peking_duck"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"2"}),(0,d.jsx)(n.td,{children:"14"}),(0,d.jsx)(n.td,{children:"carrot_cake"}),(0,d.jsx)(n.td,{children:"cup_cakes"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"3"}),(0,d.jsx)(n.td,{children:"15"}),(0,d.jsx)(n.td,{children:"ceviche"}),(0,d.jsx)(n.td,{children:"greek_salad"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"4"}),(0,d.jsx)(n.td,{children:"17"}),(0,d.jsx)(n.td,{children:"cheesecake"}),(0,d.jsx)(n.td,{children:"miso_soup, cheese_plate"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"5"}),(0,d.jsx)(n.td,{children:"18"}),(0,d.jsx)(n.td,{children:"chicken_curry"}),(0,d.jsx)(n.td,{children:"ramen"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"6"}),(0,d.jsx)(n.td,{children:"19"}),(0,d.jsx)(n.td,{children:"chicken_quesadilla"}),(0,d.jsx)(n.td,{children:"breakfast_burrito, breakfast_burrito, pizza, g..."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"7"}),(0,d.jsx)(n.td,{children:"20"}),(0,d.jsx)(n.td,{children:"chicken_wings"}),(0,d.jsx)(n.td,{children:"fish_and_chips"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"8"}),(0,d.jsx)(n.td,{children:"23"}),(0,d.jsx)(n.td,{children:"churros"}),(0,d.jsx)(n.td,{children:"onion_rings, onion_rings, onion_rings"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"9"}),(0,d.jsx)(n.td,{children:"26"}),(0,d.jsx)(n.td,{children:"crab_cakes"}),(0,d.jsx)(n.td,{children:"spaghetti_carbonara"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"10"}),(0,d.jsx)(n.td,{children:"27"}),(0,d.jsx)(n.td,{children:"creme_brulee"}),(0,d.jsx)(n.td,{children:"frozen_yogurt"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"11"}),(0,d.jsx)(n.td,{children:"29"}),(0,d.jsx)(n.td,{children:"cup_cakes"}),(0,d.jsx)(n.td,{children:"red_velvet_cake"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"12"}),(0,d.jsx)(n.td,{children:"34"}),(0,d.jsx)(n.td,{children:"eggs_benedict"}),(0,d.jsx)(n.td,{children:"hamburger"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"13"}),(0,d.jsx)(n.td,{children:"35"}),(0,d.jsx)(n.td,{children:"escargots"}),(0,d.jsx)(n.td,{children:"donuts"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"14"}),(0,d.jsx)(n.td,{children:"36"}),(0,d.jsx)(n.td,{children:"falafel"}),(0,d.jsx)(n.td,{children:"crab_cakes, breakfast_burrito"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"15"}),(0,d.jsx)(n.td,{children:"37"}),(0,d.jsx)(n.td,{children:"filet_mignon"}),(0,d.jsx)(n.td,{children:"prime_rib"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"16"}),(0,d.jsx)(n.td,{children:"38"}),(0,d.jsx)(n.td,{children:"fish_and_chips"}),(0,d.jsx)(n.td,{children:"chicken_wings, breakfast_burrito"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"17"}),(0,d.jsx)(n.td,{children:"40"}),(0,d.jsx)(n.td,{children:"french_fries"}),(0,d.jsx)(n.td,{children:"chicken_wings, poutine"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"18"}),(0,d.jsx)(n.td,{children:"41"}),(0,d.jsx)(n.td,{children:"french_onion_soup"}),(0,d.jsx)(n.td,{children:"hot_and_sour_soup, pizza, hot_and_sour_soup"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"19"}),(0,d.jsx)(n.td,{children:"43"}),(0,d.jsx)(n.td,{children:"fried_calamari"}),(0,d.jsx)(n.td,{children:"onion_rings, onion_rings, onion_rings, onion_r..."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"20"}),(0,d.jsx)(n.td,{children:"44"}),(0,d.jsx)(n.td,{children:"fried_rice"}),(0,d.jsx)(n.td,{children:"guacamole"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"21"}),(0,d.jsx)(n.td,{children:"45"}),(0,d.jsx)(n.td,{children:"frozen_yogurt"}),(0,d.jsx)(n.td,{children:"ice_cream"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"22"}),(0,d.jsx)(n.td,{children:"46"}),(0,d.jsx)(n.td,{children:"garlic_bread"}),(0,d.jsx)(n.td,{children:"baklava"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"23"}),(0,d.jsx)(n.td,{children:"49"}),(0,d.jsx)(n.td,{children:"grilled_cheese_sandwich"}),(0,d.jsx)(n.td,{children:"garlic_bread, garlic_bread"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"24"}),(0,d.jsx)(n.td,{children:"52"}),(0,d.jsx)(n.td,{children:"gyoza"}),(0,d.jsx)(n.td,{children:"dumplings, breakfast_burrito, breakfast_burrito"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"25"}),(0,d.jsx)(n.td,{children:"54"}),(0,d.jsx)(n.td,{children:"hot_and_sour_soup"}),(0,d.jsx)(n.td,{children:"pho"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"26"}),(0,d.jsx)(n.td,{children:"56"}),(0,d.jsx)(n.td,{children:"huevos_rancheros"}),(0,d.jsx)(n.td,{children:"breakfast_burrito, breakfast_burrito"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"27"}),(0,d.jsx)(n.td,{children:"57"}),(0,d.jsx)(n.td,{children:"hummus"}),(0,d.jsx)(n.td,{children:"guacamole, creme_brulee, guacamole, pizza, gno..."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"28"}),(0,d.jsx)(n.td,{children:"59"}),(0,d.jsx)(n.td,{children:"lasagna"}),(0,d.jsx)(n.td,{children:"pizza"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"29"}),(0,d.jsx)(n.td,{children:"60"}),(0,d.jsx)(n.td,{children:"lobster_bisque"}),(0,d.jsx)(n.td,{children:"miso_soup"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"30"}),(0,d.jsx)(n.td,{children:"62"}),(0,d.jsx)(n.td,{children:"macaroni_and_cheese"}),(0,d.jsx)(n.td,{children:"french_fries, dumplings"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"31"}),(0,d.jsx)(n.td,{children:"63"}),(0,d.jsx)(n.td,{children:"macarons"}),(0,d.jsx)(n.td,{children:"cup_cakes, cup_cakes"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"32"}),(0,d.jsx)(n.td,{children:"64"}),(0,d.jsx)(n.td,{children:"miso_soup"}),(0,d.jsx)(n.td,{children:"ramen"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"33"}),(0,d.jsx)(n.td,{children:"67"}),(0,d.jsx)(n.td,{children:"omelette"}),(0,d.jsx)(n.td,{children:"spaghetti_carbonara"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"34"}),(0,d.jsx)(n.td,{children:"71"}),(0,d.jsx)(n.td,{children:"paella"}),(0,d.jsx)(n.td,{children:"mussels, mussels"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"35"}),(0,d.jsx)(n.td,{children:"72"}),(0,d.jsx)(n.td,{children:"pancakes"}),(0,d.jsx)(n.td,{children:"omelette"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"36"}),(0,d.jsx)(n.td,{children:"74"}),(0,d.jsx)(n.td,{children:"peking_duck"}),(0,d.jsx)(n.td,{children:"samosa, poutine"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"37"}),(0,d.jsx)(n.td,{children:"75"}),(0,d.jsx)(n.td,{children:"pho"}),(0,d.jsx)(n.td,{children:"edamame"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"38"}),(0,d.jsx)(n.td,{children:"78"}),(0,d.jsx)(n.td,{children:"poutine"}),(0,d.jsx)(n.td,{children:"croque_madame, french_fries"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"39"}),(0,d.jsx)(n.td,{children:"80"}),(0,d.jsx)(n.td,{children:"pulled_pork_sandwich"}),(0,d.jsx)(n.td,{children:"breakfast_burrito, hamburger"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"40"}),(0,d.jsx)(n.td,{children:"81"}),(0,d.jsx)(n.td,{children:"ramen"}),(0,d.jsx)(n.td,{children:"pho"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"41"}),(0,d.jsx)(n.td,{children:"82"}),(0,d.jsx)(n.td,{children:"ravioli"}),(0,d.jsx)(n.td,{children:"spaghetti_carbonara, spaghetti_carbonara, spag..."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"42"}),(0,d.jsx)(n.td,{children:"84"}),(0,d.jsx)(n.td,{children:"risotto"}),(0,d.jsx)(n.td,{children:"guacamole, gnocchi"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"43"}),(0,d.jsx)(n.td,{children:"85"}),(0,d.jsx)(n.td,{children:"samosa"}),(0,d.jsx)(n.td,{children:"spring_rolls"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"44"}),(0,d.jsx)(n.td,{children:"87"}),(0,d.jsx)(n.td,{children:"scallops"}),(0,d.jsx)(n.td,{children:"miso_soup"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"45"}),(0,d.jsx)(n.td,{children:"88"}),(0,d.jsx)(n.td,{children:"seaweed_salad"}),(0,d.jsx)(n.td,{children:"beet_salad"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"46"}),(0,d.jsx)(n.td,{children:"90"}),(0,d.jsx)(n.td,{children:"spaghetti_bolognese"}),(0,d.jsx)(n.td,{children:"spaghetti_carbonara, spaghetti_carbonara, spag..."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"47"}),(0,d.jsx)(n.td,{children:"92"}),(0,d.jsx)(n.td,{children:"spring_rolls"}),(0,d.jsx)(n.td,{children:"samosa"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"48"}),(0,d.jsx)(n.td,{children:"95"}),(0,d.jsx)(n.td,{children:"sushi"}),(0,d.jsx)(n.td,{children:"sashimi, sashimi"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"49"}),(0,d.jsx)(n.td,{children:"96"}),(0,d.jsx)(n.td,{children:"tacos"}),(0,d.jsx)(n.td,{children:"breakfast_burrito"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"50"}),(0,d.jsx)(n.td,{children:"97"}),(0,d.jsx)(n.td,{children:"takoyaki"}),(0,d.jsx)(n.td,{children:"poutine"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"51"}),(0,d.jsx)(n.td,{children:"99"}),(0,d.jsx)(n.td,{children:"tuna_tartare"}),(0,d.jsx)(n.td,{children:"guacamole"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"52"}),(0,d.jsx)(n.td,{children:"100"}),(0,d.jsx)(n.td,{children:"waffles"}),(0,d.jsx)(n.td,{children:"french_toast, hot_and_sour_soup"})]})]})]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'# visualize test images\nimages_displayed = 12\nstart_index = 0\nplt.figure(figsize=(15, 15))\n# create tuples from each df row\nfor i, row in enumerate(top_100_wrong[start_index:start_index+images_displayed].itertuples()):\n    plt.subplot(4, 3, i+1)\n    # row[1] => 2nd cell in row = image path\n    img = load_and_preprocess_image(row[1], normalize=False)\n    # extract confidence and labels from row\n    _, _, _, _, pred_conf, y_true_classname, y_pred_classname, _ = row\n    plt.imshow(img/255.)\n    plt.title(f"Pred: {y_pred_classname} ({pred_conf*100:.2f} %),\\nTrue: {y_true_classname}")\n    plt.axis(False)\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{alt:"Transfer Learning",src:s(478482).Z+"",width:"1125",height:"1218"})}),"\n",(0,d.jsx)(n.h3,{id:"predict-custom-images",children:"Predict Custom Images"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"# get list of custom image file paths\ncustom_images_path = \"../datasets/custom_images/\"\ncustom_images = [ custom_images_path + img_path for img_path in os.listdir(custom_images_path)]\ncustom_images\n\n# ['../datasets/custom_images/cheesecake.jpg',\n#  '../datasets/custom_images/crema_catalana.jpg',\n#  '../datasets/custom_images/fish_and_chips.jpg',\n#  '../datasets/custom_images/jiaozi.jpg',\n#  '../datasets/custom_images/paella.jpg',\n#  '../datasets/custom_images/pho.jpg',\n#  '../datasets/custom_images/quesadilla.jpg',\n#  '../datasets/custom_images/ravioli.jpg',\n#  '../datasets/custom_images/waffles.jpg']\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'# run prediction on custom images\nfor image in custom_images:\n    image = load_and_preprocess_image(image, normalize=False)\n    # test image is (224, 224, 3) but model expects batch shape (None, 224, 224, 3)\n    image_expanded = tf.expand_dims(image, axis=0)\n    # get probabilities over all classes\n    prediction_probabilities = model.predict(image_expanded)\n    # get classname for highest probability\n    predicted_class =  class_names_101_10[prediction_probabilities.argmax()]\n    # plot normalized image\n    plt.figure()\n    plt.imshow(image/255.)\n    plt.title(f"Pred: {predicted_class} ({prediction_probabilities.max()*100:.2f} %)")\n    plt.axis(False)\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{alt:"Transfer Learning",src:s(647618).Z+"",width:"1006",height:"538"})})]})}function x(e={}){const{wrapper:n}={...(0,r.ah)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(h,{...e})}):h(e)}},603905:(e,n,s)=>{s.d(n,{ah:()=>a});var d=s(667294);function r(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}function i(e,n){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);n&&(d=d.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),s.push.apply(s,d)}return s}function t(e){for(var n=1;n<arguments.length;n++){var s=null!=arguments[n]?arguments[n]:{};n%2?i(Object(s),!0).forEach((function(n){r(e,n,s[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):i(Object(s)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(s,n))}))}return e}function l(e,n){if(null==e)return{};var s,d,r=function(e,n){if(null==e)return{};var s,d,r={},i=Object.keys(e);for(d=0;d<i.length;d++)s=i[d],n.indexOf(s)>=0||(r[s]=e[s]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(d=0;d<i.length;d++)s=i[d],n.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(r[s]=e[s])}return r}var c=d.createContext({}),a=function(e){var n=d.useContext(c),s=n;return e&&(s="function"==typeof e?e(n):t(t({},n),e)),s},h={inlineCode:"code",wrapper:function(e){var n=e.children;return d.createElement(d.Fragment,{},n)}},x=d.forwardRef((function(e,n){var s=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,x=l(e,["components","mdxType","originalType","parentName"]),j=a(s),o=r,_=j["".concat(c,".").concat(o)]||j[o]||h[o]||i;return s?d.createElement(_,t(t({ref:n},x),{},{components:s})):d.createElement(_,t({ref:n},x))}));x.displayName="MDXCreateElement"},857162:(e,n,s)=>{s.d(n,{Z:()=>d});const d=s.p+"assets/images/04_Tensorflow_Transfer_Learning_13-8824025040dde3b775fb655ae0e6c10a.png"},722617:(e,n,s)=>{s.d(n,{Z:()=>d});const d=s.p+"assets/images/04_Tensorflow_Transfer_Learning_14-7ed644a206e1fb8bec377d851456fe34.png"},224395:(e,n,s)=>{s.d(n,{Z:()=>d});const d=s.p+"assets/images/04_Tensorflow_Transfer_Learning_15-75a1bf2813806c09cbbb56fbaf84021f.jpg"},154304:(e,n,s)=>{s.d(n,{Z:()=>d});const d=s.p+"assets/images/04_Tensorflow_Transfer_Learning_16-13aa4dfcc5267593d99a60558fad138f.png"},186611:(e,n,s)=>{s.d(n,{Z:()=>d});const d=s.p+"assets/images/04_Tensorflow_Transfer_Learning_17-ff63cbbffd4aa89f04f4621395e1fd66.png"},885639:(e,n,s)=>{s.d(n,{Z:()=>d});const d=s.p+"assets/images/04_Tensorflow_Transfer_Learning_18-bbcbddb578eeb29bd185b26a4e4672d6.png"},2972:(e,n,s)=>{s.d(n,{Z:()=>d});const d=s.p+"assets/images/04_Tensorflow_Transfer_Learning_19-9f2ea5fab719b8878b3ad10b63b3d69e.png"},478482:(e,n,s)=>{s.d(n,{Z:()=>d});const d=s.p+"assets/images/04_Tensorflow_Transfer_Learning_20-d0921bd7a21f17155873a7a67abfe0d5.png"},647618:(e,n,s)=>{s.d(n,{Z:()=>d});const d=s.p+"assets/images/04_Tensorflow_Transfer_Learning_21-bc16bf5ac7f720bc9e17e4cf84ea4a0b.png"},55791:(e,n,s)=>{s.d(n,{Z:()=>d});const d=s.p+"assets/images/hmmmm-0aa854f42905bbb37952c1b5e1e14729.gif"},561853:(e,n,s)=>{s.d(n,{Z:()=>d});const d=s.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-0617c01f21d40c2f06bb85d06aa2619b.jpg"}}]);