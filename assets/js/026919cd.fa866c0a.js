"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[51553],{412578:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var s=r(474848),t=r(28453);const a={sidebar_position:8060,slug:"2021-08-05",title:"Hashicorp Consul Refresher - Service Discovery",authors:"mpolinowski",tags:["Consul","Linux"]},o=void 0,i={id:"DevOps/Hashicorp/2021-08-05--hashicorp-consul-service-discovery/index",title:"Hashicorp Consul Refresher - Service Discovery",description:"Cheung Chau, Hongkong",source:"@site/docs/DevOps/Hashicorp/2021-08-05--hashicorp-consul-service-discovery/index.md",sourceDirName:"DevOps/Hashicorp/2021-08-05--hashicorp-consul-service-discovery",slug:"/DevOps/Hashicorp/2021-08-05--hashicorp-consul-service-discovery/2021-08-05",permalink:"/docs/DevOps/Hashicorp/2021-08-05--hashicorp-consul-service-discovery/2021-08-05",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2021-08-05--hashicorp-consul-service-discovery/index.md",tags:[{label:"Consul",permalink:"/docs/tags/consul"},{label:"Linux",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:8060,frontMatter:{sidebar_position:8060,slug:"2021-08-05",title:"Hashicorp Consul Refresher - Service Discovery",authors:"mpolinowski",tags:["Consul","Linux"]},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Consul Refresher - Loadbalancing with Fabio",permalink:"/docs/DevOps/Hashicorp/2021-08-06--hashicorp-consul-fabio-loadbalancing/2021-08-06"},next:{title:"Hashicorp Nomad Refresher - Job Specifications",permalink:"/docs/DevOps/Hashicorp/2021-08-04--hashicorp-nomad-job-specifications/2021-08-04"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Debian11",id:"debian11",level:3},{value:"RHEL8",id:"rhel8",level:3},{value:"Consul Commandline Autocompletion",id:"consul-commandline-autocompletion",level:4},{value:"Test-Running",id:"test-running",level:2},{value:"Service Configuration",id:"service-configuration",level:2},{value:"Run Consul as a Service",id:"run-consul-as-a-service",level:2},{value:"Needed Ports",id:"needed-ports",level:3},{value:"Service Configuration",id:"service-configuration-1",level:2},{value:"Problems",id:"problems",level:3},{value:"Registering a Service in Nomad",id:"registering-a-service-in-nomad",level:2},{value:"Default Consul Configuration",id:"default-consul-configuration",level:2},{value:"Consul Service Error Message",id:"consul-service-error-message",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Cheung Chau, Hongkong",src:r(421128).A+"",width:"1500",height:"386"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["This article is a bit messy... a lot of things changed since the ",(0,s.jsx)(n.code,{children:"0.x"})," releases of Consul and I ran into a few bumps on the way. A lot of things learnt, errors and solution documented. But I will have to write up a clean version of this to have a step-by-step guide for future reference."]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#installation",children:"Installation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#debian11",children:"Debian11"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#rhel8",children:"RHEL8"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#consul-commandline-autocompletion",children:"Consul Commandline Autocompletion"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#test-running",children:"Test-Running"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#service-configuration",children:"Service Configuration"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#run-consul-as-a-service",children:"Run Consul as a Service"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#needed-ports",children:"Needed Ports"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#service-configuration-1",children:"Service Configuration"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#problems",children:"Problems"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#registering-a-service-in-nomad",children:"Registering a Service in Nomad"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#default-consul-configuration",children:"Default Consul Configuration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#consul-service-error-message",children:"Consul Service Error Message"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Nomad schedules workloads of various types across a cluster of generic hosts. Because of this, placement is not known in advance and you will need to use service discovery to connect tasks to other services deployed across your cluster. Nomad integrates with Consul to provide service discovery and monitoring."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.consul.io/",children:"Consul"})," allows services to easily register themselves in a central catalog when they start up. When an application or service needs to communicate with another component, the central catalog can be queried using either an API or DNS interface to provide the required addresses."]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.h3,{id:"debian11",children:"Debian11"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -\r\napt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"\r\napt-get update && apt-get install consul\n'})}),"\n",(0,s.jsx)(n.h3,{id:"rhel8",children:"RHEL8"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo yum install -y yum-utils\r\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\r\nsudo yum -y install consul\n"})}),"\n",(0,s.jsx)(n.h4,{id:"consul-commandline-autocompletion",children:"Consul Commandline Autocompletion"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"consul -autocomplete-install\r\ncomplete -C /usr/bin/consul consul\n"})}),"\n",(0,s.jsx)(n.h2,{id:"test-running",children:"Test-Running"}),"\n",(0,s.jsxs)(n.p,{children:["You can start the Consul Agent with ",(0,s.jsx)(n.a,{href:"https://www.consul.io/docs/agent/options#command-line-options",children:"configuration flags"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"consul agent -datacenter=instaryun -data-dir=/opt/consul -bind '{{ GetInterfaceIP \"enp2s0\" }}'\n"})}),"\n",(0,s.jsx)(n.p,{children:"To get started I will execute the service in DEV mode on my master:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"consul agent -dev -datacenter=instaryun -data-dir=/opt/consul -bind '{{ GetInterfaceIP \"enp3s0\" }}'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The Consul server GUI will be available on Port ",(0,s.jsx)(n.code,{children:"8500"})," and I can tunnel it through SSH with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ssh myuser@192.168.2.110 -L8500:localhost:8500\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Hashicorp Consul",src:r(968820).A+"",width:"1140",height:"459"})}),"\n",(0,s.jsx)(n.h2,{id:"service-configuration",children:"Service Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Again - just like with Nomad - I discovered that the default config is missing on Debian11, while it is located in ",(0,s.jsx)(n.code,{children:"/etc/consul.d/"})," on RHEL8. I will list the default ",(0,s.jsx)(n.code,{children:"consul.hcl"})," config at ",(0,s.jsx)(n.a,{href:"#default-consul-configuration",children:"end of this article"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["We can use this configuration file - instead of adding all variables to the ",(0,s.jsx)(n.code,{children:"consul agent"})," command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"/usr/bin/consul agent -config-file=/etc/consul.d/consul.hcl\r\n\r\n/usr/bin/consul agent -config-dir=/etc/consul.d\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We can now ",(0,s.jsx)(n.a,{href:"https://www.consul.io/docs/agent/options",children:"add the our configuration"})," to ",(0,s.jsx)(n.a,{href:"#default-consul-configuration",children:"/etc/consul.d/consul.hcl"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:'node_name = "consul-master"\r\ndatacenter = "instaryun"\r\ndata_dir = "/opt/consul"\r\n# allow all clients\r\nclient_addr = "0.0.0.0"\r\n# enable the ui\r\nui_config{\r\n  enabled = true\r\n}\r\n# make this instance the master server\r\nserver = true\r\n# add your servers IP\r\nbind_addr = "192.168.2.110"\r\nadvertise_addr = "192.168.2.110"\r\n# For testing I only have 1 - later 5 master servers are recommended\r\nbootstrap_expect=1\r\n# I only have 1 other client server. Set it to allow constant retries because it is not yet configured\r\nretry_join = ["192.168.2.111"]\r\nenable_syslog = true\r\nlog_level = "INFO"\r\n# https://www.consul.io/docs/agent/options#performance\r\nperformance{\r\n  raft_multiplier = 1\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can test run the configuration file - see if it is throwing us any errors:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"/usr/bin/consul agent -config-file=/etc/consul.d/consul.hcl\n"})}),"\n",(0,s.jsx)(n.p,{children:"Or run the Test command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"consul validate /etc/consul.d/consul.hcl\r\n\r\nBootstrapExpect is set to 1; this is the same as Bootstrap mode.\r\nbootstrap = true: do not enable unless necessary\r\nConfiguration is valid!\n"})}),"\n",(0,s.jsx)(n.h2,{id:"run-consul-as-a-service",children:"Run Consul as a Service"}),"\n",(0,s.jsx)(n.h3,{id:"needed-ports",children:"Needed Ports"}),"\n",(0,s.jsx)(n.p,{children:"Consul uses 3 ports:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"8500"})," - Consul UI"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"8301"})," / ",(0,s.jsx)(n.code,{children:"8300"})," - LAN Gossip"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"8600"})," - DNS"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"I will open those ports in my firewall (except the UI):"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"FirewallD"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo firewall-cmd --permanent --zone=public --add-port={8300/tcp,8301/tcp,8600/tcp}\r\nsudo firewall-cmd --reload\r\n\r\nsudo firewall-cmd --zone=public --list-ports\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"ufw"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ufw allow 8301,8600/tcp\r\nufw reload\r\n\r\nufw status verbose\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["The documentation I found said that the Gossip port is ",(0,s.jsx)(n.code,{children:"3001"}),". But when I started Consul up the first time it tried to connect through port ",(0,s.jsx)(n.code,{children:"3000"})," and the cluster join failed. But the next day Consul started using ",(0,s.jsx)(n.code,{children:"3001"})," \xaf\\",(0,s.jsx)(n.em,{children:"(\u30c4)"}),"/\xaf"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'agent.client: RPC failed to server: method=KVS.List server=192.168.2.110:8300 error="rpc error getting client: failed to get conn: dial tcp 192.168.2.111:0->192.168.2.110:8300: connect: no route to host"\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Update"}),": See above - happened again. It seems that you need both port ",(0,s.jsx)(n.code,{children:"8300"})," and ",(0,s.jsx)(n.code,{children:"8301"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"service-configuration-1",children:"Service Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Create the ",(0,s.jsx)(n.a,{href:"https://learn.hashicorp.com/tutorials/consul/deployment-guide#configure-systemd",children:"SystemD Service file"})," in ",(0,s.jsx)(n.code,{children:"/etc/systemd/system/consul.service"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cfg",children:'[Unit]\r\nDescription="HashiCorp Consul"\r\nDocumentation=https://www.consul.io/\r\nRequires=network-online.target\r\nAfter=network-online.target\r\nConditionFileNotEmpty=/etc/consul.d/consul.hcl\r\n\r\n[Service]\r\nType=notify\r\nUser=consul\r\nGroup=consul\r\nExecStart=/usr/bin/consul agent -config-dir=/etc/consul.d/\r\nExecReload=/bin/kill --signal HUP $MAINPID\r\nKillMode=process\r\nKillSignal=SIGTERM\r\nRestart=on-failure\r\nLimitNOFILE=65536\r\n\r\n[Install]\r\nWantedBy=multi-user.target\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo systemctl daemon-reload\r\nsudo service consul start\n"})}),"\n",(0,s.jsx)(n.h3,{id:"problems",children:"Problems"}),"\n",(0,s.jsx)(n.p,{children:"In the beginning I ran into a permission error:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Aug 31 14:03:44 nomad-master consul[54505]: ==> failed to setup node ID: open /opt/consul/node-id: permission denied\r\nAug 31 14:03:44 nomad-master systemd[1]: consul.service: Main process exited, code=exited, status=1/FAILURE\r\nAug 31 14:03:44 nomad-master systemd[1]: consul.service: Failed with result 'exit-code'.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["As a dirty fix I changed the entire data directory to ",(0,s.jsx)(n.code,{children:"777"})," /The ",(0,s.jsx)(n.a,{href:"https://learn.hashicorp.com/tutorials/consul/deployment-guide#install-consul",children:"deployment guide"})," creates an extra user for consul - I will go this route in the next test run."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"chmod -R 777 /opt/consul\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now the service started but is failing because the Consul minion, that I did not configure yet, is not connecting - ",(0,s.jsx)(n.a,{href:"#consul-service-error-message",children:"see Error Log"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["So now I added the identical ",(0,s.jsx)(n.strong,{children:"Service file"})," to my Debian11 minion and added the following ",(0,s.jsx)(n.strong,{children:"Configuration"})," ",(0,s.jsx)(n.code,{children:"/etc/consul.d/consul.hcl"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:'node_name = "consul-minion"\r\ndatacenter = "instaryun"\r\ndata_dir = "/opt/consul"\r\n# allow all clients\r\nclient_addr = "0.0.0.0"\r\n# disable the ui\r\nui = false\r\n# make this instance the master server\r\nserver = false\r\n# add your servers IP\r\nbind_addr = "192.168.2.111"\r\nadvertise_addr = "192.168.2.111"\r\nretry_join = ["192.168.2.110"]\r\nenable_syslog = true\r\nlog_level = "INFO"\r\n# https://www.consul.io/docs/agent/options#performance\r\nperformance{\r\n  raft_multiplier = 1\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Note that I set ",(0,s.jsx)(n.code,{children:"server"})," to false, removed the ",(0,s.jsx)(n.code,{children:"bootstap"})," variable and had to rewrite the ",(0,s.jsx)(n.code,{children:"ui"})," variable - the latter might be because I am using version ",(0,s.jsx)(n.code,{children:"Consul v1.8.7"})," while I am on ",(0,s.jsx)(n.code,{children:"Consul v1.10.2"})," on my master server."]}),"\n",(0,s.jsxs)(n.p,{children:["As an alternative to ",(0,s.jsx)(n.code,{children:"retry_join"})," I can also manually join this client into an existing cluster with the join command (or leave):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"consul join [IP address or domain of one of your Consul servers]\r\nconsul leave\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"This time both services started successfully!"})," And the UI shows me that both nodes successfully joined the Consul cluster:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Hashicorp Consul",src:r(148710).A+"",width:"1137",height:"388"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": The node name is taken from the server hostname instead of the Consul configuration file - hence I am having a ",(0,s.jsx)(n.strong,{children:"Nomad Master"})," instead of the ",(0,s.jsx)(n.strong,{children:"consul-master"})," I defined. To change your servers hostname run the following commands and restart the Consul service:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"hostname\r\n\r\nhostnamectl set-hostname consul-master\r\n\r\nhostname\r\n\r\nservice consul restart\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now Consul displays the correct node name:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"consul operator raft list-peers\r\n\r\nNode           ID                                    Address             State   Voter  RaftProtocol\r\nconsul-master  d561f8d4-9606-8c9c-40d4-a5350857801e  192.168.2.110:8300  leader  true   3\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"consul members\r\n\r\nNode           Address             Status  Type    Build   Protocol  DC         Segment\r\nconsul-master  192.168.2.110:8301  alive   server  1.10.2  2         instaryun  <all>\r\nconsul-minion  192.168.2.111:8301  alive   client  1.8.7   2         instaryun  <default>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"registering-a-service-in-nomad",children:"Registering a Service in Nomad"}),"\n",(0,s.jsxs)(n.p,{children:["There are ",(0,s.jsx)(n.a,{href:"https://learn.hashicorp.com/consul/getting-started/services",children:"multiple ways to register a service in Consul"}),". Fortunately Nomad has a first class integration that makes it very simple to add a service stanza to a job file to perform this registration for us. To register our Nomad deployed ",(0,s.jsx)(n.a,{href:"/docs/DevOps/Hashicorp/2021-08-04--hashicorp-nomad-job-specifications/2021-08-04",children:"http-echo application"}),", we simply add a ",(0,s.jsx)(n.a,{href:"https://www.nomadproject.io/docs/job-specification/service",children:"service block"})," to the Nomad job file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'service {\r\n  name = "http-echo"\r\n  port = "heartbeat"\r\n\r\n  tags = [\r\n    "heartbeat",\r\n    "urlprefix-/http-echo",\r\n  ]\r\n\r\n  check {\r\n    type     = "http"\r\n    path     = "/health"\r\n    interval = "2s"\r\n    timeout  = "2s"\r\n  }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"/docs/DevOps/Hashicorp/2021-08-04--hashicorp-nomad-job-specifications/2021-08-04",children:"http-echo job file"})," now looks like:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cat ~/nomad_jobs/http_echo_gui.nomad\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'job "http-echo-gui" {\r\n  datacenters = ["instaryun"]\r\n\r\n  group "echo" {\r\n\r\n    network {\r\n        port "heartbeat" {\r\n            static = 8080\r\n            }\r\n    }\r\n\r\n    count = 1\r\n    task "server" {\r\n      driver = "docker"\r\n      config {\r\n        image = "hashicorp/http-echo:latest"\r\n        ports = ["heartbeat"]\r\n        args  = [\r\n          "-listen", ":${NOMAD_PORT_heartbeat}",\r\n          "-text", "${attr.os.name}: server running on ${NOMAD_IP_heartbeat} with port ${NOMAD_PORT_heartbeat}",\r\n        ]\r\n      }\r\n      service {\r\n        name = "http-echo"\r\n        port = "heartbeat"\r\n\r\n        tags = [\r\n          "heartbeat",\r\n          "urlprefix-/http-echo",\r\n        ]\r\n\r\n        check {\r\n          type     = "http"\r\n          path     = "/health"\r\n          interval = "2s"\r\n          timeout  = "2s"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"And can be directly updated from the Nomad GUI:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Hashicorp Consul",src:r(187727).A+"",width:"1135",height:"865"})}),"\n",(0,s.jsxs)(n.p,{children:["First click on ",(0,s.jsx)(n.strong,{children:"Plan"})," and then ",(0,s.jsx)(n.strong,{children:"Run"})," to schedule the job. Once the task is running, check in Consul if the service ",(0,s.jsx)(n.code,{children:"http-echo"})," registered itself:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"consul catalog services\r\n\r\nconsul\r\nhttp-echo\r\nnomad\r\nnomad-client\n"})}),"\n",(0,s.jsx)(n.p,{children:"In the Consul UI I can see that the healthcheck URL is working:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Hashicorp Consul",src:r(341785).A+"",width:"1307",height:"695"})}),"\n",(0,s.jsxs)(n.p,{children:["You can also test it from your browser with by visiting the URL listed by Consul ",(0,s.jsx)(n.code,{children:"http://192.168.2.111:8080/health"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{ "status": "ok" }\n'})}),"\n",(0,s.jsx)(n.h2,{id:"default-consul-configuration",children:"Default Consul Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["From the default package manager installation of ",(0,s.jsx)(n.em,{children:"Consul v1.10.2"})," on RHEL8 in ",(0,s.jsx)(n.code,{children:"/etc/consul.d/consul.hcl"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'# Full configuration options can be found at https://www.consul.io/docs/agent/options.html\r\n\r\n# datacenter\r\n# This flag controls the datacenter in which the agent is running. If not provided,\r\n# it defaults to "dc1". Consul has first-class support for multiple datacenters, but\r\n# it relies on proper configuration. Nodes in the same datacenter should be on a\r\n# single LAN.\r\n#datacenter = "my-dc-1"\r\n\r\n# data_dir\r\n# This flag provides a data directory for the agent to store state. This is required\r\n# for all agents. The directory should be durable across reboots. This is especially\r\n# critical for agents that are running in server mode as they must be able to persist\r\n# cluster state. Additionally, the directory must support the use of filesystem\r\n# locking, meaning some types of mounted folders (e.g. VirtualBox shared folders) may\r\n# not be suitable.\r\ndata_dir = "/opt/consul"\r\n\r\n# client_addr\r\n# The address to which Consul will bind client interfaces, including the HTTP and DNS\r\n# servers. By default, this is "127.0.0.1", allowing only loopback connections. In\r\n# Consul 1.0 and later this can be set to a space-separated list of addresses to bind\r\n# to, or a go-sockaddr template that can potentially resolve to multiple addresses.\r\n#client_addr = "0.0.0.0"\r\n\r\n# ui\r\n# Enables the built-in web UI server and the required HTTP routes. This eliminates\r\n# the need to maintain the Consul web UI files separately from the binary.\r\n# Version 1.10 deprecated ui=true in favor of ui_config.enabled=true\r\n#ui_config{\r\n#  enabled = true\r\n#}\r\n\r\n# server\r\n# This flag is used to control if an agent is in server or client mode. When provided,\r\n# an agent will act as a Consul server. Each Consul cluster must have at least one\r\n# server and ideally no more than 5 per datacenter. All servers participate in the Raft\r\n# consensus algorithm to ensure that transactions occur in a consistent, linearizable\r\n# manner. Transactions modify cluster state, which is maintained on all server nodes to\r\n# ensure availability in the case of node failure. Server nodes also participate in a\r\n# WAN gossip pool with server nodes in other datacenters. Servers act as gateways to\r\n# other datacenters and forward traffic as appropriate.\r\n#server = true\r\n\r\n# Bind addr\r\n# You may use IPv4 or IPv6 but if you have multiple interfaces you must be explicit.\r\n#bind_addr = "[::]" # Listen on all IPv6\r\n#bind_addr = "0.0.0.0" # Listen on all IPv4\r\n#\r\n# Advertise addr - if you want to point clients to a different address than bind or LB.\r\n#advertise_addr = "127.0.0.1"\r\n\r\n# Enterprise License\r\n# As of 1.10, Enterprise requires a license_path and does not have a short trial.\r\n#license_path = "/etc/consul.d/consul.hclic"\r\n\r\n# bootstrap_expect\r\n# This flag provides the number of expected servers in the datacenter. Either this value\r\n# should not be provided or the value must agree with other servers in the cluster. When\r\n# provided, Consul waits until the specified number of servers are available and then\r\n# bootstraps the cluster. This allows an initial leader to be elected automatically.\r\n# This cannot be used in conjunction with the legacy -bootstrap flag. This flag requires\r\n# -server mode.\r\n#bootstrap_expect=3\r\n\r\n# encrypt\r\n# Specifies the secret key to use for encryption of Consul network traffic. This key must\r\n# be 32-bytes that are Base64-encoded. The easiest way to create an encryption key is to\r\n# use consul keygen. All nodes within a cluster must share the same encryption key to\r\n# communicate. The provided key is automatically persisted to the data directory and loaded\r\n# automatically whenever the agent is restarted. This means that to encrypt Consul\'s gossip\r\n# protocol, this option only needs to be provided once on each agent\'s initial startup\r\n# sequence. If it is provided after Consul has been initialized with an encryption key,\r\n# then the provided key is ignored and a warning will be displayed.\r\n#encrypt = "..."\r\n\r\n# retry_join\r\n# Similar to -join but allows retrying a join until it is successful. Once it joins\r\n# successfully to a member in a list of members it will never attempt to join again.\r\n# Agents will then solely maintain their membership via gossip. This is useful for\r\n# cases where you know the address will eventually be available. This option can be\r\n# specified multiple times to specify multiple agents to join. The value can contain\r\n# IPv4, IPv6, or DNS addresses. In Consul 1.1.0 and later this can be set to a go-sockaddr\r\n# template. If Consul is running on the non-default Serf LAN port, this must be specified\r\n# as well. IPv6 must use the "bracketed" syntax. If multiple values are given, they are\r\n# tried and retried in the order listed until the first succeeds. Here are some examples:\r\n#retry_join = ["consul.domain.internal"]\r\n#retry_join = ["10.0.4.67"]\r\n#retry_join = ["[::1]:8301"]\r\n#retry_join = ["consul.domain.internal", "10.0.4.67"]\r\n# Cloud Auto-join examples:\r\n# More details - https://www.consul.io/docs/agent/cloud-auto-join\r\n#retry_join = ["provider=aws tag_key=... tag_value=..."]\r\n#retry_join = ["provider=azure tag_name=... tag_value=... tenant_id=... client_id=... subscription_id=... secret_access_key=..."]\r\n#retry_join = ["provider=gce project_name=... tag_value=..."]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"consul-service-error-message",children:"Consul Service Error Message"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["see ",(0,s.jsx)(n.a,{href:"#problems",children:"Problems"})]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'Aug 31 14:12:08 nomad-master consul[60088]: 2021-08-31T14:12:08.212+0800 [WARN]  agent: DEPRECATED Backwards compatibil>Aug 31 14:12:08 nomad-master consul[60088]: 2021-08-31T14:12:08.212+0800 [INFO]  agent: Retry join is supported for the>Aug 31 14:12:08 nomad-master consul[60088]: 2021-08-31T14:12:08.212+0800 [INFO]  agent: Joining cluster...: cluster=LAN\r\nAug 31 14:12:08 nomad-master consul[60088]: 2021-08-31T14:12:08.212+0800 [INFO]  agent: (LAN) joining: lan_addresses=[1>Aug 31 14:12:08 nomad-master consul[60088]: 2021-08-31T14:12:08.212+0800 [INFO]  agent: started state syncer\r\nAug 31 14:12:08 nomad-master consul[60088]: 2021-08-31T14:12:08.212+0800 [INFO]  agent: Consul agent running!\r\nAug 31 14:12:08 nomad-master consul[60088]: 2021-08-31T14:12:08.212+0800 [WARN]  agent: (LAN) couldn\'t join: number_of_>Aug 31 14:12:08 nomad-master consul[60088]:         * Failed to join 192.168.2.111: dial tcp 192.168.2.111:8301: connec>Aug 31 14:12:08 nomad-master consul[60088]: "\r\nAug 31 14:12:08 nomad-master consul[60088]: 2021-08-31T14:12:08.212+0800 [WARN]  agent: Join cluster failed, will retry>Aug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.118+0800 [WARN]  agent.server.raft: heartbeat timeout r>Aug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.118+0800 [INFO]  agent.server.raft: entering candidate >Aug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.136+0800 [INFO]  agent.server.raft: election won: tally>Aug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.136+0800 [INFO]  agent.server.raft: entering leader sta>Aug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.136+0800 [INFO]  agent.server: cluster leadership acqui>Aug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.136+0800 [INFO]  agent.server: New leader elected: payl>Aug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.151+0800 [INFO]  agent.leader: started routine: routine>Aug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.151+0800 [INFO]  agent.leader: started routine: routine>Aug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.367+0800 [INFO]  agent: Synced node info\r\nAug 31 14:12:38 nomad-master consul[60088]: 2021-08-31T14:12:38.213+0800 [INFO]  agent: (LAN) joining: lan_addresses=[1>Aug 31 14:12:38 nomad-master consul[60088]: 2021-08-31T14:12:38.214+0800 [WARN]  agent: (LAN) couldn\'t join: number_of_>Aug 31 14:12:38 nomad-master consul[60088]:         * Failed to join 192.168.2.111: dial tcp 192.168.2.111:8301: connec>Aug 31 14:12:38 nomad-master consul[60088]: "\r\nAug 31 14:12:38 nomad-master consul[60088]: 2021-08-31T14:12:38.214+0800 [WARN]  agent: Join cluster failed, will retry>Aug 31 14:13:08 nomad-master consul[60088]: 2021-08-31T14:13:08.214+0800 [INFO]  agent: (LAN) joining: lan_addresses=[1>Aug 31 14:13:08 nomad-master consul[60088]: 2021-08-31T14:13:08.214+0800 [WARN]  agent: (LAN) couldn\'t join: number_of_>Aug 31 14:13:08 nomad-master consul[60088]:         * Failed to join 192.168.2.111: dial tcp 192.168.2.111:8301: connec>Aug 31 14:13:08 nomad-master consul[60088]: "\r\nAug 31 14:13:08 nomad-master consul[60088]: 2021-08-31T14:13:08.214+0800 [WARN]  agent: Join cluster failed, will retry>lines 3908-3936/3936 (END)\r\nAug 31 14:12:08 nomad-master consul[60088]: 2021-08-31T14:12:08.212+0800 [WARN]  agent: DEPRECATED Backwards compatibility with pre-1.9 metrics enabled. These metrics will be removed in a future version of Consul. Set `telemetry { disable_compat_1.9 = true }` to disable them.\r\nAug 31 14:12:08 nomad-master consul[60088]: 2021-08-31T14:12:08.212+0800 [INFO]  agent: Retry join is supported for the following discovery methods: cluster=LAN discovery_methods="aliyun aws azure digitalocean gce k8s linode mdns os packet scaleway softlayer tencentcloud triton vsphere"\r\nAug 31 14:12:08 nomad-master consul[60088]: 2021-08-31T14:12:08.212+0800 [INFO]  agent: Joining cluster...: cluster=LAN\r\nAug 31 14:12:08 nomad-master consul[60088]: 2021-08-31T14:12:08.212+0800 [INFO]  agent: (LAN) joining: lan_addresses=[192.168.2.111]\r\nAug 31 14:12:08 nomad-master consul[60088]: 2021-08-31T14:12:08.212+0800 [INFO]  agent: started state syncer\r\nAug 31 14:12:08 nomad-master consul[60088]: 2021-08-31T14:12:08.212+0800 [INFO]  agent: Consul agent running!\r\nAug 31 14:12:08 nomad-master consul[60088]: 2021-08-31T14:12:08.212+0800 [WARN]  agent: (LAN) couldn\'t join: number_of_nodes=0 error="1 error occurred:\r\nAug 31 14:12:08 nomad-master consul[60088]:         * Failed to join 192.168.2.111: dial tcp 192.168.2.111:8301: connect: connection refused\r\nAug 31 14:12:08 nomad-master consul[60088]: "\r\nAug 31 14:12:08 nomad-master consul[60088]: 2021-08-31T14:12:08.212+0800 [WARN]  agent: Join cluster failed, will retry: cluster=LAN retry_interval=30s error=<nil>\r\nAug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.118+0800 [WARN]  agent.server.raft: heartbeat timeout reached, starting election: last-leader=\r\nAug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.118+0800 [INFO]  agent.server.raft: entering candidate state: node="Node at 192.168.2.110:8300 [Candidate]" term=5\r\nAug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.136+0800 [INFO]  agent.server.raft: election won: tally=1\r\nAug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.136+0800 [INFO]  agent.server.raft: entering leader state: leader="Node at 192.168.2.110:8300 [Leader]"\r\nAug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.136+0800 [INFO]  agent.server: cluster leadership acquired\r\nAug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.136+0800 [INFO]  agent.server: New leader elected: payload=nomad-master\r\nAug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.151+0800 [INFO]  agent.leader: started routine: routine="federation state anti-entropy"\r\nAug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.151+0800 [INFO]  agent.leader: started routine: routine="federation state pruning"\r\nAug 31 14:12:15 nomad-master consul[60088]: 2021-08-31T14:12:15.367+0800 [INFO]  agent: Synced node info\r\nAug 31 14:12:38 nomad-master consul[60088]: 2021-08-31T14:12:38.213+0800 [INFO]  agent: (LAN) joining: lan_addresses=[192.168.2.111]\r\nAug 31 14:12:38 nomad-master consul[60088]: 2021-08-31T14:12:38.214+0800 [WARN]  agent: (LAN) couldn\'t join: number_of_nodes=0 error="1 error occurred:\r\nAug 31 14:12:38 nomad-master consul[60088]:         * Failed to join 192.168.2.111: dial tcp 192.168.2.111:8301: connect: connection refused\r\nAug 31 14:12:38 nomad-master consul[60088]: "\r\nAug 31 14:12:38 nomad-master consul[60088]: 2021-08-31T14:12:38.214+0800 [WARN]  agent: Join cluster failed, will retry: cluster=LAN retry_interval=30s error=<nil>\r\nAug 31 14:13:08 nomad-master consul[60088]: 2021-08-31T14:13:08.214+0800 [INFO]  agent: (LAN) joining: lan_addresses=[192.168.2.111]\r\nAug 31 14:13:08 nomad-master consul[60088]: 2021-08-31T14:13:08.214+0800 [WARN]  agent: (LAN) couldn\'t join: number_of_nodes=0 error="1 error occurred:\r\nAug 31 14:13:08 nomad-master consul[60088]:         * Failed to join 192.168.2.111: dial tcp 192.168.2.111:8301: connect: connection refused\r\nAug 31 14:13:08 nomad-master consul[60088]: "\r\nAug 31 14:13:08 nomad-master consul[60088]: 2021-08-31T14:13:08.214+0800 [WARN]  agent: Join cluster failed, will retry: cluster=LAN retry_interval=30s error=<nil>\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},968820:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/Hashicorp_Consul_01-7fe7c1a0275a1539d314e6887332c91b.png"},187727:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/Hashicorp_Consul_02-027e6c68c37b63220b83614d41c2c957.png"},148710:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/Hashicorp_Consul_03-c51dfacf36a0d58ee288f98d07553eb0.png"},341785:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/Hashicorp_Consul_04-e0e29a4ab71c214b38e276b952bf9272.png"},421128:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-825ad0c1979a3b8d8834b2806be1b28e.jpg"},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var s=r(296540);const t={},a=s.createContext(t);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);