"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[20413],{335191:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var t=r(474848),s=r(28453);const o={sidebar_position:9020,slug:"2020-08-27",title:"NGINX Docker with Certbot",authors:"mpolinowski",tags:["LINUX","NGINX","Docker","Certbot"]},i=void 0,a={id:"DevOps/NGINX/2020-08-28--nginx-docker-certbot/index",title:"NGINX Docker with Certbot",description:"Victoria Harbour, Hong Kong",source:"@site/docs/DevOps/NGINX/2020-08-28--nginx-docker-certbot/index.md",sourceDirName:"DevOps/NGINX/2020-08-28--nginx-docker-certbot",slug:"/DevOps/NGINX/2020-08-28--nginx-docker-certbot/2020-08-27",permalink:"/docs/DevOps/NGINX/2020-08-28--nginx-docker-certbot/2020-08-27",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/NGINX/2020-08-28--nginx-docker-certbot/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"NGINX",permalink:"/docs/tags/nginx"},{label:"Docker",permalink:"/docs/tags/docker"},{label:"Certbot",permalink:"/docs/tags/certbot"}],version:"current",sidebarPosition:9020,frontMatter:{sidebar_position:9020,slug:"2020-08-27",title:"NGINX Docker with Certbot",authors:"mpolinowski",tags:["LINUX","NGINX","Docker","Certbot"]},sidebar:"tutorialSidebar",previous:{title:"NGINX Docker Multihost",permalink:"/docs/DevOps/NGINX/2020-08-30--nginx-docker-multihost/2020-08-30"},next:{title:"NGINX Docker with SSL Encryption (Self-signed)",permalink:"/docs/DevOps/NGINX/2020-08-27--nginx-docker-ssl-certs-self-signed/2020-08-27"}},c={},l=[{value:"Install snapd",id:"install-snapd",level:2},{value:"Certbot SnapApp",id:"certbot-snapapp",level:2},{value:"Remove any Certbot OS packages",id:"remove-any-certbot-os-packages",level:3},{value:"Install Certbot",id:"install-certbot",level:3},{value:"Run Certbot",id:"run-certbot",level:2},{value:"Standalone or Webroot",id:"standalone-or-webroot",level:3},{value:"Install your Certificate",id:"install-your-certificate",level:3},{value:"Test Automatic Renewal",id:"test-automatic-renewal",level:3},{value:"Configuring the NGINX Container",id:"configuring-the-nginx-container",level:2},{value:"Docker Compose",id:"docker-compose",level:3},{value:"Virtual Server Configuration",id:"virtual-server-configuration",level:3},{value:"SSL Configuration",id:"ssl-configuration",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Victoria Harbour, Hong Kong",src:r(759493).A+"",width:"1500",height:"509"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#install-snapd",children:"Install snapd"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#certbot-snapapp",children:"Certbot SnapApp"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#remove-any-certbot-os-packages",children:"Remove any Certbot OS packages"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#install-certbot",children:"Install Certbot"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#run-certbot",children:"Run Certbot"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#standalone-or-webroot",children:"Standalone or Webroot"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#install-your-certificate",children:"Install your Certificate"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#test-automatic-renewal",children:"Test Automatic Renewal"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#configuring-the-nginx-container",children:"Configuring the NGINX Container"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#docker-compose",children:"Docker Compose"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#virtual-server-configuration",children:"Virtual Server Configuration"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#ssl-configuration",children:"SSL Configuration"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'This is a continuation of the last 2 tutorials to set up an NGINX web proxy in Docker. This time I am going to replace the self-signed TLS certificate with a "real" certificate from Let\'s Encrypt using Certbot. Though I had some issue with the directory structure and had to move a few things around to make this work. The final structure now looks like this:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"/opt/docker-ingress\r\n\u251c\u2500\u2500 configuration\r\n\u2502   \u251c\u2500\u2500 conf.d\r\n\u2502   \u2502   \u251c\u2500\u2500 buffers.conf\r\n\u2502   \u2502   \u251c\u2500\u2500 cache.conf\r\n\u2502   \u2502   \u251c\u2500\u2500 default.bak\r\n\u2502   \u2502   \u251c\u2500\u2500 default.conf\r\n\u2502   \u2502   \u251c\u2500\u2500 gzip.conf\r\n\u2502   \u2502   \u251c\u2500\u2500 header.conf\r\n\u2502   \u2502   \u251c\u2500\u2500 self-signed.conf\r\n\u2502   \u2502   \u251c\u2500\u2500 ssl-params.conf\r\n\u2502   \u2502   \u251c\u2500\u2500 test-instar-wiki.conf\r\n\u2502   \u2502   \u2514\u2500\u2500 timeouts.conf\r\n\u2502   \u251c\u2500\u2500 fastcgi.conf\r\n\u2502   \u251c\u2500\u2500 fastcgi_params\r\n\u2502   \u251c\u2500\u2500 koi-utf\r\n\u2502   \u251c\u2500\u2500 koi-win\r\n\u2502   \u251c\u2500\u2500 mime.types\r\n\u2502   \u251c\u2500\u2500 nginx.conf\r\n\u2502   \u251c\u2500\u2500 scgi_params\r\n\u2502   \u251c\u2500\u2500 ssl\r\n\u2502   \u2502   \u251c\u2500\u2500 dhparam\r\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 dhparam.pem\r\n\u2502   \u2502   \u251c\u2500\u2500 selfsigned\r\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 nginx-selfsigned.crt\r\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 nginx-selfsigned.key\r\n\u2502   \u2502   \u2514\u2500\u2500 test-instar-wiki\r\n\u2502   \u251c\u2500\u2500 uwsgi_params\r\n\u2502   \u2514\u2500\u2500 win-utf\r\n\u2514\u2500\u2500 docker-compose.yml\r\n\r\n6 directories, 23 files\n"})}),"\n",(0,t.jsx)(n.h2,{id:"install-snapd",children:"Install snapd"}),"\n",(0,t.jsx)(n.p,{children:"On Debian 9 (Stretch) and Debian 10 (Buster), snap can be installed directly from the command line:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"apt update\r\napt install snapd\n"})}),"\n",(0,t.jsxs)(n.p,{children:["After this, install the core snap in order to get the latest ",(0,t.jsx)(n.strong,{children:"snapd"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"snap install core\r\n  core 16-2.47 from Canonical\u2713 installed\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you already have everything installed update it with ",(0,t.jsx)(n.code,{children:"snap refresh core"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"certbot-snapapp",children:"Certbot SnapApp"}),"\n",(0,t.jsx)(n.h3,{id:"remove-any-certbot-os-packages",children:"Remove any Certbot OS packages"}),"\n",(0,t.jsx)(n.p,{children:"If you have any Certbot packages installed using an OS package manager, you should remove them before installing the Certbot snap to ensure that when you run the command certbot the snap is used rather than the installation from your OS package manager:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"apt-get remove certbot\n"})}),"\n",(0,t.jsx)(n.h3,{id:"install-certbot",children:"Install Certbot"}),"\n",(0,t.jsx)(n.p,{children:"Run this command on the command line on the machine to install Certbot."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"snap install --classic certbot\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Warning"}),": /snap/bin was not found in your $PATH. If you've not restarted your session since you installed snapd, try doing that. Please see ",(0,t.jsx)(n.a,{href:"https://forum.snapcraft.io/t/9469",children:"https://forum.snapcraft.io/t/9469"})," for more details."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Execute the following instruction on the command line on the machine to ensure that the certbot command can be run."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"ln -s /snap/bin/certbot /usr/bin/certbot\n"})}),"\n",(0,t.jsx)(n.h2,{id:"run-certbot",children:"Run Certbot"}),"\n",(0,t.jsx)(n.h3,{id:"standalone-or-webroot",children:"Standalone or Webroot"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"My web server is not currently running on this machine."})}),"\n",(0,t.jsx)(n.p,{children:"Stop your webserver, then run this command to get a certificate. Certbot will temporarily spin up a webserver on your machine."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"certbot certonly --standalone\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"No, I need to keep my web server running."})}),"\n",(0,t.jsx)(n.p,{children:"If you have a webserver that's already using port 80 and don't want to stop it while Certbot runs, run this command and follow the instructions in the terminal."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"certbot certonly --webroot\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Important Note"}),": To use the webroot plugin, your server must be configured to serve files from hidden directories. If ",(0,t.jsx)(n.code,{children:"/.well-known"})," is treated specially by your webserver configuration, you might need to modify the configuration to ensure that files inside ",(0,t.jsx)(n.code,{children:"/.well-known/acme-challenge"})," are served by the webserver."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"install-your-certificate",children:"Install your Certificate"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"certbot certonly --standalone\r\n\r\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\r\nPlugins selected: Authenticator standalone, Installer None\r\n\r\n...\r\n\r\nPlease enter in your domain name(s) (comma and/or space separated)  (Enter 'c'\r\nto cancel): test.instar.com\r\nObtaining a new certificate\r\nPerforming the following challenges:\r\nhttp-01 challenge for test.instar.com\r\nWaiting for verification...\r\nCleaning up challenges\n"})}),"\n",(0,t.jsx)(n.p,{children:"Your certificate and chain have been saved at:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"/etc/letsencrypt/live/test.instar.com/fullchain.pem\r\n/etc/letsencrypt/live/test.instar.com/privkey.pem\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To obtain a new or tweaked version of this certificate in the future, simply run certbot again. To non-interactively renew ",(0,t.jsx)(n.em,{children:"all"})," of your certificates, run:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"certbot renew\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Your account credentials have been saved in your Certbot configuration directory at ",(0,t.jsx)(n.code,{children:"/etc/letsencrypt"}),". You should make a secure backup of this folder now. This configuration directory will also contain certificates and private keys obtained by Certbot so making regular backups of this folder is ideal."]}),"\n",(0,t.jsx)(n.h3,{id:"test-automatic-renewal",children:"Test Automatic Renewal"}),"\n",(0,t.jsx)(n.p,{children:"The Certbot packages on your system come with a cron job or systemd timer that will renew your certificates automatically before they expire. You will not need to run Certbot again, unless you change your configuration. You can test automatic renewal for your certificates by running this command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo certbot renew --dry-run\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n** DRY RUN: simulating 'certbot renew' close to cert expiry\r\n**          (The test certificates below have not been saved.)\r\n\r\nCongratulations, all renewals succeeded. The following certs have been renewed:\r\n  /etc/letsencrypt/live/test.instar.com/fullchain.pem (success)\r\n** DRY RUN: simulating 'certbot renew' close to cert expiry\r\n**          (The test certificates above have not been saved.)\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"})}),"\n",(0,t.jsx)(n.p,{children:"The command to renew certbot is installed in one of the following locations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"/etc/crontab/\r\n/etc/cron.*/*\r\nsystemctl list-timers\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you needed to stop your webserver to run Certbot, you'll want to add hook scripts to stop and start your webserver automatically:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo sh -c 'printf \"#!/bin/sh\\ndocker stop ingress\\n\" > /etc/letsencrypt/renewal-hooks/pre/docker-ingress.sh'\r\nsudo sh -c 'printf \"#!/bin/sh\\ndocker start ingress\\n\" > /etc/letsencrypt/renewal-hooks/post/docker-ingress.sh'\r\nsudo chmod 755 /etc/letsencrypt/renewal-hooks/pre/docker-ingress.sh\r\nsudo chmod 755 /etc/letsencrypt/renewal-hooks/post/docker-ingress.sh\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configuring-the-nginx-container",children:"Configuring the NGINX Container"}),"\n",(0,t.jsx)(n.h3,{id:"docker-compose",children:"Docker Compose"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"/opt/docker-ingress/docker-compose.yml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:'version: "3.8"\r\nservices:\r\n\r\n    ingress:\r\n        image: nginx:stable-alpine\r\n        container_name: ingress\r\n        networks:\r\n        - gateway\r\n        ports:\r\n        - "80:80"\r\n        - "443:443"\r\n        restart: unless-stopped\r\n        volumes:\r\n        - /opt/docker-ingress/configuration/conf.d:/etc/nginx/conf.d\r\n        - /opt/docker-ingress/configuration/ssl/dhparam:/etc/nginx/ssl/dhparam\r\n        - /opt/docker-ingress/configuration/ssl/selfsigned:/etc/nginx/ssl/selfsigned\r\n        # - /etc/letsencrypt/live/test.instar.com:/etc/nginx/ssl/test.instar.com\r\n        - /etc/letsencrypt/archive/test.instar.com:/etc/nginx/ssl/test.instar.com\r\n        - /opt/docker-ingress/configuration/nginx.conf:/etc/nginx/nginx.conf\r\n        - /opt/test-static/public:/opt/test-static/public\r\n\r\nnetworks:\r\n  gateway: {}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"virtual-server-configuration",children:"Virtual Server Configuration"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"/opt/docker-ingress/configuration/conf.d/default.conf"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:"server {\r\n    listen      443 ssl;\r\n    listen      [::]:443 ssl;\r\n\r\n    include     conf.d/test-instar-wiki.conf;\r\n    include     conf.d/ssl-params.conf;\r\n\r\n    server_name test.instar.com;\r\n\r\n    location / {\r\n        rewrite   ^/(.*)$  https://wiki.instar.com/Quick_Installation/ONVIF/$1  permanent;\r\n    }\r\n    \r\n    error_page  500 502 503 504  /50x.html;\r\n    location = /50x.html {\r\n        root   /usr/share/nginx/html;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"ssl-configuration",children:"SSL Configuration"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"/opt/docker-ingress/configuration/conf.d/test-instar-com.conf"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:"ssl_certificate /etc/nginx/ssl/test.instar.com/fullchain1.pem;\r\nssl_certificate_key /etc/nginx/ssl/test.instar.com/privkey1.pem;\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"/opt/docker-ingress/configuration/conf.d/ssl-params.conf"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'ssl_protocols TLSv1.2;\r\nssl_prefer_server_ciphers on;\r\nssl_dhparam /etc/nginx/ssl/dhparam/dhparam.pem;\r\nssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;\r\nssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0\r\nssl_session_timeout  10m;\r\nssl_session_cache shared:SSL:10m;\r\nssl_session_tickets off; # Requires nginx >= 1.5.9\r\nssl_stapling on; # Requires nginx >= 1.3.7\r\nssl_stapling_verify on; # Requires nginx => 1.3.7\r\nresolver 8.8.8.8 8.8.4.4 valid=300s;\r\nresolver_timeout 5s;\r\n# Disable strict transport security for now. You can uncomment the following\r\n# line if you understand the implications.\r\n# add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";\r\nadd_header X-Frame-Options DENY;\r\nadd_header X-Content-Type-Options nosniff;\r\nadd_header X-XSS-Protection "1; mode=block";\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},759493:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-b57dcf7a42ddd712383aadde6d3ef4c8.jpg"},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(296540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);