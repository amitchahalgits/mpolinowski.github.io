"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[9319],{741521:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=n(785893),r=n(603905);const a={sidebar_position:9940,slug:"2021-02-25",title:"Gatsby Build Gitlab CI Pipeline",authors:"mpolinowski",tags:["NGINX","Gatsby","Docker"]},s=void 0,o={id:"DevOps/GitOps/2021-02-25-gatsby-build-gitlab-pipeline/index",title:"Gatsby Build Gitlab CI Pipeline",description:"Guangzhou, China",source:"@site/docs/DevOps/GitOps/2021-02-25-gatsby-build-gitlab-pipeline/index.md",sourceDirName:"DevOps/GitOps/2021-02-25-gatsby-build-gitlab-pipeline",slug:"/DevOps/GitOps/2021-02-25-gatsby-build-gitlab-pipeline/2021-02-25",permalink:"/docs/DevOps/GitOps/2021-02-25-gatsby-build-gitlab-pipeline/2021-02-25",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/GitOps/2021-02-25-gatsby-build-gitlab-pipeline/index.md",tags:[{label:"NGINX",permalink:"/docs/tags/nginx"},{label:"Gatsby",permalink:"/docs/tags/gatsby"},{label:"Docker",permalink:"/docs/tags/docker"}],version:"current",sidebarPosition:9940,frontMatter:{sidebar_position:9940,slug:"2021-02-25",title:"Gatsby Build Gitlab CI Pipeline",authors:"mpolinowski",tags:["NGINX","Gatsby","Docker"]},sidebar:"tutorialSidebar",previous:{title:"Install Gitlab with Docker-Compose (Debian Bullseye)",permalink:"/docs/DevOps/GitOps/2022-03-16--gitlab-docker-compose-on-localhost/2022-03-16"},next:{title:"Working with Gitlab",permalink:"/docs/DevOps/GitOps/2020-08-04--working-with-gitlab/2020-08-04"}},l={},c=[{value:"Adding a CI/CD Build Pipeline",id:"adding-a-cicd-build-pipeline",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.ah)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Guangzhou, China",src:n(8064).Z+"",width:"1500",height:"667"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#adding-a-cicd-build-pipeline",children:"Adding a CI/CD Build Pipeline"})}),"\n"]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["Continuation from ",(0,i.jsx)(t.a,{href:"/docs/DevOps/NGINX/2021-02-22-nginx-docker-ingress/2021-02-22",children:"NGINX Docker Ingress for your Gatsby Build"})]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["I now have a Gatsby webpage that I build locally. ",(0,i.jsx)(t.a,{href:"/docs/Development/Go/2021-02-21-gofiber-container-gatsby/2021-02-21",children:"Wrap it inside a GoFiber Web Container"}),". I then uploaded this container to my server and provided an ",(0,i.jsx)(t.a,{href:"/docs/DevOps/NGINX/2021-02-22-nginx-docker-ingress/2021-02-22",children:"NGINX Ingress container"})," to handle the SSL certificate and direct web traffic to my web site."]}),"\n",(0,i.jsxs)(t.p,{children:["Now I want to use Gitlab to do the hard work for me with ",(0,i.jsx)(t.a,{href:"/docs/DevOps/GitOps/2020-08-04--working-with-gitlab/2020-08-04",children:"Gitlab CI/CD Pipelines"}),". I want to be able to upload my Gatsby source code to Gitlab and have it run the build for me. Afterwards it should trigger a second job that takes the ",(0,i.jsx)(t.strong,{children:"Build Artifacts"}),", wraps them inside the ",(0,i.jsx)(t.strong,{children:"GoFiber Webserver Container"})," and uploads the container into the ",(0,i.jsx)(t.a,{href:"/docs/DevOps/GitOps/2020-02-02--docker-images-in-gitlab/2020-02-02",children:"Gitlab Docker Registry"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"adding-a-cicd-build-pipeline",children:"Adding a CI/CD Build Pipeline"}),"\n",(0,i.jsxs)(t.p,{children:["After you ",(0,i.jsx)(t.a,{href:"/docs/DevOps/GitOps/2020-02-01--gitlab-in-podman-on-centos8/2020-02-01",children:"Installed Gitlab"})," you can add your Gatsby project to your account. After adding a ",(0,i.jsx)(t.code,{children:".gitignore"})," file to the root directory:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yml",children:"# Dependency directories\r\nnode_modules/\r\n\r\n# Optional npm cache directory\r\n.npm\r\n\r\n# Optional eslint cache\r\n.eslintcache\r\n\r\n# dotenv environment variables file\r\n.env\r\n\r\n# gatsby files\r\n.cache/\r\npublic/\r\n\r\n# System files\r\n.DS_Store\r\n.thumbs\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Additionally, we need a ",(0,i.jsx)(t.code,{children:".gitlab-ci.yml"})," file that holds our instructions for the CI Pipline:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yml",children:'image: node:latest\r\n\r\ncache:\r\n  paths:\r\n    - node_modules/\r\n    - .cache/\r\n    - public/\r\n\r\nstages:\r\n  - build\r\n  - deploy\r\n\r\npage-render:\r\n  stage: build\r\n  script:\r\n    - npm install\r\n    - npm run pre-build\r\n    - ./node_modules/.bin/gatsby build --prefix-paths\r\n  artifacts:\r\n    expire_in: 1 days\r\n    paths:\r\n      - public\r\n  only:\r\n    - master\r\n  tags: [build]\r\n\r\ncontainerize:\r\n  stage: deploy\r\n  script:\r\n    - curl --request POST --form "token=mysecrettoken" --form ref=master https://my.gitlab.com/api/v4/projects/75/trigger/pipeline\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.strong,{children:"Containerize"})," step above is a ",(0,i.jsx)(t.strong,{children:"Pipeline Trigger"})," - ",(0,i.jsx)(t.a,{href:"/docs/DevOps/GitOps/2020-08-04--working-with-gitlab/2020-08-04#setting-a-pipline-tigger",children:'see "Setting a Pipline Tigger"'}),". This will take the ",(0,i.jsx)(t.strong,{children:"Build Artifacts"})," from the Gatsby build and build the ",(0,i.jsx)(t.a,{href:"https://github.com/mpolinowski/gatsby_gofiber_container",children:"GoFiber Container around it"})," - ",(0,i.jsx)(t.code,{children:"Dockerfile"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-Dockerfile",children:'# Building the binary of the App\r\nFROM golang:1.16 AS build\r\n\r\n# Project labels\r\nLABEL maintainer="m.polinowski@instar.com"\r\n\r\n# `wiki` should be replaced with your project name\r\nWORKDIR /go/src/wiki\r\n\r\n# Copy in the build artifacts from the Gatsby static build to add it to your GoFiber container\r\nCOPY . .\r\nRUN curl -L --header "PRIVATE-TOKEN: myprivatetoken" "https://my.gitlab.com/api/v4/projects/wiki%2Fwiki_en/jobs/artifacts/master/download?job=page-render" >> ./temp/artifacts.zip\r\nRUN apt update && apt install -y unzip && unzip -qq ./temp/artifacts.zip -d ./static\r\n\r\n# Downloads all the dependencies in advance (could be left out, but it\'s more clear this way)\r\nRUN go mod download\r\n\r\n# Builds the application as a staticly linked one, to allow it to run on alpine\r\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o app .\r\n\r\n# Moving the binary to the \'final Image\' to make it smaller\r\nFROM alpine:latest\r\n\r\nWORKDIR /app\r\n\r\n# Create the `public` dir and copy all the assets into it\r\nRUN mkdir ./static\r\nCOPY --from=build /go/src/wiki/static ./static\r\n\r\n# `wiki` should be replaced here as well\r\nCOPY --from=build /go/src/wiki/app .\r\n\r\n# Exposes port 9999 because our program listens on that port\r\nEXPOSE 9999\r\n\r\n# CMD ["./app"]\r\nRUN chmod +x ./static/run.sh\r\nCMD ["ash", "./static/run.sh"]\n'})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"The last step in the Dockerfile above triggers a shell script that I added to the static folder of the project. It simply executes the compiled Fiber app for me - as I had difficulties to get it to run otherwise."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"#!/bin/ash\r\n./app\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.ah)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},603905:(e,t,n)=>{n.d(t,{ah:()=>c});var i=n(667294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,b=u["".concat(l,".").concat(h)]||u[h]||d[h]||a;return n?i.createElement(b,s(s({ref:t},p),{},{components:n})):i.createElement(b,s({ref:t},p))}));p.displayName="MDXCreateElement"},8064:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/photo-456tdsfggd_67gfh6dgdf4_d-3d8ffa6b9b1e3c6c1237d6b73dec3fbc.jpg"}}]);