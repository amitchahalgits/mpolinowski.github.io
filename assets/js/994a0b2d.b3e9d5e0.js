"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[95065],{313267:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=t(785893),s=t(603905);const o={sidebar_position:9080,slug:"2021-09-10",title:"Go Websockets",authors:"mpolinowski",tags:["Go","Javascript"]},a=void 0,i={id:"Development/Go/2021-09-10--go-websockets/index",title:"Go Websockets",description:"Jomsom, Nepal",source:"@site/docs/Development/Go/2021-09-10--go-websockets/index.md",sourceDirName:"Development/Go/2021-09-10--go-websockets",slug:"/Development/Go/2021-09-10--go-websockets/2021-09-10",permalink:"/docs/Development/Go/2021-09-10--go-websockets/2021-09-10",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Go/2021-09-10--go-websockets/index.md",tags:[{label:"Go",permalink:"/docs/tags/go"},{label:"Javascript",permalink:"/docs/tags/javascript"}],version:"current",sidebarPosition:9080,frontMatter:{sidebar_position:9080,slug:"2021-09-10",title:"Go Websockets",authors:"mpolinowski",tags:["Go","Javascript"]},sidebar:"tutorialSidebar",previous:{title:"Golang Refresher :: fmt & strings",permalink:"/docs/Development/Go/2021-09-11--golang-refresher-fmt-strings/2021-09-11"},next:{title:"Paho MQTT Client with Golang",permalink:"/docs/Development/Go/2021-06-03--mqtt-with-golang/2021-06-03"}},c={},l=[{value:"Project Setup",id:"project-setup",level:2},{value:"Dependencies",id:"dependencies",level:3},{value:"Working with Jet",id:"working-with-jet",level:3},{value:"Create a HTML Page",id:"create-a-html-page",level:4},{value:"Create a Route",id:"create-a-route",level:4},{value:"Create a Handler",id:"create-a-handler",level:4},{value:"Create the Webserver",id:"create-the-webserver",level:4},{value:"Setting up a Websocket Connection",id:"setting-up-a-websocket-connection",level:2},{value:"Using the Websocket Connection",id:"using-the-websocket-connection",level:3},{value:"Handling Connected Users",id:"handling-connected-users",level:4},{value:"Sending Messages",id:"sending-messages",level:4}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Jomsom, Nepal",src:t(448539).Z+"",width:"1500",height:"405"})}),"\n",(0,r.jsx)(n.h2,{id:"project-setup",children:"Project Setup"}),"\n",(0,r.jsxs)(n.p,{children:["This project are my notes following along a tutorial by ",(0,r.jsx)(n.a,{href:"https://github.com/tsawler/ws-udemy",children:"@tsawler"})," and can be found ",(0,r.jsx)(n.a,{href:"https://github.com/tsawler/ws-udemy",children:"on Github"}),"."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"https://github.com/mpolinowski/go_gorilla_websockets",children:"Github Repository"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"dependencies",children:"Dependencies"}),"\n",(0,r.jsx)(n.p,{children:"Initialize the project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mod init go_gorilla_websocket\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/CloudyKit/jet",children:"HTML Templating Engine"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"go get github.com/CloudyKit/jet/v6   \r\ngo get: added github.com/CloudyKit/fastprinter v0.0.0-20200109182630-33d98a066a53\r\ngo get: added github.com/CloudyKit/jet/v6 v6.1.0\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/bmizerany/pat",children:"Routing package"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"go get github.com/bmizerany/pat   \r\ngo get: added github.com/bmizerany/pat v0.0.0-20210406213842-e4b6760bdd6f\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/gorilla/websocket",children:"Websocket package"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"go get github.com/gorilla/websocket\r\ngo get: added github.com/gorilla/websocket v1.4.2\n"})}),"\n",(0,r.jsx)(n.h3,{id:"working-with-jet",children:"Working with Jet"}),"\n",(0,r.jsxs)(n.p,{children:["Jet is a templating engine for Go - just like EJS or Handlebar for Node.js - start by creating a simple home page with the ",(0,r.jsx)(n.code,{children:".jet"})," extension."]}),"\n",(0,r.jsx)(n.h4,{id:"create-a-html-page",children:"Create a HTML Page"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"html\\home.jet"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html lang="en">\r\n    <head>\r\n        <meta charset="UTF-8">\r\n        <meta name="viewport" content= "width=device-width, initial-scale=1.0">\r\n        <meta http-equiv="X-UA-Compatible" content="IE=edge">\r\n        <title>Home</title>\r\n    </head>\r\n    <body>\r\n        <h1>Frontpage</h1>\r\n    </body>\n'})}),"\n",(0,r.jsx)(n.h4,{id:"create-a-route",children:"Create a Route"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"cmd\\web\\routes.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"go_gorilla_websocket/internal/handlers"\r\n\t"net/http"\r\n\t"github.com/bmizerany/pat"\r\n)\r\n\r\nfunc routes() http.Handler {\r\n\tm := pat.New()\r\n\r\n\tm.Get("/", http.HandlerFunc(handlers.Home))\r\n\r\n\treturn m\r\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"create-a-handler",children:"Create a Handler"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"internal\\handlers\\handlers.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package handlers\r\n\r\nimport (\r\n\t"log"\r\n\t"net/http"\r\n\t"github.com/CloudyKit/jet/v6"\r\n)\r\n\r\nvar views = jet.NewSet(\r\n\tjet.NewOSFileSystemLoader("./html"),\r\n\tjet.InDevelopmentMode(),\r\n)\r\n\r\nfunc Home(w http.ResponseWriter, r *http.Request) {\r\n\terr := renderPage(w, "home.jet", nil)\r\n\tif err != nil {\r\n\t\tlog.Println(err)\r\n\t}\r\n}\r\n\r\nfunc renderPage(w http.ResponseWriter, tmpl string, data jet.VarMap) error {\r\n\tview, err := views.GetTemplate(tmpl)\r\n\tif err != nil {\r\n\t\tlog.Println(err)\r\n\t\treturn err\r\n\t}\r\n\r\n\terr = view.Execute(w, data, nil)\r\n\tif err != nil {\r\n\t\tlog.Println(err)\r\n\t\treturn err\r\n\t}\r\n\r\n\treturn nil\r\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"create-the-webserver",children:"Create the Webserver"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"cmd\\web\\main.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"log"\r\n\t"net/http"\r\n)\r\n\r\nfunc main() {\r\n\tm := routes()\r\n\r\n\tlog.Println("Starting Webserver on Port 8080")\r\n\r\n\t_ = http.ListenAndServe(":8080", m)\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"You can start the app with:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"go mod tidy\r\ngo run cmd/web/*.go\r\n2021/09/26 20:31:26 Starting Webserver on Port 8080\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Go to ",(0,r.jsx)(n.code,{children:"http://localhost:8080"})," to verify that the page is available."]}),"\n",(0,r.jsx)(n.h2,{id:"setting-up-a-websocket-connection",children:"Setting up a Websocket Connection"}),"\n",(0,r.jsx)(n.p,{children:"We can now add the Websocket Upgrade to our handlers:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"internal\\handlers\\handlers.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'var upgradeConnection = websocket.Upgrader {\r\n\tReadBufferSize: 1024,\r\n\tWriteBufferSize: 1024,\r\n\tCheckOrigin: func(r *http.Request) bool {return true},\r\n}\r\n\r\n// Define the response returned from the websocket\r\ntype WsJsonResponse struct {\r\n\tAction \t\t\tstring `json: "action"`\r\n\tMessage \t\tstring `json: "message"`\r\n\tMessageType \tstring `json: "message_type"`\r\n\tConnectedUsers []string `json:"connected_users"`\r\n}\r\n\r\n// Upgrade http connection to websocket\r\nfunc WsEndpoint(w http.ResponseWriter, r *http.Request) {\r\n\tws, err := upgradeConnection.Upgrade(w, r, nil)\r\n\tif err != nil {\r\n\t\tlog.Println(err)\r\n\t}\r\n\t\r\n\tlog.Println("Client Connected to Endpoint")\r\n\r\n\tvar response WsJsonResponse\r\n\tresponse.Message = `<em><small>Connected to Server</small></em>`\r\n\r\n\terr = ws.WriteJSON(response)\r\n\tif err != nil {\r\n\t\tlog.Println(err)\r\n\t}\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"And add a route to this WS Endpoint:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"cmd\\web\\routes.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"go_gorilla_websocket/internal/handlers"\r\n\t"net/http"\r\n\r\n\t"github.com/bmizerany/pat"\r\n)\r\n\r\nfunc routes() http.Handler {\r\n\tm := pat.New()\r\n\r\n\tm.Get("/", http.HandlerFunc(handlers.Home))\r\n\tm.Get("/ws", http.HandlerFunc(handlers.WsEndpoint))\r\n\r\n\treturn m\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"And add a WS client script to our Home page:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"html\\home.jet"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html lang="en">\r\n    <head>\r\n        <meta charset="UTF-8">\r\n        <meta name="viewport" content= "width=device-width, initial-scale=1.0">\r\n        <meta http-equiv="X-UA-Compatible" content="IE=edge">\r\n        <title>Home</title>\r\n    </head>\r\n    <body>\r\n        <h1>Frontpage</h1>\r\n    </body>\r\n    <script>\r\n        let socket = null;\r\n\t\t// Wait for the page to be loaded then connect to the websocket\r\n        document.addEventListener("DOMContentLoaded", function() {\r\n            socket = new WebSocket("ws://127.0.0.1:8080/ws");\r\n\t\t\t// Console log when successful\r\n            socket.onopen = () => {\r\n                console.log("Websocket connection established")\r\n            }\r\n\t\t\t// Console log when closed\r\n            socket.onclose = () => {\r\n                console.log("Websocket connection closed")\r\n            }\r\n\t\t\t// Console log errors\r\n            socket.onerror = error => {\r\n                console.log(error)\r\n            }\r\n\t\t\t// Console log messages\r\n            socket.onmessage = msg => {\r\n                console.log(msg)\r\n                //Our message will be in `msg.data` and be in JSON\r\n                let jmsg = JSON.parse(msg.data)\r\n                console.log(jmsg)\r\n            }\r\n        })\r\n    <\/script>\r\n</html>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Go Websockets",src:t(615361).Z+"",width:"1248",height:"210"})}),"\n",(0,r.jsxs)(n.p,{children:["Restart the application and reload the Home page - you should now see a ",(0,r.jsx)(n.code,{children:"Websocket connection established"})," inside your browser console as well as having a connection message on your terminal:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"go run cmd/web/*.go\r\n2021/09/26 21:00:28 Starting Webserver on Port 8080\r\n2021/09/26 21:00:56 Client Connected to Endpoint\n"})}),"\n",(0,r.jsx)(n.h3,{id:"using-the-websocket-connection",children:"Using the Websocket Connection"}),"\n",(0,r.jsx)(n.p,{children:"Now I need to handle the messages that I want to be send through the connection. For this I first define the necessary types and variables for chat clients channels:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"internal\\handlers\\handlers.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'var wsChn = make(chan WsPayload)\r\nvar clients = make(map[WebSocketConnection] string)\r\n\r\n...\r\n\r\n// Websocket type provided by the websocket package\r\ntype WebSocketConnection struct {\r\n\t*websocket.Conn\r\n}\r\n\r\n// Define the response returned from the websocket\r\ntype WsPayload struct {\r\n\tAction \t\tstring `json: "action"`\r\n\tUsername\tstring `json: "username"`\r\n\tMessage \tstring `json: "message"`\r\n\tConn WebSocketConnection `json: "-"`\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["We need a function that listens to the ws connection and expects a payload of type ",(0,r.jsx)(n.code,{children:"WsPayload"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"internal\\handlers\\handlers.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ListenForWs(conn *WebSocketConnection) {\r\n\t//If listener crashes restart it\r\n\tdefer func() {\r\n\t\tif r := recover(); r != nil {\r\n\t\t\tlog.Println("Error", fmt.Sprintf("%v", r))\r\n\t\t}\r\n\t}()\r\n\r\n\tvar payload WsPayload\r\n\r\n\t// If there is payload send it to the ws Channel defined as a var of type `WsPayload`\r\n\tfor {\r\n\t\terr := conn.ReadJSON(&payload)\r\n\t\tif err != nil {\r\n\t\t\t// do nothing\r\n\t\t} else {\r\n\t\t\tpayload.Conn = *conn\r\n\t\t\twsChn <- payload\r\n\t\t}\r\n\t}\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["When the function above receives a payload it writes it to ",(0,r.jsx)(n.code,{children:"wsChn"})," which we need to store in a variable ",(0,r.jsx)(n.code,{children:"e"})," and forward it to a broadcast function that forwards it to all connected clients:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"internal\\handlers\\handlers.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ListenToWsChannel() {\r\n\tvar response WsJsonResponse\r\n\r\n\tfor {\r\n\t\t// forward the payload stored in `wsChn` to the broadcast function\r\n\t\te := <- wsChn\r\n\t\tresponse.Action = "Got here"\r\n\t\tresponse.Message = fmt.Sprintf("A message and action was %s", e.Action)\r\n\t\tbroadcastToAll(response)\r\n\t}\r\n}\r\n\r\nfunc broadcastToAll(response WsJsonResponse) {\r\n\t// Broadcast payload to all connected clients\r\n\tfor client := range clients {\r\n\t\terr := client.WriteJSON(response)\r\n\t\t// If you encounter an error delete the client\r\n\t\tif err != nil {\r\n\t\t\tlog.Println("Websocket err")\r\n\t\t\t_ = client.Close()\r\n\t\t\tdelete(clients, client)\r\n\t\t}\r\n\t}\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["We will trigger this routine by calling ",(0,r.jsx)(n.code,{children:"ListenForWs"})," from the main ",(0,r.jsx)(n.code,{children:"WsEndpoint"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"internal\\handlers\\handlers.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func WsEndpoint(w http.ResponseWriter, r *http.Request) {\r\n\tws, err := upgradeConnection.Upgrade(w, r, nil)\r\n\tif err != nil {\r\n\t\tlog.Println(err)\r\n\t}\r\n\t\r\n\tlog.Println("Client Connected to Endpoint")\r\n\r\n\tvar response WsJsonResponse\r\n\tresponse.Message = `<em><small>Connected to Server</small></em>`\r\n\r\n\tconn := WebSocketConnection{Conn: ws}\r\n\tclients[conn] = ""\r\n\r\n\terr = ws.WriteJSON(response)\r\n\tif err != nil {\r\n\t\tlog.Println(err)\r\n\t}\r\n\r\n\tgo ListenForWs(&conn)\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"And adding it to our main function:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"cmd\\web\\main.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func main() {\r\n\tm := routes()\r\n\r\n\tlog.Println("Starting channel listener")\r\n\tgo handlers.ListenToWsChannel()\r\n\r\n\tlog.Println("Starting Webserver on Port 8080")\r\n\r\n\t_ = http.ListenAndServe(":8080", m)\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Restart the server - you should now see the new message that the channel listener is active:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"go run cmd/web/*.go\r\n2021/09/27 12:21:33 Starting channel listener\r\n2021/09/27 12:21:33 Starting Webserver on Port 8080\n"})}),"\n",(0,r.jsx)(n.p,{children:"And also see the JSON formatted message in our browser console:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Go Websockets",src:t(5932).Z+"",width:"1251",height:"658"})}),"\n",(0,r.jsx)(n.h4,{id:"handling-connected-users",children:"Handling Connected Users"}),"\n",(0,r.jsx)(n.p,{children:"Our chat app has a input field where the user can type in a name he wants to use. We can now add a script to the Home html template that takes this name after the input field looses focus (user toggled from the username field to the message field) and writes it to a variable we can send to our backend:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"html\\home.jet"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'let userName = document.getElementById("username");\r\nuserName.addEventListener("change", function() {\r\n\tlet jsonData = {};\r\n\tjsonData["action"] = "username";\r\n\tjsonData["username"] = this.value;\r\n\tsocket.send(JSON.stringify(jsonData))\r\n})\n'})}),"\n",(0,r.jsx)(n.p,{children:"And the event is successfully fired - the message is send to our handler and the update was logged:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Go Websockets",src:t(775354).Z+"",width:"1252",height:"461"})}),"\n",(0,r.jsxs)(n.p,{children:["But the result is not very useful yet - we first need to get rid of our placeholder content in ",(0,r.jsx)(n.code,{children:"ListenToWsChannel()"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'response.Action = "Got here"\r\nresponse.Message = fmt.Sprintf("A message and action was %s", e.Action)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Instead I need to add each connected user to a list, sort it (because I can) and return it to the broadcast function:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"internal\\handlers\\handlers.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ListenToWsChannel() {\r\n\tvar response WsJsonResponse\r\n\r\n\tfor {\r\n\t\t// forward the payload stored in `wsChn` to the broadcast function\r\n\t\te := <- wsChn\r\n\r\n\t\t// Do different things based on the action that triggered you\r\n\t\tswitch e.Action {\r\n\t\t// If action is `username` send it to `getUserList` and broadcast the return\r\n\t\tcase "username":\r\n\t\t\t// get a list of all users and send it to the broadcast function\r\n\t\t\tclients[e.Conn] = e.Username\r\n\t\t\tusers := getUserList()\r\n\t\t\tresponse.Action = "list_users"\r\n\t\t\tresponse.ConnectedUsers = users\r\n\t\t\tbroadcastToAll(response)\r\n\t\t// If action is `left` delete user from list that send the message\r\n\t\tcase "left":\r\n\t\t\tresponse.Action = "list_users"\r\n\t\t\tdelete(clients, e.Conn)\r\n\t\t\tusers := getUserList()\r\n\t\t\tresponse.ConnectedUsers = users\r\n\t\t\tbroadcastToAll(response)\r\n\r\n\t\t}\r\n\r\n\t\t// Placeholder\r\n\t\t// response.Action = "Got here"\r\n\t\t// response.Message = fmt.Sprintf("A message and action was %s", e.Action)\r\n\t\t// broadcastToAll(response)\r\n\t}\r\n}\r\n\r\n\r\n// Collect all connected user\'s names and return a sorted list\r\nfunc getUserList() []string {\r\n\r\n\tvar userList []string\r\n\r\n\tfor _, x := range clients {\r\n\t\t// If user name is not empty string append it\r\n\t\tif x != "" {\r\n\t\t\tuserList = append(userList, x)\r\n\t\t}\r\n\t}\r\n\tsort.Strings(userList)\r\n\treturn userList\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Go Websockets",src:t(775354).Z+"",width:"1252",height:"461"})}),"\n",(0,r.jsx)(n.p,{children:"Ok, now we can handle this response from the backend by adding a script to our Home page:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"html\\home.jet"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// send a message to server when user leaves\r\nwindow.onbeforeunload = function() {\r\n\tconsole.log("User disconnected")\r\n\tlet jsonData = {};\r\n\tjsonData["action"] = "left";\r\n\tsocket.send(JSON.stringify(jsonData));\r\n}\r\n\r\nsocket.onmessage = msg => {\r\n\t// console.log(msg)\r\n\t// Our message will be in `msg.data` and be in JSON\r\n\tlet data = JSON.parse(msg.data)\r\n\tconsole.log("Action:", data.Action)\r\n\r\n\tswitch (data.Action) {\r\n\t\tcase "list_users":\r\n\t\t\t// grab a unordered list by ID\r\n\t\t\tlet ul = document.getElementById("online_users");\r\n\t\t\t// empty the list\r\n\t\t\twhile (ul.firstChild) ul.removeChild(ul.firstChild);\r\n\t\t\t// if at least one user is connected\r\n\t\t\tif (data.connected_users.length > 0) {\r\n\t\t\t\t// loop through every user and create a list item for them\r\n\t\t\t\tdata.connected_users.forEach(function(item) {\r\n\t\t\t\t\tlet li = document.createElement("li")\r\n\t\t\t\t\tli.classList.add("list-group-item");\r\n\t\t\t\t\tli.appendChild(document.createTextNode(item))\r\n\t\t\t\t\tul.appendChild(li)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["We can use the list we are getting from our backend to render on our frontend by adding the unordered list with ID ",(0,r.jsx)(n.code,{children:"online users"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"html\\home.jet"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<h3>Who is online?</h3>\r\n<ul id="online_users">\r\n</ul>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Go Websockets",src:t(286260).Z+"",width:"1245",height:"328"})}),"\n",(0,r.jsx)(n.h4,{id:"sending-messages",children:"Sending Messages"}),"\n",(0,r.jsxs)(n.p,{children:["I now want to be able send data through the ws connection to my client and have it displayed on the web page. For this I first need to to create a place for it in the Home html template with ID ",(0,r.jsx)(n.code,{children:"output"})," and a button with id ",(0,r.jsx)(n.code,{children:"sendBtn"})," that takes the string from the message input with ID ",(0,r.jsx)(n.code,{children:"message"})," and send it to our backend:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"html\\home.jet"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<input type="text" name="message" id="message" />\r\n<a href="javascript:void(0)" role="button" id="sendBtn">Send Message</a>\r\n<input id="action" />\r\n<div id="output">\r\n</div>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["When the send button is pressed take the username and message and send them through the websocket connection. To be able to identify it set label ",(0,r.jsx)(n.code,{children:"action"})," to broadcast. Once send empty the message field:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"html\\home.jet"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'function sendMessage() {\r\n\tlet jsonData = {};\r\n\t// Set `action` to be `broadcast`\r\n\tjsonData["action"] = "broadcast";\r\n\t// Take username and message\r\n\tjsonData["username"] = document.getElementById("username").value;\r\n\tjsonData["message"] = document.getElementById("message").value;\r\n\t// and send them to the backend\r\n\tsocket.send(JSON.stringify(jsonData))\r\n\t// Empty message field after message was send\r\n\tdocument.getElementById("message").value = ""\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["I will add 2 ways of triggering the ",(0,r.jsx)(n.code,{children:"sendMessage"})," function - the first one is by clicking ENTER on your keyboard:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"html\\home.jet"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// When user types in a message and presses Enter send message\r\ndocument.getElementById("message").addEventListener("keydown", function(event) {\r\n\tif (event.code === "Enter") {\r\n\t\t// First check if you are connected\r\n\t\tif (!socket) {\r\n\t\t\tconsole.log("You are not connected")\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Prevent having browser overthink the event\r\n\t\tevent.preventDefault();\r\n\t\tevent.stopPropagation();\r\n\t\t// Trigger send message function below\r\n\t\tsendMessage();\r\n\t}\r\n})\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In our handler file we now need a case for action ",(0,r.jsx)(n.code,{children:"broadcast"})," that takes the username and message and sends them to all connected users:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"internal\\handlers\\handlers.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// If action is `broadcast` receive message and broadcast to all connected users\r\ncase "broadcast":\r\n\t// Broadcast sends the username and a message\r\n\tresponse.Action = "broadcast"\r\n\t// Prepend Username in front of message\r\n\tresponse.Message = fmt.Sprintf("<strong>%s</strong>: %s", e.Username, e.Message)\r\n\t// And send to everyone\r\n\tbroadcastToAll(response)\r\n\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["On the client side we now have to take the broadcast and print it in our chat field with ID ",(0,r.jsx)(n.code,{children:"output"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"html\\home.jet"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// Define the variable\r\nlet outPut = document.getElementById("output")\r\n\r\n...\r\n\r\n// Create the switch case for `broadcast`\r\n case "broadcast":\r\n\t// Take the message broadcast and output it into div with ID output\r\n\toutPut.innerHTML = outPut.innerHTML + data.Message + "<br/>";\r\n\tbreak;\n'})}),"\n",(0,r.jsxs)(n.p,{children:["To send the message via the send button we can first add a check that verifies that the message field is not empty before triggering the send function - if false ",(0,r.jsx)(n.code,{children:"sendMessage"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"html\\home.jet"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'let sendButton = document.getElementById("sendBtn")\r\n\r\n...\r\n\r\nsendButton.addEventListener("click", function() {\r\n\tif ((userField.value === "") || (messageField.value === "")) {\r\n\t\talert ("Username and Message cannot be empty!");\r\n\t\treturn false;\r\n\t} else {\r\n\t\tsendMessage();\r\n\t\t}\r\n\t})\r\n})\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Go Websockets",src:t(428932).Z+"",width:"1105",height:"647"})})]})}function h(e={}){const{wrapper:n}={...(0,s.ah)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},603905:(e,n,t)=>{t.d(n,{ah:()=>l});var r=t(667294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),g=l(t),p=s,m=g["".concat(c,".").concat(p)]||g[p]||d[p]||o;return t?r.createElement(m,a(a({ref:n},h),{},{components:t})):r.createElement(m,a({ref:n},h))}));h.displayName="MDXCreateElement"},615361:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/GO_Websockets_02-f7e64a54e132735160714d74bcf36378.png"},5932:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/GO_Websockets_03-429634ae3fa61f1982c01d3ec84e3e1d.png"},775354:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/GO_Websockets_04-5e6fed3885c81eda2eb3f5f33167e1cd.png"},286260:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/GO_Websockets_06-41392ef8daf667112e4af092925f7826.png"},428932:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/GO_Websockets_07-3ed24372210f1554c0225ad4a2e8b55d.png"},448539:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-dcb76a807c307d19098cad056104ab42.jpg"}}]);