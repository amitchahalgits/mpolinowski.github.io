"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[46777],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(n),c=a,h=u["".concat(s,".").concat(c)]||u[c]||d[c]||o;return n?r.createElement(h,l(l({ref:t},m),{},{components:n})):r.createElement(h,l({ref:t},m))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},53953:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:4730,slug:"2023-01-29",title:"Python Ray Deployments",authors:"mpolinowski",tags:["Python","Machine Learning","Ray"],description:"Use Ray to deploy your remote services."},l=void 0,i={unversionedId:"IoT-and-Machine-Learning/AIOps/2023-01-29-python-ray-deployments/index",id:"IoT-and-Machine-Learning/AIOps/2023-01-29-python-ray-deployments/index",title:"Python Ray Deployments",description:"Use Ray to deploy your remote services.",source:"@site/docs/IoT-and-Machine-Learning/AIOps/2023-01-29-python-ray-deployments/index.md",sourceDirName:"IoT-and-Machine-Learning/AIOps/2023-01-29-python-ray-deployments",slug:"/IoT-and-Machine-Learning/AIOps/2023-01-29-python-ray-deployments/2023-01-29",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-01-29-python-ray-deployments/2023-01-29",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/AIOps/2023-01-29-python-ray-deployments/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Ray",permalink:"/docs/tags/ray"}],version:"current",sidebarPosition:4730,frontMatter:{sidebar_position:4730,slug:"2023-01-29",title:"Python Ray Deployments",authors:"mpolinowski",tags:["Python","Machine Learning","Ray"],description:"Use Ray to deploy your remote services."},sidebar:"tutorialSidebar",previous:{title:"AIOps",permalink:"/docs/category/aiops"},next:{title:"Python Ray Remote Actors",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-01-26-python-ray-remote-actors/2023-01-26"}},s={},p=[{value:"Deployments with Ray",id:"deployments-with-ray",level:2},{value:"Simple Deployment",id:"simple-deployment",level:3},{value:"Scaled Deployment",id:"scaled-deployment",level:3},{value:"Request Routing with FastAPI",id:"request-routing-with-fastapi",level:3},{value:"Deployment Composition",id:"deployment-composition",level:2},{value:"Canary Deployments",id:"canary-deployments",level:3}],m={toc:p};function d(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Guangzhou, China",src:n(73590).Z,width:"1500",height:"662"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#deployments-with-ray"},"Deployments with Ray"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#simple-deployment"},"Simple Deployment")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#scaled-deployment"},"Scaled Deployment")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#request-routing-with-fastapi"},"Request Routing with FastAPI")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#deployment-composition"},"Deployment Composition"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#canary-deployments"},"Canary Deployments"))))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Source: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/scalingpythonml/scaling-python-with-ray"},"Scaling Python with Ray"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/mpolinowski/ray-deployments"},"Github Repository"))),(0,a.kt)("h2",{id:"deployments-with-ray"},"Deployments with Ray"),(0,a.kt)("p",null,"Use ",(0,a.kt)("strong",{parentName:"p"},"Ray Serve")," for implementing a general-purpose microservice framework and how to use this framework for model serving. ",(0,a.kt)("strong",{parentName:"p"},"Ray Serve")," is implemented on top of Ray with Ray actors. Three kinds of actors are created to make up a Serve instance:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Ray Actor"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Controller")),(0,a.kt)("td",{parentName:"tr",align:null},"The controller is responsible for creating, updating, and destroying other actors. All of the ",(0,a.kt)("strong",{parentName:"td"},"Serve API")," calls (e.g., creating or getting a deployment) use the controller for their execution.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Router")),(0,a.kt)("td",{parentName:"tr",align:null},"There is one router per node. Each router is a HTTP server that accepts incoming requests, forwards them to replicas, and responds after they are completed.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Worker Replica")),(0,a.kt)("td",{parentName:"tr",align:null},"Worker replicas execute the user-defined code in response to a request.")))),(0,a.kt)("h3",{id:"simple-deployment"},"Simple Deployment"),(0,a.kt)("p",null,"A deployment defines the logic that will handle incoming requests and the way this logic is exposed over\nHTTP or in Python. A deployment is defined by the annotation ",(0,a.kt)("inlineCode",{parentName:"p"},"@serve.deployment")," and since it will start Ray actors it can be vertically scaled accordingly. Here we can also define the route prefix for the HTTP entpoint we want to use for the API calls to the actor:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'@serve.deployment(ray_actor_options={"num_cpus": 2, "num_gpus":1}, route_prefix="/converter")\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'import ray\nfrom ray import serve\nimport requests\nfrom starlette.requests import Request\n\n# start Ray\nray.init()\n\n# start Serve\nserve.start()\n\n#define deployment\n@serve.deployment\nclass Converter:\n    def __call__(self, request):\n        if request.query_params["conversion"] == \'CF\' :\n            return {"INFO :: Fahrenheit temperature":\n                        9.0/5.0 * float(request.query_params["temp"]) + 32.0}\n        elif request.query_params["conversion"] == \'FC\' :\n            return {"INFO :: Celsius temperature":\n                        (float(request.query_params["temp"]) - 32.0) * 5.0/9.0 }\n        else:\n            return {"ERROR :: Unknown conversion code" : request.query_params["conversion"]}\n\n\nConverter.deploy()\n# list current deployment\nprint(serve.list_deployments())\n')),(0,a.kt)("p",null,"With ",(0,a.kt)("inlineCode",{parentName:"p"},"serve.start()")," an ingress HTTP server is started on only the head node. If your deployments begin to exceed about three thousand requests per second, you can start an HTTP server on every node by using:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'serve.start(http_options={"location":"EveryNode"})\n')),(0,a.kt)("p",null,"The rest of the code starts an API server that can converts incoming temperature readings into degree Celsius or Fahrenheit depending on the appended Parameter. The HTTP Server will run on port ",(0,a.kt)("inlineCode",{parentName:"p"},"8000")," by default and serve our function on the endpoint ",(0,a.kt)("inlineCode",{parentName:"p"},"/Converter")," for us. When running this code I ran into an error message that fastAPI was missing as a dependency:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Error")," missing dependencies: ",(0,a.kt)("inlineCode",{parentName:"p"},"ModuleNotFoundError: No module named 'fastapi'. You can run "),'pip install "ray',"[serve]",'"',(0,a.kt)("inlineCode",{parentName:"p"}," to install all Ray Serve dependencies."))),(0,a.kt)("p",null,"With ",(0,a.kt)("inlineCode",{parentName:"p"},"ray[serve]")," installed I can now run 3 request trying out the 3 possible API responses:"),(0,a.kt)("p",null,"Converting:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Celsius -> Fahrenheit"),(0,a.kt)("li",{parentName:"ul"},"Fahrenheit -> Celsius"),(0,a.kt)("li",{parentName:"ul"},"an unknown unit")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'# query our endpoint over http\nprint(requests.get("http://127.0.0.1:8000/Converter?temp=999.0&conversion=CF").text)\nprint(requests.get("http://127.0.0.1:8000/Converter?temp=999.0&conversion=FC").text)\nprint(requests.get("http://127.0.0.1:8000/Converter?temp=999.0&conversion=CC").text)\n')),(0,a.kt)("p",null,"This returns the following responses:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'python 01_ray_simple_deployments.py\n\n{\'Converter\': Deployment(name=Converter,version=None,route_prefix=/Converter)}\n{"INFO :: Fahrenheit temperature": 1830.2}\n{"INFO :: Celsius temperature": 537.2222222222222}\n{"ERROR :: Unknown conversion code": "CC"}\n')),(0,a.kt)("p",null,"The API request can also be handled with a regular ",(0,a.kt)("inlineCode",{parentName:"p"},"ray.get()")," by using the deployment handle - in our case ",(0,a.kt)("inlineCode",{parentName:"p"},"Converter"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'# direct invocation\nhandle = serve.get_deployment(\'Converter\').get_handle()\n\nprint(ray.get(handle.remote(Request({"type": "http", "query_string": b"temp=666.0&type=CF"}))))\nprint(ray.get(handle.remote(Request({"type": "http", "query_string": b"temp=666.0&type=FC"}))))\nprint(ray.get(handle.remote(Request({"type": "http", "query_string": b"temp=666.0&type=CC"}))))\n')),(0,a.kt)("p",null,"The return is identical to the HTTP request earlier (we now get two responses - one for the vallu ",(0,a.kt)("inlineCode",{parentName:"p"},"999.0")," and for ",(0,a.kt)("inlineCode",{parentName:"p"},"666.0"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"python 01_ray_simple_deployments.py\n\n{'Converter': Deployment(name=Converter,version=None,route_prefix=/Converter)}\n{\"INFO :: Fahrenheit temperature\": 1830.2}\n{\"INFO :: Celsius temperature\": 537.2222222222222}\n{\"ERROR :: Unknown conversion code\": \"CC\"}\n{'INFO :: Fahrenheit temperature': 1230.8}\n{'INFO :: Celsius temperature': 352.22222222222223}\n{'ERROR :: Unknown conversion code': 'CC'}\n")),(0,a.kt)("p",null,"All of this can be simplified to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# simplifying the converter\n@serve.deployment\nclass ConverterSimple:\n    def celcius_fahrenheit(self, temp):\n        return 9.0/5.0 * temp + 32.0\n\n    def fahrenheit_celcius(self, temp):\n        return (temp - 32.0) * 5.0/9.0\n\n\nConverterSimple.deploy()\n# list current deployment\nprint(serve.list_deployments()) \n\n\nhandleSimple = serve.get_deployment('ConverterSimple').get_handle()\n\nprint(ray.get(handleSimple.celcius_fahrenheit.remote(333.0)))\nprint(ray.get(handleSimple.fahrenheit_celcius.remote(333.0)))\n")),(0,a.kt)("p",null,"And we get the following return:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"{'Converter': Deployment(name=Converter,version=None,route_prefix=/Converter), 'ConverterSimple': Deployment(name=ConverterSimple,version=None,route_prefix=/ConverterSimple)}\n631.4\n167.22222222222223\n")),(0,a.kt)("h3",{id:"scaled-deployment"},"Scaled Deployment"),(0,a.kt)("p",null,"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},"deployment.deploy")," creates a single instance of a deployment. By specifying the number of replicas in ",(0,a.kt)("inlineCode",{parentName:"p"},"@serve.deployment"),", you can scale out a deployment. I will also add a UUID to each instance that is being created so we can differentiate them:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'# simplifying the converter\n# adding scale factor\n@serve.deployment(num_replicas=2)\nclass ConverterSimple:\n    # generate instance id\n    def __init__ (self):\n        self.id = str(uuid4())\n\n    def celcius_fahrenheit(self, temp):\n        output = self.id, "INFO :: Fahrenheit temperature", 9.0/5.0 * temp + 32.0\n        return output\n\n    def fahrenheit_celcius(self, temp):\n        output = self.id, "INFO :: Celsius temperature", (temp - 32.0) * 5.0/9.0\n        return output\n')),(0,a.kt)("p",null,"If we run the code again we can now see that 2 instances are created and incoming requests are load-balanced in a round-robin fashion (the replies come from 2 different IDs):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"(ServeController pid=53210) INFO 2023-01-29 16:39:57,500 controller 53210 deployment_state.py:1310 - Adding 2 replicas to deployment 'ConverterSimple'.\n{'Converter': Deployment(name=Converter,version=None,route_prefix=/Converter), 'ConverterSimple': Deployment(name=ConverterSimple,version=None,route_prefix=/ConverterSimple)}\n('cf9a204c-8337-4fe9-b301-43cd0f4fbeb1', 'INFO :: Fahrenheit temperature', 631.4)\n('6b150f9a-ba6d-48b0-95ac-bbbd6de2e5ae', 'INFO :: Celsius temperature', 167.22222222222223)\n('cf9a204c-8337-4fe9-b301-43cd0f4fbeb1', 'INFO :: Fahrenheit temperature', 431.6)\n('6b150f9a-ba6d-48b0-95ac-bbbd6de2e5ae', 'INFO :: Celsius temperature', 105.55555555555556)\n")),(0,a.kt)("h3",{id:"request-routing-with-fastapi"},"Request Routing with FastAPI"),(0,a.kt)("p",null,"In the previous example we had to define the conversion type to be handed the correct conversion method for our value input. A cleaner option is to use FastAPI to generate different URL endpoints for every method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'#define deployment\n@serve.deployment(route_prefix="/converter")\n@serve.ingress(app)\nclass Converter:\n    @app.get("/to_fahrenheit")\n    def celcius_fahrenheit(self, temp):\n        return {"INFO :: Fahrenheit temperature": 9.0/5.0 * float(temp) + 32.0}\n\n    @app.get("/to_celsius")\n    def fahrenheit_celcius(self, temp):\n        return {"INFO :: Celsius temperature": (float(temp) - 32.0) * 5.0/9.0}\n')),(0,a.kt)("p",null,"This changes the API endpoints to ",(0,a.kt)("inlineCode",{parentName:"p"},"/converter/to_fahrenheit")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"/converter/to_celsius")," and we can use them with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'# Query our endpoint over HTTP.\nprint(requests.get("http://127.0.0.1:8000/converter/to_fahrenheit?temp=1111.0&").text)\nprint(requests.get("http://127.0.0.1:8000/converter/to_celsius?temp=1111.0").text)\n')),(0,a.kt)("p",null,"The direct invocation is not affected by this change:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"handle = serve.get_deployment('FastConverter').get_handle()\n\nprint(ray.get(handle.celcius_fahrenheit.remote(555.0)))\nprint(ray.get(handle.fahrenheit_celcius.remote(555.0))) \n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"python 02_ray_fastAPI_deployments.py\n\n{'FastConverter': Deployment(name=FastConverter,version=None,route_prefix=/converter)}\n{\"INFO :: Fahrenheit temperature\":2031.8}\n{\"INFO :: Celsius temperature\":599.4444444444445}\n{'INFO :: Fahrenheit temperature': 1031.0}\n{'INFO :: Celsius temperature': 290.55555555555554}\n")),(0,a.kt)("h2",{id:"deployment-composition"},"Deployment Composition"),(0,a.kt)("p",null,"Make deployments that are compositions of further deployments."),(0,a.kt)("h3",{id:"canary-deployments"},"Canary Deployments"),(0,a.kt)("p",null,"One example is the slow rollout of a new version of your service to a limited amount of incoming request, e.g.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'@serve.deployment\ndef version_one(data):\n    return {"version": "I am the old version..."}\n\nversion_one.deploy()\n\n@serve.deployment\ndef version_two(data):\n    return {"version": "I am the new version!"}\n\nversion_two.deploy()\n')),(0,a.kt)("p",null,"To implement the canary deployment we can use the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'\n@serve.deployment(route_prefix="/get_version")\nclass Canary:\n    def __init__(self, canary_percent):\n        from random import random\n        self.version_one = version_one.get_handle()\n        self.version_two = version_two.get_handle()\n        self.canary_percent = canary_percent\n\n    # This method can be called concurrently!\n    async def __call__(self, request):\n        data = await request.body()\n        if(random() > self.canary_percent):\n            return await self.version_one.remote(data=data)\n        else:\n            return await self.version_two.remote(data=data)\n\n# invocation with canary_percent of 20%\nCanary.deploy(.2)\n')),(0,a.kt)("p",null,"Now we can call the API 10 time and see the NEW/OLD distribution of the responses we get:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'# call api 10 times\nfor _ in range(10):\n    resp = requests.get("http://127.0.0.1:8000/get_version", data="some string, doesn\'t matter")\n    print(resp.json())\n')),(0,a.kt)("p",null,"This makes sure that if there is an issue with the new version only a limited amount of requests will be affected by it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"{'version': 'I am the new version!'}\n{'version': 'I am the old version...'}\n{'version': 'I am the old version...'}\n{'version': 'I am the old version...'}\n{'version': 'I am the old version...'}\n{'version': 'I am the old version...'}\n{'version': 'I am the old version...'}\n{'version': 'I am the new version!'}\n{'version': 'I am the old version...'}\n{'version': 'I am the old version...'}\n")))}d.isMDXComponent=!0},73590:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-296769d73822f07b0ac5dc952f56bfa1.jpg"}}]);