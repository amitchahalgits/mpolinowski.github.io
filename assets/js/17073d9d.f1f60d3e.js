"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[25362],{940159:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var s=n(474848),a=n(28453);const t={sidebar_position:7069,slug:"2024-03-08",title:"Zabbix v6 SMART HDD and CPU Temperature Check",authors:"mpolinowski",tags:["LINUX","Zabbix"]},i=void 0,o={id:"DevOps/Zabbix/2024-03-07--zabbix-v6-hdd-cpu-temp-check/index",title:"Zabbix v6 SMART HDD and CPU Temperature Check",description:"TST, Hong Kong",source:"@site/docs/DevOps/Zabbix/2024-03-07--zabbix-v6-hdd-cpu-temp-check/index.md",sourceDirName:"DevOps/Zabbix/2024-03-07--zabbix-v6-hdd-cpu-temp-check",slug:"/DevOps/Zabbix/2024-03-07--zabbix-v6-hdd-cpu-temp-check/2024-03-08",permalink:"/docs/DevOps/Zabbix/2024-03-07--zabbix-v6-hdd-cpu-temp-check/2024-03-08",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Zabbix/2024-03-07--zabbix-v6-hdd-cpu-temp-check/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Zabbix",permalink:"/docs/tags/zabbix"}],version:"current",sidebarPosition:7069,frontMatter:{sidebar_position:7069,slug:"2024-03-08",title:"Zabbix v6 SMART HDD and CPU Temperature Check",authors:"mpolinowski",tags:["LINUX","Zabbix"]},sidebar:"tutorialSidebar",previous:{title:"Zabbix",permalink:"/docs/category/zabbix"},next:{title:"Zabbix <3 Zimbra",permalink:"/docs/DevOps/Zabbix/2022-07-15-zabbix-for-zimbra/2022-07-15"}},l={},d=[{value:"Install Smartmontools and LM Sensors",id:"install-smartmontools-and-lm-sensors",level:2},{value:"Harddrive Monitoring",id:"harddrive-monitoring",level:3},{value:"Using Smartctl",id:"using-smartctl",level:3},{value:"Harddrives",id:"harddrives",level:4},{value:"NVME Drives",id:"nvme-drives",level:4},{value:"CPU Temperature",id:"cpu-temperature",level:3},{value:"Zabbix",id:"zabbix",level:2},{value:"Preparing Zabbix-Agent2",id:"preparing-zabbix-agent2",level:3},{value:"Direct CLI Command Execution",id:"direct-cli-command-execution",level:3},{value:"Working with Shell Scripts",id:"working-with-shell-scripts",level:3}];function c(e){const r={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{alt:"TST, Hong Kong",src:n(687597).A+"",width:"1500",height:"622"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"#install-smartmontools-and-lm-sensors",children:"Install Smartmontools and LM Sensors"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#harddrive-monitoring",children:"Harddrive Monitoring"})}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"#using-smartctl",children:"Using Smartctl"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#harddrives",children:"Harddrives"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#nvme-drives",children:"NVME Drives"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#cpu-temperature",children:"CPU Temperature"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"#zabbix",children:"Zabbix"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#preparing-zabbix-agent2",children:"Preparing Zabbix-Agent2"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#direct-cli-command-execution",children:"Direct CLI Command Execution"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#working-with-shell-scripts",children:"Working with Shell Scripts"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"install-smartmontools-and-lm-sensors",children:"Install Smartmontools and LM Sensors"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"apt install lm-sensors smartmontools\n"})}),"\n",(0,s.jsx)(r.h3,{id:"harddrive-monitoring",children:"Harddrive Monitoring"}),"\n",(0,s.jsx)(r.p,{children:"S.M.A.R.T. (Self-Monitoring, Analysis and Reporting Technology; often written as SMART) is a monitoring system included in computer hard disk drives (HDDs), solid-state drives (SSDs), and eMMC drives"}),"\n",(0,s.jsx)(r.p,{children:"The smartmontools package comes with two utilities, smartctl which you can use to check your hard drives on the command line, and smartd, a daemon that checks your hard disks at a specified interval and logs warnings/errors to the syslog and can also send warnings and errors to a specified email address (usually the admin of the system)."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"smartctl -v\r\n\r\nsmartctl 7.2 2020-12-30 r5155 [x86_64-linux-5.10.0-11-amd64] (local build)\r\nCopyright (C) 2002-20, Bruce Allen, Christian Franke, www.smartmontools.org\n"})}),"\n",(0,s.jsx)(r.h3,{id:"using-smartctl",children:"Using Smartctl"}),"\n",(0,s.jsx)(r.h4,{id:"harddrives",children:"Harddrives"}),"\n",(0,s.jsx)(r.p,{children:"Find partition:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"df -h\r\nFilesystem                         Size  Used Avail Use% Mounted on\r\ntmpfs                              6.3G  2.3M  6.3G   1% /run\r\n/dev/mapper/ubuntu--vg-ubuntu--lv   98G   36G   58G  38% /\r\ntmpfs                               32G   36M   32G   1% /dev/shm\r\ntmpfs                              5.0M     0  5.0M   0% /run/lock\r\n/dev/md126p2                       2.0G  428M  1.4G  24% /boot\r\n/dev/md126p1                       1.1G  6.1M  1.1G   1% /boot/efi\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"smartctl  --scan\r\n/dev/sda -d scsi # /dev/sda, SCSI device\r\n/dev/sdb -d scsi # /dev/sdb, SCSI device\n"})}),"\n",(0,s.jsxs)(r.p,{children:["In the case of my test server below we have a virtual machine - that, obviously, does not have access to the underlying HDD hardware ",(0,s.jsx)(r.code,{children:"/dev/sda1"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"smartctl -a /dev/sda\r\nsmartctl 7.2 2020-12-30 r5155 [x86_64-linux-5.15.0-97-generic] (local build)\r\nCopyright (C) 2002-20, Bruce Allen, Christian Franke, www.smartmontools.org\r\n\r\n=== START OF INFORMATION SECTION ===\r\nModel Family:     Western Digital Red\r\nDevice Model:     WDC WD10EFRX-68FYTN0\r\nSerial Number:    WD-WCC4J4NHYJJ2\r\nLU WWN Device Id: 5 0014ee 269c5648a\r\nFirmware Version: 82.00A82\r\nUser Capacity:    1,000,204,886,016 bytes [1.00 TB]\r\nSector Sizes:     512 bytes logical, 4096 bytes physical\r\nRotation Rate:    5400 rpm\r\nDevice is:        In smartctl database [for details use: -P show]\r\nATA Version is:   ACS-2 (minor revision not indicated)\r\nSATA Version is:  SATA 3.0, 6.0 Gb/s (current: 6.0 Gb/s)\r\nLocal Time is:    Sat Mar  9 09:21:06 2024 UTC\r\nSMART support is: Available - device has SMART capability.\r\nSMART support is: Enabled\r\n\r\n=== START OF READ SMART DATA SECTION ===\r\nSMART overall-health self-assessment test result: PASSED\r\n\r\nGeneral SMART Values:\r\nOffline data collection status:  (0x00) Offline data collection activity\r\n                                        was never started.\r\n                                        Auto Offline Data Collection: Disabled.\r\nSelf-test execution status:      (   0) The previous self-test routine completed\r\n                                        without error or no self-test has ever \r\n                                        been run.\r\nTotal time to complete Offline \r\ndata collection:                (14100) seconds.\r\nOffline data collection\r\ncapabilities:                    (0x7b) SMART execute Offline immediate.\r\n                                        Auto Offline data collection on/off support.\r\n                                        Suspend Offline collection upon new\r\n                                        command.\r\n                                        Offline surface scan supported.\r\n                                        Self-test supported.\r\n                                        Conveyance Self-test supported.\r\n                                        Selective Self-test supported.\r\nSMART capabilities:            (0x0003) Saves SMART data before entering\r\n                                        power-saving mode.\r\n                                        Supports SMART auto save timer.\r\nError logging capability:        (0x01) Error logging supported.\r\n                                        General Purpose Logging supported.\r\nShort self-test routine \r\nrecommended polling time:        (   2) minutes.\r\nExtended self-test routine\r\nrecommended polling time:        ( 160) minutes.\r\nConveyance self-test routine\r\nrecommended polling time:        (   5) minutes.\r\nSCT capabilities:              (0x303d) SCT Status supported.\r\n                                        SCT Error Recovery Control supported.\r\n                                        SCT Feature Control supported.\r\n                                        SCT Data Table supported.\r\n\r\nSMART Attributes Data Structure revision number: 16\r\nVendor Specific SMART Attributes with Thresholds:\r\nID# ATTRIBUTE_NAME          FLAG     VALUE WORST THRESH TYPE      UPDATED  WHEN_FAILED RAW_VALUE\r\n  1 Raw_Read_Error_Rate     0x002f   200   200   051    Pre-fail  Always       -       0\r\n  3 Spin_Up_Time            0x0027   169   133   021    Pre-fail  Always       -       2516\r\n  4 Start_Stop_Count        0x0032   100   100   000    Old_age   Always       -       63\r\n  5 Reallocated_Sector_Ct   0x0033   200   200   140    Pre-fail  Always       -       0\r\n  7 Seek_Error_Rate         0x002e   200   200   000    Old_age   Always       -       0\r\n  9 Power_On_Hours          0x0032   075   075   000    Old_age   Always       -       18640\r\n 10 Spin_Retry_Count        0x0032   100   253   000    Old_age   Always       -       0\r\n 11 Calibration_Retry_Count 0x0032   100   253   000    Old_age   Always       -       0\r\n 12 Power_Cycle_Count       0x0032   100   100   000    Old_age   Always       -       62\r\n192 Power-Off_Retract_Count 0x0032   200   200   000    Old_age   Always       -       59\r\n193 Load_Cycle_Count        0x0032   199   199   000    Old_age   Always       -       5458\r\n194 Temperature_Celsius     0x0022   121   094   000    Old_age   Always       -       22\r\n196 Reallocated_Event_Count 0x0032   200   200   000    Old_age   Always       -       0\r\n197 Current_Pending_Sector  0x0032   200   200   000    Old_age   Always       -       0\r\n198 Offline_Uncorrectable   0x0030   100   253   000    Old_age   Offline      -       0\r\n199 UDMA_CRC_Error_Count    0x0032   200   200   000    Old_age   Always       -       0\r\n200 Multi_Zone_Error_Rate   0x0008   100   253   000    Old_age   Offline      -       0\r\n\r\nSMART Error Log Version: 1\r\nNo Errors Logged\r\n\r\nSMART Self-test log structure revision number 1\r\nNum  Test_Description    Status                  Remaining  LifeTime(hours)  LBA_of_first_error\r\n# 1  Short offline       Completed without error       00%     18594         -\r\n\r\nSMART Selective self-test log data structure revision number 1\r\n SPAN  MIN_LBA  MAX_LBA  CURRENT_TEST_STATUS\r\n    1        0        0  Not_testing\r\n    2        0        0  Not_testing\r\n    3        0        0  Not_testing\r\n    4        0        0  Not_testing\r\n    5        0        0  Not_testing\r\nSelective self-test flags (0x0):\r\n  After scanning selected spans, do NOT read-scan remainder of disk.\r\nIf Selective self-test is pending on power-up, resume after 0 minute delay.\n"})}),"\n",(0,s.jsx)(r.h4,{id:"nvme-drives",children:"NVME Drives"}),"\n",(0,s.jsx)(r.p,{children:"Additional NVME drive:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"df -h\r\n\r\nFilesystem                            Size  Used Avail Use% Mounted on\r\ntmpfs                                  32G  2.9M   32G   1% /run\r\n/dev/mapper/ubuntu--vg--1-ubuntu--lv  438G   81G  338G  20% /\r\ntmpfs                                  63G  914M   62G   2% /dev/shm\r\ntmpfs                                 5.0M     0  5.0M   0% /run/lock\r\n/dev/nvme0n1p2                        2.0G  304M  1.5G  17% /boot\r\n/dev/nvme0n1p1                        1.1G  6.1M  1.1G   1% /boot/efi\r\ntmpfs                                  13G  4.0K   13G   1% /run/user/1000\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"smartctl  --scan\r\n/dev/nvme0 -d nvme # /dev/nvme0, NVMe device\r\n/dev/nvme1 -d nvme # /dev/nvme1, NVMe device\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"smartctl -a /dev/nvme0\r\n\r\nsmartctl 7.2 2020-12-30 r5155 [x86_64-linux-5.15.0-91-generic] (local build)\r\nCopyright (C) 2002-20, Bruce Allen, Christian Franke, www.smartmontools.org\r\n\r\n=== START OF INFORMATION SECTION ===\r\nModel Number:                       SanDisk Extreme Pro 500GB\r\nSerial Number:                      212181449612\r\nFirmware Version:                   111130WD\r\nPCI Vendor/Subsystem ID:            0x15b7\r\nIEEE OUI Identifier:                0x001b44\r\nTotal NVM Capacity:                 500,107,862,016 [500 GB]\r\nUnallocated NVM Capacity:           0\r\nController ID:                      8215\r\nNVMe Version:                       1.3\r\nNumber of Namespaces:               1\r\nNamespace 1 Size/Capacity:          500,107,862,016 [500 GB]\r\nNamespace 1 Formatted LBA Size:     512\r\nNamespace 1 IEEE EUI-64:            001b44 4a4944db11\r\nLocal Time is:                      Sat Mar  9 09:45:02 2024 CET\r\nFirmware Updates (0x14):            2 Slots, no Reset required\r\nOptional Admin Commands (0x0017):   Security Format Frmw_DL Self_Test\r\nOptional NVM Commands (0x005f):     Comp Wr_Unc DS_Mngmt Wr_Zero Sav/Sel_Feat Timestmp\r\nLog Page Attributes (0x0e):         Cmd_Eff_Lg Ext_Get_Lg Telmtry_Lg\r\nMaximum Data Transfer Size:         128 Pages\r\nWarning  Comp. Temp. Threshold:     84 Celsius\r\nCritical Comp. Temp. Threshold:     88 Celsius\r\nNamespace 1 Features (0x02):        NA_Fields\r\n\r\nSupported Power States\r\nSt Op     Max   Active     Idle   RL RT WL WT  Ent_Lat  Ex_Lat\r\n 0 +     5.50W       -        -    0  0  0  0        0       0\r\n 1 +     3.50W       -        -    1  1  1  1        0       0\r\n 2 +     3.00W       -        -    2  2  2  2        0       0\r\n 3 -   0.0700W       -        -    3  3  3  3     4000   10000\r\n 4 -   0.0035W       -        -    4  4  4  4     4000   40000\r\n\r\nSupported LBA Sizes (NSID 0x1)\r\nId Fmt  Data  Metadt  Rel_Perf\r\n 0 +     512       0         2\r\n 1 -    4096       0         1\r\n\r\n=== START OF SMART DATA SECTION ===\r\nSMART overall-health self-assessment test result: PASSED\r\n\r\nSMART/Health Information (NVMe Log 0x02)\r\nCritical Warning:                   0x00\r\nTemperature:                        51 Celsius\r\nAvailable Spare:                    100%\r\nAvailable Spare Threshold:          10%\r\nPercentage Used:                    3%\r\nData Units Read:                    7,580,500 [3.88 TB]\r\nData Units Written:                 37,759,770 [19.3 TB]\r\nHost Read Commands:                 38,034,128\r\nHost Write Commands:                1,870,013,477\r\nController Busy Time:               279\r\nPower Cycles:                       25\r\nPower On Hours:                     13,542\r\nUnsafe Shutdowns:                   17\r\nMedia and Data Integrity Errors:    0\r\nError Information Log Entries:      1\r\nWarning  Comp. Temperature Time:    0\r\nCritical Comp. Temperature Time:    0\r\n\r\nError Information (NVMe Log 0x01, 16 of 256 entries)\r\nNo Errors Logged\n"})}),"\n",(0,s.jsxs)(r.p,{children:["When you see that the ",(0,s.jsx)(r.code,{children:"SMART support is:"})," ",(0,s.jsx)(r.strong,{children:"disabled"})," run the following command to enable it:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"smartctl -s on -a /dev/sda1\n"})}),"\n",(0,s.jsx)(r.h3,{id:"cpu-temperature",children:"CPU Temperature"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"sensors\r\n\r\ncoretemp-isa-0000\r\nAdapter: ISA adapter\r\nPackage id 0:  +50.0\xb0C  (high = +100.0\xb0C, crit = +100.0\xb0C)\r\nCore 0:        +50.0\xb0C  (high = +100.0\xb0C, crit = +100.0\xb0C)\r\nCore 1:        +42.0\xb0C  (high = +100.0\xb0C, crit = +100.0\xb0C)\r\nCore 2:        +46.0\xb0C  (high = +100.0\xb0C, crit = +100.0\xb0C)\r\nCore 3:        +48.0\xb0C  (high = +100.0\xb0C, crit = +100.0\xb0C)\r\nCore 4:        +44.0\xb0C  (high = +100.0\xb0C, crit = +100.0\xb0C)\r\nCore 5:        +49.0\xb0C  (high = +100.0\xb0C, crit = +100.0\xb0C)\r\nCore 6:        +44.0\xb0C  (high = +100.0\xb0C, crit = +100.0\xb0C)\r\nCore 7:        +47.0\xb0C  (high = +100.0\xb0C, crit = +100.0\xb0C)\r\n\r\nnvme-pci-0900\r\nAdapter: PCI adapter\r\nComposite:    +48.9\xb0C  (low  =  -5.2\xb0C, high = +83.8\xb0C)\r\n                       (crit = +87.8\xb0C)\r\n\r\nacpitz-acpi-0\r\nAdapter: ACPI interface\r\ntemp1:        +16.8\xb0C  (crit = +20.8\xb0C)\r\ntemp2:        +27.8\xb0C  (crit = +105.0\xb0C)\r\n\r\niwlwifi_1-virtual-0\r\nAdapter: Virtual device\r\ntemp1:            N/A  \r\n\r\nenp7s0-pci-0700\r\nAdapter: PCI adapter\r\nPHY Temperature:  +47.9\xb0C  \r\nMAC Temperature:  +48.5\xb0C  \r\n\r\nnvme-pci-0300\r\nAdapter: PCI adapter\r\nComposite:    +50.9\xb0C  (low  =  -5.2\xb0C, high = +83.8\xb0C)\r\n                       (crit = +87.8\xb0C)\n"})}),"\n",(0,s.jsx)(r.h2,{id:"zabbix",children:"Zabbix"}),"\n",(0,s.jsx)(r.h3,{id:"preparing-zabbix-agent2",children:"Preparing Zabbix-Agent2"}),"\n",(0,s.jsxs)(r.p,{children:["Add the ",(0,s.jsx)(r.code,{children:"zabbix"})," agent to ",(0,s.jsx)(r.strong,{children:"Sudoers"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"nano /etc/sudoers\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"# Zabbix user SMART control\r\nzabbix ALL=(ALL) NOPASSWD:/usr/sbin/smartctl\r\n\r\n# Zabbix user LM Sensors\r\nzabbix ALL=NOPASSWD:/bin/sensors\n"})}),"\n",(0,s.jsx)(r.p,{children:"Let's start by allowing the Zabbix server to execute ANY script (parental supervision advised):"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"nano /etc/zabbix/zabbix_agent2.conf\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:'### Option: AllowKey\r\n#       Allow execution of item keys matching pattern.\r\n#       Multiple keys matching rules may be defined in combination with DenyKey.\r\n#       Key pattern is wildcard expression, which support "*" character to match any number of any characters in ce>\r\n#       Parameters are processed one by one according their appearance order.\r\n#       If no AllowKey or DenyKey rules defined, all keys are allowed.\r\n#\r\n# Mandatory: no\r\nAllowKey=system.run[*]\n'})}),"\n",(0,s.jsx)(r.h3,{id:"direct-cli-command-execution",children:"Direct CLI Command Execution"}),"\n",(0,s.jsx)(r.p,{children:"Now prepare a few sensor/smarttools commands to extract single values of interest:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"smartctl -a /dev/sda | grep Temperature_Celsius | awk {'print $10'}\r\n23\r\n\r\nsmartctl -a /dev/nvme0 | grep Temperature | awk {'print $2'} | grep -o '[0-9]\\+'\r\n51\r\n\r\nsudo sensors | grep 'Core 0' | awk -F'[+|.]' {'print $2'}\r\n30\n"})}),"\n",(0,s.jsxs)(r.p,{children:["We can add these scripts to our Zabbix Server ",(0,s.jsx)(r.strong,{children:"Scripts"})," config:"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{alt:"Zabbix v6 SMART HDD and CPU Temperature Check",src:n(601682).A+"",width:"1047",height:"728"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{alt:"Zabbix v6 SMART HDD and CPU Temperature Check",src:n(923227).A+"",width:"1047",height:"506"})}),"\n",(0,s.jsx)(r.p,{children:"As a manual script item we can now execute those scripts directly from our global dashboard:"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{alt:"Zabbix v6 SMART HDD and CPU Temperature Check",src:n(25664).A+"",width:"1045",height:"494"})}),"\n",(0,s.jsxs)(r.p,{children:["If you run into the following error message ",(0,s.jsx)(r.strong,{children:"Cannot execute script. Unknown metric system.run"})," you skipped the step above of adding the zabbix agent to your host ",(0,s.jsx)(r.code,{children:"sudoers"})," - or forgot to restart the Zabbix Agent service:"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{alt:"Zabbix v6 SMART HDD and CPU Temperature Check",src:n(149865).A+"",width:"1042",height:"231"})}),"\n",(0,s.jsx)(r.p,{children:"If everything is set up right your server should now be able to retrieve the Temperature value from your host system:"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{alt:"Zabbix v6 SMART HDD and CPU Temperature Check",src:n(810462).A+"",width:"1042",height:"330"})}),"\n",(0,s.jsx)(r.h3,{id:"working-with-shell-scripts",children:"Working with Shell Scripts"}),"\n",(0,s.jsx)(r.p,{children:"To replace the nasty wildcard execution permission we can now replace the direct commands with a shell script. Just add all CLI commands you want to execute to separate shell files in a directory accessible to the Zabbix Agent:"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.em,{children:"/opt/zabbix/temp_sda.sh"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sh",children:"#!/bin/bash\r\nsudo smartctl -a /dev/sda | grep Temperature_Celsius | awk {'print $10'}\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.em,{children:"/opt/zabbix/temp_nvme0.sh"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sh",children:"#!/bin/bash\r\nsmartctl -a /dev/nvme0 | grep Temperature | awk {'print $2'} | grep -o '[0-9]\\+'\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.em,{children:"/opt/zabbix/temp_core0.sh"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sh",children:"#!/bin/bash\r\nsudo sensors | grep 'Core 0' | awk -F'[+|.]' {'print $2'}\n"})}),"\n",(0,s.jsx)(r.p,{children:"and so on..."}),"\n",(0,s.jsx)(r.p,{children:"Now replace the wildcard with the explicit script file calls to exclude any script not specifically defined by you:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"nano nano /etc/zabbix/zabbix_agent2.conf\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:'### Option: AllowKey\r\n#       Allow execution of item keys matching pattern.\r\n#       Multiple keys matching rules may be defined in combination with DenyKey.\r\n#       Key pattern is wildcard expression, which support "*" character to match any number of any characters in ce>\r\n#       Parameters are processed one by one according their appearance order.\r\n#       If no AllowKey or DenyKey rules defined, all keys are allowed.\r\n#\r\n# Mandatory: no\r\nAllowKey=system.run[sh /opt/zabbix/temp_nvme0.sh]\r\nAllowKey=system.run[sh /opt/zabbix/temp_nvme1.sh]\r\nAllowKey=system.run[sh /opt/zabbix/temp_sda.sh]\r\nAllowKey=system.run[sh /opt/zabbix/temp_sdb.sh]\r\nAllowKey=system.run[sh /opt/zabbix/temp_core0.sh]\r\nAllowKey=system.run[sh /opt/zabbix/temp_core1.sh]\r\nAllowKey=system.run[sh /opt/zabbix/temp_core2.sh]\r\nAllowKey=system.run[sh /opt/zabbix/temp_core3.sh]\r\nAllowKey=system.run[sh /opt/zabbix/temp_core4.sh]\r\nAllowKey=system.run[sh /opt/zabbix/temp_core5.sh]\r\nAllowKey=system.run[sh /opt/zabbix/temp_core6.sh]\r\nAllowKey=system.run[sh /opt/zabbix/temp_core7.sh]\n'})}),"\n",(0,s.jsx)(r.p,{children:"Now change the scripts accordingly on the Zabbix server:"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{alt:"Zabbix v6 SMART HDD and CPU Temperature Check",src:n(986247).A+"",width:"1046",height:"726"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{alt:"Zabbix v6 SMART HDD and CPU Temperature Check",src:n(651919).A+"",width:"1045",height:"772"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{alt:"Zabbix v6 SMART HDD and CPU Temperature Check",src:n(366822).A+"",width:"1047",height:"298"})}),"\n",(0,s.jsx)(r.p,{children:"Verify that it is still working:"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{alt:"Zabbix v6 SMART HDD and CPU Temperature Check",src:n(950589).A+"",width:"1043",height:"319"})})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},651919:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/Zabbix_Temperature_Check_10-31667a3ce4074abf2bd4e5b5ad4255c1.png"},366822:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/Zabbix_Temperature_Check_11-de872d43ce42b4957986a120774bedbe.png"},950589:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/Zabbix_Temperature_Check_12-bc60a4fccbe7d0b0caa796edcd52dd42.png"},601682:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/Zabbix_Temperature_Check_4-87d9b2bac94c1a18bdb6830fdcd8e24e.png"},923227:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/Zabbix_Temperature_Check_5-63c1a3238b6167a3fdc289bfdfe47814.png"},25664:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/Zabbix_Temperature_Check_6-6fcb4c9631fbdc7144148f4e6a05dddc.png"},149865:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/Zabbix_Temperature_Check_7-5e1df46ac70a45e1e24a59aa75101d7e.png"},810462:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/Zabbix_Temperature_Check_8-15a96bf838f727952cc26b3ea3c1d96e.png"},986247:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/Zabbix_Temperature_Check_9-edcc328b100bc79e459fc1e106124e99.png"},687597:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-d8b333d1f9ddf34ac7392aef86b14c83.jpg"},28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var s=n(296540);const a={},t=s.createContext(a);function i(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);