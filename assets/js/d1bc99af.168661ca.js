"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[62748],{390909:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=n(474848),r=n(28453);const s={sidebar_position:9060,slug:"2022-05-05",title:"React Native Context & Hooks",authors:"mpolinowski",tags:["Javascript","React","ReactNative"]},i=void 0,a={id:"Development/ReactNative/2022-05-05-react-native-context-hooks/index",title:"React Native Context & Hooks",description:"Victoria Harbour, Hongkong",source:"@site/docs/Development/ReactNative/2022-05-05-react-native-context-hooks/index.md",sourceDirName:"Development/ReactNative/2022-05-05-react-native-context-hooks",slug:"/Development/ReactNative/2022-05-05-react-native-context-hooks/2022-05-05",permalink:"/docs/Development/ReactNative/2022-05-05-react-native-context-hooks/2022-05-05",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/ReactNative/2022-05-05-react-native-context-hooks/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"},{label:"React",permalink:"/docs/tags/react"},{label:"ReactNative",permalink:"/docs/tags/react-native"}],version:"current",sidebarPosition:9060,frontMatter:{sidebar_position:9060,slug:"2022-05-05",title:"React Native Context & Hooks",authors:"mpolinowski",tags:["Javascript","React","ReactNative"]},sidebar:"tutorialSidebar",previous:{title:"React Native Reducer",permalink:"/docs/Development/ReactNative/2022-05-06-react-native-reducer/2022-05-06"},next:{title:"React Native Hooks",permalink:"/docs/Development/ReactNative/2022-05-04-react-native-hooks/2022-05-04"}},d={},c=[{value:"Setup",id:"setup",level:2},{value:"Context Consumer vs useContext Hooks",id:"context-consumer-vs-usecontext-hooks",level:2},{value:"Navbar",id:"navbar",level:3},{value:"Before (Class Component)",id:"before-class-component",level:4},{value:"After (Functional Component)",id:"after-functional-component",level:4},{value:"ToDo List",id:"todo-list",level:3},{value:"Before (Class Component)",id:"before-class-component-1",level:4},{value:"After (Functional Component)",id:"after-functional-component-1",level:4},{value:"Creating Context with Functional Components",id:"creating-context-with-functional-components",level:2},{value:"Authentication Context",id:"authentication-context",level:3},{value:"Before (Class Component)",id:"before-class-component-2",level:4},{value:"After (Functional Component)",id:"after-functional-component-2",level:4},{value:"Theme Context",id:"theme-context",level:3},{value:"Before (Class Component)",id:"before-class-component-3",level:4},{value:"After (Functional Component)",id:"after-functional-component-3",level:4},{value:"Handling To-Do Items using Context",id:"handling-to-do-items-using-context",level:2},{value:"Adding Items using Context",id:"adding-items-using-context",level:3},{value:"Removing Items using Context",id:"removing-items-using-context",level:3}];function m(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Victoria Harbour, Hongkong",src:n(413419).A+"",width:"1500",height:"565"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"#setup",children:"Setup"})}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"#context-consumer-vs-usecontext-hooks",children:"Context Consumer vs useContext Hooks"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"#navbar",children:"Navbar"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"#before-class-component",children:"Before (Class Component)"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"#after-functional-component",children:"After (Functional Component)"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"#todo-list",children:"ToDo List"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"#before-class-component-1",children:"Before (Class Component)"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"#after-functional-component-1",children:"After (Functional Component)"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"#creating-context-with-functional-components",children:"Creating Context with Functional Components"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"#authentication-context",children:"Authentication Context"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"#before-class-component-2",children:"Before (Class Component)"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"#after-functional-component-2",children:"After (Functional Component)"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"#theme-context",children:"Theme Context"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"#before-class-component-3",children:"Before (Class Component)"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"#after-functional-component-3",children:"After (Functional Component)"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"#handling-to-do-items-using-context",children:"Handling To-Do Items using Context"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"#adding-items-using-context",children:"Adding Items using Context"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"#removing-items-using-context",children:"Removing Items using Context"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://github.com/mpolinowski/react-native-context-hooks",children:"Github Repository"})}),"\n",(0,o.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"npm install -g expo-cli\nexpo init react-native-context-hooks\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Choose the ",(0,o.jsx)(t.strong,{children:"blank"})," template and run the client:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"cd react-native-context-hooks\nnpm install styled-components\nnpm start\n"})}),"\n",(0,o.jsxs)(t.p,{children:["I can test code by scanning the QR Code using the ",(0,o.jsx)(t.strong,{children:"Expo Go"})," app under Android or by pressing the ",(0,o.jsx)(t.code,{children:"w"})," key to activate a web preview."]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"error:0308010C:digital envelope routines::unsupported"}),": Newer versions of Node.js use OpenSSLv3 that brought some ",(0,o.jsx)(t.a,{href:"https://wiki.openssl.org/index.php/OpenSSL_3.0#Upgrading_to_OpenSSL_3.0_from_OpenSSL_1.0.2",children:"breaking changes"}),". Can be fixed (",(0,o.jsx)(t.strong,{children:">=Nodejs v17"}),") by adding the following option to the start script inside your ",(0,o.jsx)(t.code,{children:"package.json"})," -> ",(0,o.jsx)(t.code,{children:'"start": "export NODE_OPTIONS=--openssl-legacy-provider && expo start"'})]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"context-consumer-vs-usecontext-hooks",children:"Context Consumer vs useContext Hooks"}),"\n",(0,o.jsxs)(t.p,{children:["In a ",(0,o.jsx)(t.a,{href:"obsidian://open?vault=Obsidian%20Vault&file=2022-05-03-react-native-contextapi%2F2022-05-03-react-native-contextapi",children:"previous step"})," I created an React Native application that used the React Context API using Context Consumers in Class components. Thanks to the ",(0,o.jsx)(t.code,{children:"useContext"})," hook we can now simplify those components."]}),"\n",(0,o.jsx)(t.h3,{id:"navbar",children:"Navbar"}),"\n",(0,o.jsx)(t.h4,{id:"before-class-component",children:"Before (Class Component)"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React from 'react'\nimport {Text} from 'react-native'\n\nimport { NavBackground, NavHeader, NavTabs, NavTabsHeader, ThemeToggle } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\n\nclass Navbar extends React.Component {\n    render() {\n        \n        return (\n            <ThemeContext.Consumer >\n                {(context) => {\n                    const { isDarkTheme, darkTheme, lightTheme, changeTheme } = context\n                    // if isDarkTheme is true return dark state / else light\n                    const theme = isDarkTheme ? darkTheme : lightTheme\n                    return (\n                        <NavBackground style={theme}>\n                            <NavHeader style={theme}>Company Inc.</NavHeader>\n                            <NavTabs>\n                                <NavTabsHeader>Home</NavTabsHeader>\n                                <NavTabsHeader>Contact</NavTabsHeader>\n                                <ThemeToggle onPress={changeTheme}>\n                                    <Text>{theme.text}</Text>\n                                </ThemeToggle>\n                            </NavTabs>\n                        </NavBackground>\n                    )\n                }}\n            </ThemeContext.Consumer>\n        )\n    }\n }\n\n export default Navbar\n"})}),"\n",(0,o.jsx)(t.h4,{id:"after-functional-component",children:"After (Functional Component)"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React, {useContext} from 'react'\nimport {Text} from 'react-native'\n\nimport { NavBackground, NavHeader, NavTabs, NavTabsHeader, ThemeToggle } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\n\nconst Navbar = () => {\n    const { isDarkTheme, darkTheme, lightTheme, changeTheme } = useContext(ThemeContext)\n    // if isDarkTheme is true return dark state / else light\n    const theme = isDarkTheme ? darkTheme : lightTheme\n    return (\n        <NavBackground style={theme}>\n            <NavHeader style={theme}>Company Inc.</NavHeader>\n            <NavTabs>\n                <NavTabsHeader>Home</NavTabsHeader>\n                <NavTabsHeader>Contact</NavTabsHeader>\n                <ThemeToggle onPress={changeTheme}>\n                    <Text>{theme.text}</Text>\n                </ThemeToggle>\n            </NavTabs>\n        </NavBackground>\n    )\n\n}\n\n export default Navbar\n"})}),"\n",(0,o.jsx)(t.h3,{id:"todo-list",children:"ToDo List"}),"\n",(0,o.jsx)(t.h4,{id:"before-class-component-1",children:"Before (Class Component)"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React from 'react'\nimport {Text} from 'react-native'\n\nimport { TodoBackground, TodoItem, LoginView } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\nimport { AuthContext } from '../context/AuthContext'\n\nclass ToDoList extends React.Component {\n    render() {\n        return (\n            <AuthContext.Consumer >\n                {(authContext) => {\n                    return (\n                        <ThemeContext.Consumer >\n                            {(themeContext) => {\n                                const { isLoggedIn, changeAuthStatus }  = authContext\n                                const { isDarkTheme, darkTheme, lightTheme } = themeContext\n                                // if isDarkTheme is true return dark state / else light\n                                const theme = isDarkTheme ? darkTheme : lightTheme\n                                if (isLoggedIn) {\n                                return (\n                                    <TodoBackground style={theme}>\n                                        <TodoItem>One thing to do</TodoItem>\n                                        <TodoItem>Another thing to do</TodoItem>\n                                        <TodoItem>And one more thing</TodoItem>\n                                        <TodoItem onPress={changeAuthStatus}>\n                                            <Text>Logout</Text>\n                                        </TodoItem>\n                                    </TodoBackground>\n                                )}\n                                return (\n                                    <LoginView>\n                                        <TodoItem onPress={changeAuthStatus}>\n                                            <Text>Login</Text>\n                                        </TodoItem>\n                                    </LoginView>\n                                )\n                            }}\n                        </ThemeContext.Consumer>   \n                    )\n                }}\n            </AuthContext.Consumer>\n        )\n    }\n}\n\nexport default ToDoList\n"})}),"\n",(0,o.jsx)(t.h4,{id:"after-functional-component-1",children:"After (Functional Component)"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React, { useContext } from 'react'\nimport {Text} from 'react-native'\n\nimport { TodoBackground, TodoItem, LoginView } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\nimport { AuthContext } from '../context/AuthContext'\n\nconst ToDoList = () => {\n\n    const { isDarkTheme, darkTheme, lightTheme } = useContext(ThemeContext)\n    const { isLoggedIn, changeAuthStatus } = useContext(AuthContext)\n    // if isDarkTheme is true return dark state / else light\n    const theme = isDarkTheme ? darkTheme : lightTheme\n\n    if (isLoggedIn) {\n        return (\n            <TodoBackground style={theme}>\n                <TodoItem>One thing to do</TodoItem>\n                <TodoItem>Another thing to do</TodoItem>\n                <TodoItem>And one more thing</TodoItem>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Logout</Text>\n                </TodoItem>\n            </TodoBackground>\n        )}\n        return (\n            <LoginView>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Login</Text>\n                </TodoItem>\n            </LoginView>\n        )\n}\n\nexport default ToDoList\n"})}),"\n",(0,o.jsx)(t.h2,{id:"creating-context-with-functional-components",children:"Creating Context with Functional Components"}),"\n",(0,o.jsx)(t.h3,{id:"authentication-context",children:"Authentication Context"}),"\n",(0,o.jsx)(t.h4,{id:"before-class-component-2",children:"Before (Class Component)"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React, {createContext, Component} from 'react'\n\nexport const AuthContext = createContext()\n\nclass AuthContextProvider extends Component {\n    state = {\n        isLoggedIn: false\n    }\n\n    changeAuthStatus = () => {\n        this.setState({isLoggedIn: !this.state.isLoggedIn})\n    }\n\n    render() {\n        return (\n            <AuthContext.Provider value={{...this.state, changeAuthStatus: this.changeAuthStatus}}>\n                {this.props.children}\n            </AuthContext.Provider>\n        )\n    }\n}\n\nexport default AuthContextProvider\n"})}),"\n",(0,o.jsx)(t.h4,{id:"after-functional-component-2",children:"After (Functional Component)"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React, { createContext, useState } from 'react'\n\nexport const AuthContext = createContext()\n\nconst AuthContextProvider = ({ children }) => {\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n\n    const changeAuthStatus = () => {\n        setIsLoggedIn(!isLoggedIn)\n    }\n\n    return (\n        <AuthContext.Provider value={{ isLoggedIn, changeAuthStatus}} >\n            { children }\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthContextProvider\n"})}),"\n",(0,o.jsx)(t.h3,{id:"theme-context",children:"Theme Context"}),"\n",(0,o.jsx)(t.p,{children:"In case of the theme context this makes a little less sense - it actually is more readable as a class component."}),"\n",(0,o.jsx)(t.h4,{id:"before-class-component-3",children:"Before (Class Component)"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React, {createContext, Component} from 'react'\n\nexport const ThemeContext = createContext()\n\nclass ThemeContextProvider extends Component {\n    state = {\n        isDarkTheme: true,\n        lightTheme: {\n            color: 'purple',\n            backgroundColor: 'snow',\n            text: 'Dark'\n        },\n        darkTheme: {\n            color: 'plum',\n            backgroundColor: 'purple',\n            text: 'Light'\n        }\n    }\n\n    changeTheme = () => {\n        // toggle theme to opposite when called\n        this.setState({isDarkTheme: !this.state.isDarkTheme})\n    }\n\n    render() {\n        return (\n            <ThemeContext.Provider value={{ ...this.state, changeTheme: this.changeTheme }}>\n                {this.props.children}\n            </ThemeContext.Provider>\n        )\n    }\n }\n\n\nexport default ThemeContextProvider\n"})}),"\n",(0,o.jsx)(t.h4,{id:"after-functional-component-3",children:"After (Functional Component)"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React, {createContext, useState } from 'react'\n\nexport const ThemeContext = createContext()\n\nconst ThemeContextProvider = ({ children }) => {\n\n    const [isDarkTheme, setIsDarkTheme] = useState(true)\n\n    const [lightTheme, setLightTheme] = useState({\n                                            color: 'purple',\n                                            backgroundColor: 'snow',\n                                            text: 'Dark'\n                                        })\n\n    const [darkTheme, setdarkTheme] = useState({\n                                            color: 'plum',\n                                            backgroundColor: 'purple',\n                                            text: 'Light'\n                                        })\n\n    const changeTheme = () => {\n        // toggle theme to opposite when called\n        setIsDarkTheme(!isDarkTheme)\n    }\n\n    return (\n        <ThemeContext.Provider value={{ isDarkTheme, changeTheme, lightTheme, darkTheme }}>\n            { children }\n        </ThemeContext.Provider>\n    )\n }\n\nexport default ThemeContextProvider\n"})}),"\n",(0,o.jsx)(t.h2,{id:"handling-to-do-items-using-context",children:"Handling To-Do Items using Context"}),"\n",(0,o.jsx)(t.p,{children:"So far the to-do list simply rendered a few hard coded items. Let's start by copying them into context like:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React, { createContext, useState } from 'react'\nimport {v4 as uuidv4} from 'uuid'\n\nexport const TodoItemContext = createContext()\n\nconst TodoItemContextProvider = ( {children} ) => {\n    const [items, setItems] = useState([\n        { text: 'One thing to do', id: `${uuidv4()}`},\n        { text: 'Another thing to do', id: `${uuidv4()}`},\n        { text: 'And one more thing', id: `${uuidv4()}`},\n    ])\n\n    return (\n        <TodoItemContext.Provider value={{items}}>\n            {children}\n        </TodoItemContext.Provider>\n        )\n}\n\nexport default TodoItemContextProvider\n"})}),"\n",(0,o.jsx)(t.p,{children:"To provide this context we have to wrap the list inside the provider tags:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React from 'react'\n\nimport { RootView } from './src/components/_styles'\nimport ThemeContextProvider from './src/context/ThemeContext'\nimport AuthContextProvider from './src/context/AuthContext'\nimport TodoItemContextProvider from './src/context/TodoItemContext'\nimport Navbar from './src/components/Navbar'\nimport TodoList from './src/components/ToDo'\n\nconst App = () => {\n  return (\n    <RootView>\n      <ThemeContextProvider>\n        <Navbar />\n        <TodoItemContextProvider>\n          <AuthContextProvider>\n            <TodoList />\n          </AuthContextProvider>\n        </TodoItemContextProvider>\n      </ThemeContextProvider>\n    </RootView>\n  );\n}\n\nexport default App\n"})}),"\n",(0,o.jsxs)(t.p,{children:["And then access the context to fill a React Native ",(0,o.jsx)(t.strong,{children:"FlatList"})," using the ",(0,o.jsx)(t.code,{children:"useContext"})," function like:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React, { useContext } from 'react'\nimport { Text } from 'react-native'\n\nimport { TodoBackground, TodoList, TodoItem, LoginView } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\nimport { AuthContext } from '../context/AuthContext'\nimport { TodoItemContext } from '../context/TodoItemContext'\n\nconst ToDoList = () => {\n\n    const { isDarkTheme, darkTheme, lightTheme } = useContext(ThemeContext)\n    const { isLoggedIn, changeAuthStatus } = useContext(AuthContext)\n    const { items } = useContext(TodoItemContext)\n    // if isDarkTheme is true return dark state / else light\n    const theme = isDarkTheme ? darkTheme : lightTheme\n\n    if (isLoggedIn) {\n        return (\n            <TodoBackground style={theme}>\n                {\n                    items.length ? (\n                        <TodoList \n                            data={items}\n                            keyExtractor={(item) => item.id}\n                            renderItem={({item}) => {\n                                return <TodoItem>{item.text}</TodoItem>\n                            }}\n                        />\n                    ) : (\n                        <TodoItem>Nothing to do...</TodoItem>\n                    )\n                }\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Logout</Text>\n                </TodoItem>\n            </TodoBackground>\n        )}\n        return (\n            <LoginView>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Login</Text>\n                </TodoItem>\n            </LoginView>\n        )\n}\n\nexport default ToDoList\n"})}),"\n",(0,o.jsx)(t.h3,{id:"adding-items-using-context",children:"Adding Items using Context"}),"\n",(0,o.jsxs)(t.p,{children:["Start by creating an ",(0,o.jsx)(t.code,{children:"addItem"})," function inside the To-Do List component:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React, { createContext, useState } from 'react'\nimport {v4 as uuidv4} from 'uuid'\n\nexport const TodoItemContext = createContext()\n\nconst TodoItemContextProvider = ( {children} ) => {\n    const [items, setItems] = useState([\n        { text: 'Have a great day!', id: `${uuidv4()}`}\n    ])\n\n    const addItem = (item) => {\n        setItems([...items, {text: item, id: `${uuidv4()}`}])\n    }\n\n    return (\n        <TodoItemContext.Provider value={{items, addItem}}>\n            {children}\n        </TodoItemContext.Provider>\n        )\n}\n\nexport default TodoItemContextProvider\n"})}),"\n",(0,o.jsxs)(t.p,{children:["And add an ",(0,o.jsx)(t.strong,{children:"InputText"})," field + a submit button that can take the text input and forward it to the ",(0,o.jsx)(t.code,{children:"addItem"})," function for us:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React, { useContext, useState, useEffect } from 'react'\nimport { Text } from 'react-native'\n\nimport { TodoBackground, TodoList, TodoItem, LoginView, InputItem } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\nimport { AuthContext } from '../context/AuthContext'\nimport { TodoItemContext } from '../context/TodoItemContext'\n\nconst ToDoList = () => {\n\n    const [todo, setTodo] = useState('')\n\n    const { isDarkTheme, darkTheme, lightTheme } = useContext(ThemeContext)\n    // if isDarkTheme is true return dark state / else light\n    const theme = isDarkTheme ? darkTheme : lightTheme\n\n    const { isLoggedIn, changeAuthStatus } = useContext(AuthContext)\n    const { items, addItem } = useContext(TodoItemContext)\n\n    const handleChange = (text) => {\n        setTodo(text)\n    }\n\n    const handleAddItem = () => {\n        if(todo.length > 0) \n        addItem(todo)\n        setTodo('')\n    }\n\n    if (isLoggedIn) {\n        return (\n            <TodoBackground style={theme}>\n                {\n                    items.length ? (\n                        <TodoList \n                            data={items}\n                            keyExtractor={(item) => item.id}\n                            showsVerticalScrollIndicator={false}\n                            renderItem={({item}) => {\n                                return <TodoItem>{item.text}</TodoItem>\n                            }}\n                        />\n                    ) : (\n                        <TodoItem>Nothing to do...</TodoItem>\n                    )\n                }\n                <InputItem\n                    value={todo}\n                    onChangeText={(text) => handleChange(text)}\n                />\n                <TodoItem onPress={handleAddItem}>\n                    <Text>Add Item</Text>\n                </TodoItem>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Logout</Text>\n                </TodoItem>\n            </TodoBackground>\n        )}\n        return (\n            <LoginView>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Login</Text>\n                </TodoItem>\n            </LoginView>\n        )\n}\n\nexport default ToDoList\n"})}),"\n",(0,o.jsx)(t.h3,{id:"removing-items-using-context",children:"Removing Items using Context"}),"\n",(0,o.jsx)(t.p,{children:"Now lets add another function to our context that allows us to remove items from the list:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React, { createContext, useState } from 'react'\nimport {v4 as uuidv4} from 'uuid'\n\nexport const TodoItemContext = createContext()\n\nconst TodoItemContextProvider = ( {children} ) => {\n    const [items, setItems] = useState([\n        { text: 'Have a great day!', id: `${uuidv4()}`}\n    ])\n\n    const addItem = (item) => {\n        setItems([...items, {text: item, id: `${uuidv4()}`}])\n    }\n\n    const removeItem = (id) => {\n        setItems(items.filter((item) => {\n            return item.id !== id\n        }))\n    }\n\n    return (\n        <TodoItemContext.Provider value={{items, addItem, removeItem}}>\n            {children}\n        </TodoItemContext.Provider>\n        )\n}\n\nexport default TodoItemContextProvider\n"})}),"\n",(0,o.jsx)(t.p,{children:"We can call this function by pressing an item and providing the item id for the removal in the process:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React, { useContext, useState } from 'react'\nimport { Text, TouchableOpacity } from 'react-native'\n\nimport { TodoBackground, TodoList, TodoItem, LoginView, InputItem } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\nimport { AuthContext } from '../context/AuthContext'\nimport { TodoItemContext } from '../context/TodoItemContext'\n\nconst ToDoList = () => {\n\n    const [todo, setTodo] = useState('')\n\n    const { isDarkTheme, darkTheme, lightTheme } = useContext(ThemeContext)\n    // if isDarkTheme is true return dark state / else light\n    const theme = isDarkTheme ? darkTheme : lightTheme\n\n    const { isLoggedIn, changeAuthStatus } = useContext(AuthContext)\n    const { items, addItem, removeItem } = useContext(TodoItemContext)\n\n    const handleChange = (text) => {\n        setTodo(text)\n    }\n\n    const handleAddItem = () => {\n        if(todo.length > 0) \n        addItem(todo)\n        setTodo('')\n    }\n\n    const handleRemoveItem = (id) => {\n        removeItem(id)\n    }\n\n    if (isLoggedIn) {\n        return (\n            <TodoBackground style={theme}>\n                {\n                    items.length ? (\n                        <TodoList \n                            data={items}\n                            keyExtractor={(item) => item.id}\n                            showsVerticalScrollIndicator={false}\n                            renderItem={({item}) => {\n                                return <TouchableOpacity onPress={() => handleRemoveItem(item.id)}><TodoItem>{item.text}</TodoItem></TouchableOpacity>\n                            }}\n                        />\n                    ) : (\n                        <TodoItem>Nothing to do...</TodoItem>\n                    )\n                }\n                <InputItem\n                    value={todo}\n                    onChangeText={(text) => handleChange(text)}\n                />\n                <TodoItem onPress={handleAddItem}>\n                    <Text>Add Item</Text>\n                </TodoItem>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Logout</Text>\n                </TodoItem>\n            </TodoBackground>\n        )}\n        return (\n            <LoginView>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Login</Text>\n                </TodoItem>\n            </LoginView>\n        )\n}\n\nexport default ToDoList\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},413419:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-23d027067cc9016279f834178a642545.jpg"},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(296540);const r={},s=o.createContext(r);function i(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);