"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[43934],{794069:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var i=n(474848),s=n(28453);const o={sidebar_position:6050,slug:"2023-07-25",title:"EMQX MQTT Broker with Docker",authors:"mpolinowski",tags:["IoT"],image:"https://mpolinowski.github.io/img/search/mqtt.png",description:"EMQX is an open-source (opens new window), highly scalable, and feature-rich MQTT broker designed for IoT and real-time messaging applications."},r=void 0,a={id:"Automation_and_Robotics/MQTT/2023-07-25-emqx-mqtt-broker-docker/index",title:"EMQX MQTT Broker with Docker",description:"EMQX is an open-source (opens new window), highly scalable, and feature-rich MQTT broker designed for IoT and real-time messaging applications.",source:"@site/docs/Automation_and_Robotics/MQTT/2023-07-25-emqx-mqtt-broker-docker/index.md",sourceDirName:"Automation_and_Robotics/MQTT/2023-07-25-emqx-mqtt-broker-docker",slug:"/Automation_and_Robotics/MQTT/2023-07-25-emqx-mqtt-broker-docker/2023-07-25",permalink:"/docs/Automation_and_Robotics/MQTT/2023-07-25-emqx-mqtt-broker-docker/2023-07-25",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Automation_and_Robotics/MQTT/2023-07-25-emqx-mqtt-broker-docker/index.md",tags:[{label:"IoT",permalink:"/docs/tags/io-t"}],version:"current",sidebarPosition:6050,frontMatter:{sidebar_position:6050,slug:"2023-07-25",title:"EMQX MQTT Broker with Docker",authors:"mpolinowski",tags:["IoT"],image:"https://mpolinowski.github.io/img/search/mqtt.png",description:"EMQX is an open-source (opens new window), highly scalable, and feature-rich MQTT broker designed for IoT and real-time messaging applications."},sidebar:"tutorialSidebar",previous:{title:"MQTT",permalink:"/docs/category/mqtt"},next:{title:"Mosquitto Broker Docker Cross-Compile",permalink:"/docs/Automation_and_Robotics/MQTT/2022-07-24-mosquitto-broker-cross-compilation/2022-07-24"}},c={},d=[{value:"Deploy with Docker",id:"deploy-with-docker",level:2},{value:"User Interface",id:"user-interface",level:3},{value:"User Authentication",id:"user-authentication",level:2},{value:"Authorization",id:"authorization",level:3},{value:"Cluster Deployment with Docker-Compose",id:"cluster-deployment-with-docker-compose",level:2}];function l(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Guangzhou, China",src:n(686851).A+"",width:"2385",height:"962"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"#deploy-with-docker",children:"Deploy with Docker"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#user-interface",children:"User Interface"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"#user-authentication",children:"User Authentication"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#authorization",children:"Authorization"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#cluster-deployment-with-docker-compose",children:"Cluster Deployment with Docker-Compose"})}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://www.emqx.io/docs/en/v5.1/#key-benefits",children:"EMQX"})," is an open-source (opens new window), highly scalable, and feature-rich MQTT broker designed for IoT and real-time messaging applications. It supports up to 100 million concurrent IoT device connections per cluster while maintaining a throughput of 1 million messages per second and a sub-millisecond latency."]}),"\n",(0,i.jsx)(t.p,{children:"EMQX supports various protocols, including MQTT (3.1, 3.1.1, and 5.0), HTTP, QUIC, and WebSocket. It also provides secure bi-directional communication with MQTT over TLS/SSL and various authentication mechanisms, ensuring reliable and efficient communication infrastructure for IoT devices and applications."}),"\n",(0,i.jsx)(t.h2,{id:"deploy-with-docker",children:"Deploy with Docker"}),"\n",(0,i.jsx)(t.p,{children:"Prepare a directory to persist data:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"sudo mkdir -p /opt/emqx/data\nsudo chmod -R 777 /opt/emqx\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Pull the ",(0,i.jsx)(t.a,{href:"https://hub.docker.com/_/emqx",children:"latest Docker image"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"docker pull emqx/emqx:latest\ndocker run -d -v /opt/emqx/data:/opt/emqx/data --name emqx -p 1883:1883 -p 8083:8083 -p 8084:8084 -p 8883:8883 -p 18083:18083  emqx/emqx:latest\n"})}),"\n",(0,i.jsx)(t.h3,{id:"user-interface",children:"User Interface"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"http://127.0.0.1:18083/"})}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"EMQX MQTT Broker with Docker",src:n(289648).A+"",width:"1065",height:"429"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"EMQX MQTT Broker with Docker",src:n(43147).A+"",width:"1205",height:"672"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"EMQX MQTT Broker with Docker",src:n(822018).A+"",width:"1190",height:"750"})}),"\n",(0,i.jsx)(t.h2,{id:"user-authentication",children:"User Authentication"}),"\n",(0,i.jsx)(t.p,{children:"EMQX supports the simplest and most popular password authentication, which requires the client to provide credentials that can indicate identities, such as username, client ID, and the corresponding password. EMQX will save the client credentials in its built-in database (based on Mnesia) and manages data via REST API and Dashboard."}),"\n",(0,i.jsxs)(t.p,{children:["On EMQX Dashboard, click ",(0,i.jsx)(t.strong,{children:"Access Control"})," -> ",(0,i.jsx)(t.strong,{children:"Authentication"})," on the left navigation tree to enter the Authentication page. Click ",(0,i.jsx)(t.strong,{children:"Create"})," at the top right corner, then click to select ",(0,i.jsx)(t.strong,{children:"Password-Based"})," as ",(0,i.jsx)(t.strong,{children:"Mechanism"}),", and ",(0,i.jsx)(t.strong,{children:"Built-in Database"})," as ",(0,i.jsx)(t.strong,{children:"Backend"}),", this will lead us to the Configuration tab:"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"EMQX MQTT Broker with Docker",src:n(218365).A+"",width:"1292",height:"479"})}),"\n",(0,i.jsxs)(t.p,{children:["UserID Type: Specify the fields for client ID authentication; Options: username, clientid\uff08corresponding to the Username or Client Identifier fields in the CONNECT message sent by the MQTT client). I will choose ",(0,i.jsx)(t.code,{children:"username"})," to be able to assign a group username and password to connecting clients - instead of having to handle separate logins for every client ID. Once the database is created click on ",(0,i.jsx)(t.strong,{children:"Users"})," to add logins for your MQTT clients:"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"EMQX MQTT Broker with Docker",src:n(218365).A+"",width:"1292",height:"479"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"EMQX MQTT Broker with Docker",src:n(997236).A+"",width:"1294",height:"316"})}),"\n",(0,i.jsxs)(t.p,{children:["First, I will add my INSTAR MQTT cameras using the ",(0,i.jsx)(t.code,{children:"cameras"})," user and a password that fulfills the password requirements of those cameras:"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"EMQX MQTT Broker with Docker",src:n(216143).A+"",width:"1291",height:"507"})}),"\n",(0,i.jsx)(t.h3,{id:"authorization",children:"Authorization"}),"\n",(0,i.jsxs)(t.p,{children:["Now we need to switch to the ",(0,i.jsx)(t.strong,{children:"Authorization"})," page in Dashboard and click on ",(0,i.jsx)(t.strong,{children:"Create Authorization"})," based on the ",(0,i.jsx)(t.strong,{children:"Build-in Database"}),". Once created click the ",(0,i.jsx)(t.strong,{children:"Permissions"})," button in the Actions column of the Built-in Database backend:"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"EMQX MQTT Broker with Docker",src:n(177126).A+"",width:"1296",height:"503"})}),"\n",(0,i.jsxs)(t.p,{children:["Create an Authorization for the created ",(0,i.jsx)(t.code,{children:"cameras"})," user and add the rights to subscribe and/or publish MQTT topics needed by this client. Since all my MQTT cameras publish to the MQTT prefix ",(0,i.jsx)(t.code,{children:"cameras"})," followed by the MQTT client ID I need a wildcard subscription to ",(0,i.jsx)(t.code,{children:"cameras/${clientid}/#"}),":"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"EMQX MQTT Broker with Docker",src:n(933281).A+"",width:"1084",height:"416"})}),"\n",(0,i.jsx)(t.p,{children:"And connect your clients using the login:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"EMQX MQTT Broker with Docker",src:n(448664).A+"",width:"1288",height:"840"})}),"\n",(0,i.jsx)(t.h2,{id:"cluster-deployment-with-docker-compose",children:"Cluster Deployment with Docker-Compose"}),"\n",(0,i.jsxs)(t.p,{children:["Besides working with a single EMQX node, EMQX also provides the ",(0,i.jsx)(t.a,{href:"https://www.emqx.io/docs/en/v5.1/deploy/cluster/introduction.html",children:"cluster feature"})," for high availability, better scalability, data security, and centralized management, which is why clustering is recommended for larger or mission-critical applications."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"docker-compose.yml"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yml",children:'version: \'3\'\n\nservices:\n  emqx1:\n    image: emqx:5.1.0\n    container_name: emqx1\n    environment:\n    - "EMQX_NODE_NAME=emqx@node1.emqx.io"\n    - "EMQX_CLUSTER__DISCOVERY_STRATEGY=static"\n    - "EMQX_CLUSTER__STATIC__SEEDS=[emqx@node1.emqx.io,emqx@node2.emqx.io]"\n    healthcheck:\n      test: ["CMD", "/opt/emqx/bin/emqx", "ctl", "status"]\n      interval: 5s\n      timeout: 25s\n      retries: 5\n    networks:\n      emqx-bridge:\n        aliases:\n        - node1.emqx.io\n    ports:\n      - 1883:1883\n      - 8083:8083\n      - 8084:8084\n      - 8883:8883\n      - 18083:18083 \n    # volumes:\n    #   - $PWD/emqx1_data:/opt/emqx/data\n\n  emqx2:\n    image: emqx:5.1.0\n    container_name: emqx2\n    environment:\n    - "EMQX_NODE_NAME=emqx@node2.emqx.io"\n    - "EMQX_CLUSTER__DISCOVERY_STRATEGY=static"\n    - "EMQX_CLUSTER__STATIC__SEEDS=[emqx@node1.emqx.io,emqx@node2.emqx.io]"\n    healthcheck:\n      test: ["CMD", "/opt/emqx/bin/emqx", "ctl", "status"]\n      interval: 5s\n      timeout: 25s\n      retries: 5\n    networks:\n      emqx-bridge:\n        aliases:\n        - node2.emqx.io\n    # volumes:\n    #   - $PWD/emqx2_data:/opt/emqx/data\n\nnetworks:\n  emqx-bridge:\n    driver: bridge\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'docker-compose up -d\ndocker exec -it emqx1 sh -c "emqx ctl cluster status"\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},289648:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/emqx-mqtt-broker-docker_01-32b33e84967d1c0bdb5593a0ced41560.png"},43147:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/emqx-mqtt-broker-docker_02-303e46766d4f2d1d19458b1e80361b7b.png"},822018:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/emqx-mqtt-broker-docker_03-6723b5a5753d3333f7a3361d0607c7c2.png"},218365:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/emqx-mqtt-broker-docker_04-677962228e700e31fe1dac7b3fca15cd.png"},997236:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/emqx-mqtt-broker-docker_05-e69a333770bb78180b93cb53ccf4064f.png"},216143:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/emqx-mqtt-broker-docker_06-a6517c6bb4b6d3a7fa4e4d9e59fb8c3a.png"},177126:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/emqx-mqtt-broker-docker_07-cd883de16b289fb78f0da36b90549998.png"},933281:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/emqx-mqtt-broker-docker_08-c01ea31ad9d6a4fedfc47efc0606edbf.png"},448664:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/emqx-mqtt-broker-docker_09-568d334a68e3c02f34355dfbd160d82a.png"},686851:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-4dda98a4eb3b498839926e0b6a5039aa.jpg"},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(296540);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);