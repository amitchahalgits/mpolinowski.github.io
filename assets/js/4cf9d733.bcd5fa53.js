"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[21426],{800515:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var i=r(474848),t=r(28453);const s={sidebar_position:7050,slug:"2020-08-29",title:"Serving Static Files with Hapi and Docker",authors:"mpolinowski",tags:["LINUX","Docker","Hapi"]},a=void 0,o={id:"DevOps/Provisioning/2020-08-29--static-server-with-hapi-and-docker/index",title:"Serving Static Files with Hapi and Docker",description:"Central, Hong Kong",source:"@site/docs/DevOps/Provisioning/2020-08-29--static-server-with-hapi-and-docker/index.md",sourceDirName:"DevOps/Provisioning/2020-08-29--static-server-with-hapi-and-docker",slug:"/DevOps/Provisioning/2020-08-29--static-server-with-hapi-and-docker/2020-08-29",permalink:"/docs/DevOps/Provisioning/2020-08-29--static-server-with-hapi-and-docker/2020-08-29",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Provisioning/2020-08-29--static-server-with-hapi-and-docker/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Docker",permalink:"/docs/tags/docker"},{label:"Hapi",permalink:"/docs/tags/hapi"}],version:"current",sidebarPosition:7050,frontMatter:{sidebar_position:7050,slug:"2020-08-29",title:"Serving Static Files with Hapi and Docker",authors:"mpolinowski",tags:["LINUX","Docker","Hapi"]},sidebar:"tutorialSidebar",previous:{title:"Docker Compose Networking",permalink:"/docs/DevOps/Provisioning/2020-09-02--docker-compose-networking/2020-09-02"},next:{title:"Infrastructure as Code",permalink:"/docs/DevOps/Provisioning/2020-07-13--infrastructure-as-code/2020-07-13"}},l={},c=[{value:"Installing hapi",id:"installing-hapi",level:2},{value:"Creating a Server",id:"creating-a-server",level:2},{value:"Adding Routes",id:"adding-routes",level:3},{value:"Serving Static Content",id:"serving-static-content",level:2},{value:"File Handler",id:"file-handler",level:3},{value:"Directory Handler",id:"directory-handler",level:3},{value:"Gatsby Server",id:"gatsby-server",level:3},{value:"Docker it!",id:"docker-it",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Central, Hong Kong",src:r(335985).A+"",width:"1500",height:"574"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#installing-hapi",children:"Installing hapi"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#creating-a-server",children:"Creating a Server"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#adding-routes",children:"Adding Routes"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#serving-static-content",children:"Serving Static Content"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#file-handler",children:"File Handler"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#directory-handler",children:"Directory Handler"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#gatsby-server",children:"Gatsby Server"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#docker-it",children:"Docker it!"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["I need to build a web server for static files generated by ",(0,i.jsx)(n.a,{href:"https://www.gatsbyjs.com/tutorial/",children:"Gatsby.js"}),". So far I was using ",(0,i.jsx)(n.a,{href:"https://expressjs.com/en/starter/static-files.html",children:"Express.js"})," to do this. But there seems to be a new library that is gaining popularity among my coworkers called ",(0,i.jsx)(n.a,{href:"https://hapi.dev/tutorials/servingfiles/?lang=en_US",children:"Hapi.js"}),". Let's see if we can make this work for us."]}),"\n",(0,i.jsx)(n.h2,{id:"installing-hapi",children:"Installing hapi"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a new directory ",(0,i.jsx)(n.code,{children:"gatsby-static"}),", and from there:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd gatsby-static\r\nnpm init\r\nnpm install @hapi/hapi\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This will install the latest version of ",(0,i.jsx)(n.code,{children:"hapi"})," as a dependency in your package.json."]}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-server",children:"Creating a Server"}),"\n",(0,i.jsxs)(n.p,{children:["A very basic ",(0,i.jsx)(n.code,{children:"hapi"})," server looks like the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"'use strict';\r\n\r\nconst Hapi = require('@hapi/hapi');\r\n\r\nconst init = async () => {\r\n\r\n    const server = Hapi.server({\r\n        port: 3000,\r\n        host: '0.0.0.0'\r\n    });\r\n\r\n    await server.start();\r\n    console.log('Server running on %s', server.info.uri);\r\n};\r\n\r\nprocess.on('unhandledRejection', (err) => {\r\n\r\n    console.log(err);\r\n    process.exit(1);\r\n});\r\n\r\ninit();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"adding-routes",children:"Adding Routes"}),"\n",(0,i.jsx)(n.p,{children:'After you get the server up and running, its time to add a route that will display "Hello World!" in your browser.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"'use strict';\r\n\r\nconst Hapi = require('@hapi/hapi');\r\n\r\nconst init = async () => {\r\n\r\n    const server = Hapi.server({\r\n        port: 3000,\r\n        host: '0.0.0.0'\r\n    });\r\n\r\n    server.route({\r\n        method: 'GET',\r\n        path: '/',\r\n        handler: (request, h) => {\r\n\r\n            return 'Hello World!';\r\n        }\r\n    });\r\n\r\n    await server.start();\r\n    console.log('Server running on %s', server.info.uri);\r\n};\r\n\r\nprocess.on('unhandledRejection', (err) => {\r\n\r\n    console.log(err);\r\n    process.exit(1);\r\n});\r\n\r\ninit();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Save the above as app.js and start the server with the command node app.js. Now you'll find that if you visit ",(0,i.jsx)(n.code,{children:"http://localhost:3000"})," in your browser, you'll see the text ",(0,i.jsx)(n.strong,{children:"Hello, World!"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"serving-static-content",children:"Serving Static Content"}),"\n",(0,i.jsxs)(n.p,{children:["There is a ",(0,i.jsx)(n.strong,{children:"hapi"})," plugin called inert that adds this functionality to ",(0,i.jsx)(n.strong,{children:"hapi"})," through the use of additional handlers. First you need to install and add ",(0,i.jsx)(n.strong,{children:"inert"})," as a dependency to your project:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install @hapi/inert\n"})}),"\n",(0,i.jsx)(n.h3,{id:"file-handler",children:"File Handler"}),"\n",(0,i.jsxs)(n.p,{children:["The inert plugin provides new handler methods for serving static files and directories, as well as adding a ",(0,i.jsx)(n.code,{children:"h.file()"})," method to the toolkit, which can respond with file based resources. To simplify things, especially if you have multiple routes that respond with files, you can configure a base path in your server and only pass relative paths to ",(0,i.jsx)(n.code,{children:"h.file()"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"'use strict';\r\n\r\nconst Path = require('path');\r\nconst Hapi = require('@hapi/hapi');\r\nconst Path = require('path');\r\n\r\nconst start = async () => {\r\n\r\n    const server = Hapi.server({\r\n        routes: {\r\n            files: {\r\n                relativeTo: Path.join(__dirname, 'public')\r\n            }\r\n        }\r\n    });\r\n\r\n    await server.register(require('@hapi/inert'));\r\n\r\n    server.route({\r\n        method: 'GET',\r\n        path: '/picture.jpg',\r\n        handler: function (request, h) {\r\n\r\n            return h.file('picture.jpg');\r\n        }\r\n    });\r\n\r\n    await server.start();\r\n\r\n    console.log('Server running at:', server.info.uri);\r\n};\r\n\r\nstart();\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"})," that you need to ",(0,i.jsx)(n.code,{children:"npm install path"})," into your project to work with the Gatsby.js ",(0,i.jsx)(n.code,{children:"public"})," directory."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"directory-handler",children:"Directory Handler"}),"\n",(0,i.jsx)(n.p,{children:"In addition to the file handler, inert also adds a directory handler that allows you to specify one route to serve multiple files. In order to use it, you must specify a route path with a parameter. The name of the parameter does not matter, however. You can use the asterisk extension on the parameter to restrict file depth as well. The most basic usage of the directory handler looks like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"server.route({\r\n    method: 'GET',\r\n    path: '/{param*}',\r\n    handler: {\r\n        directory: {\r\n            path: 'directory-path-here'\r\n        }\r\n    }\r\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The above route will respond to any request by looking for a matching filename in the directory-path-here directory. Note that a request to ",(0,i.jsx)(n.code,{children:"/"})," in this configuration will reply with an HTTP 403 response. You can fix this by adding an index file. By default ",(0,i.jsx)(n.strong,{children:"hapi"})," will search in the directory for a file called ",(0,i.jsx)(n.code,{children:"index.html"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"server.route({\r\n    method: 'GET',\r\n    path: '/{param*}',\r\n    handler: {\r\n        directory: {\r\n            path: 'directory-path-here',\r\n            index: ['index.html']\r\n        }\r\n    }\r\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["A request to ",(0,i.jsx)(n.code,{children:"/"})," will now first try to load ",(0,i.jsx)(n.code,{children:"/index.html"}),". When there is no index file available, inert can display the contents of the directory as a listing page. You can enable that by setting the ",(0,i.jsx)(n.strong,{children:"listing property"})," to true like so:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"server.route({\r\n    method: 'GET',\r\n    path: '/{param*}',\r\n    handler: {\r\n        directory: {\r\n            path: 'directory-path-here',\r\n            listing: true\r\n        }\r\n    }\r\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now a request to / will reply with HTML showing the contents of the directory. When using the directory handler with listing enabled, by default hidden files will not be shown in the listing. That can be changed by setting the ",(0,i.jsx)(n.code,{children:"showHidden"})," option to true. Like the file handler, the directory handler also has a ",(0,i.jsx)(n.code,{children:"lookupCompressed"})," option to serve ",(0,i.jsx)(n.code,{children:"precompressed"})," files when possible. You can also set a ",(0,i.jsx)(n.code,{children:"defaultExtension"})," that will be appended to requests if the original path is not found. This means that a request for ",(0,i.jsx)(n.code,{children:"/bacon"})," will also try the file ",(0,i.jsx)(n.code,{children:"/bacon.html"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"gatsby-server",children:"Gatsby Server"}),"\n",(0,i.jsxs)(n.p,{children:["One common case for serving static content is setting up a file server. The following example shows how to setup a basic file serve in ",(0,i.jsx)(n.strong,{children:"hapi"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const Path = require('path');\r\nconst Hapi = require('@hapi/hapi');\r\nconst Inert = require('@hapi/inert');\r\n\r\nconst init = async () => {\r\n\r\n    const server = new Hapi.Server({\r\n        port: 7777,\r\n        routes: {\r\n            files: {\r\n                relativeTo: Path.join(__dirname, 'public')\r\n            }\r\n        }\r\n    });\r\n\r\n    await server.register(Inert);\r\n\r\n    server.route({\r\n        method: 'GET',\r\n        path: '/{param*}',\r\n        handler: {\r\n            directory: {\r\n                path: '.',\r\n                redirectToSlash: true\r\n            }\r\n        }\r\n    });\r\n\r\n    await server.start();\r\n\r\n    console.log('Server running at:', server.info.uri);\r\n};\r\n\r\ninit();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["After your server is configured, you then register the inert plugin. This will allow you to have access to the directory handler, which will enable you to server your files. In the directory handler, you configure ",(0,i.jsx)(n.code,{children:"path"}),", which is required, to look in the entire ",(0,i.jsx)(n.strong,{children:"Gatsby public"})," directory which you specified in the ",(0,i.jsx)(n.code,{children:"relativeTo"})," option. The second option is the ",(0,i.jsx)(n.code,{children:"redirectToSlash"})," option. By setting this to ",(0,i.jsx)(n.code,{children:"true"}),", you tell the server to redirect requests without trailing slashes to the same path with those with the trailing slash."]}),"\n",(0,i.jsx)(n.h2,{id:"docker-it",children:"Docker it!"}),"\n",(0,i.jsxs)(n.p,{children:["I now have a directory ",(0,i.jsx)(n.code,{children:"gatsby-static"})," that contains the ",(0,i.jsx)(n.code,{children:"node_modules"})," folder and 3 files - the ",(0,i.jsx)(n.code,{children:"app.js"})," file (see above) and ",(0,i.jsx)(n.code,{children:"packages.json"})," (+ ",(0,i.jsx)(n.code,{children:"package-lock.json"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\r\n  "name": "hapi-container",\r\n  "version": "1.0.0",\r\n  "description": "hapi static server",\r\n  "main": "app.js",\r\n  "scripts": {\r\n    "start": "node app.js",\r\n    "test": "echo \\"Error: no test specified\\" && exit 1"\r\n  },\r\n  "author": "Mike Polinowski",\r\n  "license": "MIT",\r\n  "dependencies": {\r\n    "@hapi/hapi": "^20.0.0",\r\n    "@hapi/inert": "^6.0.2",\r\n    "path": "^0.12.7"\r\n  }\r\n}\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"})," that I added a start script here. This way I am able to start my app with ",(0,i.jsx)(n.code,{children:"npm start"})," instead of having to type ",(0,i.jsx)(n.code,{children:"node app.js"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["I will now copy those - ",(0,i.jsx)(n.strong,{children:"but not"})," the public folder with my static files! Also the ",(0,i.jsx)(n.strong,{children:"node_modules"})," does not have to be included inside the image - into a subdirectory called ",(0,i.jsx)(n.code,{children:"container"}),", create an empty directory called ",(0,i.jsx)(n.code,{children:"public"})," inside it and create a ",(0,i.jsx)(n.code,{children:"Dockerfile"})," in the root directory:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"my-static-files"}),"\n",(0,i.jsxs)(n.li,{children:["container","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"public"}),"\n",(0,i.jsx)(n.li,{children:"app.js"}),"\n",(0,i.jsx)(n.li,{children:"package.json"}),"\n",(0,i.jsx)(n.li,{children:"package-lock.json"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Dockerfile"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Dockerfile"})," should look like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dockerfile",children:'FROM        node:latest\r\nLABEL       maintainer="m.polinowski@instar.com"\r\nENV         NODE_ENV=production\r\nENV         PORT=7777\r\nCOPY        ./container /wiki_en_ssr\r\nWORKDIR     /wiki_en_ssr\r\nRUN         npm install\r\nEXPOSE      7777\r\nENTRYPOINT  ["npm", "start"]\n'})}),"\n",(0,i.jsx)(n.p,{children:"This will wrap our hapi server inside a docker image once we run the docker build command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'docker build  -t wiki-instar-com -f /path/to/a/Dockerfile .\r\n\r\nSending build context to Docker daemon  1.563GB\r\nStep 1/9 : FROM        node:latest\r\n ---\x3e 784e696f5060\r\nStep 2/9 : LABEL       maintainer="m.polinowski@instar.com"\r\n ---\x3e Running in 6fd6a2ee6aa1\r\nRemoving intermediate container 6fd6a2ee6aa1\r\n ---\x3e aae0a3c6671b\r\nStep 3/9 : ENV         NODE_ENV=production\r\n ---\x3e Running in 4b2ffdce8455\r\nRemoving intermediate container 4b2ffdce8455\r\n ---\x3e 0ff0a5d4528c\r\nStep 4/9 : ENV         PORT=7777\r\n ---\x3e Running in c4b56a96175d\r\nRemoving intermediate container c4b56a96175d\r\n ---\x3e 0d7e9b6d66a3\r\nStep 5/9 : COPY        ./container /wiki_en_ssr\r\n ---\x3e f8fad2e28ae9\r\nStep 6/9 : WORKDIR     /wiki_en_ssr\r\n ---\x3e Running in 88f9a237ecf1\r\nRemoving intermediate container 88f9a237ecf1\r\n ---\x3e 394ad4d346e9\r\nStep 7/9 : RUN         npm install\r\n ---\x3e Running in 96161550ef65\r\nnpm WARN hapi-container@1.0.0 No repository field.\r\n\r\nadded 37 packages from 7 contributors and audited 37 packages in 6.389s\r\nfound 0 vulnerabilities\r\n\r\nRemoving intermediate container 96161550ef65\r\n ---\x3e 78a03539837f\r\nStep 8/9 : EXPOSE      7777\r\n ---\x3e Running in 1dc2cdaa2eb4\r\nRemoving intermediate container 1dc2cdaa2eb4\r\n ---\x3e f2c4e7f61583\r\nStep 9/9 : ENTRYPOINT  ["npm", "start"]\r\n ---\x3e Running in bec8b8ed7815\r\nRemoving intermediate container bec8b8ed7815\r\n ---\x3e 418d52e68b85\r\nSuccessfully built 418d52e68b85\r\nSuccessfully tagged wiki-instar-com:latest\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker build  -t wiki-instar-de -f /path/to/a/Dockerfile .\r\n\r\ndocker build  -t wiki-instar-fr -f /path/to/a/Dockerfile .\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can now start a container from this image and point it to your folder with static content:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run -p 8080:7777 -v /path/to/my-static-files:/wiki_en_ssr/public wiki-instar-com\r\n\r\n> hapi-container@1.0.0 start /wiki_en_ssr\r\n> node app.js\r\n\r\nServer running at: http://localhost:7777\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"})," that the path to your static files as well as the public directory inside your container has to be absolute. For example ",(0,i.jsx)(n.code,{children:"docker run -p 8080:7777 -v /opt/hapi-container-en/app:/wiki_en_ssr/public wiki-instar-com"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"To run your container detached from your console use:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'docker run -d -p 8080:7777 -v /opt/hapi-container-en/app:/wiki_en_ssr/public --network=wikinet --name wiki_en wiki-instar-com\r\nc6a398309919201f63b3bff32436f4a63a35bc17fd1b5dd43b43d0e5ed9ce9e5\r\n\r\ndocker ps\r\nCONTAINER ID        IMAGE               COMMAND             PORTS                    NAMES\r\nc6a398309919        wiki-instar-com     "npm start"         0.0.0.0:8080->7777/tcp   wiki_en\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},335985:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-bb1cb7969c492d0795741dc686f072b6.jpg"},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var i=r(296540);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);