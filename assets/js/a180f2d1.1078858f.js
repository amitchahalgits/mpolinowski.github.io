"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[70874],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(t),h=o,u=d["".concat(c,".").concat(h)]||d[h]||m[h]||a;return t?r.createElement(u,l(l({ref:n},p),{},{components:t})):r.createElement(u,l({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3200:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=t(87462),o=(t(67294),t(3905));const a={sidebar_position:3980,slug:"2022-11-15",title:"Hashicorp Nomad Secure & Balanced NTS Time Service",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"],description:"Using Nomad to deploy a secure time server."},l=void 0,i={unversionedId:"DevOps/Hashicorp/2022-11-15-hashicorp-nomad-balanced-nts/index",id:"DevOps/Hashicorp/2022-11-15-hashicorp-nomad-balanced-nts/index",title:"Hashicorp Nomad Secure & Balanced NTS Time Service",description:"Using Nomad to deploy a secure time server.",source:"@site/docs/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-balanced-nts/index.md",sourceDirName:"DevOps/Hashicorp/2022-11-15-hashicorp-nomad-balanced-nts",slug:"/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-balanced-nts/2022-11-15",permalink:"/docs/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-balanced-nts/2022-11-15",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-balanced-nts/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Consul",permalink:"/docs/tags/consul"},{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:3980,frontMatter:{sidebar_position:3980,slug:"2022-11-15",title:"Hashicorp Nomad Secure & Balanced NTS Time Service",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"],description:"Using Nomad to deploy a secure time server."},sidebar:"tutorialSidebar",previous:{title:"Hashicorp",permalink:"/docs/category/hashicorp"},next:{title:"Hashicorp Nomad for NGINX Load-balancing",permalink:"/docs/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-nginx-load-balancing/2022-11-15"}},c={},s=[{value:"Building the Timeserver",id:"building-the-timeserver",level:2},{value:"Docker-Compose",id:"docker-compose",level:3},{value:"Nomad Job",id:"nomad-job",level:2},{value:"Complete Job File",id:"complete-job-file",level:3},{value:"Load-Balancing",id:"load-balancing",level:2}],p={toc:s};function m(e){let{components:n,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Shen Zhen, China",src:t(61461).Z,width:"2230",height:"839"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#building-the-timeserver"},"Building the Timeserver"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#docker-compose"},"Docker-Compose")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#nomad-job"},"Nomad Job"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#complete-job-file"},"Complete Job File")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#load-balancing"},"Load-Balancing"))),(0,o.kt)("h2",{id:"building-the-timeserver"},"Building the Timeserver"),(0,o.kt)("p",null,"I am using a slightly modified version of the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/docker-ntp"},"docker-ntp")," by ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cturra/"},"@cturra")," repository to build my Chrony Docker image. When running the container with Nomad the service can be configured using environment variables:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'env {\n    NTP_SERVERS = "0.de.pool.ntp.org,time.cloudflare.com,time1.google.com"\n    LOG_LEVEL = "1"\n}\n')),(0,o.kt)("p",null,"Changes made to the repository - adding TLS certificates to be able to use the NTS Key Exchange for a secured time service:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/docker-ntp/blob/master/assets/startup.sh"},"Original Start-up Script")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# final bits for the config file\n{\n  echo\n  echo "driftfile /var/lib/chrony/chrony.drift"\n  echo "makestep 0.1 3"\n  echo "rtcsync"\n  echo\n  echo "allow all"\n} >> ${CHRONY_CONF_FILE}\n')),(0,o.kt)("p",null,"Changed to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# final bits for the config file\n{\n  echo\n  echo "driftfile /var/lib/chrony/chrony.drift"\n  echo "makestep 0.1 3"\n  echo "rtcsync"\n  echo\n  echo "ntsserverkey /opt/letsencrypt/live/my.domain.com/privkey.pem"\n  echo "ntsservercert /opt/letsencrypt/live/my.domain.com/fullchain.pem"\n  echo "ntsprocesses 3"\n  echo "maxntsconnections 512"\n  echo "ntsdumpdir /var/lib/chrony"\n  echo\n  echo "allow all"\n} >> ${CHRONY_CONF_FILE}\n')),(0,o.kt)("p",null,"These certificates need to be generated on the host system, e.g. using certbot and then mounted into the container on runtime:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"apt install certbot python3-certbot-nginx\ncertbot certonly --standalone\n")),(0,o.kt)("h3",{id:"docker-compose"},"Docker-Compose"),(0,o.kt)("p",null,"To test the container we can use ",(0,o.kt)("inlineCode",{parentName:"p"},"docker compose up -d chrony"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"version: '3.9'\n\nservices:\n  chrony:\n    build: .\n    image: chrony/nts:latest\n    container_name: chrony\n    restart: unless-stopped\n    volumes:\n      - type: bind\n        source: /etc/letsencrypt/live/my.domain.com/fullchain.pem\n        target: /opt/letsencrypt/live/my.domain.com/fullchain.pem\n      - type: bind\n        source: /etc/letsencrypt/live/my.domain.com/privkey.pem\n        target: /opt/letsencrypt/live/my.domain.com/privkey.pem\n    ports:\n      - 123:123/udp\n      - 4460:4460/tcp\n    environment:\n      - NTP_SERVERS=0.de.pool.ntp.org,time.cloudflare.com,time1.google.com\n      - LOG_LEVEL=1\n")),(0,o.kt)("h2",{id:"nomad-job"},"Nomad Job"),(0,o.kt)("p",null,"In Nomad we first need to create the volume on our host and then define it here:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'volume "letsencrypt" {\n    type      = "host"\n    read_only = false\n    source    = "letsencrypt"\n}\n')),(0,o.kt)("p",null,"It then can be mounted into the container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'volume_mount {\n    volume      = "letsencrypt"\n    destination = "/opt/letsencrypt"\n    read_only   = false\n}\n')),(0,o.kt)("h3",{id:"complete-job-file"},"Complete Job File"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'job "chrony_nts_server" {\n    datacenters = ["dc1"]\n    type = "service"\n\n    group "docker" {\n        count = 1\n\n        network {\n            port "ntp" {\n                to = "123"\n            }\n            port "nts" {\n                to = "4460"\n            }\n        }\n\n        update {\n            max_parallel = 1\n            min_healthy_time = "10s"\n            healthy_deadline = "2m"\n            progress_deadline = "5m"\n            auto_revert = true\n            auto_promote = true\n            canary = 1\n        }\n\n        service {\n            name = "chrony-ntp"\n            port = "ntp"\n\n            check {\n                name = "NTP Service"\n                type = "tcp"\n                interval = "10s"\n                timeout = "1s"\n            }\n        }\n\n        service {\n            name = "chrony-nts"\n            port = "nts"\n\n            check {\n                name = "NTS Service"\n                type = "tcp"\n                interval = "10s"\n                timeout = "1s"\n            }\n        }\n\n        volume "letsencrypt" {\n            type      = "host"\n            read_only = false\n            source    = "letsencrypt"\n        }\n\n        task "chrony-container" {\n            driver = "docker"\n            volume_mount {\n                volume      = "letsencrypt"\n                destination = "/opt/letsencrypt"\n                read_only   = false\n           }\n\n            env {\n                NTP_SERVERS = "0.de.pool.ntp.org,time.cloudflare.com,time1.google.com"\n                LOG_LEVEL = "1"\n            }\n\n            config {\n                image = "my.gitlab.com:12345/server_management/chrony-nts:latest"\n                ports = ["ntp", "nts"]\n                network_mode = "default"\n                force_pull = true\n\n                auth {\n                    username = "myuser"\n                    password = "mypassword"\n                }\n            }\n        }\n    }\n}\n')),(0,o.kt)("h2",{id:"load-balancing"},"Load-Balancing"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"WIP")),(0,o.kt)("p",null,"Now I want to be able to balance a pool of Chrony servers ",(0,o.kt)("a",{parentName:"p",href:"/docs/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-nginx-load-balancing/2022-11-15"},"behind an NGINX proxy"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'job "nginx" {\n  datacenters = ["dc1"]\n\n  group "nginx" {\n    count = 1\n\n    network {\n      port "http" {\n        static = 80\n      }\n    }\n\n    service {\n      name = "nginx"\n      port = "http"\n    }\n\n    task "nginx" {\n      driver = "docker"\n\n      config {\n        image = "nginx:alpine"\n        network_mode = "host"\n\n        volumes = [\n          "local:/etc/nginx/conf.d",\n        ]\n      }\n\n      template {\n        data = <<EOF\nupstream chrony-ntp {\n  {{ range service "chrony-ntp" }}\n    server {{ .Address }}:{{ .Port }};\n  {{ else }}server 127.0.0.1:65535; # force a 502\n  {{ end }}\n}\nupstream chrony-nts {\n  {{ range service "chrony-nts" }}\n    server {{ .Address }}:{{ .Port }};\n  {{ else }}server 127.0.0.1:65535; # force a 502\n  {{ end }}\n}\n\nserver {\n   listen 80;\n\n   location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n\nserver {\n   listen 123;\n\n   location / {\n      proxy_pass udp://chrony-ntp;\n   }\n}\n\nserver {\n   listen 4460;\n\n   location / {\n      proxy_pass udp://chrony-nts;\n   }\n}\nEOF\n\n        destination   = "local/load-balancer.conf"\n        change_mode   = "signal"\n        change_signal = "SIGHUP"\n      }\n\n      template {\n        data = <<EOH\n<!DOCTYPE html>\n<html>\n<head>\n    <title>NTS Server</title>\n</head>\n<body>\n    <h1>No hay mejor momento que ahora...</h1>\n</body>\n</html>\n        EOH\n\n        destination = "local/nginx/index.html"\n      }\n    }\n  }\n}\n')))}m.isMDXComponent=!0},61461:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"}}]);