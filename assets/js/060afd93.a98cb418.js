"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[8037],{446611:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var t=r(785893),i=r(603905);const s={sidebar_position:8060,slug:"2022-03-30",title:"INSTAR MQTT with RabbitMQ",authors:"mpolinowski",tags:["MQTT","Databases"],description:"Using RabbitMQ as MQTT Broker for your INSTAR IP Camera"},o=void 0,a={id:"Automation_and_Robotics/MQTT/2022-03-30--mqtt-with-rabbit-mq/index",title:"INSTAR MQTT with RabbitMQ",description:"Using RabbitMQ as MQTT Broker for your INSTAR IP Camera",source:"@site/docs/Automation_and_Robotics/MQTT/2022-03-30--mqtt-with-rabbit-mq/index.md",sourceDirName:"Automation_and_Robotics/MQTT/2022-03-30--mqtt-with-rabbit-mq",slug:"/Automation_and_Robotics/MQTT/2022-03-30--mqtt-with-rabbit-mq/2022-03-30",permalink:"/docs/Automation_and_Robotics/MQTT/2022-03-30--mqtt-with-rabbit-mq/2022-03-30",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Automation_and_Robotics/MQTT/2022-03-30--mqtt-with-rabbit-mq/index.md",tags:[{label:"MQTT",permalink:"/docs/tags/mqtt"},{label:"Databases",permalink:"/docs/tags/databases"}],version:"current",sidebarPosition:8060,frontMatter:{sidebar_position:8060,slug:"2022-03-30",title:"INSTAR MQTT with RabbitMQ",authors:"mpolinowski",tags:["MQTT","Databases"],description:"Using RabbitMQ as MQTT Broker for your INSTAR IP Camera"},sidebar:"tutorialSidebar",previous:{title:"INSTAR MQTTv5 with Python - Client Connection",permalink:"/docs/Automation_and_Robotics/MQTT/2022-06-23-instar-mqtt-python-part-I/2022-06-23"},next:{title:"MQTT Message Server and Angular Frontend",permalink:"/docs/Automation_and_Robotics/MQTT/2022-03-28--mqtt-message-server/2022-03-28"}},c={},l=[{value:"Docker Compose Build",id:"docker-compose-build",level:2},{value:"RabbitMQ Configuration",id:"rabbitmq-configuration",level:3},{value:"config/login.env",id:"configloginenv",level:4},{value:"MQTT Broker Configuration",id:"mqtt-broker-configuration",level:3},{value:"Build",id:"build",level:3},{value:"Adding Encryption",id:"adding-encryption",level:2},{value:"config/advanced.config",id:"configadvancedconfig",level:2},{value:"Start the Container",id:"start-the-container",level:2}];function m(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.ah)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Guangzhou, China",src:r(144472).Z+"",width:"1500",height:"583"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#docker-compose-build",children:"Docker Compose Build"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#rabbitmq-configuration",children:"RabbitMQ Configuration"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#configloginenv",children:"config/login.env"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#mqtt-broker-configuration",children:"MQTT Broker Configuration"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#build",children:"Build"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#adding-encryption",children:"Adding Encryption"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#configadvancedconfig",children:"config/advanced.config"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#start-the-container",children:"Start the Container"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Installing RabbitMQ with ",(0,t.jsx)(n.a,{href:"https://www.rabbitmq.com/mqtt.html",children:"MQTT"})," and ",(0,t.jsx)(n.a,{href:"https://www.rabbitmq.com/web-mqtt.html",children:"MQTT over Websocket"})," support using Docker. Using the ",(0,t.jsx)(n.a,{href:"https://github.com/mpolinowski/tls-gen",children:"TLS Generator"})," to generate a valid CA certificate for the TLS encryption."]}),"\n",(0,t.jsx)(n.h2,{id:"docker-compose-build",children:"Docker Compose Build"}),"\n",(0,t.jsxs)(n.p,{children:["Start by creating the following environment files that will set the ",(0,t.jsx)(n.a,{href:"https://hub.docker.com/_/rabbitmq?tab=tags",children:"RabbitMQ Image"})," version and the default user that can be used to login to the RabbitMQ Management Interface as well as the MQTT broker."]}),"\n",(0,t.jsx)(n.h3,{id:"rabbitmq-configuration",children:"RabbitMQ Configuration"}),"\n",(0,t.jsx)(n.h4,{id:"configloginenv",children:"config/login.env"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-conf",children:"RABBITMQ_DEFAULT_USER=admin\r\nRABBITMQ_DEFAULT_PASS=instar\n"})}),"\n",(0,t.jsx)(n.h3,{id:"mqtt-broker-configuration",children:"MQTT Broker Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["The configuration below is part of the default ",(0,t.jsx)(n.a,{href:"#configrabbitmqconf",children:"config/rabbitmq.conf"})," - the latest example configuration file can be ",(0,t.jsx)(n.a,{href:"https://raw.githubusercontent.com/rabbitmq/rabbitmq-server/main/deps/rabbit/docs/rabbitmq.conf.example",children:"found here"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-conf",children:"# =======================================\r\n# MQTT section\r\n# =======================================\r\n\r\n## TCP listener settings.\r\n##\r\n# mqtt.listeners.tcp.1 = 127.0.0.1:61613\r\n# mqtt.listeners.tcp.2 = ::1:61613\r\nmqtt.listeners.tcp.1 = 0.0.0.0:1883\r\n\r\n## TCP listener options (as per the broker configuration).\r\n##\r\nmqtt.tcp_listen_options.backlog = 4096  \r\nmqtt.tcp_listen_options.recbuf  = 131072\r\nmqtt.tcp_listen_options.sndbuf  = 131072\r\n#\r\nmqtt.tcp_listen_options.keepalive = true\r\nmqtt.tcp_listen_options.nodelay   = true\r\n#\r\nmqtt.tcp_listen_options.exit_on_close = true\r\nmqtt.tcp_listen_options.send_timeout  = 120000\r\n\r\n## TLS listener settings\r\n## ## See https://rabbitmq.com/mqtt.html and https://rabbitmq.com/ssl.html for details.\r\n#\r\n# mqtt.listeners.ssl.default = 8883\r\n#\r\n# ssl_options.cacertfile = /path/to/tls/ca_certificate_bundle.pem\r\n# ssl_options.certfile   = /path/to/tls/server_certificate.pem\r\n# ssl_options.keyfile    = /path/to/tls/server_key.pem\r\n# ssl_options.verify     = verify_peer\r\n# ssl_options.fail_if_no_peer_cert  = true\r\n#\r\n\r\n\r\n## Number of Erlang processes that will accept connections for the TCP\r\n## and TLS listeners.\r\n##\r\nmqtt.num_acceptors.tcp = 10\r\nmqtt.num_acceptors.ssl = 10\r\n\r\n## Whether or not to enable proxy protocol support.\r\n## Once enabled, clients cannot directly connect to the broker\r\n## anymore. They must connect through a load balancer that sends the\r\n## proxy protocol header to the broker at connection time.\r\n## This setting applies only to STOMP clients, other protocols\r\n## like STOMP or AMQP have their own setting to enable proxy protocol.\r\n## See the plugins or broker documentation for more information.\r\n##\r\n# mqtt.proxy_protocol = false\r\n\r\n## Set the default user name and password used for anonymous connections (when client\r\n## provides no credentials). Anonymous connections are highly discouraged!\r\n##\r\nmqtt.default_user = admin\r\nmqtt.default_pass = instar\r\n\r\n## Enable anonymous connections. If this is set to false, clients MUST provide\r\n## credentials in order to connect. See also the mqtt.default_user/mqtt.default_pass\r\n## keys. Anonymous connections are highly discouraged!\r\n##\r\nmqtt.allow_anonymous = false\r\n\r\n## If you have multiple vhosts, specify the one to which the\r\n## adapter connects.\r\n##\r\n# mqtt.vhost = /\r\n\r\n## Specify the exchange to which messages from MQTT clients are published.\r\n##\r\n# mqtt.exchange = amq.topic\r\n\r\n## Specify TTL (time to live) to control the lifetime of non-clean sessions.\r\n##\r\nmqtt.subscription_ttl = 1800000\r\n\r\n## Set the prefetch count (governing the maximum number of unacknowledged\r\n## messages that will be delivered).\r\n##\r\nmqtt.prefetch = 10\r\n##\r\n## Sets the durable queue type to be used for QoS 1 subscriptions.\r\n##\r\n## Supported types are:\r\n## \r\n## * classic\r\n## * quorum\r\n##\r\n## IMPORTANT: changing this setting requires all existing queues used by\r\n## the MQTT plugin to be DELETED or clients will fail to subscribe.\r\n## So this setting should be used for new clusters.\r\n##\r\nmqtt.durable_queue_type = classic\r\n#\r\n# =======================================\r\n# MQTT over WS section\r\n# =======================================\r\nweb_mqtt.tcp.port = 9001\r\n# web_mqtt.ssl.port       = 15676\r\n# web_mqtt.ssl.backlog    = 1024\r\n# web_mqtt.ssl.cacertfile = /path/to/ca_certificate.pem\r\n# web_mqtt.ssl.certfile   = /path/to/server_certificate.pem\r\n# web_mqtt.ssl.keyfile    = /path/to/server_key.pem\r\n# needed when private key has a passphrase\r\n# web_mqtt.ssl.password   = changeme\r\n# web_mqtt.ssl.port       = 15676\r\n# web_mqtt.ssl.backlog    = 1024\r\n# web_mqtt.ssl.certfile   = /path/to/server_certificate.pem\r\n# web_mqtt.ssl.keyfile    = /path/to/server_key.pem\r\n# web_mqtt.ssl.cacertfile = /path/to/ca_certificate_bundle.pem\r\n# web_mqtt.ssl.password   = changeme\r\n\r\n# web_mqtt.ssl.honor_cipher_order   = true\r\n# web_mqtt.ssl.honor_ecc_order      = true\r\n# web_mqtt.ssl.client_renegotiation = false\r\n# web_mqtt.ssl.secure_renegotiate   = true\r\n\r\n# web_mqtt.ssl.versions.1 = tlsv1.2\r\n# web_mqtt.ssl.versions.2 = tlsv1.1\r\n# web_mqtt.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384\r\n# web_mqtt.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384\r\n# web_mqtt.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384\r\n# web_mqtt.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384\r\n# web_mqtt.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384\r\n# web_mqtt.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384\r\n# web_mqtt.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384\r\n# web_mqtt.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384\r\n# web_mqtt.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384\r\n# web_mqtt.proxy_protocol = true\r\n#\r\n##  Cowboy HTTP\r\n# connection inactivity timeout\r\nweb_mqtt.cowboy_opts.idle_timeout = 60000\r\n# max number of pending requests allowed on a connection\r\nweb_mqtt.cowboy_opts.max_keepalive = 200\r\n# max number of headers in a request\r\nweb_mqtt.cowboy_opts.max_headers   = 100\r\n# max number of empty lines before request body\r\nweb_mqtt.cowboy_opts.max_empty_lines = 5\r\n# max request line length allowed in requests\r\nweb_mqtt.cowboy_opts.max_request_line_length = 8000\r\n\r\n# WebSocket traffic compression is enabled by default\r\nweb_mqtt.ws_opts.compress = true\r\n# WebSocket connection inactivity timeout\r\nweb_mqtt.ws_opts.idle_timeout = 60000\r\nweb_mqtt.ws_opts.max_frame_size = 50000\n"})}),"\n",(0,t.jsx)(n.h3,{id:"build",children:"Build"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"docker-compose.yml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:'version: "3.8"\r\nservices:\r\n  rabbitmq:\r\n    image: rabbitmq:management-alpine\r\n    container_name: rabbitmq\r\n    restart: unless-stopped\r\n    build:\r\n      context: docker/\r\n    ports:\r\n      - "1883:1883"\r\n      - "5672:5672"\r\n      - "8080:15672"\r\n      - "1885:1885"\r\n    command: "/bin/bash -c \\"rabbitmq-plugins enable --offline rabbitmq_mqtt rabbitmq_web_mqtt rabbitmq_amqp1_0; rabbitmq-server\\""\r\n    env_file:\r\n      - config/login.env\r\n    volumes:\r\n      - type: bind\r\n        source: ./config/rabbitmq.conf\r\n        target: /etc/rabbitmq/rabbitmq.conf\r\n        read_only: true\r\n      - type: bind\r\n        source: ./config/advanced.config\r\n        target: /etc/rabbitmq/advanced.config\r\n        read_only: true\r\n    networks:\r\n      brokernet:\r\n        ipv4_address: 172.16.238.101\r\n\r\nnetworks:\r\n  brokernet:\r\n    driver: bridge\r\n    driver_opts:\r\n      com.docker.network.enable_ipv6: "false"\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.16.238.0/24\n'})}),"\n",(0,t.jsxs)(n.p,{children:["First run the build command ",(0,t.jsx)(n.code,{children:"docker-compose build"})," the prepare the Docker image based on the ",(0,t.jsx)(n.code,{children:"rabbitmq/Dockerfile"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"FROM rabbitmq:management-alpine\r\nRUN rabbitmq-plugins enable --offline rabbitmq_mqtt rabbitmq_web_mqtt rabbitmq_amqp1_0\n"})}),"\n",(0,t.jsx)(n.h2,{id:"adding-encryption",children:"Adding Encryption"}),"\n",(0,t.jsx)(n.p,{children:"Generate the certificates:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/mpolinowski/tls-gen\r\ncd tls-gen/basic\r\nmake PASSWORD=<your_password_here>\r\nmake verify\r\nmake info\r\nls -l ./resultcd result\r\nopenssl rsa -in client_key.pem -out client_key_unencrypted.pem\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"ca_certificate.pem\r\nca_key.pem\r\nclient_certificate.pem\r\nclient_key.p12\r\nclient_key.pem\r\nclient_key_unencrypted.pem\r\nserver_certificate.pem\r\nserver_key.p12\r\nserver_key.pem\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Add them to ",(0,t.jsx)(n.code,{children:"rabbitmq.conf"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"listeners.ssl.default = 5671\r\nmqtt.listeners.tcp = none\r\nmqtt.listeners.ssl.default = 8883ssl_options.cacertfile = /etc/rabbitmq/cert/ca_certificate.pem\r\nssl_options.certfile   = /etc/rabbitmq/cert/server_certificate.pem\r\nssl_options.keyfile    = /etc/rabbitmq/cert/server_key.pem\r\nssl_options.password   = <your_password_here>\r\nssl_options.verify     = verify_peer\r\nssl_options.fail_if_no_peer_cert = true\r\nssl_options.versions.1 = tlsv1.3\r\nssl_options.versions.2 = tlsv1.2\r\nssl_options.versions.3 = tlsv1.1\n"})}),"\n",(0,t.jsxs)(n.p,{children:["And mount the cert folder into your container ",(0,t.jsx)(n.code,{children:"Dockerfile"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"COPY ./cert/ /etc/rabbitmq/cert\r\nRUN chown -R rabbitmq:rabbitmq /etc/rabbitmq/cert\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configadvancedconfig",children:"config/advanced.config"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'[\r\n\r\n\r\n %% ----------------------------------------------------------------------------\r\n %% Advanced Erlang Networking/Clustering Options.\r\n %%\r\n %% See https://www.rabbitmq.com/clustering.html for details\r\n %% ----------------------------------------------------------------------------\r\n %% Sets the net_kernel tick time.\r\n %% Please see http://erlang.org/doc/man/kernel_app.html and\r\n %% https://www.rabbitmq.com/nettick.html for further details.\r\n %%\r\n %% {kernel, [{net_ticktime, 60}]},\r\n %% ----------------------------------------------------------------------------\r\n %% RabbitMQ Shovel Plugin\r\n %%\r\n %% See https://www.rabbitmq.com/shovel.html for details\r\n %% ----------------------------------------------------------------------------\r\n\r\n {rabbitmq_shovel,\r\n  [{shovels,\r\n    [%% A named shovel worker.\r\n     %% {my_first_shovel,\r\n     %%  [\r\n\r\n     %% List the source broker(s) from which to consume.\r\n     %%\r\n     %%   {sources,\r\n     %%    [%% URI(s) and pre-declarations for all source broker(s).\r\n     %%     {brokers, ["amqp://user:password@host.domain/my_vhost"]},\r\n     %%     {declarations, []}\r\n     %%    ]},\r\n\r\n     %% List the destination broker(s) to publish to.\r\n     %%   {destinations,\r\n     %%    [%% A singular version of the \'brokers\' element.\r\n     %%     {broker, "amqp://"},\r\n     %%     {declarations, []}\r\n     %%    ]},\r\n\r\n     %% Name of the queue to shovel messages from.\r\n     %%\r\n     %% {queue, <<"your-queue-name-goes-here">>},\r\n\r\n     %% Optional prefetch count.\r\n     %%\r\n     %% {prefetch_count, 10},\r\n\r\n     %% when to acknowledge messages:\r\n     %% - no_ack: never (auto)\r\n     %% - on_publish: after each message is republished\r\n     %% - on_confirm: when the destination broker confirms receipt\r\n     %%\r\n     %% {ack_mode, on_confirm},\r\n\r\n     %% Overwrite fields of the outbound basic.publish.\r\n     %%\r\n     %% {publish_fields, [{exchange,    <<"my_exchange">>},\r\n     %%                   {routing_key, <<"from_shovel">>}]},\r\n\r\n     %% Static list of basic.properties to set on re-publication.\r\n     %%\r\n     %% {publish_properties, [{delivery_mode, 2}]},\r\n\r\n     %% The number of seconds to wait before attempting to\r\n     %% reconnect in the event of a connection failure.\r\n     %%\r\n     %% {reconnect_delay, 2.5}\r\n\r\n     %% ]} %% End of my_first_shovel\r\n    ]}\r\n   %% Rather than specifying some values per-shovel, you can specify\r\n   %% them for all shovels here.\r\n   %%\r\n   %% {defaults, [{prefetch_count,     0},\r\n   %%             {ack_mode,           on_confirm},\r\n   %%             {publish_fields,     []},\r\n   %%             {publish_properties, [{delivery_mode, 2}]},\r\n   %%             {reconnect_delay,    2.5}]}\r\n  ]},\r\n\r\n  {rabbitmq_auth_backend_ldap, [\r\n    %%\r\n    %% Authorisation\r\n    %% =============\r\n    %%\r\n\r\n    %% The LDAP plugin can perform a variety of queries against your\r\n    %% LDAP server to determine questions of authorization. See\r\n    %% https://www.rabbitmq.com/ldap.html#authorization for more\r\n    %% information.\r\n\r\n    %% Set the query to use when determining vhost access\r\n    %%\r\n    %% {vhost_access_query, {in_group,\r\n    %%                       "ou=${vhost}-users,ou=vhosts,dc=example,dc=com"}},\r\n\r\n    %% Set the query to use when determining resource (e.g., queue) access\r\n    %%\r\n    %% {resource_access_query, {constant, true}},\r\n\r\n    %% Set queries to determine which tags a user has\r\n    %%\r\n    %% {tag_queries, []}\r\n  ]}\r\n].\n'})}),"\n",(0,t.jsx)(n.h2,{id:"start-the-container",children:"Start the Container"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker-compose up\n"})}),"\n",(0,t.jsx)(n.p,{children:"And login with the default login defined above:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"INSTAR MQTT with RabbitMQ",src:r(525652).Z+"",width:"1090",height:"214"})}),"\n",(0,t.jsxs)(n.p,{children:["I recommend connecting the ",(0,t.jsx)(n.a,{href:"https://mqtt-explorer.com/",children:"MQTT Explorer"})," for debugging:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"INSTAR MQTT with RabbitMQ",src:r(492863).Z+"",width:"1520",height:"737"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"INSTAR MQTT with RabbitMQ",src:r(84322).Z+"",width:"1281",height:"510"})}),"\n",(0,t.jsx)(n.p,{children:"Once the MQTT Explorer is connected copy the configuration over to your INSTAR IP camera and click to connect:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"INSTAR MQTT with RabbitMQ",src:r(453833).Z+"",width:"1091",height:"687"})}),"\n",(0,t.jsx)(n.p,{children:"Wait a few seconds for your camera state objects to be synced:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"INSTAR MQTT with RabbitMQ",src:r(600001).Z+"",width:"1306",height:"517"})})]})}function d(e={}){const{wrapper:n}={...(0,i.ah)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>l});var t=r(667294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),h=l(r),b=i,p=h["".concat(c,".").concat(b)]||h[b]||m[b]||s;return r?t.createElement(p,o(o({ref:n},d),{},{components:r})):t.createElement(p,o({ref:n},d))}));d.displayName="MDXCreateElement"},144472:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-8ced3c54d38a6194434c5e7d8e5c77ba.jpg"},525652:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/rabbitmq_mqtt_ws_01-2bfad7200606b71c99a5be4bf050e557.png"},492863:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/rabbitmq_mqtt_ws_02-e5ca28a1fe91f537b641869ca4fe7aa4.png"},84322:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/rabbitmq_mqtt_ws_03-a2b6b501f869c6709f0168ee8ff01a62.png"},453833:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/rabbitmq_mqtt_ws_04-fbf59209de626a86ea47c1858cdcac43.png"},600001:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/rabbitmq_mqtt_ws_05-55a54ff27df2202f934477892fb06826.png"}}]);