"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[51448],{323989:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var r=t(785893),a=t(603905);const s={sidebar_position:9080,slug:"2021-10-31",title:"Tesseract OCR on Arch Linux",authors:"mpolinowski",tags:["Machine Learning","Python"]},i=void 0,l={id:"IoT-and-Machine-Learning/ML/2021-10-31--tesseract_ocr_arch_linux/index",title:"Tesseract OCR on Arch Linux",description:"Victoria Harbour, Hongkong",source:"@site/docs/IoT-and-Machine-Learning/ML/2021-10-31--tesseract_ocr_arch_linux/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2021-10-31--tesseract_ocr_arch_linux",slug:"/IoT-and-Machine-Learning/ML/2021-10-31--tesseract_ocr_arch_linux/2021-10-31",permalink:"/docs/IoT-and-Machine-Learning/ML/2021-10-31--tesseract_ocr_arch_linux/2021-10-31",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2021-10-31--tesseract_ocr_arch_linux/index.md",tags:[{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Python",permalink:"/docs/tags/python"}],version:"current",sidebarPosition:9080,frontMatter:{sidebar_position:9080,slug:"2021-10-31",title:"Tesseract OCR on Arch Linux",authors:"mpolinowski",tags:["Machine Learning","Python"]},sidebar:"tutorialSidebar",previous:{title:"Introduction to Keras",permalink:"/docs/IoT-and-Machine-Learning/ML/2019-04-01--introduction-to-keras/2019-04-01"},next:{title:"Introduction to TensorFlow 2 Beta",permalink:"/docs/IoT-and-Machine-Learning/ML/2019-03-31--introduction-to-tensorflow-2-beta/2019-03-31"}},c={},o=[{value:"Project Setup",id:"project-setup",level:2},{value:"Loading Image files from Disk",id:"loading-image-files-from-disk",level:2},{value:"Text Extraction",id:"text-extraction",level:2},{value:"Data Preparation",id:"data-preparation",level:2},{value:"Drawing Bounding Box",id:"drawing-bounding-box",level:3},{value:"Import all Cards",id:"import-all-cards",level:2},{value:"Extract all Text",id:"extract-all-text",level:2},{value:"Write Extracted Text to File",id:"write-extracted-text-to-file",level:2},{value:"Labeling your Data",id:"labeling-your-data",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Victoria Harbour, Hongkong",src:t(914690).Z+"",width:"1500",height:"663"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2021-10-31--tesseract_ocr_arch_linux/2021-10-31",children:"Part I - Tesseract OCR on Arch Linux"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2021-11-01--spacy_natural_language_processing/2021-11-01",children:"Part II - spaCy NER on Arch Linux"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2021-11-02--spacy_ner_predictions/2021-11-02",children:"Part III - spaCy NER Predictions"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/tesseract-ocr/tesseract",children:"Tesseract"})," is an optical character recognition engine for various operating systems. It is free software, released under the Apache License. Originally developed by Hewlett-Packard as proprietary software in the 1980s, it was released as open source in 2005 and development has been sponsored by Google since 2006."]}),"\n",(0,r.jsx)(n.p,{children:"In 2006, Tesseract was considered one of the most accurate open-source OCR engines available."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#project-setup",children:"Project Setup"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#loading-image-files-from-disk",children:"Loading Image files from Disk"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#text-extraction",children:"Text Extraction"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#data-preparation",children:"Data Preparation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#drawing-bounding-box",children:"Drawing Bounding Box"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#import-all-cards",children:"Import all Cards"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#extract-all-text",children:"Extract all Text"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#write-extracted-text-to-file",children:"Write Extracted Text to File"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#labeling-your-data",children:"Labeling your Data"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"project-setup",children:"Project Setup"}),"\n",(0,r.jsx)(n.p,{children:"Make sure you have Python installed and added to PATH:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python --version\r\nPython 3.9.7\r\n\r\npip --version\r\npip 21.3.1\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create a work directory and set up a virtual environment:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir -p opt/Python/pyOCR\r\npython -m venv .env\r\nsource .env/bin/activate\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Create a file ",(0,r.jsx)(n.code,{children:"dependencies.txt"})," with all the necessary dependencies:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"numpy\r\npandas\r\nscipy\r\nmatplotlib\r\npillow\r\nopencv-python\r\nopencv-contrib-python\r\njupyter\n"})}),"\n",(0,r.jsx)(n.p,{children:"And install them via the Python package manager:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install -r dependencies.txt\n"})}),"\n",(0,r.jsx)(n.p,{children:"Install Tesseract globally with PACMAN:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pacman -Syu tesseract\r\n\r\nlooking for conflicting packages...\r\nPackages (2) leptonica-1.82.0-1  tesseract-4.1.1-7\n"})}),"\n",(0,r.jsx)(n.p,{children:"Verify that the installation was sucessful:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"tesseract -v\r\ntesseract 4.1.1\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/tesseract-ocr/tessdata",children:"Install the trainings data"})," you need depending on your language requirement - e.g. English:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo pacman -S tesseract-data-eng\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now we can add our last dependency - a libray that allows us to use Tesseract in our program:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install pytesseract\r\nSuccessfully installed Pillow-8.4.0 pytesseract-0.3.8\n"})}),"\n",(0,r.jsx)(n.p,{children:"I am going to use a Jupyter notebook to experiment with Tesseract:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"jupyter notebook\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Tesseract",src:t(363547).Z+"",width:"994",height:"329"})}),"\n",(0,r.jsx)(n.p,{children:"When you are bale to import all dependencies without getting an error message you are all set!"}),"\n",(0,r.jsx)(n.h2,{id:"loading-image-files-from-disk",children:"Loading Image files from Disk"}),"\n",(0,r.jsx)(n.p,{children:"I want to train a model that allows me to extract contact information from business cards. To get started you can download card templates:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Tesseract",src:t(642629).Z+"",width:"1161",height:"902"})}),"\n",(0,r.jsxs)(n.p,{children:["Download them to ",(0,r.jsx)(n.code,{children:"./images"})," and try to import them into your notebook using OpenCV and Pillow:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import numpy as np\r\nimport pandas as pd\r\nimport PIL as pl\r\nimport cv2 as cv\r\nimport pytesseract as ts\r\n\r\n# Pillow\r\n# Use the full path here\r\nimg_pl = pl.Image.open('/opt/Python/pyOCR/images/card_46.jpg')\r\nimg_pl\r\n\r\n# OpenCV\r\n# Use the full path here\r\nimg_cv = cv2.imread('/opt/Python/pyOCR/images/card_46.jpg')\r\ncv.startWindowThread()\r\ncv.imshow('Business Card', img_cv)\r\ncv.waitKey(0)\r\ncv.destoyAllWindows()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Pillow returns a Jpg image file, while OpenCV returns an array:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"type(img_pl) #PIL.JpegImagePlugin.JpegImageFile\r\n\r\ntype(img_cv) #numpy.ndarray\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["There seems to be an ",(0,r.jsx)(n.a,{href:"https://stackoverflow.com/questions/13734276/python-freezes-after-cv2-destroywindow",children:"issue with the OpenCV destroyAllWindows method under Linux"}),". I will exclude it for now and work with Pillow instead."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"text-extraction",children:"Text Extraction"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"text_pl = ts.image_to_string(img_pl)\r\nprint(text_pl)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Test your business cards and see which one are readable and which one are not. I downloaded quite a few that were too low in resolution and had to be discarded."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"data = ts.image_to_data(img_pl)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now that we can read the text we now have to write it into an data object to be able to work with it. The data is structured by ",(0,r.jsx)(n.code,{children:"\\n"})," and ",(0,r.jsx)(n.code,{children:"\\t"})," markers:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"'level\\tpage_num\\tblock_num\\tpar_num\\tline_num\\tword_num\\tleft\\ttop\\twidth\\theight\\tconf\\ttext\\n1\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t875\\t518\\t-1\\t\\n2\\t1\\t1\\t0\\t0\\t0\\t532\\t37\\t306\\t38\\t-1\\t\\n3\\t1\\t1\\t1\\t0\\t0\\t532\\t37\\t306\\t38\\t-1\\t\\n4\\t1\\t1\\t1\\t1 ...\n"})}),"\n",(0,r.jsx)(n.p,{children:"We can clean up this data with a map:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"dataList = list(map(lambda x: x.split('\\t'),data.split('\\n')))\n"})}),"\n",(0,r.jsx)(n.p,{children:"We can now wrap this data into a Pandas Dataframe:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"df = pd.DataFrame(dataList[1:],columns=dataList[0])\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"df.info()\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"<class 'pandas.core.frame.DataFrame'>\r\nRangeIndex: 56 entries, 0 to 55\r\nData columns (total 12 columns):\r\n #   Column     Non-Null Count  Dtype \r\n---  ------     --------------  ----- \r\n 0   level      56 non-null     object\r\n 1   page_num   55 non-null     object\r\n 2   block_num  55 non-null     object\r\n 3   par_num    55 non-null     object\r\n 4   line_num   55 non-null     object\r\n 5   word_num   55 non-null     object\r\n 6   left       55 non-null     object\r\n 7   top        55 non-null     object\r\n 8   width      55 non-null     object\r\n 9   height     55 non-null     object\r\n 10  conf       55 non-null     object\r\n 11  text       55 non-null     object\r\ndtypes: object(12)\r\nmemory usage: 5.4+ KB\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"})," the height column corresponds to the font size of your word. You can see a confidence drop when the size is too small."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"df.head(10)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Tesseract",src:t(644938).Z+"",width:"932",height:"514"})}),"\n",(0,r.jsx)(n.h2,{id:"data-preparation",children:"Data Preparation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"df.dropna(inplace=True) # Drop empty values and rows\r\ncol_int = ['level','page_num','block_num','par_num','line_num','word_num','left','top','width','height','conf']\r\ndf[col_int] = df[col_int].astype(int) # Change all columns with number values to type int\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"df.dtypes\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"level         int64\r\npage_num      int64\r\nblock_num     int64\r\npar_num       int64\r\nline_num      int64\r\nword_num      int64\r\nleft          int64\r\ntop           int64\r\nwidth         int64\r\nheight        int64\r\nconf          int64\r\ntext         object\r\ndtype: object\n"})}),"\n",(0,r.jsx)(n.h3,{id:"drawing-bounding-box",children:"Drawing Bounding Box"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"image = img_cv.copy()\r\nlevel = 'word'\r\nfor l,x,y,w,h,c,t in df[['level','left','top','width','height','conf','text']].values:\r\n    #print(l,x,y,w,h,c)\r\n    \r\n    if level == 'page':\r\n          if l == 1:\r\n                cv.rectangle(image,(x,y),(x+w,y+h),(0,0,0,),2)\r\n          else:\r\n            continue\r\n            \r\n    elif level == 'block':\r\n          if l == 2:\r\n                cv.rectangle(image,(x,y),(x+w,y+h),(255,0,0,),1)\r\n          else:\r\n            continue\r\n            \r\n    elif level == 'paragraph':\r\n          if l == 3:\r\n                cv.rectangle(image,(x,y),(x+w,y+h),(0,255,0,),1)\r\n          else:\r\n            continue\r\n            \r\n    elif level == 'line':\r\n          if l == 4:\r\n                cv.rectangle(image,(x,y),(x+w,y+h),(255,0,51,),1)\r\n          else:\r\n            continue\r\n            \r\n    elif level == 'word':\r\n          if l == 5:\r\n                cv.rectangle(image,(x,y),(x+w,y+h),(0,0,255,),1)\r\n                cv.putText(image,t,(x,y),cv.FONT_HERSHEY_COMPLEX_SMALL,1,(255,255,255),1)\r\n          else:\r\n            continue\r\n                             \r\ncv.imshow(\"bounding box\",image)\r\ncv.waitKey(0)\r\ncv.destoyAllWindows()\r\ncv.waitKey(1)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Tesseract",src:t(664915).Z+"",width:"952",height:"727"})}),"\n",(0,r.jsx)(n.h2,{id:"import-all-cards",children:"Import all Cards"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import numpy as np\r\nimport pandas as pd\r\nimport cv2 as cv\r\nimport pytesseract as ts\r\n\r\nimport os\r\nfrom glob import glob\r\nfrom tqdm import tqdm\r\n\r\nimport warnings\r\nwarnings.filterwarnings('ignore')\r\n\r\nimgPaths = glob('/opt/Python/pyOCR/images/*.jpg')\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Try ",(0,r.jsx)(n.code,{children:"print(imgPaths)"})," to see if your images are found - note that I had to use the absolute path to my images folder here."]}),"\n",(0,r.jsx)(n.p,{children:"Extract the filename:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"imgPath = imgPaths[0]\r\n_, filename = os.path.split(imgPath)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Run ",(0,r.jsx)(n.code,{children:"print(filename)"})," - now it only returns the image name instead of the entire path."]}),"\n",(0,r.jsx)(n.h2,{id:"extract-all-text",children:"Extract all Text"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"image = cv.imread(imgPath)\r\ndata = ts.image_to_data(image)\r\n\r\ndataList = list(map(lambda x: x.split('\\t'),data.split('\\n')))\r\ndf = pd.DataFrame(dataList[1:], columns=dataList[0])\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Print the value of ",(0,r.jsx)(n.code,{children:"df"})," to see if your image was sucessfully read."]}),"\n",(0,r.jsxs)(n.p,{children:["Now we can filter for text (",(0,r.jsx)(n.code,{children:"level=5"}),") that has a suitable confidence value (e.g. ",(0,r.jsx)(n.strong,{children:">30%"}),"):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"df.dropna(inplace=True)\r\ndf['conf'] = df['conf'].astype(int)\r\ntextData = df.query('conf >= 30')\r\n\r\nbusinessCard = pd.DataFrame()\r\nbusinessCard['text'] = textData['text']\r\nbusinessCard['id'] = filename\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Print out ",(0,r.jsx)(n.code,{children:"businessCard"})," and you will see all the text that was discovered on your ",(0,r.jsx)(n.strong,{children:"first (index 0) business card"})," that had a confidence level of over ",(0,r.jsx)(n.strong,{children:"30%"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Now all we have to do is to take this code and run a loop over it to capture all images inside the directory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"allBusinessCards = pd.DataFrame(columns=['id', 'text'])\r\n\r\nfor imgPath in tqdm(imgPaths,desc=\"Business Card\"):\r\n\r\n    # Get Filenames\r\n    _, filename = os.path.split(imgPath)\r\n    # Extract Data\r\n    image = cv.imread(imgPath)\r\n    data = ts.image_to_data(image)\r\n    # Write Data to Frame\r\n    dataList = list(map(lambda x: x.split('\\t'),data.split('\\n')))\r\n    df = pd.DataFrame(dataList[1:], columns=dataList[0])\r\n    # Drop Everything that is not useful\r\n    df.dropna(inplace=True)\r\n    df['conf'] = df['conf'].astype(int)\r\n    textData = df.query('conf >= 30')\r\n    # Define a Business Card Entity\r\n    businessCard = pd.DataFrame()\r\n    businessCard['text'] = textData['text']\r\n    businessCard['id'] = filename\r\n    # Add Card to All Cards\r\n    allBusinessCards = pd.concat((allBusinessCards,businessCard))\n"})}),"\n",(0,r.jsx)(n.h2,{id:"write-extracted-text-to-file",children:"Write Extracted Text to File"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"allBusinessCards.to_csv('businessCards.csv', index=False)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The data will be written to ",(0,r.jsx)(n.code,{children:"./src/businessCards.csv"})," for further processing."]}),"\n",(0,r.jsx)(n.h2,{id:"labeling-your-data",children:"Labeling your Data"}),"\n",(0,r.jsx)(n.p,{children:"Mark the start and end of each word of importance:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{}),(0,r.jsx)(n.th,{})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"B"})}),(0,r.jsx)(n.td,{children:"Beginning"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"I"})}),(0,r.jsx)(n.td,{children:"Inside"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"O"})}),(0,r.jsx)(n.td,{children:"Outside"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"And define the entities you want to search for:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{}),(0,r.jsx)(n.th,{})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"NAME"})}),(0,r.jsx)(n.td,{children:"Name"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"DES"})}),(0,r.jsx)(n.td,{children:"Designation"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"ORG"})}),(0,r.jsx)(n.td,{children:"Organisation"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"PHONE"})}),(0,r.jsx)(n.td,{children:"Phone Number"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"EMAIL"})}),(0,r.jsx)(n.td,{children:"Email Address"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"WEB"})}),(0,r.jsx)(n.td,{children:"Website"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Tesseract",src:t(293358).Z+"",width:"942",height:"560"})})]})}function h(e={}){const{wrapper:n}={...(0,a.ah)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},603905:(e,n,t)=>{t.d(n,{ah:()=>o});var r=t(667294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),o=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),p=o(t),x=a,u=p["".concat(c,".").concat(x)]||p[x]||d[x]||s;return t?r.createElement(u,i(i({ref:n},h),{},{components:t})):r.createElement(u,i({ref:n},h))}));h.displayName="MDXCreateElement"},363547:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/Tesseract_01-aaa50dea5b1d674a13d5d7ab1c1e5886.png"},642629:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/Tesseract_02-1bcd79edbbed3742dde953cd039b3eb3.png"},644938:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/Tesseract_03-29b7a1ddc04cfe7529784643fe5c92df.png"},664915:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/Tesseract_04-6d261271a3b0bc723f4989b427f22d23.png"},293358:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/Tesseract_05-6f0fdccac87f9c4cd4cbf66bf2a48083.png"},914690:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-4f747fa38245d3c618169ab90d8c3f77.jpg"}}]);