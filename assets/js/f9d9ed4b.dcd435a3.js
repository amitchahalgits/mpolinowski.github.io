"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[54907],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),b=c(n),u=o,d=b["".concat(l,".").concat(u)]||b[u]||p[u]||a;return n?r.createElement(d,i(i({ref:t},m),{},{components:n})):r.createElement(d,i({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=b;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},79192:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={sidebar_position:8060,slug:"2022-03-30",title:"INSTAR MQTT with RabbitMQ",authors:"mpolinowski",tags:["MQTT","Databases"],description:"Using RabbitMQ as MQTT Broker for your INSTAR IP Camera"},i=void 0,s={unversionedId:"IoT-and-Machine-Learning/MQTT/2022-03-30--mqtt-with-rabbit-mq/index",id:"IoT-and-Machine-Learning/MQTT/2022-03-30--mqtt-with-rabbit-mq/index",title:"INSTAR MQTT with RabbitMQ",description:"Using RabbitMQ as MQTT Broker for your INSTAR IP Camera",source:"@site/docs/IoT-and-Machine-Learning/MQTT/2022-03-30--mqtt-with-rabbit-mq/index.md",sourceDirName:"IoT-and-Machine-Learning/MQTT/2022-03-30--mqtt-with-rabbit-mq",slug:"/IoT-and-Machine-Learning/MQTT/2022-03-30--mqtt-with-rabbit-mq/2022-03-30",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-03-30--mqtt-with-rabbit-mq/2022-03-30",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/MQTT/2022-03-30--mqtt-with-rabbit-mq/index.md",tags:[{label:"MQTT",permalink:"/docs/tags/mqtt"},{label:"Databases",permalink:"/docs/tags/databases"}],version:"current",sidebarPosition:8060,frontMatter:{sidebar_position:8060,slug:"2022-03-30",title:"INSTAR MQTT with RabbitMQ",authors:"mpolinowski",tags:["MQTT","Databases"],description:"Using RabbitMQ as MQTT Broker for your INSTAR IP Camera"},sidebar:"tutorialSidebar",previous:{title:"INSTAR MQTTv5 with Python - Client Connection",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-06-23-instar-mqtt-python-part-I/2022-06-23"},next:{title:"MQTT Message Server and Angular Frontend",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-03-28--mqtt-message-server/2022-03-28"}},l={},c=[{value:"Docker Compose Build",id:"docker-compose-build",level:2},{value:"RabbitMQ Configuration",id:"rabbitmq-configuration",level:3},{value:"config/login.env",id:"configloginenv",level:4},{value:"MQTT Broker Configuration",id:"mqtt-broker-configuration",level:3},{value:"Build",id:"build",level:3},{value:"Adding Encryption",id:"adding-encryption",level:2},{value:"config/advanced.config",id:"configadvancedconfig",level:2},{value:"Start the Container",id:"start-the-container",level:2}],m={toc:c};function p(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Guangzhou, China",src:n(8378).Z,width:"1500",height:"583"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#docker-compose-build"},"Docker Compose Build"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#rabbitmq-configuration"},"RabbitMQ Configuration"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#configloginenv"},"config/login.env")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#mqtt-broker-configuration"},"MQTT Broker Configuration")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#build"},"Build")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#adding-encryption"},"Adding Encryption")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#configadvancedconfig"},"config/advanced.config")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#start-the-container"},"Start the Container"))),(0,o.kt)("p",null,"Installing RabbitMQ with ",(0,o.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com/mqtt.html"},"MQTT")," and ",(0,o.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com/web-mqtt.html"},"MQTT over Websocket")," support using Docker. Using the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/tls-gen"},"TLS Generator")," to generate a valid CA certificate for the TLS encryption."),(0,o.kt)("h2",{id:"docker-compose-build"},"Docker Compose Build"),(0,o.kt)("p",null,"Start by creating the following environment files that will set the ",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/rabbitmq?tab=tags"},"RabbitMQ Image")," version and the default user that can be used to login to the RabbitMQ Management Interface as well as the MQTT broker."),(0,o.kt)("h3",{id:"rabbitmq-configuration"},"RabbitMQ Configuration"),(0,o.kt)("h4",{id:"configloginenv"},"config/login.env"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-conf"},"RABBITMQ_DEFAULT_USER=admin\nRABBITMQ_DEFAULT_PASS=instar\n")),(0,o.kt)("h3",{id:"mqtt-broker-configuration"},"MQTT Broker Configuration"),(0,o.kt)("p",null,"The configuration below is part of the default ",(0,o.kt)("a",{parentName:"p",href:"#configrabbitmqconf"},"config/rabbitmq.conf")," - the latest example configuration file can be ",(0,o.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/rabbitmq/rabbitmq-server/main/deps/rabbit/docs/rabbitmq.conf.example"},"found here"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-conf"},"# =======================================\n# MQTT section\n# =======================================\n\n## TCP listener settings.\n##\n# mqtt.listeners.tcp.1 = 127.0.0.1:61613\n# mqtt.listeners.tcp.2 = ::1:61613\nmqtt.listeners.tcp.1 = 0.0.0.0:1883\n\n## TCP listener options (as per the broker configuration).\n##\nmqtt.tcp_listen_options.backlog = 4096  \nmqtt.tcp_listen_options.recbuf  = 131072\nmqtt.tcp_listen_options.sndbuf  = 131072\n#\nmqtt.tcp_listen_options.keepalive = true\nmqtt.tcp_listen_options.nodelay   = true\n#\nmqtt.tcp_listen_options.exit_on_close = true\nmqtt.tcp_listen_options.send_timeout  = 120000\n\n## TLS listener settings\n## ## See https://rabbitmq.com/mqtt.html and https://rabbitmq.com/ssl.html for details.\n#\n# mqtt.listeners.ssl.default = 8883\n#\n# ssl_options.cacertfile = /path/to/tls/ca_certificate_bundle.pem\n# ssl_options.certfile   = /path/to/tls/server_certificate.pem\n# ssl_options.keyfile    = /path/to/tls/server_key.pem\n# ssl_options.verify     = verify_peer\n# ssl_options.fail_if_no_peer_cert  = true\n#\n\n\n## Number of Erlang processes that will accept connections for the TCP\n## and TLS listeners.\n##\nmqtt.num_acceptors.tcp = 10\nmqtt.num_acceptors.ssl = 10\n\n## Whether or not to enable proxy protocol support.\n## Once enabled, clients cannot directly connect to the broker\n## anymore. They must connect through a load balancer that sends the\n## proxy protocol header to the broker at connection time.\n## This setting applies only to STOMP clients, other protocols\n## like STOMP or AMQP have their own setting to enable proxy protocol.\n## See the plugins or broker documentation for more information.\n##\n# mqtt.proxy_protocol = false\n\n## Set the default user name and password used for anonymous connections (when client\n## provides no credentials). Anonymous connections are highly discouraged!\n##\nmqtt.default_user = admin\nmqtt.default_pass = instar\n\n## Enable anonymous connections. If this is set to false, clients MUST provide\n## credentials in order to connect. See also the mqtt.default_user/mqtt.default_pass\n## keys. Anonymous connections are highly discouraged!\n##\nmqtt.allow_anonymous = false\n\n## If you have multiple vhosts, specify the one to which the\n## adapter connects.\n##\n# mqtt.vhost = /\n\n## Specify the exchange to which messages from MQTT clients are published.\n##\n# mqtt.exchange = amq.topic\n\n## Specify TTL (time to live) to control the lifetime of non-clean sessions.\n##\nmqtt.subscription_ttl = 1800000\n\n## Set the prefetch count (governing the maximum number of unacknowledged\n## messages that will be delivered).\n##\nmqtt.prefetch = 10\n##\n## Sets the durable queue type to be used for QoS 1 subscriptions.\n##\n## Supported types are:\n## \n## * classic\n## * quorum\n##\n## IMPORTANT: changing this setting requires all existing queues used by\n## the MQTT plugin to be DELETED or clients will fail to subscribe.\n## So this setting should be used for new clusters.\n##\nmqtt.durable_queue_type = classic\n#\n# =======================================\n# MQTT over WS section\n# =======================================\nweb_mqtt.tcp.port = 9001\n# web_mqtt.ssl.port       = 15676\n# web_mqtt.ssl.backlog    = 1024\n# web_mqtt.ssl.cacertfile = /path/to/ca_certificate.pem\n# web_mqtt.ssl.certfile   = /path/to/server_certificate.pem\n# web_mqtt.ssl.keyfile    = /path/to/server_key.pem\n# needed when private key has a passphrase\n# web_mqtt.ssl.password   = changeme\n# web_mqtt.ssl.port       = 15676\n# web_mqtt.ssl.backlog    = 1024\n# web_mqtt.ssl.certfile   = /path/to/server_certificate.pem\n# web_mqtt.ssl.keyfile    = /path/to/server_key.pem\n# web_mqtt.ssl.cacertfile = /path/to/ca_certificate_bundle.pem\n# web_mqtt.ssl.password   = changeme\n\n# web_mqtt.ssl.honor_cipher_order   = true\n# web_mqtt.ssl.honor_ecc_order      = true\n# web_mqtt.ssl.client_renegotiation = false\n# web_mqtt.ssl.secure_renegotiate   = true\n\n# web_mqtt.ssl.versions.1 = tlsv1.2\n# web_mqtt.ssl.versions.2 = tlsv1.1\n# web_mqtt.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384\n# web_mqtt.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384\n# web_mqtt.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384\n# web_mqtt.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384\n# web_mqtt.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384\n# web_mqtt.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384\n# web_mqtt.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384\n# web_mqtt.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384\n# web_mqtt.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384\n# web_mqtt.proxy_protocol = true\n#\n##  Cowboy HTTP\n# connection inactivity timeout\nweb_mqtt.cowboy_opts.idle_timeout = 60000\n# max number of pending requests allowed on a connection\nweb_mqtt.cowboy_opts.max_keepalive = 200\n# max number of headers in a request\nweb_mqtt.cowboy_opts.max_headers   = 100\n# max number of empty lines before request body\nweb_mqtt.cowboy_opts.max_empty_lines = 5\n# max request line length allowed in requests\nweb_mqtt.cowboy_opts.max_request_line_length = 8000\n\n# WebSocket traffic compression is enabled by default\nweb_mqtt.ws_opts.compress = true\n# WebSocket connection inactivity timeout\nweb_mqtt.ws_opts.idle_timeout = 60000\nweb_mqtt.ws_opts.max_frame_size = 50000\n")),(0,o.kt)("h3",{id:"build"},"Build"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3.8"\nservices:\n  rabbitmq:\n    image: rabbitmq:management-alpine\n    container_name: rabbitmq\n    restart: unless-stopped\n    build:\n      context: docker/\n    ports:\n      - "1883:1883"\n      - "5672:5672"\n      - "8080:15672"\n      - "1885:1885"\n    command: "/bin/bash -c \\"rabbitmq-plugins enable --offline rabbitmq_mqtt rabbitmq_web_mqtt rabbitmq_amqp1_0; rabbitmq-server\\""\n    env_file:\n      - config/login.env\n    volumes:\n      - type: bind\n        source: ./config/rabbitmq.conf\n        target: /etc/rabbitmq/rabbitmq.conf\n        read_only: true\n      - type: bind\n        source: ./config/advanced.config\n        target: /etc/rabbitmq/advanced.config\n        read_only: true\n    networks:\n      brokernet:\n        ipv4_address: 172.16.238.101\n\nnetworks:\n  brokernet:\n    driver: bridge\n    driver_opts:\n      com.docker.network.enable_ipv6: "false"\n    ipam:\n      driver: default\n      config:\n        - subnet: 172.16.238.0/24\n')),(0,o.kt)("p",null,"First run the build command ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose build")," the prepare the Docker image based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"rabbitmq/Dockerfile"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"FROM rabbitmq:management-alpine\nRUN rabbitmq-plugins enable --offline rabbitmq_mqtt rabbitmq_web_mqtt rabbitmq_amqp1_0\n")),(0,o.kt)("h2",{id:"adding-encryption"},"Adding Encryption"),(0,o.kt)("p",null,"Generate the certificates:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/mpolinowski/tls-gen\ncd tls-gen/basic\nmake PASSWORD=<your_password_here>\nmake verify\nmake info\nls -l ./resultcd result\nopenssl rsa -in client_key.pem -out client_key_unencrypted.pem\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ca_certificate.pem\nca_key.pem\nclient_certificate.pem\nclient_key.p12\nclient_key.pem\nclient_key_unencrypted.pem\nserver_certificate.pem\nserver_key.p12\nserver_key.pem\n")),(0,o.kt)("p",null,"Add them to ",(0,o.kt)("inlineCode",{parentName:"p"},"rabbitmq.conf"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"listeners.ssl.default = 5671\nmqtt.listeners.tcp = none\nmqtt.listeners.ssl.default = 8883ssl_options.cacertfile = /etc/rabbitmq/cert/ca_certificate.pem\nssl_options.certfile   = /etc/rabbitmq/cert/server_certificate.pem\nssl_options.keyfile    = /etc/rabbitmq/cert/server_key.pem\nssl_options.password   = <your_password_here>\nssl_options.verify     = verify_peer\nssl_options.fail_if_no_peer_cert = true\nssl_options.versions.1 = tlsv1.3\nssl_options.versions.2 = tlsv1.2\nssl_options.versions.3 = tlsv1.1\n")),(0,o.kt)("p",null,"And mount the cert folder into your container ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"COPY ./cert/ /etc/rabbitmq/cert\nRUN chown -R rabbitmq:rabbitmq /etc/rabbitmq/cert\n")),(0,o.kt)("h2",{id:"configadvancedconfig"},"config/advanced.config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n\n\n %% ----------------------------------------------------------------------------\n %% Advanced Erlang Networking/Clustering Options.\n %%\n %% See https://www.rabbitmq.com/clustering.html for details\n %% ----------------------------------------------------------------------------\n %% Sets the net_kernel tick time.\n %% Please see http://erlang.org/doc/man/kernel_app.html and\n %% https://www.rabbitmq.com/nettick.html for further details.\n %%\n %% {kernel, [{net_ticktime, 60}]},\n %% ----------------------------------------------------------------------------\n %% RabbitMQ Shovel Plugin\n %%\n %% See https://www.rabbitmq.com/shovel.html for details\n %% ----------------------------------------------------------------------------\n\n {rabbitmq_shovel,\n  [{shovels,\n    [%% A named shovel worker.\n     %% {my_first_shovel,\n     %%  [\n\n     %% List the source broker(s) from which to consume.\n     %%\n     %%   {sources,\n     %%    [%% URI(s) and pre-declarations for all source broker(s).\n     %%     {brokers, ["amqp://user:password@host.domain/my_vhost"]},\n     %%     {declarations, []}\n     %%    ]},\n\n     %% List the destination broker(s) to publish to.\n     %%   {destinations,\n     %%    [%% A singular version of the \'brokers\' element.\n     %%     {broker, "amqp://"},\n     %%     {declarations, []}\n     %%    ]},\n\n     %% Name of the queue to shovel messages from.\n     %%\n     %% {queue, <<"your-queue-name-goes-here">>},\n\n     %% Optional prefetch count.\n     %%\n     %% {prefetch_count, 10},\n\n     %% when to acknowledge messages:\n     %% - no_ack: never (auto)\n     %% - on_publish: after each message is republished\n     %% - on_confirm: when the destination broker confirms receipt\n     %%\n     %% {ack_mode, on_confirm},\n\n     %% Overwrite fields of the outbound basic.publish.\n     %%\n     %% {publish_fields, [{exchange,    <<"my_exchange">>},\n     %%                   {routing_key, <<"from_shovel">>}]},\n\n     %% Static list of basic.properties to set on re-publication.\n     %%\n     %% {publish_properties, [{delivery_mode, 2}]},\n\n     %% The number of seconds to wait before attempting to\n     %% reconnect in the event of a connection failure.\n     %%\n     %% {reconnect_delay, 2.5}\n\n     %% ]} %% End of my_first_shovel\n    ]}\n   %% Rather than specifying some values per-shovel, you can specify\n   %% them for all shovels here.\n   %%\n   %% {defaults, [{prefetch_count,     0},\n   %%             {ack_mode,           on_confirm},\n   %%             {publish_fields,     []},\n   %%             {publish_properties, [{delivery_mode, 2}]},\n   %%             {reconnect_delay,    2.5}]}\n  ]},\n\n  {rabbitmq_auth_backend_ldap, [\n    %%\n    %% Authorisation\n    %% =============\n    %%\n\n    %% The LDAP plugin can perform a variety of queries against your\n    %% LDAP server to determine questions of authorization. See\n    %% https://www.rabbitmq.com/ldap.html#authorization for more\n    %% information.\n\n    %% Set the query to use when determining vhost access\n    %%\n    %% {vhost_access_query, {in_group,\n    %%                       "ou=${vhost}-users,ou=vhosts,dc=example,dc=com"}},\n\n    %% Set the query to use when determining resource (e.g., queue) access\n    %%\n    %% {resource_access_query, {constant, true}},\n\n    %% Set queries to determine which tags a user has\n    %%\n    %% {tag_queries, []}\n  ]}\n].\n')),(0,o.kt)("h2",{id:"start-the-container"},"Start the Container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up\n")),(0,o.kt)("p",null,"And login with the default login defined above:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"INSTAR MQTT with RabbitMQ",src:n(36172).Z,width:"1090",height:"214"})),(0,o.kt)("p",null,"I recommend connecting the ",(0,o.kt)("a",{parentName:"p",href:"https://mqtt-explorer.com/"},"MQTT Explorer")," for debugging:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"INSTAR MQTT with RabbitMQ",src:n(64122).Z,width:"1520",height:"737"})),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"INSTAR MQTT with RabbitMQ",src:n(10232).Z,width:"1281",height:"510"})),(0,o.kt)("p",null,"Once the MQTT Explorer is connected copy the configuration over to your INSTAR IP camera and click to connect:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"INSTAR MQTT with RabbitMQ",src:n(20033).Z,width:"1091",height:"687"})),(0,o.kt)("p",null,"Wait a few seconds for your camera state objects to be synced:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"INSTAR MQTT with RabbitMQ",src:n(27452).Z,width:"1306",height:"517"})))}p.isMDXComponent=!0},8378:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-8ced3c54d38a6194434c5e7d8e5c77ba.jpg"},36172:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/rabbitmq_mqtt_ws_01-2bfad7200606b71c99a5be4bf050e557.png"},64122:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/rabbitmq_mqtt_ws_02-e5ca28a1fe91f537b641869ca4fe7aa4.png"},10232:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/rabbitmq_mqtt_ws_03-a2b6b501f869c6709f0168ee8ff01a62.png"},20033:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/rabbitmq_mqtt_ws_04-fbf59209de626a86ea47c1858cdcac43.png"},27452:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/rabbitmq_mqtt_ws_05-55a54ff27df2202f934477892fb06826.png"}}]);