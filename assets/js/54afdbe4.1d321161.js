"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[13028],{983358:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=i(474848),t=i(28453);const s={sidebar_position:8040,slug:"2022-11-11",title:"Building a NTP/S Timeserver Client in Go with Gitlab CI",authors:"mpolinowski",tags:["Go","NTS"],description:"A Go client that can interact with a key-secured Chrony NTS timeserver."},l="Build a NTP Timeserver Client in Go",o={id:"Development/Go/2022-11-11-go-nts-client-ci/index",title:"Building a NTP/S Timeserver Client in Go with Gitlab CI",description:"A Go client that can interact with a key-secured Chrony NTS timeserver.",source:"@site/docs/Development/Go/2022-11-11-go-nts-client-ci/index.md",sourceDirName:"Development/Go/2022-11-11-go-nts-client-ci",slug:"/Development/Go/2022-11-11-go-nts-client-ci/2022-11-11",permalink:"/docs/Development/Go/2022-11-11-go-nts-client-ci/2022-11-11",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Go/2022-11-11-go-nts-client-ci/index.md",tags:[{label:"Go",permalink:"/docs/tags/go"},{label:"NTS",permalink:"/docs/tags/nts"}],version:"current",sidebarPosition:8040,frontMatter:{sidebar_position:8040,slug:"2022-11-11",title:"Building a NTP/S Timeserver Client in Go with Gitlab CI",authors:"mpolinowski",tags:["Go","NTS"],description:"A Go client that can interact with a key-secured Chrony NTS timeserver."},sidebar:"tutorialSidebar",previous:{title:"Go WebAssembly",permalink:"/docs/Development/Go/2022-12-26-go-webassembly/2022-12-26"},next:{title:"Go OAuth2 Server",permalink:"/docs/Development/Go/2022-10-15-go-oauth2-server/2022-10-15"}},a={},c=[{value:"Test Build the Binary",id:"test-build-the-binary",level:2},{value:"Run the Binary",id:"run-the-binary",level:3},{value:"Use Gitlab CI to Build the Binary",id:"use-gitlab-ci-to-build-the-binary",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"build-a-ntp-timeserver-client-in-go",children:"Build a NTP Timeserver Client in Go"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Shenzhen, China",src:i(54428).A+"",width:"1500",height:"546"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#build-a-ntp-timeserver-client-in-go",children:"Build a NTP Timeserver Client in Go"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#test-build-the-binary",children:"Test Build the Binary"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#run-the-binary",children:"Run the Binary"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#use-gitlab-ci-to-build-the-binary",children:"Use Gitlab CI to Build the Binary"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["I used Docker to build a ",(0,r.jsx)(n.a,{href:"https://gitlab.com/hacklunch/ntsclient",children:"Go-based NTS Timeserver Server"})," by ",(0,r.jsx)(n.a,{href:"https://gitlab.com/hacklunch",children:"@hacklunch"})," and deployed the service using Hashicorp Nomad. Now I need to compile the binary for an ARM environment so that it can be used on an IoT device."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Related"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/Development/Go/2022-10-04-go-ntp-client/2022-10-04",children:"Build a NTP Timeserver Client in Go"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/Development/Go/2022-10-05-go-reducing-binary-size/2022-10-05",children:"Cross-compiling with Go"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/DevOps/GitOps/2022-11-10-go-gitlab-ci-pipeline/2022-11-10",children:"Go Gitlab CI Pipeline"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/DevOps/Hashicorp/2022-09-22--nomad-nts-timeserver/2022-09-22",children:"Secure Timeserver - Deploying a NTS Server using Hashicorp Nomad"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/mpolinowski/nomad-nts-chrony",children:"Chrony NTS with Hashicorp Nomad (Github Repo)"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"test-build-the-binary",children:"Test Build the Binary"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://gitlab.com/hacklunch/ntsclient",children:"Download the Source Code"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://go.dev/doc/install",children:"Install Go"})," (",(0,r.jsx)(n.code,{children:">= go version go1.19.1"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/upx/upx/releases",children:"Install UPX"})," (",(0,r.jsx)(n.code,{children:">= UPX 3.96"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Create and run ",(0,r.jsx)(n.code,{children:"build.sh"})," - will output ",(0,r.jsx)(n.code,{children:"amd64"}),", ",(0,r.jsx)(n.code,{children:"arm64"})," and ",(0,r.jsx)(n.code,{children:"arm"})," version. Use ",(0,r.jsx)(n.code,{children:"_upx"})," for production."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"build.sh"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'#!/usr/bin/bash\r\narchs=(amd64 arm64 arm)\r\n\r\nfor arch in ${archs[@]}\r\ndo\r\n        env GOOS=linux GOARCH=${arch} go build -ldflags "-s -w" -o build/ntsclient_${arch}\r\n        upx --ultra-brute -obuild/ntsclient_upx_${arch} build/ntsclient_${arch}\r\ndone\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"./build.sh\r\n\r\n                       Ultimate Packer for eXecutables\r\n                          Copyright (C) 1996 - 2020\r\nUPX git-d7ba31+ Markus Oberhumer, Laszlo Molnar & John Reiser   Jan 23rd 2020\r\n\r\n        File size         Ratio      Format      Name\r\n   --------------------   ------   -----------   -----------\r\n   5554176 ->   1734704   31.23%   linux/amd64   ntsclient_upx_amd64           \r\n\r\nPacked 1 file.\r\n\r\n        File size         Ratio      Format      Name\r\n   --------------------   ------   -----------   -----------\r\n   5242880 ->   1494584   28.51%   linux/arm64   ntsclient_upx_arm64           \r\n\r\nPacked 1 file.\r\n\r\n        File size         Ratio      Format      Name\r\n   --------------------   ------   -----------   -----------\r\n   5373952 ->   1443108   26.85%    linux/arm    ntsclient_upx_arm \n"})}),"\n",(0,r.jsx)(n.h3,{id:"run-the-binary",children:"Run the Binary"}),"\n",(0,r.jsx)(n.p,{children:"ntsclient does not output anything when querying and setting the time, unless something goes wrong (or debug output is turned on). An example configuration file looks like:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"ntsclient.toml"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:'# NTS Server\r\nserver="time.cloudflare.com"\r\n# Interval in seconds between queries\r\ninterval=1000\r\n\r\n# Alternative NTS Server\r\n\r\n# https://netnod.se\r\n#server="nts.ntp.se"\r\n\r\n# https://nts.time.nl/\r\n#server="nts.time.nl"\r\n\r\n# Test servers listed on https://docs.ntpsec.org/latest/NTS-QuickStart.html\r\n#server="ntp1.glypnod.com"\r\n#server="ntp2.glypnod.com"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"./ntsclient --config ./ntsclient.toml\r\nCould not set system time: operation not permitted\r\n\r\nsudo ./ntsclient --config ./ntsclient.toml\n"})}),"\n",(0,r.jsx)(n.p,{children:"To switch on the debug mode:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo ./ntsclient --config ./ntsclient.toml --debug\n"})}),"\n",(0,r.jsx)(n.h2,{id:"use-gitlab-ci-to-build-the-binary",children:"Use Gitlab CI to Build the Binary"}),"\n",(0,r.jsxs)(n.p,{children:["The following CI file generates the ARM version of the ",(0,r.jsx)(n.code,{children:"ntsclient"})," and stores it as an artifact to be used in a firmware build pipeline:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:".gitlab-ci.yml"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"image: golang:latest\r\n\r\nvariables:\r\n  REPO: my.gitlab.com\r\n  GROUP: firmware\r\n  PROJECT: ntsclient\r\n  ARCH: arm\r\n\r\nstages:\r\n - build\r\n\r\nbefore_script:\r\n  # Something strange to make Gitlab like Go\r\n  - mkdir -p $GOPATH/src/$REPO/$GROUP $GOPATH/src/_/builds\r\n  - cp -r $CI_PROJECT_DIR $GOPATH/src/$REPO/$GROUP/$PROJECT\r\n  - ln -s $GOPATH/src/$REPO/$GROUP $GOPATH/src/_/builds/$GROUP\r\n  # Use UPX to compress the binary after build\r\n  # I downloaded/un-tar'ed the latest release into the repo root dir\r\n  - cp ./upx-4.0.0-amd64_linux/upx /usr/bin/npx\r\n  - chmod +x /usr/bin/npx\r\n  # Make sure all Go build dependencies are available\r\n  - go get -v -d ./...\r\n\r\nbuild:\r\n  stage: build\r\n  script:\r\n    - env GOOS=linux GOARCH=$ARCH go build -ldflags \"-s -w\" -o ntsclient_src\r\n    - /usr/bin/npx --ultra-brute -ontsclient ntsclient_src\r\n  only:\r\n    - main\r\n  artifacts:\r\n    paths:\r\n      # Push the binary into your repo's build artifacts\r\n      - /builds/firmware/ntsclient/ntsclient\r\n    expire_in: 1 day\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},54428:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-0795219c47cded4f1a1480a5f18e4c60.jpg"},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var r=i(296540);const t={},s=r.createContext(t);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);