"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[77270],{148702:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var t=o(785893),i=o(603905);const s={sidebar_position:6060,slug:"2022-07-24",title:"Mosquitto Broker Docker Cross-Compile",authors:"mpolinowski",tags:["IoT"],image:"https://mpolinowski.github.io/img/search/mqtt.png",description:"In the previous article I compiled the Mosquitto broker on Arch Linux and was able to get it to work with Websocket support. The target system - an INSTAR IP camera - uses an ARM processor which means that I have to find a way to cross-compile a binary that I can run on that system"},r=void 0,a={id:"Automation_and_Robotics/MQTT/2022-07-24-mosquitto-broker-cross-compilation/index",title:"Mosquitto Broker Docker Cross-Compile",description:"In the previous article I compiled the Mosquitto broker on Arch Linux and was able to get it to work with Websocket support. The target system - an INSTAR IP camera - uses an ARM processor which means that I have to find a way to cross-compile a binary that I can run on that system",source:"@site/docs/Automation_and_Robotics/MQTT/2022-07-24-mosquitto-broker-cross-compilation/index.md",sourceDirName:"Automation_and_Robotics/MQTT/2022-07-24-mosquitto-broker-cross-compilation",slug:"/Automation_and_Robotics/MQTT/2022-07-24-mosquitto-broker-cross-compilation/2022-07-24",permalink:"/docs/Automation_and_Robotics/MQTT/2022-07-24-mosquitto-broker-cross-compilation/2022-07-24",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Automation_and_Robotics/MQTT/2022-07-24-mosquitto-broker-cross-compilation/index.md",tags:[{label:"IoT",permalink:"/docs/tags/io-t"}],version:"current",sidebarPosition:6060,frontMatter:{sidebar_position:6060,slug:"2022-07-24",title:"Mosquitto Broker Docker Cross-Compile",authors:"mpolinowski",tags:["IoT"],image:"https://mpolinowski.github.io/img/search/mqtt.png",description:"In the previous article I compiled the Mosquitto broker on Arch Linux and was able to get it to work with Websocket support. The target system - an INSTAR IP camera - uses an ARM processor which means that I have to find a way to cross-compile a binary that I can run on that system"},sidebar:"tutorialSidebar",previous:{title:"EMQX MQTT Broker with Docker",permalink:"/docs/Automation_and_Robotics/MQTT/2023-07-25-emqx-mqtt-broker-docker/2023-07-25"},next:{title:"Mosquitto Broker from Source",permalink:"/docs/Automation_and_Robotics/MQTT/2022-07-23-mosquitto-broker-compilation/2022-07-23"}},l={},c=[{value:"Preparation",id:"preparation",level:2},{value:"Compiling Mosquitto for ARM",id:"compiling-mosquitto-for-arm",level:2},{value:"Preparation",id:"preparation-1",level:3},{value:"Download the Source Code",id:"download-the-source-code",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Build",id:"build",level:3},{value:"Installation",id:"installation",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.ah)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Guangzhou, China",src:o(98053).Z+"",width:"2385",height:"962"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#preparation",children:"Preparation"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#compiling-mosquitto-for-arm",children:"Compiling Mosquitto for ARM"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#preparation-1",children:"Preparation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#download-the-source-code",children:"Download the Source Code"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#configuration",children:"Configuration"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#build",children:"Build"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#installation",children:"Installation"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In the previous article I compiled the Mosquitto broker on Arch Linux and was able to get it to work with Websocket support. The target system - an INSTAR IP camera - uses an ARM processor which means that I have to find a way to cross-compile a binary that I can run on that system:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"uname -m\narmv7l\n"})}),"\n",(0,t.jsx)(n.p,{children:"There are several guides on how to install special compilers on your system. But I would prefer to run the compiler inside a docker container instead."}),"\n",(0,t.jsx)(n.h2,{id:"preparation",children:"Preparation"}),"\n",(0,t.jsxs)(n.p,{children:["Download the ",(0,t.jsx)(n.a,{href:"https://github.com/dockcross/dockcross",children:"dockcross repository"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/dockcross/dockcross.git\ncd dockcross\n"})}),"\n",(0,t.jsx)(n.p,{children:"The repository offers containers for a variety of environments:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"android-arm                 linux-armv5-musl    linux-riscv32          README.md\nandroid-arm64               linux-armv5-uclibc  linux-riscv64          test\nandroid-x86                 linux-armv6         linux-s390x            tools\nandroid-x86_64              linux-armv6-lts     linux-x64              web-wasi\nbare-armv7emhf-nano_newlib  linux-armv6-musl    linux-x64-clang        web-wasm\ncommon                      linux-armv7         linux-x64-tinycc       windows-arm64\nCONTRIBUTING.md             linux-armv7a        linux-x86              windows-armv7\nDockerfile.in               linux-armv7a-lts    linux-x86_64-full      windows-shared-x64\nimagefiles                  linux-armv7l-musl   linux-xtensa-uclibc    windows-shared-x64-posix\nLICENSE                     linux-armv7-lts     Makefile               windows-shared-x86\nlinux-arm64                 linux-m68k-uclibc   manylinux2014-aarch64  windows-static-x64\nlinux-arm64-full            linux-mips          manylinux2014-x64      windows-static-x64-posix\nlinux-arm64-lts             linux-mipsel-lts    manylinux2014-x86      windows-static-x86\nlinux-arm64-musl            linux-mips-lts      manylinux_2_28-x64\nlinux-armv5                 linux-ppc64le       manylinux-common\n"})}),"\n",(0,t.jsx)(n.p,{children:"You are now supposed to just run the included scripts to download the correct docker image and run an compiler script inside the container:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker run --rm dockcross/linux-armv7l-musl > ./dockcross-linux-armv7l-musl\nchmod +x ./dockcross-linux-armv7l-musl\n./dockcross-linux-armv7l-musl bash -c '$CC test/C/hello.c -o hello_arm'\n"})}),"\n",(0,t.jsx)(n.p,{children:"The test C code is a simple hello world:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  printf("Hello cross-compilation world!\\n");\n  return 0;\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Running the command generates a binary inside the root dir that is ",(0,t.jsx)(n.em,{children:"ARM'ed"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"file hello_arm\nhello_arm: ELF 32-bit LSB pie executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-musl-armhf.so.1, not stripped\n"})}),"\n",(0,t.jsx)(n.h2,{id:"compiling-mosquitto-for-arm",children:"Compiling Mosquitto for ARM"}),"\n",(0,t.jsx)(n.p,{children:"Using an ARM platform to compile your binaries."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Platform used"}),": ",(0,t.jsx)(n.code,{children:"Linux kali-raspberry-pi 5.15.44-Re4son-v7+ #1 SMP Debian kali-pi (2022-07-03) armv7l"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"preparation-1",children:"Preparation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo apt-get update && apt-get upgrade\nsudo apt-get install build-essential quilt python-setuptools python3\nsudo apt-get install libssl-dev\nsudo apt-get install cmake\nsudo apt-get install libc-ares-dev\nsudo apt-get install uuid-dev\nsudo apt-get install daemon\nsudo apt-get install libwebsockets-dev\nsudo apt install libcjson1 libcjson-dev\nsudo apt autoremove\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo adduser mosquitto\n"})}),"\n",(0,t.jsx)(n.h3,{id:"download-the-source-code",children:"Download the Source Code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"wget https://mosquitto.org/files/source/mosquitto-2.0.15.tar.gz\ntar -xvf mosquitto-2.0.15.tar.gz\nrm -rf mosquitto-2.0.15.tar.gz\ncd ./mosquitto-2.0.15\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo nano config.mk\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-conf",children:"WITH_TLS:=yes\nWITH_WEBSOCKETS:=yes\nWITH_STATIC_LIBRARIES:=yes\nWITH_SHARED_LIBRARIES:=no\nWITH_BUNDLED_DEPS:=yes\nWITH_CJSON:=yes\nWITH_DOCS=no\n"})}),"\n",(0,t.jsx)(n.h3,{id:"build",children:"Build"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make\n"})}),"\n",(0,t.jsx)(n.p,{children:"The Build process now ran through without a hitch and returned a ARM'ed version of Mosquitto:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"file src/mosquitto\nsrc/mosquitto: ELF 32-bit LSB pie executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-armhf.so.3, BuildID[sha1]=43039f3446c03a8e22c3ca0c2378ca6bffa5ccd0, for GNU/Linux 3.2.0, with debug_info, not stripped\n"})}),"\n",(0,t.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"To install the broker run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo make install\n"})}),"\n",(0,t.jsx)(n.p,{children:"Configure the Broker with a default configuration file:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo nano /etc/mosquitto/mosquitto.conf\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-conf",children:"auto_id_prefix zeroid-\npersistent_client_expiration 1d\nqueue_qos0_messages true\nuser mosquitto\nlistener 1883\nprotocol mqtt\nlistener 1885\nprotocol websockets\nsocket_domain ipv4\nautosave_interval 7200\npersistence true\npersistence_file mosquitto.db\npersistence_location /etc/mosquitto\nlog_dest file /etc/mosquitto/mosquitto.log\nlog_type error\nlog_type warning\nlog_type notice\nlog_type information\nconnection_messages true\nlog_timestamp true\nlog_timestamp_format %Y-%m-%dT%H:%M:%S\nallow_anonymous false\npassword_file /etc/mosquitto/passwordfile\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now we need to add the ",(0,t.jsx)(n.code,{children:"passwordfile"})," defined above using the password tool:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo ./apps/mosquitto_passwd/mosquitto_passwd -H sha512-pbkdf2 -b -c /etc/mosquitto/passwordfile admin instar\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo touch /etc/mosquitto/mosquitto.log\nsudo touch /etc/mosquitto/mosquitto.db\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo chown mosquitto:mosquitto /etc/mosquitto\nsudo chown mosquitto:mosquitto /etc/mosquitto/*\nsudo chmod 777 /etc/mosquitto/*\n"})}),"\n",(0,t.jsx)(n.p,{children:"And now I should be able to execute the broker:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mosquitto -c /etc/mosquitto/mosquitto.conf\n"})}),"\n",(0,t.jsx)(n.p,{children:"./mosquitto -c /home/ipc/mosquitto.conf"})]})}function u(e={}){const{wrapper:n}={...(0,i.ah)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},603905:(e,n,o)=>{o.d(n,{ah:()=>c});var t=o(667294);function i(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function s(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function r(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?s(Object(o),!0).forEach((function(n){i(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function a(e,n){if(null==e)return{};var o,t,i=function(e,n){if(null==e)return{};var o,t,i={},s=Object.keys(e);for(t=0;t<s.length;t++)o=s[t],n.indexOf(o)>=0||(i[o]=e[o]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)o=s[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}var l=t.createContext({}),c=function(e){var n=t.useContext(l),o=n;return e&&(o="function"==typeof e?e(n):r(r({},n),e)),o},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var o=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),m=c(o),h=i,p=m["".concat(l,".").concat(h)]||m[h]||d[h]||s;return o?t.createElement(p,r(r({ref:n},u),{},{components:o})):t.createElement(p,r({ref:n},u))}));u.displayName="MDXCreateElement"},98053:(e,n,o)=>{o.d(n,{Z:()=>t});const t=o.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-4dda98a4eb3b498839926e0b6a5039aa.jpg"}}]);