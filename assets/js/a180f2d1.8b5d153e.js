"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[46548],{608590:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(474848),s=t(28453);const r={sidebar_position:3990,slug:"2022-11-15",title:"Hashicorp Nomad Secure & Balanced NTS Time Service",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"],description:"Using Nomad to deploy a secure time server."},a=void 0,i={id:"DevOps/Hashicorp/2022-11-15-hashicorp-nomad-balanced-nts/index",title:"Hashicorp Nomad Secure & Balanced NTS Time Service",description:"Using Nomad to deploy a secure time server.",source:"@site/docs/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-balanced-nts/index.md",sourceDirName:"DevOps/Hashicorp/2022-11-15-hashicorp-nomad-balanced-nts",slug:"/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-balanced-nts/2022-11-15",permalink:"/docs/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-balanced-nts/2022-11-15",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-balanced-nts/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Consul",permalink:"/docs/tags/consul"},{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:3990,frontMatter:{sidebar_position:3990,slug:"2022-11-15",title:"Hashicorp Nomad Secure & Balanced NTS Time Service",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"],description:"Using Nomad to deploy a secure time server."},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Nomad for NGINX Load-balancing",permalink:"/docs/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-nginx-load-balancing/2022-11-15"},next:{title:"Hashicorp Nomad to Renew your TLS Certificates",permalink:"/docs/DevOps/Hashicorp/2022-11-12-hashicorp-nomad-certbot-renewal/2022-11-12"}},c={},l=[{value:"Building the Timeserver",id:"building-the-timeserver",level:2},{value:"Docker-Compose",id:"docker-compose",level:3},{value:"Nomad Job",id:"nomad-job",level:2},{value:"Complete Job File",id:"complete-job-file",level:3},{value:"Load-Balancing",id:"load-balancing",level:2}];function d(n){const e={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{alt:"Shen Zhen, China",src:t(437412).A+"",width:"2230",height:"839"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"#building-the-timeserver",children:"Building the Timeserver"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#docker-compose",children:"Docker-Compose"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"#nomad-job",children:"Nomad Job"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#complete-job-file",children:"Complete Job File"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#load-balancing",children:"Load-Balancing"})}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"building-the-timeserver",children:"Building the Timeserver"}),"\n",(0,o.jsxs)(e.p,{children:["I am using a slightly modified version of the ",(0,o.jsx)(e.a,{href:"https://github.com/mpolinowski/docker-ntp",children:"docker-ntp"})," by ",(0,o.jsx)(e.a,{href:"https://github.com/cturra/",children:"@cturra"})," repository to build my Chrony Docker image. When running the container with Nomad the service can be configured using environment variables:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'env {\n    NTP_SERVERS = "0.de.pool.ntp.org,time.cloudflare.com,time1.google.com"\n    LOG_LEVEL = "1"\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"Changes made to the repository - adding TLS certificates to be able to use the NTS Key Exchange for a secured time service:"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.a,{href:"https://github.com/mpolinowski/docker-ntp/blob/master/assets/startup.sh",children:"Original Start-up Script"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'# final bits for the config file\n{\n  echo\n  echo "driftfile /var/lib/chrony/chrony.drift"\n  echo "makestep 0.1 3"\n  echo "rtcsync"\n  echo\n  echo "allow all"\n} >> ${CHRONY_CONF_FILE}\n'})}),"\n",(0,o.jsx)(e.p,{children:"Changed to:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'# final bits for the config file\n{\n  echo\n  echo "driftfile /var/lib/chrony/chrony.drift"\n  echo "makestep 0.1 3"\n  echo "rtcsync"\n  echo\n  echo "ntsserverkey /opt/letsencrypt/live/my.domain.com/privkey.pem"\n  echo "ntsservercert /opt/letsencrypt/live/my.domain.com/fullchain.pem"\n  echo "ntsprocesses 3"\n  echo "maxntsconnections 512"\n  echo "ntsdumpdir /var/lib/chrony"\n  echo\n  echo "allow all"\n} >> ${CHRONY_CONF_FILE}\n'})}),"\n",(0,o.jsx)(e.p,{children:"These certificates need to be generated on the host system, e.g. using certbot and then mounted into the container on runtime:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"apt install certbot python3-certbot-nginx\ncertbot certonly --standalone\n"})}),"\n",(0,o.jsx)(e.h3,{id:"docker-compose",children:"Docker-Compose"}),"\n",(0,o.jsxs)(e.p,{children:["To test the container we can use ",(0,o.jsx)(e.code,{children:"docker compose up -d chrony"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yml",children:"version: '3.9'\n\nservices:\n  chrony:\n    build: .\n    image: chrony/nts:latest\n    container_name: chrony\n    restart: unless-stopped\n    volumes:\n      - type: bind\n        source: /etc/letsencrypt/live/my.domain.com/fullchain.pem\n        target: /opt/letsencrypt/live/my.domain.com/fullchain.pem\n      - type: bind\n        source: /etc/letsencrypt/live/my.domain.com/privkey.pem\n        target: /opt/letsencrypt/live/my.domain.com/privkey.pem\n    ports:\n      - 123:123/udp\n      - 4460:4460/tcp\n    environment:\n      - NTP_SERVERS=0.de.pool.ntp.org,time.cloudflare.com,time1.google.com\n      - LOG_LEVEL=1\n"})}),"\n",(0,o.jsx)(e.h2,{id:"nomad-job",children:"Nomad Job"}),"\n",(0,o.jsx)(e.p,{children:"In Nomad we first need to create the volume on our host and then define it here:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'volume "letsencrypt" {\n    type      = "host"\n    read_only = false\n    source    = "letsencrypt"\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"It then can be mounted into the container:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'volume_mount {\n    volume      = "letsencrypt"\n    destination = "/opt/letsencrypt"\n    read_only   = false\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"complete-job-file",children:"Complete Job File"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'job "chrony_nts_server" {\n    datacenters = ["dc1"]\n    type = "service"\n\n    group "docker" {\n        count = 2\n\n        network {\n            port "ntp" {\n                to = "123"\n            }\n            port "nts" {\n                to = "4460"\n            }\n        }\n\n        update {\n            max_parallel = 1\n            min_healthy_time = "10s"\n            healthy_deadline = "60s"\n            progress_deadline = "2m"\n            auto_revert = true\n            auto_promote = true\n            canary = 1\n        }\n\n        service {\n            name = "chrony-ntp"\n            port = "ntp"\n        }\n\n        service {\n            name = "chrony-nts"\n            port = "nts"\n\n            check {\n                name = "NTS Service"\n                port = "nts"\n                type = "tcp"\n                interval = "30s"\n                timeout = "1s"\n            }\n        }\n\n        volume "letsencrypt" {\n            type      = "host"\n            read_only = false\n            source    = "letsencrypt"\n        }\n\n        task "chrony-container" {\n            driver = "docker"\n            volume_mount {\n                volume      = "letsencrypt"\n                destination = "/opt/letsencrypt"\n                read_only   = false\n           }\n\n            env {\n                NTP_SERVERS = "0.de.pool.ntp.org,time.cloudflare.com,time1.google.com"\n                LOG_LEVEL = "1"\n            }\n\n            config {\n                image = "my.gitlab.com:12345/server_management/chrony-nts:latest"\n                ports = ["ntp", "nts"]\n                network_mode = "default"\n                force_pull = true\n\n                auth {\n                    username = "myuser"\n                    password = "mypassword"\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"load-balancing",children:"Load-Balancing"}),"\n",(0,o.jsxs)(e.p,{children:["Now I want to be able to balance a pool of Chrony servers ",(0,o.jsx)(e.a,{href:"/docs/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-nginx-load-balancing/2022-11-15",children:"behind an NGINX proxy"}),":"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.em,{children:"Related:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/docs/DevOps/NGINX/2022-11-17-nginx-udp-tcp-load-balancing/2022-11-17",children:"NGINX TCP/UDP Load Balancing"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/docs/DevOps/Hashicorp/2022-09-24--nomad-nginx-ingress/2022-09-24",children:"NGINX Ingress with Nomad"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/docs/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-nginx-load-balancing/2022-11-15",children:"Hashicorp Nomad for NGINX Load-balancing"})}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'job "chrony_ingress" {\n  datacenters = ["dc1"]\n\n  group "nginx" {\n    count = 1\n\n    network {\n      mode = "host"\n      port "http" {\n          static = "80"\n      }\n      port "https" {\n          static = "443"\n      }\n      port "ntp" {\n          static = "123"\n      }\n      port "nts" {\n          static = "4460"\n      }\n    }\n\n    service {\n        name = "chrony-ingress-http"\n        port = "http"\n\n        check {\n            name     = "HTTP Health"\n            port     = "http"\n            path     = "/"\n            type     = "http"\n            protocol = "http"\n            interval = "10s"\n            timeout  = "2s"\n        }\n    }\n\n    service {\n        name = "chrony-ingress-https"\n        port = "https"\n    }\n\n    service {\n        name = "chrony-ingress-ntp"\n        port = "ntp"\n    }\n\n    service {\n        name = "chrony-ingress-nts"\n        port = "nts"\n    }\n\n    volume "letsencrypt" {\n        type      = "host"\n        read_only = true\n        source    = "letsencrypt"\n    }\n\n    task "ingress-container" {\n      driver = "docker"\n\n      volume_mount {\n            volume      = "letsencrypt"\n            destination = "/opt/letsencrypt" #in the container\n            read_only   = false\n      }\n\n      config {\n        network_mode = "host"\n        image = "nginx:alpine"\n        ports = ["http","https", "ntp", "nts"]\n        volumes = [\n          "local/nginx/nginx.conf:/etc/nginx/nginx.conf",\n          "local/nginx/dhparam.pem:/etc/nginx/ssl/dhparam.pem",\n          "local/nginx/ssl-params.conf:/etc/nginx/ssl/ssl-params.conf",\n          "local/nginx/default.conf:/etc/nginx/conf.d/default.conf",\n          "local/nginx/stream.conf:/etc/nginx/conf.d/stream.conf",\n          "local/nginx/buffers.conf:/etc/nginx/conf.d/buffers.conf",\n          "local/nginx/timeouts.conf:/etc/nginx/conf.d/timeouts.conf",\n          "local/nginx/header.conf:/etc/nginx/conf.d/header.conf",\n          "local/nginx/cache.conf:/etc/nginx/conf.d/cache.conf",\n          "local/nginx/gzip.conf:/etc/nginx/conf.d/gzip.conf",\n          #  Generate/serve HTML that can be used to monitor the certificate (e.g. Zabbix)\n          "local/nginx/index.html:/usr/share/nginx/html/index.html"\n        ]\n      }\n\n\n      # nginx.conf\n      template {\n        data = <<EOH\nuser  nginx;\nworker_processes  auto;\nworker_rlimit_nofile  15000;\npid  /var/run/nginx.pid;\ninclude /usr/share/nginx/modules/*.conf;\n\n\nevents {\n    worker_connections  2048;\n    multi_accept on;\n    use epoll;\n}\n\nstream {\n    include /etc/nginx/conf.d/stream.conf;\n}\n\n\nhttp {\n    default_type   application/octet-stream;\n    # access_log   /var/log/nginx/access.log;\n    # activate the server access log only when needed\n    access_log     off;\n    error_log      /var/log/nginx/error.log;\n    # don\'t display server version on error pages\n    server_tokens  off;\n    server_names_hash_bucket_size 64;\n    include        /etc/nginx/mime.types;\n    sendfile       on;\n    tcp_nopush     on;\n    tcp_nodelay    on;\n\n    charset utf-8;\n    source_charset utf-8;\n    charset_types text/xml text/plain text/vnd.wap.wml application/javascript application/rss+xml;\n    \n    include /etc/nginx/conf.d/default.conf;\n    include /etc/nginx/conf.d/buffers.conf;\n    include /etc/nginx/conf.d/timeouts.conf;\n    include /etc/nginx/conf.d/cache.conf;\n    include /etc/nginx/conf.d/gzip.conf;\n}\n        EOH\n\n        destination = "local/nginx/nginx.conf"\n      }\n\n\n      # default.conf\n      template {\n        data = <<EOH\nserver {\n    listen 80;\n    listen [::]:80;\n\n    server_name my.nts-server.com;\n\n    return 301 https://$server_name$request_uri;\n}\n\n\nserver {\n    listen 443 ssl http2 default_server;\n    listen [::]:443 ssl;\n    ssl_certificate /opt/letsencrypt/live/my.nts-server.com/fullchain.pem;\n    ssl_certificate_key /opt/letsencrypt/live/my.nts-server.com/privkey.pem;\n    include ssl/ssl-params.conf;\n    include /etc/nginx/conf.d/header.conf;\n\n    server_name  my.nts-server.com;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n        EOH\n\n        destination = "local/nginx/default.conf"\n      }\n\n\n      # stream.conf\n      template {\n        data = <<EOH\nupstream chrony-ntp {\n  {{ range service "chrony-ntp" }}\n    server {{ .Address }}:{{ .Port }};\n  {{ else }}server 127.0.0.1:65535; # force a 502\n  {{ end }}\n}\n\nupstream chrony-nts {\n  {{ range service "chrony-nts" }}\n    server {{ .Address }}:{{ .Port }};\n  {{ else }}server 127.0.0.1:65535; # force a 502\n  {{ end }}\n}\n\nserver {\n        listen 123 udp;\n        listen 123; #tcp\n        proxy_pass chrony-ntp;\n        error_log  /var/log/nginx/ntp.log info;\n        proxy_responses 1;\n        proxy_timeout   1s;\n}\n\nserver {\n      listen 4460 udp;\n      listen 4460; #tcp\n      proxy_pass chrony-nts;\n      error_log  /var/log/nginx/nts.log info;\n      proxy_responses 1;\n      proxy_timeout   1s;\n}\n        EOH\n\n        destination = "local/nginx/stream.conf"\n      }\n\n\n      # index.html\n      template {\n        data = <<EOH\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Welcome to my.nts-server.com!</title>\n</head>\n<body>\n    <h1>Welcome to my.nts-server.com!</h1>\n</body>\n</html>\n        EOH\n\n        destination = "local/nginx/index.html"\n      }\n\n\n      # dhparam.pem\n      template {\n        data = <<EOH\n-----BEGIN DH PARAMETERS-----\nMIICCAKCA...\n\n....\n\n...CAQI=\n-----END DH PARAMETERS-----\n        EOH\n\n        destination = "local/nginx/dhparam.pem"\n      }\n\n\n      # ssl-params.conf\n      template {\n        data = <<EOH\nssl_protocols TLSv1.3;\nssl_prefer_server_ciphers on;\nssl_dhparam /etc/nginx/ssl/dhparam.pem;\nssl_ciphers ECDH+AESGCM:ECDH+CHACHA20:ECDH+AES256:ECDH+AES128:!aNULL:!SHA1:!AESCCM;\nssl_conf_command Options PrioritizeChaCha;\nssl_conf_command Ciphersuites TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256;\nssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0\nssl_session_timeout  10m;\nssl_session_cache shared:SSL:10m;\nssl_session_tickets off; # Requires nginx >= 1.5.9\nssl_stapling on; # Requires nginx >= 1.3.7\nssl_stapling_verify on; # Requires nginx => 1.3.7\nresolver 8.8.8.8 8.8.4.4 valid=300s;\nresolver_timeout 5s;\nadd_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;\nadd_header X-Frame-Options "";\nadd_header X-Content-Type-Options nosniff;\nadd_header X-XSS-Protection "1; mode=block";\n        EOH\n\n        destination = "local/nginx/ssl-params.conf"\n      }\n\n\n      # buffers.conf\n      template {\n        data = <<EOH\nclient_body_buffer_size 10k;\nclient_header_buffer_size 1k;\nclient_max_body_size 8m;\nlarge_client_header_buffers 2 1k;\n# Directive needs to be increased for certain site types to prevent ERROR 400\n# large_client_header_buffers 4 32k;\n        EOH\n\n        destination = "local/nginx/buffers.conf"\n      }\n\n\n      # header.conf\n      template {\n        data = <<EOH\nadd_header                Cache-Control  "public, must-revalidate, proxy-revalidate, max-age=0";\nproxy_set_header          X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header          X-NginX-Proxy true;\nproxy_set_header          X-Real-IP $remote_addr;\nproxy_set_header          X-Forwarded-Proto http;\nproxy_hide_header         X-Frame-Options;\nproxy_set_header          Accept-Encoding "";\nproxy_http_version        1.1;\nproxy_set_header          Upgrade $http_upgrade;\nproxy_set_header          Connection "upgrade";\nproxy_set_header          Host $host;\nproxy_cache_bypass        $http_upgrade;\nproxy_max_temp_file_size  0;\nproxy_redirect            off;\nproxy_read_timeout        240s;\n        EOH\n\n        destination = "local/nginx/header.conf"\n      }\n\n\n      # cache.conf\n      template {\n        data = <<EOH\nopen_file_cache max=1500 inactive=20s;\nopen_file_cache_valid 30s;\nopen_file_cache_min_uses 5;\nopen_file_cache_errors off;\n        EOH\n\n        destination = "local/nginx/cache.conf"\n      }\n\n\n      # timeouts.conf\n      template {\n        data = <<EOH\nclient_header_timeout 3m;\nclient_body_timeout 3m;\nkeepalive_timeout 100;\nkeepalive_requests 1000;\nsend_timeout 3m;\n        EOH\n\n        destination = "local/nginx/timeouts.conf"\n      }\n\n\n      # gzip.conf\n      template {\n        data = <<EOH\ngzip on;\ngzip_disable "msie6";\ngzip_vary on;\ngzip_proxied any;\ngzip_comp_level 5;\ngzip_min_length 256;\ngzip_buffers 16 8k;\ngzip_http_version 1.1;\ngzip_types text/plain text/css application/json application/javascript\ntext/xml application/xml application/xml+rss text/javascript\nimage/svg+xml application/xhtml+xml application/atom+xml;\n        EOH\n\n        destination = "local/nginx/gzip.conf"\n      }\n\n    }\n  }\n}\n'})})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},437412:(n,e,t)=>{t.d(e,{A:()=>o});const o=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"},28453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>i});var o=t(296540);const s={},r=o.createContext(s);function a(n){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),o.createElement(r.Provider,{value:e},n.children)}}}]);