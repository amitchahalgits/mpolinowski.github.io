"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[24670],{259484:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var r=n(785893),a=n(603905);const s={sidebar_position:9e3,slug:"2020-06-23",title:"Saltstack Refresh Course 2: Salt State",authors:"mpolinowski",tags:["LINUX","Salt"]},i=void 0,l={id:"DevOps/Salt/2020-06-23--saltestack-refresh-course-2-salt-state/index",title:"Saltstack Refresh Course 2: Salt State",description:"Shenzhen, China",source:"@site/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-2-salt-state/index.md",sourceDirName:"DevOps/Salt/2020-06-23--saltestack-refresh-course-2-salt-state",slug:"/DevOps/Salt/2020-06-23--saltestack-refresh-course-2-salt-state/2020-06-23",permalink:"/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-2-salt-state/2020-06-23",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-2-salt-state/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Salt",permalink:"/docs/tags/salt"}],version:"current",sidebarPosition:9e3,frontMatter:{sidebar_position:9e3,slug:"2020-06-23",title:"Saltstack Refresh Course 2: Salt State",authors:"mpolinowski",tags:["LINUX","Salt"]},sidebar:"tutorialSidebar",previous:{title:"Saltstack Refresh Course 2: Highstate",permalink:"/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-3-highstate/2020-06-23"},next:{title:"Saltstack Refresh Course 1: Setup",permalink:"/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-1-setup/2020-06-23"}},c={},o=[{value:"Setting up a Webserver",id:"setting-up-a-webserver",level:2},{value:"Init.sls",id:"initsls",level:3},{value:"File Management",id:"file-management",level:3},{value:"Run your State",id:"run-your-state",level:3}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Shenzhen, China",src:n(172292).Z+"",width:"1500",height:"520"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"#setting-up-a-webserver",children:"Setting up a Webserver"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#initsls",children:"Init.sls"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#file-management",children:"File Management"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#run-your-state",children:"Run your State"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"setting-up-a-webserver",children:"Setting up a Webserver"}),"\n",(0,r.jsx)(t.p,{children:"I want to define a webserver state using a Salt state file and apply it to my minion server:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{}),(0,r.jsx)(t.th,{})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Application"}),(0,r.jsx)(t.td,{children:"Apache"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"File"}),(0,r.jsx)(t.td,{children:"/var/www/html/index.html"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Users"}),(0,r.jsx)(t.td,{children:"webadmin"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"SSH Key"}),(0,r.jsx)(t.td,{children:"For webadmin user"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"initsls",children:"Init.sls"}),"\n",(0,r.jsxs)(t.p,{children:['Every minion that with a name that starts with "salt-minion" should have the ',(0,r.jsx)(t.code,{children:"apache"})," state applied to it. We can then continue and and create said state in:"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"/srv/salt/base/apache/init.sls"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"install_apache:\r\n  pkg.installed:\r\n    - pkgs:\r\n        - apache2\r\n\r\nindex_html:\r\n  file.managed:\r\n    - name: /var/www/html/index.html\r\n    - source: salt://apache/templates/index.html\r\n    - user: www-data\r\n    - group: www-data\r\n    - mode: 644\r\n\r\napache_service:\r\n  service.running:\r\n    - name: apache2\r\n    - enable: True\n"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Note"})," that the Apache package for Ubuntu is called ",(0,r.jsx)(t.code,{children:"apache2"}),". For CentOS you would have to use the package name ",(0,r.jsx)(t.code,{children:"httpd"})," instead."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"file-management",children:"File Management"}),"\n",(0,r.jsx)(t.p,{children:"This state file defines an index page that we want to use with Apache that we can now create in:"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"/srv/salt/base/apache/templates/index.html"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-html",children:'<!DOCTYPE html>\r\n\r\n<html lang="en">\r\n  <head>\r\n    <meta charset="utf-8" />\r\n\r\n    <title>Salty Dayz, Sailor!</title>\r\n    <meta name="description" content="Salt Apache Template" />\r\n  </head>\r\n\r\n  <body>\r\n    <h1>Salty Dayz, Sailor!</h1>\r\n  </body>\r\n</html>\n'})}),"\n",(0,r.jsx)(t.h3,{id:"run-your-state",children:"Run your State"}),"\n",(0,r.jsx)(t.p,{children:"We can now apply this state to our minion server with:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'salt \'salt-minion*\' state.sls apache\r\n\r\nsalt-minion:\r\n----------\r\n          ID: install_apache\r\n    Function: pkg.installed\r\n      Result: True\r\n     Comment: All specified packages are already installed\r\n     Started: 10:05:29.993312\r\n    Duration: 37.941 ms\r\n     Changes:\r\n----------\r\n          ID: index_html\r\n    Function: file.managed\r\n        Name: /var/www/html/index.html\r\n      Result: True\r\n     Comment: File /var/www/html/index.html updated\r\n     Started: 10:05:30.033993\r\n    Duration: 39.989 ms\r\n     Changes:\r\n              ----------\r\n              diff:\r\n                  ---\r\n                  +++\r\n                  @@ -1,4 +1,14 @@\r\n                   <!doctype html>\r\n                  +\r\n                  +<html lang="en">\r\n                  +<head>\r\n                  +  <meta charset="utf-8">\r\n                  +\r\n                  +  <title>Salty Dayz, Sailor!</title>\r\n                  +  <meta name="description" content="Salt Apache Template">\r\n                  +</head>\r\n                  +\r\n                   <body>\r\n                  -    <h1>Ubuntu Rocks.</h1>\r\n                  +  <h1>Salty Dayz, Sailor!</h1>\r\n                   </body>\r\n                  +</html>\r\n              group:\r\n                  www-data\r\n              user:\r\n                  www-data\r\n----------\r\n          ID: apache_service\r\n    Function: service.running\r\n        Name: apache2\r\n      Result: True\r\n     Comment: The service apache2 is already running\r\n     Started: 10:05:30.074597\r\n    Duration: 38.561 ms\r\n     Changes:\r\n\r\nSummary for salt-minion\r\n------------\r\nSucceeded: 3 (changed=1)\r\nFailed:    0\r\n------------\r\nTotal states run:     3\r\nTotal run time: 116.491 ms\n'})}),"\n",(0,r.jsx)(t.p,{children:"Verify that the website is online by first getting your minions IP address:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"salt 'salt-minion*' grains.get ipv4\r\n\r\nsalt-minion:\r\n    - 127.0.0.1\r\n    - 172.17.0.1\r\n    - 172.18.0.1\r\n    - 192.168.2.111\n"})}),"\n",(0,r.jsxs)(t.p,{children:["And then accessing the Apache service with your web browser ",(0,r.jsx)(t.code,{children:"http://192.168.2.111:80"}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,a.ah)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},603905:(e,t,n)=>{n.d(t,{ah:()=>o});var r=n(667294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),o=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=o(n),p=a,m=u["".concat(c,".").concat(p)]||u[p]||h[p]||s;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));d.displayName="MDXCreateElement"},172292:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-2215e4912b7f3d1beed1d8b83bac94aa.jpg"}}]);