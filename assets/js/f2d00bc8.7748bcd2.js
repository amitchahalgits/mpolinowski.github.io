"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[9098],{59819:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=s(785893),t=s(603905);const a={sidebar_position:9999,slug:"2023-11-24",title:"ROS2 Graph Concepts",authors:"mpolinowski",tags:["Robotics","Simulation","ROS"],description:"ROS2 Architecture and Concepts"},i=void 0,l={id:"Automation_and_Robotics/Robotics_Simulation/2023-11-24--ros2-graph/index",title:"ROS2 Graph Concepts",description:"ROS2 Architecture and Concepts",source:"@site/docs/Automation_and_Robotics/Robotics_Simulation/2023-11-24--ros2-graph/index.md",sourceDirName:"Automation_and_Robotics/Robotics_Simulation/2023-11-24--ros2-graph",slug:"/Automation_and_Robotics/Robotics_Simulation/2023-11-24--ros2-graph/2023-11-24",permalink:"/docs/Automation_and_Robotics/Robotics_Simulation/2023-11-24--ros2-graph/2023-11-24",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Automation_and_Robotics/Robotics_Simulation/2023-11-24--ros2-graph/index.md",tags:[{label:"Robotics",permalink:"/docs/tags/robotics"},{label:"Simulation",permalink:"/docs/tags/simulation"},{label:"ROS",permalink:"/docs/tags/ros"}],version:"current",sidebarPosition:9999,frontMatter:{sidebar_position:9999,slug:"2023-11-24",title:"ROS2 Graph Concepts",authors:"mpolinowski",tags:["Robotics","Simulation","ROS"],description:"ROS2 Architecture and Concepts"},sidebar:"tutorialSidebar",previous:{title:"ROS2 Gazebo Robot Simulation",permalink:"/docs/Automation_and_Robotics/Robotics_Simulation/2023-11-26--ros2-gazebo-simulation/2023-11-26"},next:{title:"Gazebo & ROS2 Basic Installation",permalink:"/docs/Automation_and_Robotics/Robotics_Simulation/2023-11-19--ros2-gazebo-installation/2023-11-19"}},o={},c=[{value:"The ROS 2 Graph",id:"the-ros-2-graph",level:2},{value:"Nodes",id:"nodes",level:3},{value:"Run",id:"run",level:4},{value:"List",id:"list",level:4},{value:"Remap",id:"remap",level:4},{value:"Info",id:"info",level:4},{value:"Topics",id:"topics",level:3},{value:"List",id:"list-1",level:4},{value:"Echo",id:"echo",level:4},{value:"Info",id:"info-1",level:4},{value:"Pub",id:"pub",level:4},{value:"Services",id:"services",level:3},{value:"Lists",id:"lists",level:4},{value:"Types",id:"types",level:4},{value:"Find",id:"find",level:4},{value:"Interfaces",id:"interfaces",level:4},{value:"Call",id:"call",level:4},{value:"Parameters",id:"parameters",level:3},{value:"List",id:"list-2",level:4},{value:"Get",id:"get",level:4},{value:"Set",id:"set",level:4},{value:"Param Dump",id:"param-dump",level:4},{value:"Param Load",id:"param-load",level:4},{value:"Actions",id:"actions",level:3},{value:"Node Info",id:"node-info",level:4},{value:"Action List",id:"action-list",level:4},{value:"Action Types",id:"action-types",level:4},{value:"Action Info",id:"action-info",level:4},{value:"Interface",id:"interface",level:4},{value:"Action Send Goal",id:"action-send-goal",level:4},{value:"Creating a Workspace",id:"creating-a-workspace",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Create a new Directory",id:"create-a-new-directory",level:3},{value:"Clone a Sample Repo",id:"clone-a-sample-repo",level:3},{value:"Build the Workspace with Colcon",id:"build-the-workspace-with-colcon",level:3},{value:"Source the Overlay",id:"source-the-overlay",level:3},{value:"Run the Build Package",id:"run-the-build-package",level:3},{value:"Modify the Overlay",id:"modify-the-overlay",level:4},{value:"Creating a Package",id:"creating-a-package",level:2},{value:"Build a Package",id:"build-a-package",level:3},{value:"Source the Setup File",id:"source-the-setup-file",level:3},{value:"Customize package.xml",id:"customize-packagexml",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"TST, Hongkong",src:s(929728).Z+"",width:"1500",height:"620"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Excerpt from ",(0,r.jsx)(n.a,{href:"https://docs.ros.org/en/iron/index.html",children:"ROS 2 Documentation (IRON)"}),": The Robot Operating System (ROS) is a set of software libraries and tools for building robot applications. From drivers and state-of-the-art algorithms to powerful developer tools, ROS has the open source tools you need for your next robotics project."]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#the-ros-2-graph",children:"The ROS 2 Graph"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#nodes",children:"Nodes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#run",children:"Run"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#list",children:"List"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#remap",children:"Remap"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#info",children:"Info"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#topics",children:"Topics"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#list-1",children:"List"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#echo",children:"Echo"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#info-1",children:"Info"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#pub",children:"Pub"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#services",children:"Services"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#lists",children:"Lists"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#types",children:"Types"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#find",children:"Find"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#interfaces",children:"Interfaces"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#call",children:"Call"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#list-2",children:"List"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#get",children:"Get"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#set",children:"Set"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#param-dump",children:"Param Dump"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#param-load",children:"Param Load"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#actions",children:"Actions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#node-info",children:"Node Info"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#action-list",children:"Action List"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#action-types",children:"Action Types"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#action-info",children:"Action Info"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#interface",children:"Interface"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#action-send-goal",children:"Action Send Goal"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#creating-a-workspace",children:"Creating a Workspace"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#prerequisites",children:"Prerequisites"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#create-a-new-directory",children:"Create a new Directory"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#clone-a-sample-repo",children:"Clone a Sample Repo"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#build-the-workspace-with-colcon",children:"Build the Workspace with Colcon"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#source-the-overlay",children:"Source the Overlay"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#run-the-build-package",children:"Run the Build Package"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#modify-the-overlay",children:"Modify the Overlay"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#creating-a-package",children:"Creating a Package"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#build-a-package",children:"Build a Package"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#source-the-setup-file",children:"Source the Setup File"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#customize-packagexml",children:"Customize package.xml"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"the-ros-2-graph",children:"The ROS 2 Graph"}),"\n",(0,r.jsxs)(n.p,{children:["Start by verifying your ",(0,r.jsx)(n.a,{href:"/docs/Automation_and_Robotics/Robotics_Simulation/2023-11-19--ros2-gazebo-installation/2023-11-19",children:"installation"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"printenv | grep -i ROS\n\nROS_VERSION=2\nROS_PYTHON_VERSION=3\nROS_DISTRO=iron\nROS_DOMAIN_ID=88\n...\n"})}),"\n",(0,r.jsx)(n.p,{children:"The ROS graph is a network of ROS 2 elements processing data together at the same time. It encompasses all executables in nodes and the connections between them. Each node in ROS should be responsible for a single, modular purpose, e.g. controlling the wheel motors or publishing the sensor data from a laser range-finder. Each node can send and receive data from other nodes via topics, services, actions, or parameters."}),"\n",(0,r.jsx)(n.p,{children:"A full robotic system is comprised of many nodes working in concert. In ROS 2, a single executable (C++ program, Python program, etc.) can contain one or more nodes."}),"\n",(0,r.jsx)(n.h3,{id:"nodes",children:"Nodes"}),"\n",(0,r.jsx)(n.h4,{id:"run",children:"Run"}),"\n",(0,r.jsx)(n.p,{children:"The command ros2 run launches an executable from a package."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 run <package_name> <executable_name>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For example for the ",(0,r.jsx)(n.code,{children:"turtlesim"})," enter the following command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 run turtlesim turtlesim_node\nros2 run turtlesim turtle_teleop_key\n"})}),"\n",(0,r.jsx)(n.h4,{id:"list",children:"List"}),"\n",(0,r.jsxs)(n.p,{children:["Open a new terminal while ",(0,r.jsx)(n.code,{children:"turtlesim"})," is still running in the other one, and enter the following command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 node list\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The terminal will return the ",(0,r.jsx)(n.strong,{children:"Node Name"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"/turtlesim\n/teleop_turtle\n"})}),"\n",(0,r.jsx)(n.h4,{id:"remap",children:"Remap"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://design.ros2.org/articles/ros_command_line_arguments.html#name-remapping-rules",children:"Remapping"})," allows you to reassign default node properties, like node name, topic names, service names, etc., to custom values."]}),"\n",(0,r.jsx)(n.p,{children:"E.g. you  can reassign the name of our /turtlesim node. In a new terminal, run the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 run turtlesim turtlesim_node --ros-args --remap __node:=heroturtlesim\n"})}),"\n",(0,r.jsx)(n.p,{children:"Since you\u2019re calling ros2 run on turtlesim again, another turtlesim window will open. However, now if you return to the terminal where you ran ros2 node list, and run it again, you will see three node names:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"/heroturtlesim\n/turtlesim\n/teleop_turtle\n"})}),"\n",(0,r.jsx)(n.h4,{id:"info",children:"Info"}),"\n",(0,r.jsx)(n.p,{children:"Now that you know the names of your nodes, you can access more information about them with:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 node info <node_name>\n"})}),"\n",(0,r.jsx)(n.p,{children:"To examine your latest node, heroturtlesim, run the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 node info /heroturtlesim4074sgs/msg/Twist\n  Publishers:\n    /parameter_events: rcl_interfaces/msg/ParameterEvent\n    /rosout: rcl_interfaces/msg/Log\n    /turtle1/color_sensor: turtlesim/msg/Color\n    /turtle1/pose: turtlesim/msg/Pose\n  Service Servers:\n    /clear: std_srvs/srv/Empty\n    /kill: turtlesim/srv/Kill\n    /heroturtlesim/describe_parameters: rcl_interfaces/srv/DescribeParameters\n    /heroturtlesim/get_parameter_types: rcl_interfaces/srv/GetParameterTypes\n    /heroturtlesim/get_parameters: rcl_interfaces/srv/GetParameters\n    /heroturtlesim/list_parameters: rcl_interfaces/srv/ListParameters\n    /heroturtlesim/set_parameters: rcl_interfaces/srv/SetParameters\n    /heroturtlesim/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically\n    /reset: std_srvs/srv/Empty\n    /spawn: turtlesim/srv/Spawn\n    /turtle1/set_pen: turtlesim/srv/SetPen\n    /turtle1/teleport_absolute: turtlesim/srv/TeleportAbsolute\n    /turtle1/teleport_relative: turtlesim/srv/TeleportRelative\n  Service Clients:\n\n  Action Servers:\n    /turtle1/rotate_absolute: turtlesim/action/RotateAbsolute\n  Action Clients:\n"})}),"\n",(0,r.jsx)(n.h3,{id:"topics",children:"Topics"}),"\n",(0,r.jsx)(n.p,{children:"ROS 2 breaks complex systems down into many modular nodes. Topics are a vital element of the ROS graph that act as a bus for nodes to exchange messages. A node may publish data to any number of topics and simultaneously have subscriptions to any number of topics."}),"\n",(0,r.jsxs)(n.p,{children:["First make sure that ",(0,r.jsx)(n.code,{children:"turtlesim"})," is still running:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 run turtlesim turtlesim_node\nros2 run turtlesim turtle_teleop_key\n"})}),"\n",(0,r.jsx)(n.h4,{id:"list-1",children:"List"}),"\n",(0,r.jsxs)(n.p,{children:["We now have two ",(0,r.jsx)(n.strong,{children:"Nodes"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 node list\n\n/turtlesim\n/teleop_turtle\n"})}),"\n",(0,r.jsxs)(n.p,{children:["With 4 active ",(0,r.jsx)(n.strong,{children:"Topics"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 topic list -t\n\n/parameter_events [rcl_interfaces/msg/ParameterEvent]\n/rosout [rcl_interfaces/msg/Log]\n/turtle1/cmd_vel [geometry_msgs/msg/Twist]\n/turtle1/color_sensor [turtlesim/msg/Color]\n/turtle1/pose [turtlesim/msg/Pose]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now open ",(0,r.jsx)(n.code,{children:"rqt_graph"})," by opening `rqt`` and selecting ",(0,r.jsx)(n.strong,{children:"Plugins"})," > ",(0,r.jsx)(n.strong,{children:"Introspection"})," > ",(0,r.jsx)(n.strong,{children:"Node Graph"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"ROS2 Architecture and Concepts",src:s(627923).Z+"",width:"1846",height:"539"})}),"\n",(0,r.jsxs)(n.p,{children:["The graph is depicting how the ",(0,r.jsx)(n.code,{children:"/turtlesim"})," node and the ",(0,r.jsx)(n.code,{children:"/teleop_turtle"})," node are communicating with each other over a topic. The ",(0,r.jsx)(n.code,{children:"/teleop_turtle"})," node is publishing data (the keystrokes you enter to move the turtle around) to the ",(0,r.jsx)(n.code,{children:"/turtle1/cmd_vel"})," topic, and the ",(0,r.jsx)(n.code,{children:"/turtlesim"})," node is subscribed to that topic to receive the data."]}),"\n",(0,r.jsx)(n.h4,{id:"echo",children:"Echo"}),"\n",(0,r.jsxs)(n.p,{children:["To inspect incoming messages on a topic run the ",(0,r.jsx)(n.code,{children:"echo"})," command and send a test message - e.g. on the ",(0,r.jsx)(n.code,{children:"cmd_vel"})," topic and use the ",(0,r.jsx)(n.code,{children:"teleop_turtle"})," node to send commands to your ",(0,r.jsx)(n.code,{children:"turtlesim"})," node:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 topic echo /turtle1/cmd_vel\n"})}),"\n",(0,r.jsx)(n.p,{children:"The position data being published for every movement you make:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"linear:\n  x: 0.0\n  y: 0.0\n  z: 0.0\nangular:\n  x: 0.0\n  y: 0.0\n  z: 2.0\n  ---\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can update the graph (make sure that debug nodes/topics are not hidden) and see that there is a new ",(0,r.jsx)(n.code,{children:"ros2cli"})," node subscribed to the ",(0,r.jsx)(n.code,{children:"/turtle1/cmd_vel"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"info-1",children:"Info"}),"\n",(0,r.jsxs)(n.p,{children:["We can also verify the subscription using the ",(0,r.jsx)(n.code,{children:"info"})," command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 topic info /turtle1/cmd_vel\n\nType: geometry_msgs/msg/Twist\nPublisher count: 1\nSubscription count: 2\n"})}),"\n",(0,r.jsx)(n.p,{children:"That is telling us that only one node is publishing to this topic but we now have 2 subscriber. We also see the type here that allows us to check the required formatting of messages send through this topic:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 interface show geometry_msgs/msg/Twist\n\nThis expresses velocity in free space broken into its linear and angular parts.\n\n    Vector3  linear\n            float64 x\n            float64 y\n            float64 z\n    Vector3  angular\n            float64 x\n            float64 y\n            float64 z\n"})}),"\n",(0,r.jsx)(n.h4,{id:"pub",children:"Pub"}),"\n",(0,r.jsx)(n.p,{children:"Now knowing the topic and the expected message structure we can publish our own messages directly though the ROS2 CLI. It\u2019s important to note that this argument needs to be input in YAML syntax. Input the full command like so:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'ros2 topic pub --once /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 5.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"\n\n\npublisher: beginning loop\npublishing #1: geometry_msgs.msg.Twist(linear=geometry_msgs.msg.Vector3(x=5.0, y=0.0, z=0.0), angular=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=1.8))\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--once"})," is an optional argument meaning ",(0,r.jsx)(n.em,{children:"publish one message then exit"}),". Since robots require a steady stream of commands to operate continuously we can replace the ",(0,r.jsx)(n.code,{children:"--once"})," option with the ",(0,r.jsx)(n.code,{children:"--rate 1"})," option, which tells ros2 topic pub to publish the command in a steady stream at 1 Hz:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"\n\n\npublisher: beginning loop\npublishing #1: geometry_msgs.msg.Twist(linear=geometry_msgs.msg.Vector3(x=5.0, y=0.0, z=0.0), angular=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=1.8))\n\n\npublishing #2: geometry_msgs.msg.Twist(linear=geometry_msgs.msg.Vector3(x=5.0, y=0.0, z=0.0), angular=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=1.8))\n...\n'})}),"\n",(0,r.jsx)(n.h3,{id:"services",children:"Services"}),"\n",(0,r.jsx)(n.p,{children:"Services are another method of communication for nodes in the ROS graph. Services are based on a call-and-response model versus the publisher-subscriber model of topics. While topics allow nodes to subscribe to data streams and get continual updates, services only provide data when they are specifically called by a client."}),"\n",(0,r.jsx)(n.h4,{id:"lists",children:"Lists"}),"\n",(0,r.jsx)(n.p,{children:"Running the following command in a new terminal will return a list of all the services currently active in the system:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 service list\n\n\n/clear\n/kill\n/reset\n/spawn\n/teleop_turtle/describe_parameters\n/teleop_turtle/get_parameter_types\n/teleop_turtle/get_parameters\n/teleop_turtle/list_parameters\n/teleop_turtle/set_parameters\n/teleop_turtle/set_parameters_atomically\n/turtle1/set_pen\n/turtle1/teleport_absolute\n/turtle1/teleport_relative\n/turtlesim/describe_parameters\n/turtlesim/get_parameter_types\n/turtlesim/get_parameters\n/turtlesim/list_parameters\n/turtlesim/set_parameters\n/turtlesim/set_parameters_atomically\n"})}),"\n",(0,r.jsx)(n.h4,{id:"types",children:"Types"}),"\n",(0,r.jsx)(n.p,{children:"Services have types that describe how the request and response data of a service is structured. Service types are defined similarly to topic types, except service types have two parts: one message for the request and another for the response:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 service type /clear\n\nstd_srvs/srv/Empty\n"})}),"\n",(0,r.jsx)(n.h4,{id:"find",children:"Find"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Empty"})," type means the service call sends no data when making a request and receives no data when receiving a response. To find all the services of a specific type, you can use the command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 service find std_srvs/srv/Empty\n\n/clear\n/reset\n"})}),"\n",(0,r.jsx)(n.h4,{id:"interfaces",children:"Interfaces"}),"\n",(0,r.jsxs)(n.p,{children:["To get the structure of a service that expects structured data you can use the ",(0,r.jsx)(n.code,{children:"interface"})," command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 service list -t\n\n...\n/spawn [turtlesim/srv/Spawn]\n...\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 interface show turtlesim/srv/Spawn\n\nfloat32 x\nfloat32 y\nfloat32 theta\nstring name # Optional.  A unique name will be created and returned if this is empty\n---\nstring name\n"})}),"\n",(0,r.jsx)(n.p,{children:"The output tells us that to spawn another turtle bot we need to provide x,y coordinates plus a direction angle. We can also provide a name - but this will be autogenerated if empty. The service then expects a response with the name of the spawned bot."}),"\n",(0,r.jsx)(n.h4,{id:"call",children:"Call"}),"\n",(0,r.jsxs)(n.p,{children:["To call a service from the ROS2 CLI we can use the ",(0,r.jsx)(n.code,{children:"call"})," command - which is similar to the ",(0,r.jsx)(n.code,{children:"pub"})," command used above to update topics:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 service call <service_name> <service_type> <arguments>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For example the ",(0,r.jsx)(n.code,{children:"/clear"})," service does not require any arguments and simply deletes the lines drawn when moving the turtle bot and does not return any data:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 service call /clear std_srvs/srv/Empty\n\nwaiting for service to become available...\nrequester: making request: std_srvs.srv.Empty_Request()\n\nresponse:\nstd_srvs.srv.Empty_Response()\n"})}),"\n",(0,r.jsxs)(n.p,{children:["As seen above the ",(0,r.jsx)(n.code,{children:"/spawn"})," service requires the following arguments to work:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: 'heroturtle'}\"\n\nrequester: making request: turtlesim.srv.Spawn_Request(x=2.0, y=2.0, theta=0.2, name='heroturtle')\n\nresponse:\nturtlesim.srv.Spawn_Response(name='heroturtle')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(n.p,{children:"A parameter is a configuration value of a node. A node can store parameters as integers, floats, booleans, strings, and lists."}),"\n",(0,r.jsx)(n.h4,{id:"list-2",children:"List"}),"\n",(0,r.jsx)(n.p,{children:"To see the parameters belonging to your nodes, open a new terminal and enter the command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 param list\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You will see the node namespaces, ",(0,r.jsx)(n.code,{children:"/teleop_turtle"})," and ",(0,r.jsx)(n.code,{children:"/turtlesim"}),", followed by each node\u2019s parameters:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"/teleop_turtle:\n  qos_overrides./parameter_events.publisher.depth\n  qos_overrides./parameter_events.publisher.durability\n  qos_overrides./parameter_events.publisher.history\n  qos_overrides./parameter_events.publisher.reliability\n  scale_angular\n  scale_linear\n  use_sim_time\n/turtlesim:\n  background_b\n  background_g\n  background_r\n  qos_overrides./parameter_events.publisher.depth\n  qos_overrides./parameter_events.publisher.durability\n  qos_overrides./parameter_events.publisher.history\n  qos_overrides./parameter_events.publisher.reliability\n  use_sim_time\n"})}),"\n",(0,r.jsx)(n.h4,{id:"get",children:"Get"}),"\n",(0,r.jsx)(n.p,{children:"Now that we have the list of active parameter for our two nodes we can read their values using:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 param get /turtlesim background_b\n\nInteger value is: 255\n"})}),"\n",(0,r.jsxs)(n.p,{children:["As to be expected for the blue background colour the ",(0,r.jsx)(n.code,{children:"b"})," in ",(0,r.jsx)(n.code,{children:"rgb"})," has the value ",(0,r.jsx)(n.code,{children:"255"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"set",children:"Set"}),"\n",(0,r.jsxs)(n.p,{children:["We can use the ",(0,r.jsx)(n.code,{children:"set"})," command to make changes to the node parameter. The following command will turn the background of the ",(0,r.jsx)(n.code,{children:"turtlesim"})," window magenta:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 param set /turtlesim background_r 255\n"})}),"\n",(0,r.jsx)(n.h4,{id:"param-dump",children:"Param Dump"}),"\n",(0,r.jsxs)(n.p,{children:["To save all parameter of your current session you can print them using the ",(0,r.jsx)(n.code,{children:"dump"})," command and save them into a yaml file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 param dump /turtlesim > turtlesim.yml\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cat turtlesim.yml\n\n/turtlesim:\n  ros__parameters:\n    background_b: 255\n    background_g: 86\n    background_r: 255\n    holonomic: false\n    qos_overrides:\n      /parameter_events:\n        publisher:\n          depth: 1000\n          durability: volatile\n          history: keep_last\n          reliability: reliable\n    start_type_description_service: true\n    use_sim_time: false\n"})}),"\n",(0,r.jsx)(n.h4,{id:"param-load",children:"Param Load"}),"\n",(0,r.jsxs)(n.p,{children:["You can edit the file and restore the sims state from it, e.g. changing ",(0,r.jsx)(n.code,{children:"background_g: 0"})," to make the background screaming pink:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 param load /turtlesim turtlesim.yml\n"})}),"\n",(0,r.jsx)(n.p,{children:"Or restart the simulation with the restored parameter:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 run turtlesim turtlesim_node --ros-args --params-file turtlesim.yaml\n"})}),"\n",(0,r.jsx)(n.h3,{id:"actions",children:"Actions"}),"\n",(0,r.jsx)(n.p,{children:"Actions are one of the communication types in ROS 2 and are intended for long running tasks. They consist of three parts: a goal, feedback, and a result."}),"\n",(0,r.jsx)(n.p,{children:"Actions are built on topics and services. Their functionality is similar to services, except actions can be canceled. They also provide steady feedback, as opposed to services which return a single response. An \u201caction client\u201d node sends a goal to an \u201caction server\u201d node that acknowledges the goal and returns a stream of feedback and a result."}),"\n",(0,r.jsx)(n.p,{children:"When you launch the /teleop_turtle node, you will see the following message in your terminal:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"Use arrow keys to move the turtle.\nUse G|B|V|C|D|E|R|T keys to rotate to absolute orientations. 'F' to cancel a rotation.\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Pay attention to the terminal where the ",(0,r.jsx)(n.code,{children:"/turtlesim"})," node is running. Each time you press one of these keys, you are sending a goal to an action server that is part of the ",(0,r.jsx)(n.code,{children:"/turtlesim"})," node. The goal is to rotate the turtle to face a particular direction. A message relaying the result of the goal should display once the turtle completes its rotation:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"[INFO] [turtlesim]: Rotation goal completed successfully\n"})}),"\n",(0,r.jsx)(n.h4,{id:"node-info",children:"Node Info"}),"\n",(0,r.jsx)(n.p,{children:"To see the list of actions a node provides, /turtlesim in this case, open a new terminal and run the command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 node info /turtlesim\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Which will return a list of ",(0,r.jsx)(n.code,{children:"/turtlesim"}),"\u2019s ",(0,r.jsx)(n.strong,{children:"Subscribers"}),", ",(0,r.jsx)(n.strong,{children:"Publishers"}),", ",(0,r.jsx)(n.strong,{children:"Services"}),", ",(0,r.jsx)(n.strong,{children:"Action Servers"})," and ",(0,r.jsx)(n.strong,{children:"Action Clients"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"/turtlesim\n  Subscribers:\n    /parameter_events: rcl_interfaces/msg/ParameterEvent\n    /turtle1/cmd_vel: geometry_msgs/msg/Twist\n  Publishers:\n    /parameter_events: rcl_interfaces/msg/ParameterEvent\n    /rosout: rcl_interfaces/msg/Log\n    /turtle1/color_sensor: turtlesim/msg/Color\n    /turtle1/pose: turtlesim/msg/Pose\n  Service Servers:\n    /clear: std_srvs/srv/Empty\n    /kill: turtlesim/srv/Kill\n    /reset: std_srvs/srv/Empty\n    /spawn: turtlesim/srv/Spawn\n    /turtle1/set_pen: turtlesim/srv/SetPen\n    /turtle1/teleport_absolute: turtlesim/srv/TeleportAbsolute\n    /turtle1/teleport_relative: turtlesim/srv/TeleportRelative\n    /turtlesim/describe_parameters: rcl_interfaces/srv/DescribeParameters\n    /turtlesim/get_parameter_types: rcl_interfaces/srv/GetParameterTypes\n    /turtlesim/get_parameters: rcl_interfaces/srv/GetParameters\n    /turtlesim/list_parameters: rcl_interfaces/srv/ListParameters\n    /turtlesim/set_parameters: rcl_interfaces/srv/SetParameters\n    /turtlesim/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically\n  Service Clients:\n\n  Action Servers:\n    /turtle1/rotate_absolute: turtlesim/action/RotateAbsolute\n  Action Clients:\n"})}),"\n",(0,r.jsx)(n.h4,{id:"action-list",children:"Action List"}),"\n",(0,r.jsx)(n.p,{children:"To identify all the actions in the ROS graph, run the command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 action list\n"})}),"\n",(0,r.jsx)(n.p,{children:"Which will return:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"/turtle1/rotate_absolute\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This is the only action in the ROS graph right now controling the turtle\u2019s rotation. There is one ",(0,r.jsx)(n.strong,{children:"Action Client"})," (part of ",(0,r.jsx)(n.code,{children:"/teleop_turtle"}),") and one ",(0,r.jsx)(n.strong,{children:"Action Server"})," (part of ",(0,r.jsx)(n.code,{children:"/turtlesim"}),") for this action - see ",(0,r.jsx)(n.code,{children:"ros2 node info <node_name>"})," command above."]}),"\n",(0,r.jsx)(n.h4,{id:"action-types",children:"Action Types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 action list -t\n\n/turtle1/rotate_absolute [turtlesim/action/RotateAbsolute]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The type, e.g. ",(0,r.jsx)(n.code,{children:"turtlesim/action/RotateAbsolute"})," when executing an action from the command line or from code."]}),"\n",(0,r.jsx)(n.h4,{id:"action-info",children:"Action Info"}),"\n",(0,r.jsxs)(n.p,{children:["You can further introspect the ",(0,r.jsx)(n.code,{children:"/turtle1/rotate_absolute"})," action with the command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 action info /turtle1/rotate_absolute\n"})}),"\n",(0,r.jsx)(n.p,{children:"Which will return:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"Action: /turtle1/rotate_absolute\nAction clients: 1\n    /teleop_turtle\nAction servers: 1\n    /turtlesim\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"/teleop_turtle"})," node has an action client and the ",(0,r.jsx)(n.code,{children:"/turtlesim"})," node has an action server for the ",(0,r.jsx)(n.code,{children:"/turtle1/rotate_absolute action"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"interface",children:"Interface"}),"\n",(0,r.jsx)(n.p,{children:"To get the corresponding data formatting for an action type run the following command"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 interface show turtlesim/action/RotateAbsolute\n"})}),"\n",(0,r.jsx)(n.p,{children:"Which will return:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"The desired heading in radians\nfloat32 theta\n---\n\nThe angular displacement in radians to the starting position\nfloat32 delta\n---\n\nThe remaining rotation in radians\nfloat32 remaining\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The section of this message above the first ",(0,r.jsx)(n.code,{children:"---"})," is the structure (data type and name) of the ",(0,r.jsx)(n.strong,{children:"Goal"})," request. The next section is the structure of the ",(0,r.jsx)(n.strong,{children:"Result"}),". The last section is the structure of the ",(0,r.jsx)(n.strong,{children:"Feedback"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"action-send-goal",children:"Action Send Goal"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute "{theta: 1.37}"\n\n\nWaiting for an action server to become available...\nSending goal:\n     theta: 1.37\n\nGoal accepted with ID: 8bd5cf1c1d5f4f5a9047469113c681f6\n\nResult:\n    delta: -1.343999981880188\n\nGoal finished with status: SUCCEEDED\n'})}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-workspace",children:"Creating a Workspace"}),"\n",(0,r.jsx)(n.p,{children:"A workspace is a directory containing ROS 2 packages. You also have the option of sourcing an \u201coverlay\u201d - a secondary workspace where you can add new packages without interfering with the existing ROS 2 workspace that you\u2019re extending, or \u201cunderlay\u201d. Your underlay must contain the dependencies of all the packages in your overlay. Packages in your overlay will override packages in the underlay."}),"\n",(0,r.jsxs)(n.p,{children:["This is a brief tutorial on how to create and build a ROS 2 workspace with ",(0,r.jsx)(n.a,{href:"https://docs.ros.org/en/iron/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.html",children:"colcon"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo apt install python3-colcon-common-extensions\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-a-new-directory",children:"Create a new Directory"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir -p ~/ros2_ws/src\ncd ~/ros2_ws/src\n"})}),"\n",(0,r.jsx)(n.h3,{id:"clone-a-sample-repo",children:"Clone a Sample Repo"}),"\n",(0,r.jsxs)(n.p,{children:["ROS provides a ",(0,r.jsx)(n.a,{href:"https://github.com/ros/ros_tutorials/",children:"repository"})," with ready-to-use examples - also containing the ",(0,r.jsx)(n.code,{children:"turtlesim"})," - that we can use:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/ros/ros_tutorials.git -b iron\n"})}),"\n",(0,r.jsxs)(n.p,{children:["From the root of your workspace (",(0,r.jsx)(n.code,{children:"~/ros2_ws1"}),"), run the following command to resolve the package dependencies (",(0,r.jsx)(n.code,{children:"cd"})," if you're still in the ",(0,r.jsx)(n.code,{children:"src"})," directory with the ",(0,r.jsx)(n.code,{children:"ros_tutorials"})," clone):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo apt install python3-rosdep2\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"rosdep install -i --from-path src --rosdistro iron -y\n\n#All required rosdeps installed successfully\n"})}),"\n",(0,r.jsx)(n.h3,{id:"build-the-workspace-with-colcon",children:"Build the Workspace with Colcon"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"colcon build\n"})}),"\n",(0,r.jsxs)(n.p,{children:["And you will see that ",(0,r.jsx)(n.code,{children:"colcon`` has created new directories: "}),"build",(0,r.jsx)(n.code,{children:"  "}),"install",(0,r.jsx)(n.code,{children:"  "}),"log",(0,r.jsx)(n.code,{children:"  "}),"src`. The install directory is where your workspace\u2019s setup files are, which you can use to source your overlay."]}),"\n",(0,r.jsx)(n.h3,{id:"source-the-overlay",children:"Source the Overlay"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Before sourcing the overlay, it is very important that you open a new terminal, separate from the one where you built the workspace. Sourcing an overlay in the same terminal where you built, or likewise building where an overlay is sourced, may ",(0,r.jsx)(n.strong,{children:"create complex issues"}),". ",(0,r.jsx)(n.em,{children:"what is that supposed to mean?? hmm"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"In the new terminal, source your main ROS 2 environment as the \u201cunderlay\u201d, so you can build the overlay \u201con top of\u201d it:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd ~/ros2_ws\nsource install/local_setup.bash\n"})}),"\n",(0,r.jsx)(n.h3,{id:"run-the-build-package",children:"Run the Build Package"}),"\n",(0,r.jsxs)(n.p,{children:["Now you can run the ",(0,r.jsx)(n.code,{children:"turtlesim"})," package from the overlay:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 run turtlesim turtlesim_node\n"})}),"\n",(0,r.jsx)(n.h4,{id:"modify-the-overlay",children:"Modify the Overlay"}),"\n",(0,r.jsxs)(n.p,{children:["To verify that the simulation is this time executed from the overlay we can modify its source code. You can modify ",(0,r.jsx)(n.code,{children:"turtlesim"})," in your overlay by editing the title bar on the ",(0,r.jsx)(n.code,{children:"turtlesim"})," window. To do this, locate the ",(0,r.jsx)(n.code,{children:"turtle_frame.cpp"})," file in ",(0,r.jsx)(n.code,{children:"~/ros2_ws/src/ros_tutorials/turtlesim/src"}),". Open ",(0,r.jsx)(n.code,{children:"turtle_frame.cpp"})," with your preferred text editor."]}),"\n",(0,r.jsxs)(n.p,{children:["On line 52 you will see the function ",(0,r.jsx)(n.code,{children:'setWindowTitle("TurtleSim");'}),'. Change the value "TurtleSim" to "HeroTurtleSim", and save the file.']}),"\n",(0,r.jsxs)(n.p,{children:["Return to the first terminal where you ran ",(0,r.jsx)(n.code,{children:"colcon build"})," earlier and run it again. Return to the second terminal (where the overlay is sourced) and run turtlesim again:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 run turtlesim turtlesim_node\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"ROS2 Architecture and Concepts",src:s(928352).Z+"",width:"1250",height:"525"})}),"\n",(0,r.jsx)(n.p,{children:"To see that your underlay is still intact, open a brand new terminal and source only your ROS 2 installation. Run turtlesim again:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 run turtlesim turtlesim_node\n"})}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-package",children:"Creating a Package"}),"\n",(0,r.jsxs)(n.p,{children:["A package is an organizational unit for your ROS2 code. Package creation in ROS2 uses ",(0,r.jsx)(n.code,{children:"ament"})," as its build system and ",(0,r.jsx)(n.code,{children:"colcon"})," as its build tool. You can create a package using either CMake or Python. The min requirements for a Python package are:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"package.xml"})," file containing meta information about the package"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"resource/<package_name>"})," marker file for the package"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"setup.cfg"})," is required when a package has executables, so ros2 run can find them"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"setup.py"})," containing instructions for how to install the package"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<package_name>"})," - a directory with the same name as your package, used by ROS 2 tools to find your package, contains ",(0,r.jsx)(n.code,{children:"__init__.py"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The simplest possible package may have a file structure that looks like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"my_package/\n      package.xml\n      resource/my_package\n      setup.cfg\n      setup.py\n      my_package/\n"})}),"\n",(0,r.jsx)(n.p,{children:"A single workspace can contain as many packages as you want, each in their own folder. You can also have packages of different build types in one workspace (CMake, Python, etc.). You cannot have nested packages."}),"\n",(0,r.jsx)(n.p,{children:"The command syntax for creating a new package in ROS2 is:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd ~/ros2_ws/src\nros2 pkg create --build-type ament_python --node-name my_node my_package --license Apache-2.0\n\n\npackage name: my_package\ndestination directory: ~/ros2_ws/src\npackage format: 3\nversion: 0.0.0\ndescription: TODO: Package description\nmaintainer: ['me <me@todo.todo>']\nlicenses: ['Apache-2.0']\nbuild type: ament_python\ndependencies: []\nnode_name: my_node\ncreating folder ./my_package\ncreating ./my_package/package.xml\ncreating source folder\ncreating folder ./my_package/my_package\ncreating ./my_package/setup.py\ncreating ./my_package/setup.cfg\ncreating folder ./my_package/resource\ncreating ./my_package/resource/my_package\ncreating ./my_package/my_package/__init__.py\ncreating folder ./my_package/test\ncreating ./my_package/test/test_copyright.py\ncreating ./my_package/test/test_flake8.py\ncreating ./my_package/test/test_pep257.py\ncreating ./my_package/my_package/my_node.py\n"})}),"\n",(0,r.jsx)(n.h3,{id:"build-a-package",children:"Build a Package"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd ~/ros2_ws\ncolcon build\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will build all packages inside the ",(0,r.jsx)(n.code,{children:"scr"})," dir - you can also specify exactly which one you want to be build with the following command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"colcon build --packages-select my_package\n"})}),"\n",(0,r.jsx)(n.h3,{id:"source-the-setup-file",children:"Source the Setup File"}),"\n",(0,r.jsxs)(n.p,{children:["Switch to another terminal and from inside the ",(0,r.jsx)(n.code,{children:"ros2_ws"})," directory, run the following command to source your workspace:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd ~/ros2_ws\nsource install/local_setup.bash\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To run the executable you created using the ",(0,r.jsx)(n.code,{children:"--node-name"})," argument during package creation, enter the command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 run my_package my_node\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Which will return a message to your terminal: ",(0,r.jsx)(n.code,{children:"Hi from my_package."})]}),"\n",(0,r.jsx)(n.h3,{id:"customize-packagexml",children:"Customize package.xml"}),"\n",(0,r.jsxs)(n.p,{children:["You may have noticed in the return message after creating your package that the fields ",(0,r.jsx)(n.code,{children:"description"})," and ",(0,r.jsx)(n.code,{children:"license"})," contain ",(0,r.jsx)(n.code,{children:"TODO"})," notes. That\u2019s because the package description and license declaration are not automatically set, but are required if you ever want to release your package. The ",(0,r.jsx)(n.code,{children:"maintainer"})," field may also need to be filled in:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"nano ~/ros2_ws/src/my_package/package.xml\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.ah)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},603905:(e,n,s)=>{s.d(n,{ah:()=>c});var r=s(667294);function t(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}function a(e,n){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),s.push.apply(s,r)}return s}function i(e){for(var n=1;n<arguments.length;n++){var s=null!=arguments[n]?arguments[n]:{};n%2?a(Object(s),!0).forEach((function(n){t(e,n,s[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):a(Object(s)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(s,n))}))}return e}function l(e,n){if(null==e)return{};var s,r,t=function(e,n){if(null==e)return{};var s,r,t={},a=Object.keys(e);for(r=0;r<a.length;r++)s=a[r],n.indexOf(s)>=0||(t[s]=e[s]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)s=a[r],n.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(t[s]=e[s])}return t}var o=r.createContext({}),c=function(e){var n=r.useContext(o),s=n;return e&&(s="function"==typeof e?e(n):i(i({},n),e)),s},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var s=e.components,t=e.mdxType,a=e.originalType,o=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),u=c(s),p=t,m=u["".concat(o,".").concat(p)]||u[p]||d[p]||a;return s?r.createElement(m,i(i({ref:n},h),{},{components:s})):r.createElement(m,i({ref:n},h))}));h.displayName="MDXCreateElement"},627923:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/ROS2_01-b265b0fb73a75a1247225217109bfadb.webp"},928352:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/ROS2_02-e91e55559657f27cbaaeac50f5ce69fa.webp"},929728:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-252551beac0b36b4ba53ccd380897f8e.jpg"}}]);