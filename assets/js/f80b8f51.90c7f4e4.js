"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[61431],{984572:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var t=r(785893),a=r(603905);const s={sidebar_position:3863,slug:"2023-12-22",title:"Opentofu vs Hashicorp Terraform",authors:"mpolinowski",tags:["Terraform","LINUX"],description:"The open source infrastructure as code alternative to Hashicorp Terraform."},i=void 0,o={id:"DevOps/Hashicorp/2023-12-23-opentofu-vs-terraform/index",title:"Opentofu vs Hashicorp Terraform",description:"The open source infrastructure as code alternative to Hashicorp Terraform.",source:"@site/docs/DevOps/Hashicorp/2023-12-23-opentofu-vs-terraform/index.md",sourceDirName:"DevOps/Hashicorp/2023-12-23-opentofu-vs-terraform",slug:"/DevOps/Hashicorp/2023-12-23-opentofu-vs-terraform/2023-12-22",permalink:"/docs/DevOps/Hashicorp/2023-12-23-opentofu-vs-terraform/2023-12-22",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2023-12-23-opentofu-vs-terraform/index.md",tags:[{label:"Terraform",permalink:"/docs/tags/terraform"},{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:3863,frontMatter:{sidebar_position:3863,slug:"2023-12-22",title:"Opentofu vs Hashicorp Terraform",authors:"mpolinowski",tags:["Terraform","LINUX"],description:"The open source infrastructure as code alternative to Hashicorp Terraform."},sidebar:"tutorialSidebar",previous:{title:"Hashicorp",permalink:"/docs/category/hashicorp"},next:{title:"Hashicorp Terraform - Docker Provider 2024",permalink:"/docs/DevOps/Hashicorp/2023-12-22-hashicorp-terraform-docker-2024/2023-12-22"}},c={},l=[{value:"Installation Linux",id:"installation-linux",level:2},{value:"Get Started - Docker",id:"get-started---docker",level:2},{value:"Running the App",id:"running-the-app",level:3},{value:"Real World",id:"real-world",level:2},{value:"ntfy Server",id:"ntfy-server",level:3},{value:"Run the Container",id:"run-the-container",level:4}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.ah)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Shen Zhen, China",src:r(898983).Z+"",width:"2230",height:"839"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#installation-linux",children:"Installation Linux"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#get-started---docker",children:"Get Started - Docker"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#running-the-app",children:"Running the App"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#real-world",children:"Real World"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#ntfy-server",children:"ntfy Server"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#run-the-container",children:"Run the Container"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Previously named OpenTF, ",(0,t.jsx)(n.a,{href:"https://opentofu.org/",children:"OpenTofu"})," is a fork of Terraform that is open-source, community-driven, and managed by the Linux Foundation."]}),"\n",(0,t.jsx)(n.h2,{id:"installation-linux",children:"Installation Linux"}),"\n",(0,t.jsxs)(n.p,{children:["There is an ",(0,t.jsx)(n.a,{href:"https://opentofu.org/docs/intro/install/standalone/",children:"install script"})," - but I just want to do it manually from the ",(0,t.jsx)(n.a,{href:"https://github.com/opentofu/opentofu/releases",children:"latest Github release"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"wget https://github.com/opentofu/opentofu/releases/download/v1.6.1/tofu_1.6.1_linux_amd64.zip\nwget https://github.com/opentofu/opentofu/releases/download/v1.6.1/tofu_1.6.1_SHA256SUMS\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sha256sum tofu_1.6.1_linux_amd64.zip\nsha256sum -c tofu_1.6.1_SHA256SUMS\n\n> tofu_1.6.1_linux_amd64.zip: OK\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"unzip tofu_1.6.1_linux_amd64.zip\nrm tofu_1.6.1_linux_amd64.zip\n\nsudo mv tofu /usr/bin/tofu\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"tofu version\n> OpenTofu v1.6.1\n> on linux_amd64\n"})}),"\n",(0,t.jsx)(n.h2,{id:"get-started---docker",children:"Get Started - Docker"}),"\n",(0,t.jsx)(n.p,{children:"I will start where the Terraform Docker hello world example left off:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"./main.tf"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'terraform {\n  required_providers {\n    docker = {\n      source  = "kreuzwerker/docker"\n      version = "~> 3.0.1"\n    }\n  }\n}\n\nprovider "docker" {}\n\nresource "docker_image" "nginx" {\n  name         = var.ingress_image_version\n  keep_locally = false\n}\n\nresource "docker_container" "nginx" {\n  image = docker_image.nginx.image_id\n  name  = var.ingress_container_name\n  ports {\n    internal = var.ingress_http_internal\n    external = var.ingress_http_external\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"./variables.tf"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'variable "ingress_image_version" {\n    description = "Version of the NGINX ingress image"\n    type = string\n}\n\nvariable "ingress_http_external" {\n    description = "External http port of the NGINX ingress"\n    type = number\n}\n\nvariable "ingress_http_internal" {\n    description = "Internal http port of the NGINX ingress"\n    type = number\n}\n\nvariable "ingress_container_name" {\n    description = "Name of the NGINX ingress container"\n    type = string\n} \n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"./terraform.tfvars"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'ingress_image_version="nginx:latest"\ningress_http_external=8888\ningress_http_internal=80\ningress_container_name= "ingress"\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"./outputs.tf"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'output "container_id" {\n  description = "ID of the Docker container"\n  value       = docker_container.nginx.id\n}\n\noutput "image_id" {\n  description = "ID of the Docker image"\n  value       = docker_image.nginx.id\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"running-the-app",children:"Running the App"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"tofu fmt\n> outputs.tf\n> terraform.tfvars\n> variables.tf\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"tofu init\n> OpenTofu has been successfully initialized!\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"tofu validate\n> Success! The configuration is valid.\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'tofu apply\n> Apply complete! Resources: 2 added, 0 changed, 0 destroyed.\n\n> Outputs:\n> container_id = "ba637c54433152fa02351c5afe28d44feb376012e01b64e61d38b0788ba5bbf5"\n> image_id = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6nginx:latest"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Inspect the current state using:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"terraform show\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"terraform state list\n> docker_container.nginx\n> docker_image.nginx\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Run ",(0,t.jsx)(n.code,{children:"docker ps"})," to view the NGINX container running in Docker via Terraform:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker ps\n\nCONTAINER ID   IMAGE          STATUS         PORTS                  NAMES\nba637c544331   a8758716bb6a   Up 54 seconds  0.0.0.0:8888->80/tcp  ingress\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl localhost:8888\n\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n...\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"tofu destroy\nDestroy complete! Resources: 2 destroyed.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"real-world",children:"Real World"}),"\n",(0,t.jsx)(n.h3,{id:"ntfy-server",children:"ntfy Server"}),"\n",(0,t.jsxs)(n.p,{children:["Let's try to deploy ",(0,t.jsx)(n.a,{href:"/docs/DevOps/Provisioning/2024-01-17--ntfy-notification-service/2024-01-17",children:"ntfy"})," using OpenTofu. The Docker-Compose file for it looks like this:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"docker-compose.yml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:'version: "3"\n\nservices:\n  ntfy:\n    image: binwiederhier/ntfy\n    container_name: ntfy\n    command:\n      - serve\n    environment:\n      - TZ=UTC    # optional: set desired timezone\n    user: 1002:1002 # replace with the user/group or uid/gid\n    volumes:\n      - ./cache:/var/cache/ntfy\n      - ./config:/etc/ntfy\n      - ./db:/var/lib/ntfy/\n    ports:\n      - 8000:80 # exposed on port 8000 (you can change it)\n    restart: unless-stopped\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"./variables.tf"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'variable "image_version" {\n  description = "Version of the ntfy Docker image"\n  type        = string\n}\n\nvariable "container_name" {\n  description = "Name of the ntfy Docker container"\n  type        = string\n}\n\nvariable "http_internal" {\n  description = "Internal http port of the nfty service"\n  type        = number\n}\n\nvariable "http_external" {\n  description = "External http port of the nfty service"\n  type        = number\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"./terraform.tfvars"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'image_version  = "binwiederhier/ntfy:latest"\ncontainer_name = "ntfy"\nhttp_internal  = 80\nhttp_external  = 8080\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"./main.tf"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'terraform {\n  required_providers {\n    docker = {\n      source  = "kreuzwerker/docker"\n      version = "~> 3.0.1"\n    }\n  }\n}\n\nprovider "docker" {}\n\nresource "docker_image" "ntfy" {\n  name         = var.image_version\n  keep_locally = false\n}\n\nresource "docker_container" "ntfy" {\n  image    = docker_image.ntfy.image_id\n  name     = var.container_name\n  user     = "1002:1002"\n  start    = true\n  must_run = true\n  restart  = "unless-stopped"\n\n  ports {\n    internal = var.http_internal\n    external = var.http_external\n  }\n\n  command = [\n    "serve"\n  ]\n\n  env = [\n    "TZ=UTC"\n  ]\n\n    upload {\n    file = "/var/cache/ntfy/cache.db"\n    source = "./cache/cache.db"\n  }\n\n  upload {\n    file = "/var/lib/ntfy/user.db"\n    source = "./lib/user.db"\n  }\n\n  upload {\n    content = <<EOF\nbase-url: "http://192.168.2.112"\nlisten-http: ":80"\ncache-file: "/var/cache/ntfy/cache.db"\ncache-duration: "12h"\nauth-file: /var/lib/ntfy/user.db\nauth-default-access: "deny-all"\nbehind-proxy: false\nattachment-cache-dir: "/var/cache/ntfy/attachments"\nattachment-total-size-limit: "5G"\nattachment-file-size-limit: "15M"\nattachment-expiry-duration: "3h"\nweb-root: /ntfy\nenable-signup: false\nenable-login: true\nenable-reservations: true\nlog-level: info\nlog-format: json\nlog-file: /var/log/ntfy.log\n      EOF\n\n    file = "/etc/ntfy/server.yml"\n  }\n\n  healthcheck {\n    test     = ["CMD", "curl", "-f", "http://localhost:8080/ntfy"]\n    interval = "15s"\n    timeout  = "2s"\n    retries  = 5\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/binwiederhier/ntfy/issues/464",children:"Feature request: Allow specifying users and ACLs declaratively"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"I was not able to get the volume mounts to work. I guess that Terraform handles the file system similar to Nomad - which means that you would have to configure Terraform to access the file system instead of being locked in inside the Docker overlay. But I cannot find any documentation for it."}),"\n",(0,t.jsxs)(n.p,{children:["So I replaced all volume mounts with file uploads. ",(0,t.jsx)(n.strong,{children:"Note"})," that you have to start ",(0,t.jsx)(n.code,{children:"ntfy"})," once and create your users, subscriptions and permissions. Then copy the ",(0,t.jsx)(n.code,{children:"cache.db"})," and ",(0,t.jsx)(n.code,{children:"user.db"})," to where you want to Terraform to pick them up on your next deployment."]}),"\n",(0,t.jsx)(n.h4,{id:"run-the-container",children:"Run the Container"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"tofu init\ntofu fmt\ntofu validate\ntofu apply\ntofu destroy\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.ah)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>l});var t=r(667294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),u=l(r),p=a,f=u["".concat(c,".").concat(p)]||u[p]||d[p]||s;return r?t.createElement(f,i(i({ref:n},h),{},{components:r})):t.createElement(f,i({ref:n},h))}));h.displayName="MDXCreateElement"},898983:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"}}]);