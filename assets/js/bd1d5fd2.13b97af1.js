"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[17784],{281640:e=>{e.exports=JSON.parse('{"label":"Ray","permalink":"/docs/tags/ray","allTagsPath":"/docs/tags","count":5,"items":[{"id":"IoT-and-Machine-Learning/AIOps/2023-01-22-python-ray-introduction/index","title":"Python Ray Basic Concepts","description":"Ray is an open-source unified compute framework that makes it easy to scale AI and general Python workloads","permalink":"/docs/IoT-and-Machine-Learning/AIOps/2023-01-22-python-ray-introduction/2023-01-22"},{"id":"IoT-and-Machine-Learning/AIOps/2023-01-29-python-ray-deployments/index","title":"Python Ray Deployments","description":"Use Ray to deploy your remote services.","permalink":"/docs/IoT-and-Machine-Learning/AIOps/2023-01-29-python-ray-deployments/2023-01-29"},{"id":"IoT-and-Machine-Learning/AIOps/2023-01-31-python-ray-model-serving/index","title":"Python Ray Model Serving","description":"Using Ray Serve for ML Model Serving.","permalink":"/docs/IoT-and-Machine-Learning/AIOps/2023-01-31-python-ray-model-serving/2023-01-31"},{"id":"IoT-and-Machine-Learning/AIOps/2023-01-26-python-ray-remote-actors/index","title":"Python Ray Remote Actors","description":"Use Ray Actors to maintain a state between invocations.","permalink":"/docs/IoT-and-Machine-Learning/AIOps/2023-01-26-python-ray-remote-actors/2023-01-26"},{"id":"IoT-and-Machine-Learning/AIOps/2023-01-23-python-ray-remote-functions/index","title":"Python Ray Remote Functions","description":"Remote functions can be run in a separate process on the local machine - spreading out the workload over several cores. Or can be executed on remote machines in your server cluster.","permalink":"/docs/IoT-and-Machine-Learning/AIOps/2023-01-23-python-ray-remote-functions/2023-01-23"}],"unlisted":false}')}}]);