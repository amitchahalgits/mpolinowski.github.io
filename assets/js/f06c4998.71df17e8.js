"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[42710],{971568:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var s=r(474848),a=r(28453);const i={sidebar_position:5090,slug:"2021-10-25",title:"Matrix Secure Messaging",authors:"mpolinowski",tags:["Linux"]},t=void 0,o={id:"DevOps/Provisioning/2021-10-25--matrix-secure-messaging/index",title:"Matrix Secure Messaging",description:"Shenzhen, China",source:"@site/docs/DevOps/Provisioning/2021-10-25--matrix-secure-messaging/index.md",sourceDirName:"DevOps/Provisioning/2021-10-25--matrix-secure-messaging",slug:"/DevOps/Provisioning/2021-10-25--matrix-secure-messaging/2021-10-25",permalink:"/docs/DevOps/Provisioning/2021-10-25--matrix-secure-messaging/2021-10-25",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Provisioning/2021-10-25--matrix-secure-messaging/index.md",tags:[{label:"Linux",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:5090,frontMatter:{sidebar_position:5090,slug:"2021-10-25",title:"Matrix Secure Messaging",authors:"mpolinowski",tags:["Linux"]},sidebar:"tutorialSidebar",previous:{title:"Installing a Discourse Forum on Debian Bullseye with Docker",permalink:"/docs/DevOps/Provisioning/2022-01-23--installing-discourse-docker/2022-01-23"},next:{title:"Setting up Wordpress with Traefik v2",permalink:"/docs/DevOps/Provisioning/2021-10-12--traefik-third-attempt/2021-10-12"}},c={},d=[{value:"Setup",id:"setup",level:2},{value:"Set up the Reverse Proxy",id:"set-up-the-reverse-proxy",level:2},{value:"NGINX Proxy Service",id:"nginx-proxy-service",level:3},{value:"Letsencrypt Proxy Companion Service",id:"letsencrypt-proxy-companion-service",level:3},{value:"Set up Synapse",id:"set-up-synapse",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Adding PostgreSQL",id:"adding-postgresql",level:2},{value:"Configure Synapse",id:"configure-synapse",level:3},{value:"Test the Synapse Matrix Homeserver",id:"test-the-synapse-matrix-homeserver",level:2},{value:"Setting up Federation in Synapse",id:"setting-up-federation-in-synapse",level:2},{value:"Configuration File for NGINX",id:"configuration-file-for-nginx",level:3},{value:"Edit the Docker Compose File",id:"edit-the-docker-compose-file",level:3},{value:"Testing",id:"testing",level:3},{value:"Deactivate Registrations",id:"deactivate-registrations",level:2},{value:"Configuration",id:"configuration-1",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Shenzhen, China",src:r(896566).A+"",width:"1500",height:"559"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#setup",children:"Setup"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#set-up-the-reverse-proxy",children:"Set up the Reverse Proxy"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#nginx-proxy-service",children:"NGINX Proxy Service"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#letsencrypt-proxy-companion-service",children:"Letsencrypt Proxy Companion Service"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#set-up-synapse",children:"Set up Synapse"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#configuration",children:"Configuration"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#adding-postgresql",children:"Adding PostgreSQL"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#configure-synapse",children:"Configure Synapse"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#test-the-synapse-matrix-homeserver",children:"Test the Synapse Matrix Homeserver"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#setting-up-federation-in-synapse",children:"Setting up Federation in Synapse"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#configuration-file-for-nginx",children:"Configuration File for NGINX"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#edit-the-docker-compose-file",children:"Edit the Docker Compose File"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#testing",children:"Testing"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#deactivate-registrations",children:"Deactivate Registrations"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#configuration-1",children:"Configuration"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsx)(n.p,{children:"Create a work directory and set the necessary permissions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir -p /opt/matrix/synapse/{data,certs,vhost,html,db}\r\nchown -R 991:991 /opt/matrix\r\nchown -R 999:999 /opt/matrix/synapse/db\r\n# chmod -R 777 /opt/matrix\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then we need an internal docker network for the services to communicate on:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker network create matrix\n"})}),"\n",(0,s.jsx)(n.h2,{id:"set-up-the-reverse-proxy",children:"Set up the Reverse Proxy"}),"\n",(0,s.jsx)(n.h3,{id:"nginx-proxy-service",children:"NGINX Proxy Service"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://hub.docker.com/r/jwilder/nginx-proxy",children:"jwilder/nginx-proxy"})," nginx-proxy sets up a container running nginx and ",(0,s.jsx)(n.a,{href:"http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/",children:"docker-gen"}),". ",(0,s.jsx)(n.a,{href:"http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/",children:"docker-gen"})," generates reverse proxy configs for nginx and reloads nginx when containers are started and stopped."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano /opt/matrix/docker-compose.yml\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:'services:\r\n    proxy:\r\n        image: "jwilder/nginx-proxy"\r\n        container_name: "proxy"\r\n        volumes:\r\n            - "certs:/etc/nginx/certs"\r\n            - "vhost:/etc/nginx/vhost.d"\r\n            - "html:/usr/share/nginx/html"\r\n            - "/run/docker.sock:/tmp/docker.sock:ro"\r\n            - "/opt/matrix/synapse-federation:/etc/nginx/vhost.d/time.instar.com/synapse-federation"\r\n        networks: ["matrix"]\r\n        restart: "always"\r\n        ports:\r\n            - "80:80"\r\n            - "443:443"\r\n\r\nnetworks:\r\n    matrix:\r\n        external: true\r\n\r\nvolumes:\r\n  certs:\r\n    driver: local # Define the driver and options under the volume name\r\n    driver_opts:\r\n      type: none\r\n      device: /opt/matrix/synapse/certs\r\n      o: bind\r\n  vhost:\r\n    driver: local # Define the driver and options under the volume name\r\n    driver_opts:\r\n      type: none\r\n      device: /opt/matrix/synapse/vhost\r\n      o: bind\r\n  html:\r\n    driver: local # Define the driver and options under the volume name\r\n    driver_opts:\r\n      type: none\r\n      device: /opt/matrix/synapse/html\r\n      o: bind\n'})}),"\n",(0,s.jsx)(n.h3,{id:"letsencrypt-proxy-companion-service",children:"Letsencrypt Proxy Companion Service"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://hub.docker.com/r/jrcs/letsencrypt-nginx-proxy-companion",children:"letsencrypt-nginx-proxy-companion"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano /opt/matrix/docker-compose.yml\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:'services:\r\n    proxy:\r\n\r\n        ...\r\n\r\n    letsencrypt:\r\n        image: "jrcs/letsencrypt-nginx-proxy-companion"\r\n        container_name: "letsencrypt"\r\n        volumes:\r\n            - "certs:/etc/nginx/certs"\r\n            - "vhost:/etc/nginx/vhost.d"\r\n            - "html:/usr/share/nginx/html"\r\n            - "/run/docker.sock:/var/run/docker.sock:ro"\r\n        environment:\r\n            NGINX_PROXY_CONTAINER: "proxy"\r\n        networks: ["matrix"]\r\n        restart: "always"\r\n        depends_on: ["proxy"]\r\n\r\n        ...\n'})}),"\n",(0,s.jsx)(n.p,{children:"Run the compose file with:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt-get update\r\nsudo apt-get install docker-compose-plugin\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker compose version\r\nDocker Compose version v2.24.7\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker compose -f /opt/matrix/docker-compose.yml up -d\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl localhost\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<html>\r\n<head><title>503 Service Temporarily Unavailable</title></head>\r\n<body>\r\n<center><h1>503 Service Temporarily Unavailable</h1></center>\r\n<hr><center>nginx</center>\r\n</body>\r\n</html>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"set-up-synapse",children:"Set up Synapse"}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano /opt/matrix/synapse/docker-compose.yml\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:'services:\r\n    synapse:\r\n        image: "matrixdotorg/synapse:latest"\r\n        restart: always\r\n        container_name: "synapse"\r\n        volumes:\r\n            - "/opt/matrix/synapse/data:/data"\r\n        environment:\r\n            # Replace this with your domain\r\n            VIRTUAL_HOST: "sub.domain.com"\r\n            VIRTUAL_PORT: 8008\r\n            # Replace this with your domain\r\n            LETSENCRYPT_HOST: "sub.domain.com"\r\n            # Replace this with your domain\r\n            SYNAPSE_SERVER_NAME: "sub.domain.com"\r\n            SYNAPSE_REPORT_STATS: "yes"\r\n        networks: ["matrix"]\r\n\r\n\r\nnetworks:\r\n    matrix:\r\n        external: true\n'})}),"\n",(0,s.jsx)(n.p,{children:"Generate the configuration file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker compose -f /opt/matrix/synapse/docker-compose.yml run --rm synapse generate\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This will generate the ",(0,s.jsx)(n.a,{href:"https://github.com/matrix-org/synapse/tree/master/docker",children:"config file"})," inside ",(0,s.jsx)(n.code,{children:"./data"}),", named ",(0,s.jsx)(n.code,{children:"homeserver.yaml"}),". We need to make the following changes:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"server_name"})," variable is set to the subdomain of your choice, as set in the environment variable ",(0,s.jsx)(n.code,{children:"SYNAPSE_SERVER_NAME"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TLS"})," is set to ",(0,s.jsx)(n.code,{children:"false"}),". You are using a reverse proxy, so TLS is handled through your web server. Leave the port be."]}),"\n",(0,s.jsxs)(n.li,{children:["Make sure ",(0,s.jsx)(n.code,{children:"enable_registration"})," is set to ",(0,s.jsx)(n.code,{children:"true"}),", so that you can sign up and use your homeserver."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano /opt/matrix/synapse/data/homeserver.yaml\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:'# Configuration file for Synapse.\r\n#\r\n# This is a YAML file: see [1] for a quick introduction. Note in particular\r\n# that *indentation is important*: all the elements of a list or dictionary\r\n# should have the same indentation.\r\n#\r\n# [1] https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html\r\n#\r\n# For more information on how to configure Synapse, including a complete accounting of\r\n# each option, go to docs/usage/configuration/config_documentation.md or\r\n# https://element-hq.github.io/synapse/latest/usage/configuration/config_documentation.html\r\n## Server ##\r\nserver_name: "sub.domain.com"\r\npid_file: /data/homeserver.pid\r\nlisteners:\r\n  - port: 8008\r\n    tls: false\r\n    type: http\r\n    x_forwarded: true\r\n    resources:\r\n      - names: [client, federation]\r\n        compress: false\r\ndatabase:\r\n  name: sqlite3\r\n    args:\r\n    database: /data/homeserver.db\r\nlog_config: "/data/sub.domain.com.log.config"\r\nmedia_store_path: /data/media_store\r\nregistration_shared_secret: secretkey\r\nreport_stats: true\r\nmacaroon_secret_key: secretkey\r\nform_secret: secretkey\r\nsigning_key_path: "/data/sub.domain.com.signing.key"\r\ntrusted_key_servers:\r\n  - server_name: "matrix.org"\r\n\r\n\r\n# vim:ft=yaml\n'})}),"\n",(0,s.jsxs)(n.p,{children:["And make sure that all necessary ports are open on your server - e.g. with ",(0,s.jsx)(n.code,{children:"ufw"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# ufw allow 8448/tcp\r\nufw allow http\r\nufw allow https\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now that everything is in place, you can start synapse using a command as simple as:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker compose -f /opt/matrix/synapse/docker-compose.yml up -d\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Matrix Messenger Synapse",src:r(278051).A+"",width:"987",height:"523"})}),"\n",(0,s.jsx)(n.p,{children:"If the container crashes immediately check the container logs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'docker ps -a\r\nCONTAINER ID   IMAGE                       COMMAND      CREATED          STATUS\r\n5e5c18fcf2f8   matrixdotorg/synapse:latest "/start.py"  19 seconds ago   Exited (1)\n'})}),"\n",(0,s.jsx)(n.p,{children:"In this case the mounted in configuration file was not readable by the container due to a permission issue:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker logs 5e5c18fcf2f8\r\nStarting synapse with args -m synapse.app.homeserver --config-path /data/homeserver.yaml\r\n\r\nError in configuration at 'signing_key':\r\n  Error accessing file '/data/sub.domain.com.signing.key':\r\n    [Errno 13] Permission denied: '/data/sub.domain.com.signing.key'\n"})}),"\n",(0,s.jsx)(n.h2,{id:"adding-postgresql",children:"Adding PostgreSQL"}),"\n",(0,s.jsxs)(n.p,{children:["By default, synapse uses ",(0,s.jsx)(n.strong,{children:"SQLite"})," for its database. For a more important usecase, I recommend using PostgreSQL instead - if you need it, simply add it to your compose file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano /opt/matrix/synapse/docker-compose.yml\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:'version: "3"\r\n\r\nservices:\r\n    synapse:\r\n\r\n        ...\r\n\r\n    postgresql:\r\n        image: postgres:latest\r\n        container_name: synapsedb\r\n        restart: always\r\n        environment:\r\n            POSTGRES_PASSWORD: secretdbpassword\r\n            POSTGRES_USER: synapse\r\n            POSTGRES_DB: synapse\r\n            POSTGRES_INITDB_ARGS: "--encoding=\'UTF8\' --lc-collate=\'C\' --lc-ctype=\'C\'"\r\n        volumes:\r\n            - "/opt/matrix/synapse/db:/var/lib/postgresql/data"\r\n        networks: ["matrix"]\r\n\r\n        ...\r\n\r\nnetworks:\r\n    matrix:\r\n        external: true\n'})}),"\n",(0,s.jsx)(n.h3,{id:"configure-synapse",children:"Configure Synapse"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano /opt/matrix/synapse/data/homeserver.yaml\n"})}),"\n",(0,s.jsx)(n.p,{children:"And replace the SQLite configuration in:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano /opt/matrix/synapse/data/homeserver.yaml\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:'## Server ##\r\nserver_name: "sub.domain.com"\r\npid_file: /data/homeserver.pid\r\nlisteners:\r\n  - port: 8008\r\n    tls: false\r\n    type: http\r\n    x_forwarded: true\r\n    resources:\r\n      - names: [client, federation]\r\n        compress: false\r\ndatabase:\r\n  # name: sqlite3\r\n  #  args:\r\n  # database: /data/homeserver.db\r\n  name: psycopg2\r\n  args:\r\n    user: synapse\r\n    password: secretdbpassword\r\n    database: synapse\r\n    host: synapsedb\r\n    cp_min: 5\r\n    cp_max: 10\r\nlog_config: "/data/sub.domain.com.log.config"\r\nmedia_store_path: /data/media_store\r\nregistration_shared_secret: secretkey\r\nreport_stats: true\r\nmacaroon_secret_key: secretkey\r\nform_secret: secretkey\r\nsigning_key_path: "/data/sub.domain.com.signing.key"\r\ntrusted_key_servers:\r\n  - server_name: "matrix.org"\r\n\r\n\r\n# vim:ft=yaml\n'})}),"\n",(0,s.jsx)(n.p,{children:"The name of the database is psycopg2, which is a PostgreSQL adapter for python. Now reload the compose file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker compose -f /opt/matrix/synapse/docker-compose.yml down\r\ndocker compose -f /opt/matrix/synapse/docker-compose.yml up -d\n"})}),"\n",(0,s.jsx)(n.p,{children:"Verify that the container is now using the Postgres Database:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'docker exec -ti synapsedb psql -d synapse -U synapse\r\n\r\npsql (16.2 (Debian 16.2-1.pgdg120+2))\r\nType "help" for help.\r\n\r\nsynapse=# \\l\r\n                            List of databases                     \r\n   Name    |  Owner  | Encoding |  Access privileges  \r\n-----------+---------+----------+---------------------\r\n postgres  | synapse | UTF8     | \r\n synapse   | synapse | UTF8     | \r\n template0 | synapse | UTF8     | =c/synapse         +\r\n           |         |          | synapse=CTc/synapse\r\n template1 | synapse | UTF8     | =c/synapse         +\r\n           |         |          | synapse=CTc/synapse\r\n\r\nsynapse=# \\c synapse\r\nYou are now connected to database "synapse" as user "synapse".\r\nsynapse=# \\dt\r\n                             List of relations\r\n Schema |                      Name                      | Type  |  Owner  \r\n--------+------------------------------------------------+-------+---------\r\n public | access_tokens                                  | table | synapse\r\n public | account_data                                   | table | synapse\r\n public | account_validity                               | table | synapse\r\n public | application_services_state                     | table | synapse\r\n ...\n'})}),"\n",(0,s.jsx)(n.h2,{id:"test-the-synapse-matrix-homeserver",children:"Test the Synapse Matrix Homeserver"}),"\n",(0,s.jsxs)(n.p,{children:["Our Synapse Server now allows us to use the Matrix protocol to exchange messages. But we still need to install a client to interact with our server. A list of ",(0,s.jsx)(n.a,{href:"https://matrix.org/clients-matrix/",children:"optional clients can be found here"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Matrix Messenger Synapse",src:r(941192).A+"",width:"1024",height:"662"})}),"\n",(0,s.jsx)(n.p,{children:"Add your server address instead of the official server network and create an account - done!"}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-federation-in-synapse",children:"Setting up Federation in Synapse"}),"\n",(0,s.jsx)(n.p,{children:"Federation is basically the ability to communicate with users on a different homeserver."}),"\n",(0,s.jsxs)(n.p,{children:["By default, each matrix server tries to reach another matrix server via port ",(0,s.jsx)(n.code,{children:"8443"}),". The following process basically tells the other servers to use a different port. Because https is already working in port ",(0,s.jsx)(n.code,{children:"443"}),", you're simply going to delegate the default matrix communication port to ",(0,s.jsx)(n.code,{children:"443"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"configuration-file-for-nginx",children:"Configuration File for NGINX"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano /opt/matrix/synapse-federation\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'location /.well-known/matrix/server {\r\n    return 200 \'{"m.server": "sub.domain.com:443"}\';\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Change ",(0,s.jsx)(n.code,{children:"sub.domain.com"})," to your domain."]}),"\n",(0,s.jsx)(n.h3,{id:"edit-the-docker-compose-file",children:"Edit the Docker Compose File"}),"\n",(0,s.jsxs)(n.p,{children:["Open your ",(0,s.jsx)(n.code,{children:"docker-compose.yml"})," file and add another entry to the volumes array:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano /opt/matrix/docker-compose.yml\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:'services:\r\n    proxy:\r\n        image: "jwilder/nginx-proxy"\r\n        container_name: "proxy"\r\n        volumes:\r\n            - "/opt/matrix/synapse/certs:/etc/nginx/certs"\r\n            - "/opt/matrix/synapse/vhost:/etc/nginx/vhost.d"\r\n            - "/opt/matrix/synapse/html:/usr/share/nginx/html"\r\n            - "/run/docker.sock:/tmp/docker.sock:ro"\r\n            - /opt/matrix/synapse-federation:/etc/nginx/vhost.d/sub.domain.com/synapse-federation\r\n        networks: ["matrix"]\r\n        restart: "always"\r\n        ports:\r\n            - "80:80"\r\n            - "443:443"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Change ",(0,s.jsx)(n.code,{children:"sub.domain.com"})," to your domain. Now reload the compose file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker compose -f /opt/matrix/docker-compose.yml down\r\ndocker compose -f /opt/matrix/docker-compose.yml up -d\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testing",children:"Testing"}),"\n",(0,s.jsxs)(n.p,{children:["Run the curl command and you should receive a ",(0,s.jsx)(n.code,{children:"true"})," as response (make sure you have ",(0,s.jsx)(n.code,{children:"jq"})," installed):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl https://federationtester.matrix.org/api/report?server_name=sub.domain.com --silent | jq -r '.FederationOK'\r\ntrue\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Change ",(0,s.jsx)(n.code,{children:"sub.domain.com"})," to your domain."]}),"\n",(0,s.jsx)(n.h2,{id:"deactivate-registrations",children:"Deactivate Registrations"}),"\n",(0,s.jsx)(n.p,{children:"Once everyone joined shut of the registration option to your server:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano /opt/matrix/synapse/data/homeserver.yaml\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:"## Registration ##\r\nenable_registration: false\n"})}),"\n",(0,s.jsx)(n.p,{children:"And cycle the synapse service to take effect!"}),"\n",(0,s.jsx)(n.h2,{id:"configuration-1",children:"Configuration"}),"\n",(0,s.jsx)(n.p,{children:"The server starts up with user registration deactivated:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Matrix Messenger Synapse",src:r(935057).A+"",width:"1018",height:"433"})}),"\n",(0,s.jsx)(n.p,{children:"We can now use the admin API to create a user:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker exec -ti synapse register_new_matrix_user\r\n\r\nusage: register_new_matrix_user [-h] [-u USER] [-p PASSWORD] [-t USER_TYPE] [-a | --no-admin] (-c CONFIG | -k SHARED_SECRET) [server_url]\r\nregister_new_matrix_user: error: one of the arguments -c/--config -k/--shared-secret is required\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The shared secret was generated for us in the home server configuration. Which is mounted to ",(0,s.jsx)(n.code,{children:"/data/homeserver.yaml"})," inside the container. Also the server URL is set to use port ",(0,s.jsx)(n.code,{children:"8008"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker exec -ti synapse register_new_matrix_user -c /data/homeserver.yaml http://localhost:8008\r\n\r\nNew user localpart [root]: admin\r\nPassword: secretpassword\r\nConfirm password: secretpassword\r\nMake admin [no]: yes\r\nSending registration request...\r\nSuccess!\n"})}),"\n",(0,s.jsx)(n.p,{children:"The user can now be used to log into your server:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Matrix Messenger Synapse",src:r(251966).A+"",width:"1018",height:"577"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Matrix Messenger Synapse",src:r(520807).A+"",width:"1018",height:"577"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},278051:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/Matrix_Messenger_Synapse_01-08e30027bb4903c6f74d7ed7dfece9e7.png"},941192:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/Matrix_Messenger_Synapse_02-a718c22e7824f4ec82a75f597b79adc0.png"},935057:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/Matrix_Messenger_Synapse_03-337e73be880b864f4d32e22925417fbe.png"},251966:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/Matrix_Messenger_Synapse_04-776206d6ed856f196925c34fd9a33f7d.png"},520807:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/Matrix_Messenger_Synapse_05-936dd78df8e57df30d3d2faf9181d294.png"},896566:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-4479c37579bf34e182e3ae543ec4de22.jpg"},28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>o});var s=r(296540);const a={},i=s.createContext(a);function t(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);