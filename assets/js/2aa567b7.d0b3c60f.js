"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[30066],{721842:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>t,metadata:()=>a,toc:()=>d});var o=n(785893),s=n(603905);const t={sidebar_position:9070,slug:"2016-06-01",title:"Node/Express with MongoDB",authors:"mpolinowski",squareimage:"./photo-34445934842_9cbfb7dfcb_o-cover.jpg",tags:["Javascript","Node","Databases - MongoDB"]},i=void 0,a={id:"Development/Javascript/2016-06-01--node-express-mongodb/index",title:"Node/Express with MongoDB",description:"Hongkong",source:"@site/docs/Development/Javascript/2016-06-01--node-express-mongodb/index.md",sourceDirName:"Development/Javascript/2016-06-01--node-express-mongodb",slug:"/Development/Javascript/2016-06-01--node-express-mongodb/2016-06-01",permalink:"/docs/Development/Javascript/2016-06-01--node-express-mongodb/2016-06-01",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Javascript/2016-06-01--node-express-mongodb/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"},{label:"Node",permalink:"/docs/tags/node"},{label:"Databases - MongoDB",permalink:"/docs/tags/databases-mongo-db"}],version:"current",sidebarPosition:9070,frontMatter:{sidebar_position:9070,slug:"2016-06-01",title:"Node/Express with MongoDB",authors:"mpolinowski",squareimage:"./photo-34445934842_9cbfb7dfcb_o-cover.jpg",tags:["Javascript","Node","Databases - MongoDB"]},sidebar:"tutorialSidebar",previous:{title:"Node Express Static",permalink:"/docs/Development/Javascript/2016-08-11--node-express-static-wiki/2016-08-11"},next:{title:"JavaScript and Getting Started with APIs and AJAX",permalink:"/docs/Development/Javascript/2016-05-27--javascript-apis-and-ajax/2016-05-27"}},l={},d=[{value:"01 Install Node.js and Express.js to serve our Web Application",id:"01-install-nodejs-and-expressjs-to-serve-our-web-application",level:2},{value:"02 Add Start Script",id:"02-add-start-script",level:2},{value:"03 Add Routing (Hello World)",id:"03-add-routing-hello-world",level:2},{value:"04 Serve Static Files",id:"04-serve-static-files",level:2},{value:"05 Add Bower to the Project",id:"05-add-bower-to-the-project",level:2},{value:"06 Add Gulp to the Project",id:"06-add-gulp-to-the-project",level:2},{value:"Inject Bower Dependencies with Wiredep",id:"inject-bower-dependencies-with-wiredep",level:3},{value:"Inject with Gulp-Inject",id:"inject-with-gulp-inject",level:3},{value:"Auto-restart with Nodemon",id:"auto-restart-with-nodemon",level:3},{value:"07 Add a Templating Engine - EJS",id:"07-add-a-templating-engine---ejs",level:2},{value:"08 Adding a Page Navigation with Routing",id:"08-adding-a-page-navigation-with-routing",level:2},{value:"09 Adding a Router for the Listview of our Book Page",id:"09-adding-a-router-for-the-listview-of-our-book-page",level:2},{value:"Adding a Route to Render",id:"adding-a-route-to-render",level:3},{value:"Cleaning up the App File with Routers",id:"cleaning-up-the-app-file-with-routers",level:3},{value:"10 Creating a Single Book by ID Route &amp; View",id:"10-creating-a-single-book-by-id-route--view",level:2},{value:"11 Cleaning up our routes by creating a variable for the NAV element",id:"11-cleaning-up-our-routes-by-creating-a-variable-for-the-nav-element",level:2},{value:"12 Adding MongoDB",id:"12-adding-mongodb",level:2},{value:"Download and Install MongoDB",id:"download-and-install-mongodb",level:3},{value:"Create adminRoutes to populate the Database",id:"create-adminroutes-to-populate-the-database",level:3},{value:"14 Use the MongoDB Response",id:"14-use-the-mongodb-response",level:2},{value:"Select Many",id:"select-many",level:3},{value:"Select One",id:"select-one",level:3},{value:"15 Creating a SignIn Form on Index.ejs",id:"15-creating-a-signin-form-on-indexejs",level:2},{value:"16 Creating the Authentication Route",id:"16-creating-the-authentication-route",level:2},{value:"17 Adding Passport.js Middleware",id:"17-adding-passportjs-middleware",level:2},{value:"18 Authentication with Local Strategy",id:"18-authentication-with-local-strategy",level:2},{value:"19 Saving the User to MongoDB",id:"19-saving-the-user-to-mongodb",level:2},{value:"20 User SignIn from mongoDB",id:"20-user-signin-from-mongodb",level:2},{value:"21 Verifying User in DB",id:"21-verifying-user-in-db",level:2}];function c(e){const r={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.ah)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.p,{children:(0,o.jsx)(r.img,{alt:"Hongkong",src:n(820750).Z+"",width:"2795",height:"1634"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.a,{href:"https://github.com/mpolinowski/node_express_git",children:"Github Repository"})}),"\n",(0,o.jsxs)(r.blockquote,{children:["\n",(0,o.jsxs)(r.p,{children:["This code is part of a training in web development with ",(0,o.jsx)(r.a,{href:"https://nodejs.org/en/",children:"Node.js"}),". ",(0,o.jsx)(r.a,{href:"http://ejs.co",children:"EJS"})," will be used as template engine for rendering HTML out of ",(0,o.jsx)(r.a,{href:"https://expressjs.com",children:"Express"}),". The library application will use ",(0,o.jsx)(r.a,{href:"https://www.mongodb.com",children:"MongoDB"})," to store information about books and authors - but will also employ the ",(0,o.jsx)(r.a,{href:"https://www.goodreads.com/api",children:"GoodReads API"})," to provide more details on each. ",(0,o.jsx)(r.a,{href:"http://www.passportjs.org",children:"Passport.js"})," is used for local security."]}),"\n"]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["This is Part I and will guide us through the basic ",(0,o.jsx)(r.a,{href:"https://nodejs.org/en/",children:"Node.js"})," and ",(0,o.jsx)(r.a,{href:"https://expressjs.com",children:"Express"})," setup"]}),"\n",(0,o.jsxs)(r.li,{children:["In Part II we will add ",(0,o.jsx)(r.a,{href:"https://bower.io/",children:"Bower.js"})," and the ",(0,o.jsx)(r.a,{href:"https://gulpjs.com/",children:"Gulp.js"})," taskrunner to manage our style dependencies and auto-restart our development environment using ",(0,o.jsx)(r.a,{href:"https://nodemon.io",children:"Nodemon.js"})]}),"\n",(0,o.jsxs)(r.li,{children:["In Part III will add the magic of the ",(0,o.jsx)(r.a,{href:"http://ejs.co",children:"EJS"})," templating engine"]}),"\n",(0,o.jsx)(r.li,{children:"Part IV deals with advanced Express routing options"}),"\n",(0,o.jsxs)(r.li,{children:["Part V deals with ",(0,o.jsx)(r.a,{href:"http://www.passportjs.org",children:"Passport.js"})," user authentication and ",(0,o.jsx)(r.a,{href:"https://www.mongodb.com",children:"MongoDB"})]}),"\n"]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#01-install-nodejs-and-expressjs-to-serve-our-web-application",children:"01 Install Node.js and Express.js to serve our Web Application"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#02-add-start-script",children:"02 Add Start Script"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#03-add-routing-hello-world",children:"03 Add Routing (Hello World)"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#04-serve-static-files",children:"04 Serve Static Files"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#05-add-bower-to-the-project",children:"05 Add Bower to the Project"})}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.a,{href:"#06-add-gulp-to-the-project",children:"06 Add Gulp to the Project"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#inject-bower-dependencies-with-wiredep",children:"Inject Bower Dependencies with Wiredep"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#inject-with-gulp-inject",children:"Inject with Gulp-Inject"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#auto-restart-with-nodemon",children:"Auto-restart with Nodemon"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#07-add-a-templating-engine---ejs",children:"07 Add a Templating Engine - EJS"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#08-adding-a-page-navigation-with-routing",children:"08 Adding a Page Navigation with Routing"})}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.a,{href:"#09-adding-a-router-for-the-listview-of-our-book-page",children:"09 Adding a Router for the Listview of our Book Page"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#adding-a-route-to-render",children:"Adding a Route to Render"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#cleaning-up-the-app-file-with-routers",children:"Cleaning up the App File with Routers"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#10-creating-a-single-book-by-id-route--view",children:"10 Creating a Single Book by ID Route & View"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#11-cleaning-up-our-routes-by-creating-a-variable-for-the-nav-element",children:"11 Cleaning up our routes by creating a variable for the NAV element"})}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.a,{href:"#12-adding-mongodb",children:"12 Adding MongoDB"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#download-and-install-mongodb",children:"Download and Install MongoDB"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#create-adminroutes-to-populate-the-database",children:"Create adminRoutes to populate the Database"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.a,{href:"#14-use-the-mongodb-response",children:"14 Use the MongoDB Response"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#select-many",children:"Select Many"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#select-one",children:"Select One"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#15-creating-a-signin-form-on-indexejs",children:"15 Creating a SignIn Form on Index.ejs"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#16-creating-the-authentication-route",children:"16 Creating the Authentication Route"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#17-adding-passportjs-middleware",children:"17 Adding Passport.js Middleware"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#18-authentication-with-local-strategy",children:"18 Authentication with Local Strategy"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#19-saving-the-user-to-mongodb",children:"19 Saving the User to MongoDB"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#20-user-signin-from-mongodb",children:"20 User SignIn from mongoDB"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"#21-verifying-user-in-db",children:"21 Verifying User in DB"})}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"01-install-nodejs-and-expressjs-to-serve-our-web-application",children:"01 Install Node.js and Express.js to serve our Web Application"}),"\n",(0,o.jsxs)(r.p,{children:["First install ",(0,o.jsx)(r.a,{href:"https://nodejs.org/en/download/",children:"Node.js"})," and initialize the project with npm init. Then npm install express --save to the app directory."]}),"\n",(0,o.jsxs)(r.p,{children:["Create a ",(0,o.jsx)(r.em,{children:"app.js"})," and run the Express webserver on a specified port:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express =require('express');\r\n\r\nvar app = express():\r\n\r\nvar port = 3000;\r\n\r\napp.listen(port, function(err){\r\n  console.log('running server on port' + port);\r\n});\n"})}),"\n",(0,o.jsx)(r.p,{children:"Running the app with node app.js should give you the console log that the webserver is up an running on the specified port."}),"\n",(0,o.jsx)(r.h2,{id:"02-add-start-script",children:"02 Add Start Script"}),"\n",(0,o.jsxs)(r.p,{children:["Now we will add a npm script to the ",(0,o.jsx)(r.em,{children:"package.json"})," file to start our app:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-json",children:"'name': 'node-express',\r\n  'version': '1.0.0',\r\n  'description': 'Library App',\r\n  'main': 'app.js',\r\n  'scripts': {\r\n    'test': 'echo \\'Error: no test specified\\' && exit 1',\r\n    'start': 'node app.js'\n"})}),"\n",(0,o.jsxs)(r.p,{children:["The line ",(0,o.jsx)(r.em,{children:"'start': 'node app.js'"})," allows us to use the npm start command instead of having to define our starting point like before - ",(0,o.jsx)(r.em,{children:"node app.js"})]}),"\n",(0,o.jsx)(r.h2,{id:"03-add-routing-hello-world",children:"03 Add Routing (Hello World)"}),"\n",(0,o.jsxs)(r.p,{children:["When accessing the home route (",(0,o.jsx)(r.a,{href:"http://localhost:3000/",children:"http://localhost:3000/"}),"), we want to send a Hello World, to test our routing. Then we add another route - /books to the ",(0,o.jsx)(r.em,{children:"app.js"})," file:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express =require('express');\r\n\r\nvar app = express():\r\n\r\nvar port = 3000;\r\n\r\napp.get('/', function(req, res){\r\n  res.send('Hello World')\r\n});\r\n\r\napp.get('/books', function(req, res){\r\n  res.send('Hello World from the books route')\r\n});\r\n\r\napp.listen(port, function(err){\r\n  console.log('running server on port' + port);\r\n});\n"})}),"\n",(0,o.jsx)(r.h2,{id:"04-serve-static-files",children:"04 Serve Static Files"}),"\n",(0,o.jsx)(r.p,{children:"We first add to new folders to our project - public/css & public/js and a src/views folder. We download a free Bootstrap theme from a page like bootstrapzero.com and put the css/js files into the public folder. The html file has to be located in the views folder."}),"\n",(0,o.jsx)(r.p,{children:"The Express middleware is used to serve the content of our public folder, by adding the line app.use(express.static('public')); to the app.js file. The static html file - index.html - from our template, will be served by app.use(express.static('src/views'));."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express =require('express');\r\n\r\nvar app = express();\r\n\r\nvar port = 3000;\r\n\r\napp.use(express.static('public'));\r\napp.use(express.static('src/views'));\r\n\r\napp.get('/', function(req, res){\r\n  res.send('Hello World')\r\n});\r\n\r\napp.get('/books', function(req, res){\r\n  res.send('Hello World from the books route')\r\n});\r\n\r\napp.listen(port, function(err){\r\n  console.log('running server on port' + port);\r\n});\n"})}),"\n",(0,o.jsxs)(r.p,{children:["Through the public route, we are now able to access the css/js files by typing in e.g. ",(0,o.jsx)(r.a,{href:"http://localhost:3000/css/styles.css",children:"http://localhost:3000/css/styles.css"})," into our browser (the bootstrap components of the template will not be used - we Bower to add them later. The index.html is accessible by ",(0,o.jsx)(r.a,{href:"http://localhost:3000/index.html",children:"http://localhost:3000/index.html"}),"."]}),"\n",(0,o.jsx)(r.h2,{id:"05-add-bower-to-the-project",children:"05 Add Bower to the Project"}),"\n",(0,o.jsxs)(r.p,{children:["First install Bower globally with ",(0,o.jsx)(r.em,{children:"npm install bower -g"}),". Then do a bower init to the app directory (creation of bower.json)."]}),"\n",(0,o.jsx)(r.p,{children:"We now add a new file to tell Bower to install directly into our public directory:"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:".bowerrc"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-json",children:"'directory': 'public/lib'\n"})}),"\n",(0,o.jsx)(r.p,{children:"Next we bower install bootstrap font-awesome --save to get the latest stable version of the framework (add bower_components bootstrap + jquery). They will be installed to the lib directory in our public folder. The bootstrap/jquery/font-awesome files can now be added to the template index.html by linking e.g."}),"\n",(0,o.jsx)(r.h2,{id:"06-add-gulp-to-the-project",children:"06 Add Gulp to the Project"}),"\n",(0,o.jsx)(r.h3,{id:"inject-bower-dependencies-with-wiredep",children:"Inject Bower Dependencies with Wiredep"}),"\n",(0,o.jsxs)(r.p,{children:["First install Gulp with npm install -g gulp globally. Then install it to the app directory via ",(0,o.jsx)(r.em,{children:"npm install --save-dev gulp"})," (as a development dependency). We now want to inject dependencies (css,js) to our views automatically with wiredep - ",(0,o.jsx)(r.em,{children:"npm install --save-dev wiredep"}),"."]}),"\n",(0,o.jsx)(r.p,{children:"We now add a new file to tell Gulp what to do - ignore node_modules only use files from the src directory, add dependencies with wiredep."}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"gulpfile.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var gulp = require('gulp');\r\n\r\nvar jsFiles = ['*.js', 'src/**/*.js'];\r\n\r\ngulp.task('inject', function() {\r\n    var wiredep = require('wiredep').stream; /* Use wiredep to inject css/js dependencies to views e.g. bootstrap */\r\n\r\n    var options = {\r\n        bowerJson: require('./bower.json'), /* Tell wiredep to check dependencies from the bower.json file e.g. bootstrap */\r\n        directory: './public/lib', /* Tell wiredep to find dependencies in the lib directory. It will search for the json file - e.g. ./public/lib/bootstrap/.bower.json */\r\n        ignorePath: '../../public' /* The path to the css/js files has to be given relative to the public folder - e.g. (../../public/)/lib/bootstrap/dist/css/bootstrap.min.css*/\r\n    };\r\n\r\n    return gulp.src('./src/views/*.html')\r\n        .pipe(wiredep(options))\r\n        .pipe(gulp.dest('./src/views'));\r\n});\n"})}),"\n",(0,o.jsx)(r.p,{children:"Bootstrap 3 now uses LESS - we have to override the defaults to grab the CSS files instead and add them to our index.html. The main overrides can be added to the global bower.json file. This way the bower.json file inside public/lib/bootstrap and public/lib/font-awesome will be ignored."}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"bower.json"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-json",children:"{\r\n  'name': 'node-express',\r\n  'description': 'node express test',\r\n  'main': 'app.js',\r\n  'authors': [\r\n    '[object Object]'\r\n  ],\r\n  'license': 'MIT',\r\n  'homepage': '',\r\n  'ignore': [\r\n    '**/.*',\r\n    'node_modules',\r\n    'bower_components',\r\n    'test',\r\n    'tests'\r\n  ],\r\n  'dependencies': {\r\n    'bootstrap': '^3.3.6',\r\n    'font-awesome': '^4.6.1'\r\n  },\r\n  'overrides': {\r\n    'bootstrap': {\r\n      'main': [\r\n        'dist/js/bootstrap.js',\r\n        'dist/css/bootstrap.min.css',\r\n        'dist/less/bootstrap.less'\r\n      ]\r\n    },\r\n    'font-awesome': {\r\n      'main': [\r\n        'less/font-awesome.less',\r\n        'css/font-awesome.min.css',\r\n        'scss/font-awesome.scss'\r\n      ]\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"index.html"})}),"\n",(0,o.jsx)(r.p,{children:"We now have to add and to our index.html template to inject the Bower css/js dependencies, when the command gulp inject is run."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-html",children:"<!DOCTYPE html>\r\n<html lang='en'>\r\n\r\n<head>\r\n    <meta http-equiv='content-type' content='text/html; charset=UTF-8'>\r\n    <meta charset='utf-8'>\r\n    <title>LibraryApp</title>\r\n    <meta name='viewport' content='width=device-width, initial-scale=1, maximum-scale=1'>\r\n    \x3c!--bower:css--\x3e\r\n    <link rel='stylesheet' href='/lib/bootstrap/dist/css/bootstrap.min.css' /> \x3c!-- Will be automatically injected with the command 'gulp inject' --\x3e\r\n    <link rel='stylesheet' href='/lib/font-awesome/css/font-awesome.min.css' /> \x3c!-- Will be automatically injected with the command 'gulp inject' --\x3e\r\n    \x3c!--endbower--\x3e\r\n    \x3c!-- bower:js --\x3e\r\n    <script src='/lib/jquery/dist/jquery.js'><\/script>  \x3c!-- Will be automatically injected with the command 'gulp inject' --\x3e\r\n    <script src='/lib/bootstrap/dist/js/bootstrap.js'><\/script> \x3c!-- Will be automatically injected with the command 'gulp inject' --\x3e\r\n    \x3c!-- endbower --\x3e\r\n</head>\n"})}),"\n",(0,o.jsx)(r.h3,{id:"inject-with-gulp-inject",children:"Inject with Gulp-Inject"}),"\n",(0,o.jsx)(r.p,{children:"After injecting the Bower dependencies, we now have to inject our ccs and js files from the public folder. We will use Gulp-Inject to perform this task. First do a npm install --save-dev gulp inject, to install Gulp-Inject as a development dependency."}),"\n",(0,o.jsx)(r.p,{children:"We now add Gulp-Inject to our gulpfile.js:"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"gulpfile.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var gulp = require('gulp');\r\n\r\nvar jsFiles = ['*.js', 'src/**/*.js'];\r\n\r\ngulp.task('inject', function() {\r\n    var wiredep = require('wiredep').stream;\r\n    var inject = require('gulp-inject'); /* Use gulp-inject to inject our personal css/js dependencies to views */\r\n\r\n    var injectSrc = gulp.src(['./public/css/*.css', /* Tell gulp-inject where our personal css/js dependencies are located */\r\n        './public/js/*.js'\r\n    ], {\r\n        read: false /* We only need the path not content */\r\n    });\r\n\r\n    var injectOptions = {\r\n        ignorePath: '/public' /* Tell gulp-inject to use a path relative to /public */\r\n    };\r\n\r\n    var options = {\r\n        bowerJson: require('./bower.json'),\r\n        directory: './public/lib',\r\n        ignorePath: '../../public'\r\n    };\r\n\r\n    return gulp.src('./src/views/*.html')\r\n        .pipe(wiredep(options))\r\n        .pipe(inject(injectSrc, injectOptions)) /* Use gulp-inject to inject our personal css/js dependencies to views */\r\n        .pipe(gulp.dest('./src/views'));\r\n});\n"})}),"\n",(0,o.jsx)(r.p,{children:"We now have to add and to our index.html template to inject our css/js dependencies, when the command gulp inject is run."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-html",children:"<!DOCTYPE html>\r\n<html lang='en'>\r\n\r\n<head>\r\n    <meta http-equiv='content-type' content='text/html; charset=UTF-8'>\r\n    <meta charset='utf-8'>\r\n    <title>LibraryApp</title>\r\n    <meta name='viewport' content='width=device-width, initial-scale=1, maximum-scale=1'>\r\n    \x3c!--bower:css--\x3e\r\n    <link rel='stylesheet' href='/lib/bootstrap/dist/css/bootstrap.min.css' /> \x3c!-- Will be automatically injected with the command 'gulp inject' --\x3e\r\n    <link rel='stylesheet' href='/lib/font-awesome/css/font-awesome.min.css' /> \x3c!-- Will be automatically injected with the command 'gulp inject' --\x3e\r\n    \x3c!--endbower--\x3e\r\n    \x3c!-- bower:js --\x3e\r\n    <script src='/lib/jquery/dist/jquery.js'><\/script>  \x3c!-- Will be automatically injected with the command 'gulp inject' --\x3e\r\n    <script src='/lib/bootstrap/dist/js/bootstrap.js'><\/script> \x3c!-- Will be automatically injected with the command 'gulp inject' --\x3e\r\n    \x3c!-- endbower --\x3e\r\n    \x3c!-- inject:css--\x3e\r\n    <link rel='stylesheet' href='/css/styles.css'> \x3c!-- Will be automatically injected with the command 'gulp inject' --\x3e\r\n    \x3c!-- endinject--\x3e\r\n    \x3c!--inject:js--\x3e\r\n    <script src='/js/default.js'><\/script> \x3c!-- Will be automatically injected with the command 'gulp inject' --\x3e\r\n    \x3c!--endinject--\x3e\r\n    \x3c!--[if lt IE 9]>\r\n\t\t\t<script src='//html5shim.googlecode.com/svn/trunk/html5.js'><\/script>\r\n\t\t<![endif]--\x3e\r\n</head>\n"})}),"\n",(0,o.jsx)(r.h3,{id:"auto-restart-with-nodemon",children:"Auto-restart with Nodemon"}),"\n",(0,o.jsxs)(r.p,{children:["We now add Nodemon to monitor our node.js app - Nodemon will automatically restart the server when a change was detected. To install Nodemon type ",(0,o.jsx)(r.em,{children:"npm install --save-dev nodemon"}),"."]}),"\n",(0,o.jsx)(r.p,{children:"We now add Nodemon to our gulpfile.js:"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"gulpfile.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var gulp = require('gulp');\r\nvar nodemon = require('gulp-nodemon'); /* Add nodemon to automatically restart the server, when a change was detected */\r\n\r\nvar jsFiles = ['*.js', 'src/**/*.js'];\r\n\r\ngulp.task('inject', function() {\r\n    var wiredep = require('wiredep').stream;\r\n    var inject = require('gulp-inject');\r\n\r\n    var injectSrc = gulp.src(['./public/css/*.css',\r\n        './public/js/*.js'\r\n    ], {\r\n        read: false\r\n    });\r\n\r\n    var injectOptions = {\r\n        ignorePath: '/public'\r\n    };\r\n\r\n    var options = {\r\n        bowerJson: require('./bower.json'),\r\n        directory: './public/lib',\r\n        ignorePath: '../../public'\r\n    };\r\n\r\n    return gulp.src('./src/views/*.html')\r\n        .pipe(wiredep(options))\r\n        .pipe(inject(injectSrc, injectOptions))\r\n        .pipe(gulp.dest('./src/views'));\r\n});\r\n\r\ngulp.task('serve', ['inject'], function() { /* Create a 'serve' task to automatically execute the 'inject' function above on start-up */\r\n    var options = { /* In the line above we used an Object for the 'inject' function - here you can add more functions to be executed */\r\n        script: 'app.js',  /* 'serve' starts our app.js on 'PORT' and nodemon restarts it when 'jsFiles' are changed */\r\n        delayTime: 1,\r\n        env: {\r\n            'PORT': 8080  /* Environment variables e.g. database connection strings */\r\n        },\r\n        watch: jsFiles\r\n    };\r\n\r\n    return nodemon(options)\r\n        .on('restart', function(ev) {\r\n            console.log('Restarting...');\r\n        });\r\n});\n"})}),"\n",(0,o.jsx)(r.h2,{id:"07-add-a-templating-engine---ejs",children:"07 Add a Templating Engine - EJS"}),"\n",(0,o.jsxs)(r.p,{children:["EJS combines data and a template to produce HTML. JavaScript between ",(0,o.jsx)(r.code,{children:"<% %>"})," is executed. JavaScript between ",(0,o.jsx)(r.code,{children:"<%= %>"})," adds strings to your HTML and ",(0,o.jsx)(r.code,{children:"<%- %>"})," can contain HTML formated content. To add our templating engine we first have to install it with npm install --save ejs. Now we add the engine to our app.js file:"]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"app.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express =require('express');\r\n\r\nvar app = express();\r\n\r\nvar port = process.env.PORT || 3000; /* 'gulp serve' uses PORT 8080 - if no port is defined by the environment use port 3000 */\r\n\r\napp.use(express.static('public'));\r\n\r\napp.set('views', './src/views');\r\napp.set('view engine', 'ejs'); /* Templating Engine is set to EJS */\r\n\r\napp.get('/', function(req, res){\r\n  res.render('index', {title: 'Rendered Title', list: ['a', 'b']}); /* This content will be displayed in the index.ejs file we\xb4ll create next */\r\n});\r\n\r\napp.get('/books', function(req, res){\r\n  res.send('Hello World from the books route')\r\n});\r\n\r\napp.listen(port, function(err){\r\n  console.log('running server on port' + port);\r\n});\n"})}),"\n",(0,o.jsx)(r.p,{children:"Now we create a simple index.ejs file in our src/views directory:"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"index.ejs"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-html",children:" <!DOCTYPE html>\r\n  <html>\r\n    <head>\r\n      <meta charset='utf-8'>\r\n      <title><%= title %></title>\r\n    </head>\r\n    <body>\r\n      <h1><%= title %></h1>\r\n      <ul>\r\n        <%= for(var i=0; i<list.length; i++) { %>\r\n          <li><%= list[i] %></li>\r\n        <%= } %>\r\n      </ul>\r\n    </body>\r\n  </html>\n"})}),"\n",(0,o.jsxs)(r.p,{children:["Open ",(0,o.jsx)(r.a,{href:"http://localhost:8080/",children:"http://localhost:8080/"})," to check the result - EJS should fill out the title and create the unordered list with the items a and b. Now we will take the code from our template index.html code and copy it to index.ejs. EJS will later be used to display a list view of books in our library app."]}),"\n",(0,o.jsx)(r.h2,{id:"08-adding-a-page-navigation-with-routing",children:"08 Adding a Page Navigation with Routing"}),"\n",(0,o.jsx)(r.p,{children:"We want to add two routes to our navigation bar - one for authors and one for books. In the final version of the library app, this will display all books either by their author or book title. We will create those routes in the app.js file and add the navigation to our navbar using EJS."}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"app.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express =require('express');\r\n\r\nvar app = express();\r\n\r\nvar port = process.env.PORT || 3000;\r\n\r\napp.use(express.static('public'));\r\n\r\napp.set('views', './src/views');\r\napp.set('view engine', 'ejs');\r\n\r\napp.get('/', function(req, res){\r\n  res.render('index', {\r\n    title: 'Home',\r\n    list: [{Link: '/Books', Text: 'Books'}, /* We change the list from before to a nav element */\r\n    {Link: '/Authors', Text: 'Authors'}]\r\n  });\r\n});\r\n\r\napp.get('/books', function(req, res){\r\n  res.send('Hello World from the books route')\r\n});\r\n\r\napp.listen(port, function(err){\r\n  console.log('running server on port' + port);\r\n});\n"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"index.ejs"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-html",children:"<header>\r\n\r\n    <nav class='navbar navbar-inverse navbar-fixed-top' role='banner'>\r\n        <div class='container-fluid'>\r\n\r\n            <div class='navbar-header'>\r\n                <button type='button' class='navbar-toggle collapsed' data-toggle='collapse' data-target='#bs-example-navbar-collapse-1' aria-expanded='false'>\r\n                    <span class='sr-only'>Toggle navigation</span>\r\n                    <span class='icon-bar'></span>\r\n                    <span class='icon-bar'></span>\r\n                    <span class='icon-bar'></span>\r\n                </button>\r\n                <a href='/' class='navbar-brand'>\r\n                    <%= title %> \x3c!-- Adding nav element from app.js --\x3e\r\n                </a>\r\n            </div>\r\n\r\n            <div class='collapse navbar-collapse' id='bs-example-navbar-collapse-1'>\r\n                <ul class='nav navbar-nav navbar-right'>\r\n                    <% for(var i=0; i<nav.length;i++){%> \x3c!-- Adding nav element from app.js --\x3e\r\n                        <li>\r\n                            <a href='<%=nav[i].Link%>'> \x3c!-- Adding nav element from app.js --\x3e\r\n                                <%= nav[i].Text %> \x3c!-- Adding nav element from app.js --\x3e\r\n                            </a>\r\n                        </li>\r\n                        <%}%>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n\r\n</header>\n"})}),"\n",(0,o.jsx)(r.h2,{id:"09-adding-a-router-for-the-listview-of-our-book-page",children:"09 Adding a Router for the Listview of our Book Page"}),"\n",(0,o.jsx)(r.h3,{id:"adding-a-route-to-render",children:"Adding a Route to Render"}),"\n",(0,o.jsx)(r.p,{children:"We want to group all routes for the Book pages under one Router - later we will simply export this router from a separate file to app.js."}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"app.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express =require('express');\r\n\r\nvar app = express();\r\n\r\nvar port = process.env.PORT || 3000;\r\nvar bookRouter = express.Router(); /* Creating a Router for all Book Routes */\r\n\r\napp.use(express.static('public'));\r\n\r\napp.set('views', './src/views');\r\napp.set('view engine', 'ejs');\r\n\r\nbookRouter.route('/') /* When you go to /Books you will get the response 'Hello Books' */\r\n    .get(function(req, res) {\r\n      res.send('Hello Books')\r\n    });\r\n\r\nbookRouter.route('/Single') /* When you go to /Books/Single you will get the response 'Hello Single Books' */\r\n    .get(function(req, res) {\r\n      res.send('Hello Single Books')\r\n    });\r\n\r\napp.use('/Books', bookRouter); /* bookRouter will be used once you go to /Books*/\r\n\r\napp.get('/', function(req, res){\r\n  res.render('index', {\r\n    title: 'Home',\r\n    list: [{Link: '/Books', Text: 'Books'},\r\n    {Link: '/Authors', Text: 'Authors'}]\r\n  });\r\n});\r\n\r\napp.get('/books', function(req, res){\r\n  res.send('Hello World from the books route')\r\n});\r\n\r\napp.listen(port, function(err){\r\n  console.log('running server on port' + port);\r\n});\n"})}),"\n",(0,o.jsxs)(r.p,{children:["bookRouter now sends us a string 'Hello Books' or 'Hello Single Books' when we go to ",(0,o.jsx)(r.a,{href:"http://localhost:8080/Books",children:"http://localhost:8080/Books"})," or ",(0,o.jsx)(r.a,{href:"http://localhost:8080/Books/Single",children:"http://localhost:8080/Books/Single"})," . We now want to render different views when we access those URLs."]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"app.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express =require('express');\r\n\r\nvar app = express();\r\n\r\nvar port = process.env.PORT || 3000;\r\nvar bookRouter = express.Router();\r\n\r\napp.use(express.static('public'));\r\n\r\napp.set('views', './src/views'); /* The render function requires an EJS file here to render */\r\napp.set('view engine', 'ejs');\r\n\r\nbookRouter.route('/')\r\n    .get(function(req, res) {\r\n      res.render('bookListView', {  /* We change res.send to res.render. Since we set views to ../src/views, the router will search for a bookListView.ejs in this directory to render */\r\n        title: 'Home', /* We have to add nav since it is displayed on every view - we will export it later */\r\n        list: [{Link: '/Books', Text: 'Books'},\r\n        {Link: '/Authors', Text: 'Authors'}]\r\n      });\r\n    });\r\n\r\nbookRouter.route('/Single')\r\n    .get(function(req, res) {\r\n      res.send('Hello Single Books')\r\n    });\r\n\r\napp.use('/Books', bookRouter);\r\n\r\napp.get('/', function(req, res){\r\n  res.render('index', {\r\n    title: 'Home',\r\n    list: [{Link: '/Books', Text: 'Books'},\r\n    {Link: '/Authors', Text: 'Authors'}]\r\n  });\r\n});\r\n\r\napp.get('/books', function(req, res){\r\n  res.send('Hello World from the books route')\r\n});\r\n\r\napp.listen(port, function(err){\r\n  console.log('running server on port' + port);\r\n});\n"})}),"\n",(0,o.jsxs)(r.p,{children:["You can copy the index.ejs file and rename the copy to bookListView.ejs - this file will now be rendered, when you access ",(0,o.jsx)(r.a,{href:"http://localhost:8080/Books",children:"http://localhost:8080/Books"})," ."]}),"\n",(0,o.jsx)(r.p,{children:"Adding some Books to the Book View\r\nWe now have a view that is rendered when we access the Books view. Now we want to use EJS to populate the view with some books. Later, those books will be added from MongoDB. Now we just hardcode some books into app.js to prove the concept:"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"app.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express =require('express');\r\n\r\nvar app = express();\r\n\r\nvar port = process.env.PORT || 3000;\r\nvar bookRouter = express.Router();\r\n\r\napp.use(express.static('public'));\r\n\r\napp.set('views', './src/views');\r\napp.set('view engine', 'ejs');\r\n\r\nvar books = [{  /* Just some hardcoded books for now - later we will use MongoDB */\r\n    title: 'Cryptonomicon',\r\n    author: 'Neil Stephenson',\r\n    read: true\r\n}, {\r\n    title: 'Leviathan Wakes',\r\n    author: 'James S.A. Corey',\r\n    read: false\r\n}, {\r\n    title: 'The Lord of the Rings',\r\n    author: 'J.R.R. Tolkien',\r\n    read: true\r\n}, {\r\n    title: 'Norwegian Wood',\r\n    author: 'Haruki Murakami',\r\n    read: false\r\n}, {\r\n    title: 'Microserfs',\r\n    author: 'Douglas Coupland',\r\n    read: true\r\n}, {\r\n    title: 'Up Country',\r\n    author: 'Nelson Demille',\r\n    read: true\r\n}, {\r\n    title: 'Night over Water',\r\n    author: 'Ken Follett',\r\n    read: true\r\n}, {\r\n    title: 'The Stand',\r\n    author: 'Stephen King',\r\n    read: true\r\n}];\r\n\r\nbookRouter.route('/')\r\n    .get(function(req, res) {\r\n      res.render('bookListView', {\r\n        title: 'Home',\r\n        list: [{Link: '/Books', Text: 'Books'},\r\n        {Link: '/Authors', Text: 'Authors'}]\r\n        books: books /* passing in the book array from above - so it will be available for rendering */\r\n      });\r\n    });\r\n\r\nbookRouter.route('/Single')\r\n    .get(function(req, res) {\r\n      res.send('Hello Single Books')\r\n    });\r\n\r\napp.use('/Books', bookRouter);\r\n\r\napp.get('/', function(req, res){\r\n  res.render('index', {\r\n    title: 'Home',\r\n    list: [{Link: '/Books', Text: 'Books'},\r\n    {Link: '/Authors', Text: 'Authors'}]\r\n  });\r\n});\r\n\r\napp.get('/books', function(req, res){\r\n  res.send('Hello World from the books route')\r\n});\r\n\r\napp.listen(port, function(err){\r\n  console.log('running server on port' + port);\r\n});\n"})}),"\n",(0,o.jsx)(r.p,{children:"Now we can modify our bookListview to add those books via EJS:"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"ookListView.ejs"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-html",children:"<section class='container' style='margin-bottom: 400px;'>\r\n    <div class='row'>\r\n        <% for(var i=0; i<books.length;i++){ %> \x3c!-- Not <%= ...  %> with the EQUAL sign it will not be executed --\x3e\r\n            <div class='col-xs-6 col-md-4 col-lg-3 center-block' style='margin-bottom: 10px;'>\r\n                <div class='panel panel-default'>\r\n                    <div class='panel-heading'>\r\n                        <h4><%= books[i].title %></h4>\r\n                    </div>\r\n                    <div class='panel-body'>\r\n                        <div class='col-xs-12 col-sm-4 col-lg-6'>\r\n                            <a class='story-title' href='/Books/<%=books[i]._id%>'><img alt='' src='<%=books[i].cover%>' style='height:100px' class='img-thumbnail'></a>\r\n                        </div>\r\n                        <div class='col-xs-12 col-sm-8 col-lg-6'>\r\n                            <p><span class='label label-default'><strong><%= books[i].author %></strong></span></p>\r\n                            <p><span style='font-family:courier,'new courier';' class='text-muted'><a href='/Books/<%= i %>' class='text-muted'>Read More</a></span></p> \x3c!-- The link to the detailed single book view will be /Books/[i] - we later change this to /Books/:id --\x3e\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <% } %> \x3c!-- Not <%= } %> with the EQUAL sign it will not be executed --\x3e\r\n    </div>\r\n    <hr>\r\n\r\n</section>\n"})}),"\n",(0,o.jsxs)(r.p,{children:["When you access ",(0,o.jsx)(r.a,{href:"http://localhost:8080/Books",children:"http://localhost:8080/Books"})," you will see the nav bar from before, as well as a list of our books."]}),"\n",(0,o.jsx)(r.h3,{id:"cleaning-up-the-app-file-with-routers",children:"Cleaning up the App File with Routers"}),"\n",(0,o.jsx)(r.p,{children:"Remove routes from the app.js file - We create a file bookRoutes.js under src/routes, cut bookRoutes from app.js and simply require bookRouter instead:"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"bookRoutes.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express = require('express');\r\n\r\nvar bookRouter = express.Router();\r\n\r\nvar books = [\r\n    {\r\n        title: 'War and Peace',\r\n        genre: 'Historical Fiction',\r\n        author: 'Lev Nikolayevich Tolstoy',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'Les Mis\xe9rables',\r\n        genre: 'Historical Fiction',\r\n        author: 'Victor Hugo',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'The Time Machine',\r\n        genre: 'Science Fiction',\r\n        author: 'H. G. Wells',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'A Journey into the Center of the Earth',\r\n        genre: 'Science Fiction',\r\n        author: 'Jules Verne',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'The Dark World',\r\n        genre: 'Fantasy',\r\n        author: 'Henry Kuttner',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'The Wind in the Willows',\r\n        genre: 'Fantasy',\r\n        author: 'Kenneth Grahame',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'Life On The Mississippi',\r\n        genre: 'History',\r\n        author: 'Mark Twain',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'Childhood',\r\n        genre: 'Biography',\r\n        author: 'Lev Nikolayevich Tolstoy',\r\n        read: false\r\n        }\r\n    ];\r\n\r\n    bookRouter.route('/') /* route accessed via /Books - bookListView.ejs will be rendered and populated with title, nav and books */\r\n    .get(function (req, res) {\r\n        res.render('bookListView', {\r\n            title: 'Books',\r\n            nav: [{\r\n                Link: '/Books',\r\n                Text: 'Books'\r\n            }, {\r\n                Link: '/Authors',\r\n                Text: 'Authors'\r\n            }],\r\n            books: books\r\n        });\r\n    });\r\n\r\n}\r\nmodule.exports = bookRouter; /* the bookRouter has to be exported to be available for require in app.js */\n"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"app.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express = require('express');\r\n\r\nvar app = express();\r\n\r\nvar port = process.env.PORT || 5000;\r\n\r\nvar bookRouter = require('./src/routes/bookRoutes'); /* We now require the book routes that we moved to bookRouter.js*/\r\n\r\napp.use(express.static('public'));\r\napp.set('views', './src/views');\r\n\r\napp.set('view engine', 'ejs');\r\n\r\n\r\napp.use('/Books', bookRouter); /* bookRouter is called here when you access /Books - routes are taken from bookRouter.js */\r\n\r\napp.get('/', function (req, res) {\r\n    res.render('index', {\r\n        title: 'Books',\r\n        nav: [{\r\n            Link: '/Books',\r\n            Text: 'Books'\r\n        }, {\r\n            Link: '/Authors',\r\n            Text: 'Authors'\r\n        }]\r\n    });\r\n});\r\n\r\napp.get('/books', function (req, res) {\r\n    res.send('Hello Books');\r\n});\r\n\r\napp.listen(port, function (err) {\r\n    console.log('running server on port ' + port);\r\n});\n"})}),"\n",(0,o.jsx)(r.h2,{id:"10-creating-a-single-book-by-id-route--view",children:"10 Creating a Single Book by ID Route & View"}),"\n",(0,o.jsxs)(r.p,{children:["Now we want to add another route to a detailed view of a single books. The Route should be accessible by /Books/",":id"," (ID of the book inside the hardcoded books object - later we will pull an ID from MongoDB). The view rendered will be bookView.ejs."]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"bookRoutes.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express = require('express');\r\n\r\nvar bookRouter = express.Router();\r\n\r\nvar books = [\r\n    {\r\n        title: 'War and Peace',\r\n        genre: 'Historical Fiction',\r\n        author: 'Lev Nikolayevich Tolstoy',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'Les Mis\xe9rables',\r\n        genre: 'Historical Fiction',\r\n        author: 'Victor Hugo',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'The Time Machine',\r\n        genre: 'Science Fiction',\r\n        author: 'H. G. Wells',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'A Journey into the Center of the Earth',\r\n        genre: 'Science Fiction',\r\n        author: 'Jules Verne',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'The Dark World',\r\n        genre: 'Fantasy',\r\n        author: 'Henry Kuttner',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'The Wind in the Willows',\r\n        genre: 'Fantasy',\r\n        author: 'Kenneth Grahame',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'Life On The Mississippi',\r\n        genre: 'History',\r\n        author: 'Mark Twain',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'Childhood',\r\n        genre: 'Biography',\r\n        author: 'Lev Nikolayevich Tolstoy',\r\n        read: false\r\n        }\r\n];\r\n\r\n\r\nbookRouter.route('/')\r\n    .get(function (req, res) {\r\n        res.render('bookListView', {\r\n            title: 'Books',\r\n            nav: [{\r\n                Link: '/Books',\r\n                Text: 'Books'\r\n            }, {\r\n                Link: '/Authors',\r\n                Text: 'Authors'\r\n            }]\r\n        });\r\n    });\r\n\r\n    bookRouter.route('/:id')  /* We want to be able to access detailed info about a single book by adding the book ID - /Books/:id */\r\n    .get(function (req, res) {\r\n        var id = req.params.id; /* pass id parameter into URL - will be retrieved from books[id] */\r\n        res.render('bookView', {  /* We have to create another view for the single book - bookView.ejs */\r\n            title: 'Books',\r\n            nav: [{\r\n                Link: '/Books',\r\n                Text: 'Books'\r\n            }, {\r\n                Link: '/Authors',\r\n                Text: 'Authors'\r\n            }]\r\n            book: books[id]\r\n        });\r\n    });\r\n\r\n}\r\nmodule.exports = bookRouter;\n"})}),"\n",(0,o.jsx)(r.p,{children:"Now we need to write the view to be rendered bookView.ejs (the code below only contains the body part - the header is identical to bookListView.ejs):"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"bookView.ejs"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-html",children:"<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset='utf-8'>\r\n    <title>Library App</title>\r\n  </head>\r\n  <body>\r\n    <section class='container' style='margin-bottom: 300px;'>\r\n        <div class='row'>\r\n            <div class='col-xs-12 center-block'>\r\n                <div class='panel panel-default'>\r\n                    <div class='panel-heading'>\r\n                        <h4><%= book.title %></h4>\r\n                    </div>\r\n                    <div class='panel-body'>\r\n                        <div class='col-xs-12 col-sm-2 col-lg-1'>\r\n                            <a class='story-title'><img alt='Book Cover' src='<%=book.book.image_url%>' class='img-responsive'></a>\r\n                        </div>\r\n                        <div class='col-xs-12 col-sm-10 col-lg-11'>\r\n                            <h4><span class='label label-default'><strong><%= book.author %></strong></span></h4>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n  </body>\r\n</html>\n"})}),"\n",(0,o.jsx)(r.h2,{id:"11-cleaning-up-our-routes-by-creating-a-variable-for-the-nav-element",children:"11 Cleaning up our routes by creating a variable for the NAV element"}),"\n",(0,o.jsx)(r.p,{children:"We created a navbar in all our views and used EJS to inject some navigational elements in there. But we don\xb4t want to have to copy it into every route. We will create a nav element in app.js instead."}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"app.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express = require('express');\r\n\r\nvar app = express();\r\n\r\nvar port = process.env.PORT || 5000;\r\nvar nav = [{                           /* We create a NAV element in app.js - this is now available for all routes */\r\n    Link: '/Books',\r\n    Text: 'Book'\r\n    }, {\r\n    Link: '/Authors',\r\n    Text: 'Author'\r\n    }];\r\nvar bookRouter = require('./src/routes/bookRoutes')(nav); /* The NAV element is now automatically passed into bookRouter to be available on all bookRoutes */\r\n\r\napp.use(express.static('public'));\r\napp.set('views', './src/views');\r\n\r\napp.set('view engine', 'ejs');\r\n\r\n\r\napp.use('/Books', bookRouter);\r\n\r\napp.get('/', function (req, res) {\r\n    res.render('index', {\r\n        title: 'Home',\r\n        nav: nav     /* We no longer have to type in the whole navigation - YEAH!*/\r\n    });\r\n});\r\n\r\napp.get('/books', function (req, res) {\r\n    res.send('Hello Books');\r\n});\r\n\r\napp.listen(port, function (err) {\r\n    console.log('running server on port ' + port);\r\n});\n"})}),"\n",(0,o.jsx)(r.p,{children:"Now we have to wrap our routes into a router function with NAV as a variable, to make it available to those routes:"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"bookRoutes.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express = require('express');\r\n\r\nvar bookRouter = express.Router();\r\n\r\nvar router = function(nav){ /* The router is wrapped into a function with NAV as a variable */\r\n    var books = [\r\n    {\r\n        title: 'War and Peace',\r\n        genre: 'Historical Fiction',\r\n        author: 'Lev Nikolayevich Tolstoy',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'Les Mis\xe9rables',\r\n        genre: 'Historical Fiction',\r\n        author: 'Victor Hugo',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'The Time Machine',\r\n        genre: 'Science Fiction',\r\n        author: 'H. G. Wells',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'A Journey into the Center of the Earth',\r\n        genre: 'Science Fiction',\r\n        author: 'Jules Verne',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'The Dark World',\r\n        genre: 'Fantasy',\r\n        author: 'Henry Kuttner',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'The Wind in the Willows',\r\n        genre: 'Fantasy',\r\n        author: 'Kenneth Grahame',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'Life On The Mississippi',\r\n        genre: 'History',\r\n        author: 'Mark Twain',\r\n        read: false\r\n        },\r\n    {\r\n        title: 'Childhood',\r\n        genre: 'Biography',\r\n        author: 'Lev Nikolayevich Tolstoy',\r\n        read: false\r\n        }\r\n    ];\r\n    bookRouter.route('/')\r\n    .get(function (req, res) {\r\n        res.render('bookListView', {\r\n            title: 'Books',\r\n            nav: nav,         /* All routes wrapped into router function can now use NAV as a variable */\r\n            books: books\r\n        });\r\n    });\r\n\r\n    bookRouter.route('/:id')\r\n    .get(function (req, res) {\r\n        var id = req.params.id;\r\n        res.render('bookView', {\r\n            title: 'Books',\r\n            nav: nav, /* All routes wrapped into router function can now use NAV as a variable */\r\n            book: books[id]\r\n        });\r\n    });\r\n\r\n    return bookRouter; /* bookRouter has now to be returned from our router function */\r\n}\r\nmodule.exports = router;  /* We now have to export the router instead of bookRouter - the router function will be executed in app.js with the NAV element to create a router */\n"})}),"\n",(0,o.jsx)(r.h2,{id:"12-adding-mongodb",children:"12 Adding MongoDB"}),"\n",(0,o.jsx)(r.h3,{id:"download-and-install-mongodb",children:"Download and Install MongoDB"}),"\n",(0,o.jsxs)(r.p,{children:["The installer can be downloaded from ",(0,o.jsx)(r.a,{href:"https://www.mongodb.com",children:"MongoDB.com"})]}),"\n",(0,o.jsxs)(r.p,{children:["Install the database, navigate to the install directory (e.g. ",(0,o.jsx)(r.em,{children:"C:\\Program Files\\MongoDB\\Server\\3.2\\bin"}),") with your command line and start the application with the command ",(0,o.jsx)(r.strong,{children:"mongod"}),". Make sure that you created a directory C:\\data\\db before running the mongod process!"]}),"\n",(0,o.jsx)(r.p,{children:"Useful Commands for MongoDB:"}),"\n",(0,o.jsxs)(r.table,{children:[(0,o.jsx)(r.thead,{children:(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.th,{}),(0,o.jsx)(r.th,{})]})}),(0,o.jsxs)(r.tbody,{children:[(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:(0,o.jsx)(r.em,{children:"Command"})})}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:(0,o.jsx)(r.em,{children:"Function"})})})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"mongo"})}),(0,o.jsx)(r.td,{children:"Start"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"show dbs"})}),(0,o.jsx)(r.td,{children:"Display all Databases"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"mongo libraryApp"})}),(0,o.jsx)(r.td,{children:"Open libraryApp Database"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"show collections"})}),(0,o.jsx)(r.td,{children:"Show all Collections of the opened Databases"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"db.books.find();"})}),(0,o.jsx)(r.td,{children:"Display all Objects inside the books Collection"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:(0,o.jsxs)(r.strong,{children:["db.books.remove(",")"]})}),(0,o.jsx)(r.td,{children:"Remove all Objects from the books Collection"})]})]})]}),"\n",(0,o.jsx)(r.h3,{id:"create-adminroutes-to-populate-the-database",children:"Create adminRoutes to populate the Database"}),"\n",(0,o.jsxs)(r.p,{children:["First install mongoDB into our project with ",(0,o.jsx)(r.em,{children:"npm install --save mongodb"})]}),"\n",(0,o.jsx)(r.p,{children:"Now we create a new file adminRoutes.js in the src/routes directory."}),"\n",(0,o.jsx)(r.p,{children:"adminRoutes.js"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express = require('express');\r\nvar adminRouter = express.Router();\r\nvar mongodb = require('mongodb').MongoClient; /* Pull in the mongoClient */\r\n\r\nvar books = [{ /* Copy books from bookRoutes.js */\r\n    title: 'Cryptonomicon',\r\n    isbn10: '0060512806',\r\n    author: 'Neil Stephenson',\r\n    bookId: '816',\r\n    cover: 'http://ecx.images-amazon.com/images/I/414L%2BIbzcvL._SX317_BO1,204,203,200_.jpg',\r\n    read: true\r\n}, {\r\n    title: 'Leviathan Wakes',\r\n    isbn10: '0316129089',\r\n    author: 'James S.A. Corey',\r\n    bookId: '9533361',\r\n    cover: 'http://ecx.images-amazon.com/images/I/51QvTzb2vYL._SX322_BO1,204,203,200_.jpg',\r\n    read: false\r\n}, {\r\n    title: 'The Lord of the Rings',\r\n    isbn10: '0395193958',\r\n    author: 'J.R.R. Tolkien',\r\n    bookId: '569465',\r\n    cover: 'http://ecx.images-amazon.com/images/I/51eq24cRtRL._SX331_BO1,204,203,200_.jpg',\r\n    read: true\r\n}, {\r\n    title: 'Norwegian Wood',\r\n    isbn10: '0375704027',\r\n    author: 'Haruki Murakami',\r\n    bookId: '11297',\r\n    cover: 'http://ecx.images-amazon.com/images/I/512ZgaaHjIL._SX322_BO1,204,203,200_.jpg',\r\n    read: false\r\n}, {\r\n    title: 'Microserfs',\r\n    isbn10: '0006548598',\r\n    author: 'Douglas Coupland',\r\n    bookId: '2751',\r\n    cover: 'http://ecx.images-amazon.com/images/I/512ZD5DVC4L._SX345_BO1,204,203,200_.jpg',\r\n    read: true\r\n}, {\r\n    title: 'Up Country',\r\n    isbn10: '0446611913',\r\n    author: 'Nelson Demille',\r\n    bookId: '33820',\r\n    cover: 'http://ecx.images-amazon.com/images/I/512Jrk-RopL._SX290_BO1,204,203,200_.jpg',\r\n    read: true\r\n}, {\r\n    title: 'Night over Water',\r\n    isbn10: '0451173139',\r\n    author: 'Ken Follett',\r\n    bookId: '967690',\r\n    cover: 'http://ecx.images-amazon.com/images/I/51OON2-%2BI-L._SX297_BO1,204,203,200_.jpg',\r\n    read: true\r\n}, {\r\n    title: 'The Stand',\r\n    isbn10: '0307947300',\r\n    author: 'Stephen King',\r\n    bookId: '13155183',\r\n    cover: 'http://ecx.images-amazon.com/images/I/41IzCMjxPWL._SX320_BO1,204,203,200_.jpg',\r\n    read: true\r\n}];\r\n\r\nvar router = function (nav) {\r\n\r\n    adminRouter.route('/addBooks') /* open http://localhost:8080/Admin/addBooks to add books to MongoDB */\r\n        .get(function (req, res) {\r\n            var url =\r\n                'mongodb://localhost:27017/libraryApp'; /* Connect to our local installation of MongoDB via the default port 27017 - create DB libraryApp on insert */\r\n\r\n            mongodb.connect(url, function (err, db) {\r\n                var collection = db.collection('books'); /* Connect to a Collection in libraryApp named books - is created on first insert */\r\n                collection.insertMany(books, /* insertMany inserts all Objects from the books variable from above (otherwise insertOne) */\r\n                    function (err, results) {\r\n                        res.send(results); /* Display the Collection after Insert - Object will be assigned ID by MongoDB*/\r\n                        db.close(); /* db.close has to be inside the callback (async !)*/\r\n                    }\r\n                );\r\n\r\n            });\r\n\r\n        });\r\n\r\n    return adminRouter;\r\n};\r\n\r\nmodule.exports = router;\n"})}),"\n",(0,o.jsx)(r.p,{children:"Add the /Admin route to App.js and use adminRouter for it"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"app.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express = require('express');\r\n\r\nvar app = express();\r\n\r\nvar port = process.env.PORT || 5000;\r\nvar nav = [{\r\n    Link: '/Books',\r\n    Text: 'Book'\r\n}, {\r\n    Link: '/Authors',\r\n    Text: 'Author'\r\n}];\r\nvar bookRouter = require('./src/routes/bookRoutes')(nav);\r\nvar adminRouter = require('./src/routes/adminRoutes')(nav); /* Add adminRoutes */\r\n\r\napp.use(express.static('public'));\r\napp.set('views', './src/views');\r\n\r\napp.set('view engine', 'ejs');\r\n\r\napp.use('/Books', bookRouter);\r\napp.use('/Admin', adminRouter); /* Use adminRoutes for /Admin */\r\n\r\napp.get('/', function (req, res) {\r\n    res.render('index', {\r\n        title: 'Hello from render',\r\n        nav: [{\r\n            Link: '/Books',\r\n            Text: 'Books'\r\n        }, {\r\n            Link: '/Authors',\r\n            Text: 'Authors'\r\n        }]\r\n    });\r\n});\r\n\r\napp.get('/books', function (req, res) {\r\n    res.send('Hello Books');\r\n});\r\n\r\napp.listen(port, function (err) {\r\n    console.log('running server on port ' + port);\r\n});\n"})}),"\n",(0,o.jsxs)(r.p,{children:["Now make sure mongod is running and access ",(0,o.jsx)(r.a,{href:"http://localhost:8080/Admin/addBooks",children:"http://localhost:8080/Admin/addBooks"})," - you will get a JSON Object as MongoDB Response. All books will have an ID assigned by the Database and the DB 'libraryApp' and Collection 'books' will be created. Use the mongo commands (List, above) to check."]}),"\n",(0,o.jsx)(r.h2,{id:"14-use-the-mongodb-response",children:"14 Use the MongoDB Response"}),"\n",(0,o.jsx)(r.h3,{id:"select-many",children:"Select Many"}),"\n",(0,o.jsx)(r.p,{children:"Remove the hardcoded books variable and use the mongoDB response instead. Display all books from the books Collection. (bookListView.ejs)"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"bookRoutes.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express = require('express');\r\nvar bookRouter = express.Router();\r\nvar mongodb = require('mongodb').MongoClient;\r\n\r\nvar router = function (nav) {\r\n\r\n /* var books = [...]; has been deleted */\r\n\r\n    bookRouter.route('/')\r\n        .get(function (req, res) {\r\n            var url =\r\n                'mongodb://localhost:27017/libraryApp';\r\n\r\n            mongodb.connect(url, function (err, db) {\r\n                var collection = db.collection('books'); /* Connect to mongoDBs libraryApp books Collection */\r\n\r\n                collection.find({}).toArray( /* find all Objects in the books Collection and put it into an Array */\r\n                    function (err, results) {\r\n                        res.render('bookListView', { /* Copy the res.render from before into the function to render the result of our mongoDB query*/\r\n                            title: 'Books',\r\n                            nav: nav,\r\n                            books: results\r\n                        });\r\n                    }\r\n                );\r\n            });\r\n\r\n        });\r\n\r\n    return bookRouter;\r\n};\r\nmodule.exports = router;\n"})}),"\n",(0,o.jsx)(r.h3,{id:"select-one",children:"Select One"}),"\n",(0,o.jsx)(r.p,{children:"Now we want to have a books details page (bookView.ejs) that only displays one book from the books Collection"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"bookRoutes.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express = require('express');\r\nvar bookRouter = express.Router();\r\nvar mongodb = require('mongodb').MongoClient;\r\nvar objectId = require('mongodb').ObjectID; /* Each book is assigned an ID by mongoDB - we make this ID available for our bookListView.ejs */\r\n\r\nvar router = function (nav) {\r\n\r\n    bookRouter.route('/')\r\n        .get(function (req, res) {\r\n            var url =\r\n                'mongodb://localhost:27017/libraryApp';\r\n\r\n            mongodb.connect(url, function (err, db) {\r\n                var collection = db.collection('books');\r\n\r\n                collection.find({}).toArray(\r\n                    function (err, results) {\r\n                        res.render('bookListView', {\r\n                            title: 'Books',\r\n                            nav: nav,\r\n                            books: results\r\n                        });\r\n                    }\r\n                );\r\n            });\r\n\r\n        });\r\n\r\n    bookRouter.route('/:id')\r\n        .get(function (req, res) {\r\n            var id = new objectId(req.params.id); /* We use the mongoDB ID (_id) for id -> URL is now /Books/:_id instead of /Books/:id */\r\n            var url =\r\n                'mongodb://localhost:27017/libraryApp';\r\n\r\n            mongodb.connect(url, function (err, db) {\r\n                var collection = db.collection('books');\r\n\r\n                collection.findOne({_id: id}, /* findOne returns the first book from the books collection with the same _id */\r\n                    function (err, results) {\r\n                        res.render('bookView', { /* result will be rendered in bookView.ejs */\r\n                            title: 'Books',\r\n                            nav: nav,\r\n                            book: results\r\n                        });\r\n\r\n                    }\r\n                );\r\n\r\n            });\r\n\r\n        });\r\n\r\n    return bookRouter;\r\n};\r\nmodule.exports = router;\n"})}),"\n",(0,o.jsx)(r.p,{children:"Now we want to have a books details page (bookView.ejs) that only displays one book from the books Collection"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"bookListView.ejs"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-html",children:"...\r\n\x3c!-- ################################################ Media ######################################################### --\x3e\r\n\r\n<section class='container' style='margin-bottom: 400px;'>\r\n    <div class='row'>\r\n        <% for(var i=0; i<books.length;i++){%>\r\n            <div class='col-xs-6 col-md-4 col-lg-3 center-block' style='margin-bottom: 10px;'>\r\n                <div class='panel panel-default'>\r\n                    <div class='panel-heading'>\r\n                        <h4><%=books[i].title%></h4>\r\n                    </div>\r\n                    <div class='panel-body'>\r\n                        <div class='col-xs-12 col-sm-4 col-lg-6'>\r\n                            <a class='story-title' href='/Books/<%=books[i]._id%>'><img alt='' src='<%=books[i].cover%>' style='height:100px' class='img-thumbnail'></a>\r\n                        </div>\r\n                        <div class='col-xs-12 col-sm-8 col-lg-6'>\r\n                            <p><span class='label label-default'><strong><%=books[i].author%></strong></span></p>\r\n                            <p><span style='font-family:courier,'new courier';' class='text-muted'><a href='/Books/<%=books[i]._id%>' class='text-muted'>Read More</a></span></p> \x3c!-- Change URL from /Books/:i (<%= i %> with i = 0,1,2,3....8) to /Books/:_id -> _id will be used to findOne --\x3e\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <%}%>\r\n    </div>\r\n    <hr>\r\n\r\n</section>\r\n...\n"})}),"\n",(0,o.jsx)(r.h2,{id:"15-creating-a-signin-form-on-indexejs",children:"15 Creating a SignIn Form on Index.ejs"}),"\n",(0,o.jsx)(r.p,{children:"Just a simple Input Form"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"index.ejs"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-html",children:"...\r\n\x3c!-- ################################################ Login ######################################################### --\x3e\r\n\r\n<div class='col-xs-4 col-xs-offset-1' style='margin-top: 30px;'>\r\n    <div class='container'>\r\n        <div class='row'>\r\n            <div class='col-sm-offset-1 col-sm-2 col-xs-12 text-center'>\r\n                <form name='signUpForm' action='/auth/signUp' method='post'> \x3c!-- Creating a form to post SignUp to /auth/signUp --\x3e\r\n                    User Name:\r\n                    <input name='userName' id='userName'> \x3c!-- Input userName for post --\x3e\r\n                    <br/>\r\n                    <br/>\r\n                    Password:\r\n                    <input name='password' id='password'> \x3c!-- Input password for post --\x3e\r\n                    <br/>\r\n                    <br/>\r\n                    <input type='submit' value='Sign Up'> \x3c!-- Submit post --\x3e\r\n                </form>\r\n            </div>\r\n        </div> \x3c!-- /row --\x3e\r\n    </div> \x3c!-- /container --\x3e\r\n</div> \x3c!-- /v-center --\x3e\r\n\r\n\x3c!-- ################################################ /Login ######################################################### --\x3e\r\n...\n"})}),"\n",(0,o.jsx)(r.h2,{id:"16-creating-the-authentication-route",children:"16 Creating the Authentication Route"}),"\n",(0,o.jsx)(r.p,{children:"We need to add var bodyParser = require('body-parser'); to app.js. The body-parser middleware will be used in app.use(bodyParser.json()); and app.use(bodyParser.urlencoded()); to create a req.body object from JSON elements or URL parameter. Body-parser is install with npm install --save body-parser."}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"authRoute.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express = require('express');\r\nvar authRouter = express.Router(); /* Creating the Authentication Router */\r\nvar mongodb = require('mongodb').MongoClient;\r\nvar passport = require('passport');\r\n\r\nvar router = function () {\r\n    authRouter.route('/signUp') /* Creating the SingUp route */\r\n        .post(function (req, res) {\r\n            console.log(req.body); /* We log the req.body Object created by bodyParser from the signUp post to /auth/signup */\r\n                });\r\n\r\n            };\r\n\r\n    return authRouter; /* return authRouter to be available for app.js */\r\n};\r\n\r\nmodule.exports = router;\n"})}),"\n",(0,o.jsx)(r.p,{children:"We now add the authRoute to app.js"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"app.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express = require('express');\r\nvar bodyParser = require('body-parser');  /* Install bodyParser see above */\r\n\r\nvar app = express();\r\n\r\nvar port = process.env.PORT || 5000;\r\nvar nav = [{\r\n    Link: '/Books',\r\n    Text: 'Book'\r\n}, {\r\n    Link: '/Authors',\r\n    Text: 'Author'\r\n}];\r\nvar bookRouter = require('./src/routes/bookRoutes')(nav);\r\nvar adminRouter = require('./src/routes/adminRoutes')(nav);\r\nvar authRouter = require('./src/routes/authRoutes')(nav); /* Use the created authRouter for the Authentication routes */\r\n\r\napp.use(express.static('public'));\r\napp.use(bodyParser.json()); /* Use bodyParser to create req.body Object from JSON elements*/\r\napp.use(bodyParser.urlencoded()); /* Use bodyParser to create req.body Object from URL encoded JSON elements*/\r\n\r\nrequire('./src/config/passport')(app);\r\n\r\napp.set('views', './src/views');\r\n\r\napp.set('view engine', 'ejs');\r\n\r\napp.use('/Books', bookRouter);\r\napp.use('/Admin', adminRouter);\r\napp.use('/Auth', authRouter); /* Use the created authRouter for the Authentication routes */\r\n\r\napp.get('/', function (req, res) {\r\n    res.render('index', {\r\n        title: 'Hello from render',\r\n        nav: [{\r\n            Link: '/Books',\r\n            Text: 'Books'\r\n        }, {\r\n            Link: '/Authors',\r\n            Text: 'Authors'\r\n        }]\r\n    });\r\n});\r\n\r\napp.get('/books', function (req, res) {\r\n    res.send('Hello Books');\r\n});\r\n\r\napp.listen(port, function (err) {\r\n    console.log('running server on port ' + port);\r\n});\n"})}),"\n",(0,o.jsx)(r.h2,{id:"17-adding-passportjs-middleware",children:"17 Adding Passport.js Middleware"}),"\n",(0,o.jsxs)(r.p,{children:["First we need to ",(0,o.jsx)(r.em,{children:"npm install --save cookie-parser passport express-session"}),"."]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"authRoute.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express = require('express');\r\nvar bodyParser = require('body-parser');\r\nvar cookieParser = require('cookie-parser'); /* To parse the session cookie used by passport */\r\nvar passport = require('passport'); /* user authentication */\r\nvar session = require('express-session'); /* for passport-session: creates a session for the logged in user. Session stores the user information inside a cookie for the active session */\r\n\r\nvar app = express();\r\n\r\nvar port = process.env.PORT || 5000;\r\nvar nav = [{\r\n    Link: '/Books',\r\n    Text: 'Book'\r\n}, {\r\n    Link: '/Authors',\r\n    Text: 'Author'\r\n}];\r\nvar bookRouter = require('./src/routes/bookRoutes')(nav);\r\nvar adminRouter = require('./src/routes/adminRoutes')(nav);\r\nvar authRouter = require('./src/routes/authRoutes')(nav);\r\n\r\napp.use(express.static('public'));\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded());\r\napp.use(cookieParser()); /* use cookieParser to parse the session cookie */\r\napp.use(session({secret: 'library'})); /* The session needs a secret - can be chosen freely */\r\n\r\nrequire('./src/config/passport')(app); /* We separate the passport stuff src/config/passport.js - we pull in (app) to be able to app.use inside passport.js */\r\n\r\napp.set('views', './src/views');\r\n\r\napp.set('view engine', 'ejs');\r\n\r\napp.use('/Books', bookRouter);\r\napp.use('/Admin', adminRouter);\r\napp.use('/Auth', authRouter);\r\n\r\napp.get('/', function (req, res) {\r\n    res.render('index', {\r\n        title: 'Hello from render',\r\n        nav: [{\r\n            Link: '/Books',\r\n            Text: 'Books'\r\n        }, {\r\n            Link: '/Authors',\r\n            Text: 'Authors'\r\n        }]\r\n    });\r\n});\r\n\r\napp.get('/books', function (req, res) {\r\n    res.send('Hello Books');\r\n});\r\n\r\napp.listen(port, function (err) {\r\n    console.log('running server on port ' + port);\r\n});\n"})}),"\n",(0,o.jsxs)(r.p,{children:["Separate the passport component to ",(0,o.jsx)(r.em,{children:"src/config/passport.js"}),". We need to ",(0,o.jsx)(r.em,{children:"npm install --save passport-local"})," to use the local strategy of authentication (not OAuth)."]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"passport.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var passport = require('passport'); /* pull in passport */\r\n\r\nmodule.exports = function (app) {\r\n    app.use(passport.initialize());\r\n    app.use(passport.session());\r\n\r\n    passport.serializeUser(function (user, done) { /* Add User to Session */\r\n        done(null, user); /* Callback User from Database */\r\n    });\r\n\r\n    passport.deserializeUser(function (user, done) { /* Remove User from Session */\r\n        done(null, user);\r\n    });\r\n\r\n    require('./strategies/local.strategy')(); /* We only use a local.strategy for authentication - not passport.google, passport.facebook, etc. - Third-party OAuth. We save the file in src/config/strategies/local.strategy.js */\r\n\r\n};\n"})}),"\n",(0,o.jsx)(r.h2,{id:"18-authentication-with-local-strategy",children:"18 Authentication with Local Strategy"}),"\n",(0,o.jsx)(r.p,{children:"Now we create the local.strategy.js as required in passport.js:"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"local.strategy.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var passport = require('passport'),\r\n    LocalStrategy = require('passport-local').Strategy,\r\n    mongodb = require('mongodb').MongoClient;\r\n\r\nmodule.exports = function () {\r\n    passport.use(new LocalStrategy({\r\n          usernameField: 'userName', /* take userName from input form in index.ejs when posted to /auth/signUp (bodyParser) */\r\n          passwordField: 'password' /* take password from input form in index.ejs when posted to /auth/signUp (bodyParser) */\r\n      },\r\n      function (username, password, done) { /* Pass username/password - then callBack done */\r\n          var user = {username: username,\r\n                      password: password\r\n                    };\r\n                    done(null, user); /* Take user and return user - authentication with mongoDB comes next */\r\n                  }));\r\n};\n"})}),"\n",(0,o.jsx)(r.p,{children:"req.login and redirect to Profile"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"authRoute.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express = require('express');\r\nvar authRouter = express.Router();\r\nvar mongodb = require('mongodb').MongoClient;\r\n\r\nvar router = function () {\r\n    authRouter.route('/signUp')\r\n        .post(function (req, res) {\r\n            console.log(req.body);\r\n            req.login(req.body, function(){ /* We do not yet save the user to mongoDB - just redirect him to /auth/profile */\r\n              res.redirect('/auth/profile');\r\n            });\r\n        });\r\n    authRouter.route('/profile') /* we have to create the profile route */\r\n      .get(function(req, res) { /* When GET /profile... */\r\n        res.json(req.user); /* ... respond with the JSON Object user */\r\n      });\r\n    return authRouter;\r\n};\r\n\r\nmodule.exports = router;\n"})}),"\n",(0,o.jsx)(r.h2,{id:"19-saving-the-user-to-mongodb",children:"19 Saving the User to MongoDB"}),"\n",(0,o.jsx)(r.p,{children:"SignUp save User to MongoDB"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"authRoute.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express = require('express');\r\nvar authRouter = express.Router();\r\nvar mongodb = require('mongodb').MongoClient;\r\n\r\nvar router = function () {\r\n    authRouter.route('/signUp')\r\n        .post(function (req, res) {\r\n            console.log(req.body);\r\n            var url =\r\n                'mongodb://localhost:27017/libraryApp';\r\n            mongodb.connect(url, function (err, db) { /* connect to local install of mongoDB */\r\n                var collection = db.collection('users'); /* open users collection that is created on first signUp */\r\n                var user = { /* Creation of a user object from req.body */\r\n                    username: req.body.userName,\r\n                    password: req.body.password\r\n                };\r\n\r\n                collection.insert(user, /* the user is automatically inserted into the users collection (collection is automatically created) */\r\n                    function (err, results) {\r\n                        req.login(results.ops[0], function () { /* user is no longer taken from req.body but from the results ops[0] limits the result to the {username, password, _id} JSON object */\r\n                            res.redirect('/auth/profile');\r\n                        });\r\n                    });\r\n            });\r\n\r\n        });\r\n    authRouter.route('/profile')\r\n      .get(function(req, res) {\r\n        res.json(req.user);\r\n      });\r\n    return authRouter;\r\n};\r\n\r\nmodule.exports = router;\n"})}),"\n",(0,o.jsx)(r.h2,{id:"20-user-signin-from-mongodb",children:"20 User SignIn from mongoDB"}),"\n",(0,o.jsx)(r.p,{children:"Creating the SignIn Form"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"index.ejs"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"\x3c!-- ################################################ Login ######################################################### --\x3e\r\n\r\n<div class='col-xs-4 col-xs-offset-1' style='margin-top: 30px;'>\r\n    <div class='container'>\r\n        <div class='row'>\r\n            <div class='col-sm-offset-3 col-sm-2 col-xs-12 text-center'>\r\n                <form name='signInForm' action='/auth/signIn' method='post'> \x3c!-- SignIN --\x3e\r\n                    User Name:\r\n                    <input name='userName' id='userName'>\r\n                    <br/>\r\n                    <br/>\r\n                    Password:\r\n                    <input name='password' id='password'>\r\n                    <br/>\r\n                    <br/>\r\n                    <input type='submit' value='Sign In'>\r\n                </form>\r\n            </div>\r\n\r\n            <div class='clearfix visible-xs' style='margin-bottom: 20px;'></div>\r\n\r\n            <div class='col-sm-offset-1 col-sm-2 col-xs-12 text-center'>\r\n                <form name='signUpForm' action='/auth/signUp' method='post'> \x3c!-- SignUp --\x3e\r\n                    User Name:\r\n                    <input name='userName' id='userName'>\r\n                    <br/>\r\n                    <br/>\r\n                    Password:\r\n                    <input name='password' id='password'>\r\n                    <br/>\r\n                    <br/>\r\n                    <input type='submit' value='Sign Up'>\r\n                </form>\r\n            </div>\r\n        </div> \x3c!-- /row --\x3e\r\n    </div> \x3c!-- /container --\x3e\r\n</div> \x3c!-- /v-center --\x3e\r\n\x3c!-- ################################################ /Login ######################################################### --\x3e\n"})}),"\n",(0,o.jsx)(r.p,{children:"SignIn save User to MongoDB"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"authRoute.js"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"var express = require('express');\r\nvar authRouter = express.Router();\r\nvar mongodb = require('mongodb').MongoClient;\r\nvar passport = require('passport'); /* Pull in passport for signIn */\r\n\r\nvar router = function () {\r\n    authRouter.route('/signUp')\r\n        .post(function (req, res) {\r\n            console.log(req.body);\r\n            var url =\r\n                'mongodb://localhost:27017/libraryApp';\r\n            mongodb.connect(url, function (err, db) {\r\n                var collection = db.collection('users');\r\n                var user = {\r\n                    username: req.body.userName,\r\n                    password: req.body.password\r\n                };\r\n\r\n                collection.insert(user,\r\n                    function (err, results) {\r\n                        req.login(results.ops[0], function () {\r\n                            res.redirect('/auth/profile');\r\n                        });\r\n                    });\r\n            });\r\n\r\n        });\r\n    authRouter.route('/signIn')\r\n        .post(passport.authenticate('local', { /* user post is authenticated with passport local strategy */\r\n            failureRedirect: '/' /* If user did not sign up first - redirect back to home */\r\n        }), function (req, res) {\r\n            res.redirect('/auth/profile'); /* If successfully authenticated go to profile page */\r\n        });\r\n    authRouter.route('/profile')\r\n        .all(function (req, res, next) {\r\n            if (!req.user) {\r\n                res.redirect('/');\r\n            }\r\n            next();\r\n        })\r\n        .get(function (req, res) {\r\n            res.json(req.user);\r\n        });\r\n    return authRouter;\r\n};\r\n\r\nmodule.exports = router;\n"})}),"\n",(0,o.jsx)(r.h2,{id:"21-verifying-user-in-db",children:"21 Verifying User in DB"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"authRoute.js"})}),"\n",(0,o.jsx)(r.p,{children:"..."})]})}function p(e={}){const{wrapper:r}={...(0,s.ah)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},603905:(e,r,n)=>{n.d(r,{ah:()=>d});var o=n(667294);function s(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function t(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?t(Object(n),!0).forEach((function(r){s(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,o,s=function(e,r){if(null==e)return{};var n,o,s={},t=Object.keys(e);for(o=0;o<t.length;o++)n=t[o],r.indexOf(n)>=0||(s[n]=e[n]);return s}(e,r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(o=0;o<t.length;o++)n=t[o],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=o.createContext({}),d=function(e){var r=o.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},c={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},p=o.forwardRef((function(e,r){var n=e.components,s=e.mdxType,t=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),h=d(n),u=s,g=h["".concat(l,".").concat(u)]||h[u]||c[u]||t;return n?o.createElement(g,i(i({ref:r},p),{},{components:n})):o.createElement(g,i({ref:r},p))}));p.displayName="MDXCreateElement"},820750:(e,r,n)=>{n.d(r,{Z:()=>o});const o=n.p+"assets/images/photo-34445934842_9cbfb7dfcb_o-464557a7759924344bfba6fafde3e24d.jpg"}}]);