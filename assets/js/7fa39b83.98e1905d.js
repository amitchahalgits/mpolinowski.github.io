"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[54248],{3905:(t,n,e)=>{e.d(n,{Zo:()=>o,kt:()=>g});var a=e(67294);function r(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function l(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,a)}return e}function i(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?l(Object(e),!0).forEach((function(n){r(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):l(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function s(t,n){if(null==t)return{};var e,a,r=function(t,n){if(null==t)return{};var e,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)e=l[a],n.indexOf(e)>=0||(r[e]=t[e]);return r}(t,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)e=l[a],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}var p=a.createContext({}),u=function(t){var n=a.useContext(p),e=n;return t&&(e="function"==typeof t?t(n):i(i({},n),t)),e},o=function(t){var n=u(t.components);return a.createElement(p.Provider,{value:n},t.children)},m={inlineCode:"code",wrapper:function(t){var n=t.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(t,n){var e=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,o=s(t,["components","mdxType","originalType","parentName"]),d=u(e),g=r,c=d["".concat(p,".").concat(g)]||d[g]||m[g]||l;return e?a.createElement(c,i(i({ref:n},o),{},{components:e})):a.createElement(c,i({ref:n},o))}));function g(t,n){var e=arguments,r=n&&n.mdxType;if("string"==typeof t||r){var l=e.length,i=new Array(l);i[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=t,s.mdxType="string"==typeof t?t:r,i[1]=s;for(var u=2;u<l;u++)i[u]=e[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,e)}d.displayName="MDXCreateElement"},56471:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var a=e(87462),r=(e(67294),e(3905));const l={sidebar_position:4370,slug:"2023-06-30",title:"SQL in Data Science - Slightly more Advanced Queries",authors:"mpolinowski",tags:["Python","Machine Learning","Cheating"],description:"Cheat Sheet using Psycopg2 to interact with PostgreSQL Databases"},i=void 0,s={unversionedId:"IoT-and-Machine-Learning/ML/2023-06-30-sql-in-data-science-advanced/index",id:"IoT-and-Machine-Learning/ML/2023-06-30-sql-in-data-science-advanced/index",title:"SQL in Data Science - Slightly more Advanced Queries",description:"Cheat Sheet using Psycopg2 to interact with PostgreSQL Databases",source:"@site/docs/IoT-and-Machine-Learning/ML/2023-06-30-sql-in-data-science-advanced/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2023-06-30-sql-in-data-science-advanced",slug:"/IoT-and-Machine-Learning/ML/2023-06-30-sql-in-data-science-advanced/2023-06-30",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-06-30-sql-in-data-science-advanced/2023-06-30",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2023-06-30-sql-in-data-science-advanced/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Cheating",permalink:"/docs/tags/cheating"}],version:"current",sidebarPosition:4370,frontMatter:{sidebar_position:4370,slug:"2023-06-30",title:"SQL in Data Science - Slightly more Advanced Queries",authors:"mpolinowski",tags:["Python","Machine Learning","Cheating"],description:"Cheat Sheet using Psycopg2 to interact with PostgreSQL Databases"},sidebar:"tutorialSidebar",previous:{title:"SQL in Data Science - Machine Learning",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-07-02-sql-in-data-science-ml/2023-07-02"},next:{title:"SQL in Data Science - The Basics using Python",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-06-27-sql-in-data-science-basics/2023-06-27"}},p={},u=[{value:"SQL and Python",id:"sql-and-python",level:2},{value:"Subqueries",id:"subqueries",level:3},{value:"Create Table from CSV",id:"create-table-from-csv",level:4},{value:"SELECT WHERE Subquery",id:"select-where-subquery",level:4},{value:"Joins",id:"joins",level:3},{value:"INNER JOIN",id:"inner-join",level:4},{value:"JOIN Aliases",id:"join-aliases",level:4},{value:"Multi INNER JOIN",id:"multi-inner-join",level:4},{value:"Self JOIN",id:"self-join",level:4},{value:"LEFT JOIN",id:"left-join",level:4},{value:"FULL OUTER JOIN",id:"full-outer-join",level:4},{value:"UNION",id:"union",level:4},{value:"Formating",id:"formating",level:3},{value:"Text Strings - Concatenations",id:"text-strings---concatenations",level:4},{value:"Text Strings - Trim",id:"text-strings---trim",level:4},{value:"Text Strings - SUBSTR, LOWER, UPPER",id:"text-strings---substr-lower-upper",level:4},{value:"Text Strings - STRFTIME",id:"text-strings---strftime",level:4},{value:"Case Statements",id:"case-statements",level:3},{value:"CASE WHEN THEN ELSE - One-Hot Encoding",id:"case-when-then-else---one-hot-encoding",level:4},{value:"CASE WHEN AND THEN ELSE - Multi-Classification",id:"case-when-and-then-else---multi-classification",level:4}],o={toc:u};function m(t){let{components:n,...l}=t;return(0,r.kt)("wrapper",(0,a.Z)({},o,l,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Guangzhou, China",src:e(32103).Z,width:"1500",height:"581"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sql-in-data-science"},"SQL in Data Science"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sql-and-python"},"SQL and Python"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#subqueries"},"Subqueries"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-table-from-csv"},"Create Table from CSV")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#select-where-subquery"},"SELECT WHERE Subquery")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#joins"},"Joins"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#inner-join"},"INNER JOIN")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#join-aliases"},"JOIN Aliases")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#multi-inner-join"},"Multi INNER JOIN")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#self-join"},"Self JOIN")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#left-join"},"LEFT JOIN")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#full-outer-join"},"FULL OUTER JOIN")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#union"},"UNION")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#formating"},"Formating"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#text-strings---concatenations"},"Text Strings - Concatenations")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#text-strings---trim"},"Text Strings - Trim")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#text-strings---substr-lower-upper"},"Text Strings - SUBSTR, LOWER, UPPER")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#text-strings---strftime"},"Text Strings - STRFTIME")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#case-statements"},"Case Statements"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#case-when-then-else---one-hot-encoding"},"CASE WHEN THEN ELSE - One-Hot Encoding")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#case-when-and-then-else---multi-classification"},"CASE WHEN AND THEN ELSE - Multi-Classification"))))))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/sql-for-data-science/tree/master/01_basic_scripts"},"Github Repository")),(0,r.kt)("h1",{id:"sql-in-data-science"},"SQL in Data Science"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-06-27-sql-in-data-science-basics/2023-06-27"},"SQL in Data Science - The Basics using Python")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-06-30-sql-in-data-science-advanced/2023-06-30"},"SQL in Data Science - Slightly more Advanced Queries")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-07-02-sql-in-data-science-ml/2023-07-02"},"SQL in Data Science - Machine Learning"))),(0,r.kt)("h2",{id:"sql-and-python"},"SQL and Python"),(0,r.kt)("h3",{id:"subqueries"},"Subqueries"),(0,r.kt)("p",null,"Use Subqueries to trim down the dataset before running your search by a filter condition from a different SQL table. For this I split up the Penguins dataset used in part 1 into two tables:"),(0,r.kt)("h4",{id:"create-table-from-csv"},"Create Table from CSV"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Table A")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"uid"),(0,r.kt)("th",{parentName:"tr",align:null},"species"),(0,r.kt)("th",{parentName:"tr",align:null},"island"),(0,r.kt)("th",{parentName:"tr",align:null},"sex"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"649bc5d39b21a1b93e0985a3"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"MALE")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"649bc5d39b21a1b93e0985a4"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"FEMALE")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"649bc5d39b21a1b93e0985a5"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"FEMALE")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"649bc5d39b21a1b93e0985a7"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"FEMALE")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"649bc5d39b21a1b93e0985a8"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"MALE")))),(0,r.kt)("p",null,"..."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Table B")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"uid"),(0,r.kt)("th",{parentName:"tr",align:null},"culmen_length_mm"),(0,r.kt)("th",{parentName:"tr",align:null},"culmen_depth_mm"),(0,r.kt)("th",{parentName:"tr",align:null},"flipper_length_mm"),(0,r.kt)("th",{parentName:"tr",align:null},"body_mass_g"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"649bc5d39b21a1b93e0985a3"),(0,r.kt)("td",{parentName:"tr",align:null},"39.1"),(0,r.kt)("td",{parentName:"tr",align:null},"18.7"),(0,r.kt)("td",{parentName:"tr",align:null},"181"),(0,r.kt)("td",{parentName:"tr",align:null},"3750")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"649bc5d39b21a1b93e0985a4"),(0,r.kt)("td",{parentName:"tr",align:null},"39.5"),(0,r.kt)("td",{parentName:"tr",align:null},"17.4"),(0,r.kt)("td",{parentName:"tr",align:null},"186"),(0,r.kt)("td",{parentName:"tr",align:null},"3800")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"649bc5d39b21a1b93e0985a5"),(0,r.kt)("td",{parentName:"tr",align:null},"40.3"),(0,r.kt)("td",{parentName:"tr",align:null},"18.0"),(0,r.kt)("td",{parentName:"tr",align:null},"195"),(0,r.kt)("td",{parentName:"tr",align:null},"3250")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"649bc5d39b21a1b93e0985a7"),(0,r.kt)("td",{parentName:"tr",align:null},"36.7"),(0,r.kt)("td",{parentName:"tr",align:null},"19.3"),(0,r.kt)("td",{parentName:"tr",align:null},"193"),(0,r.kt)("td",{parentName:"tr",align:null},"3450")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"649bc5d39b21a1b93e0985a8"),(0,r.kt)("td",{parentName:"tr",align:null},"39.3"),(0,r.kt)("td",{parentName:"tr",align:null},"20.6"),(0,r.kt)("td",{parentName:"tr",align:null},"190"),(0,r.kt)("td",{parentName:"tr",align:null},"3650")))),(0,r.kt)("p",null,"..."),(0,r.kt)("p",null,"Run the following functions for both CSV files, respectively:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"data_a = pd.read_csv ('dataset_penguins_a.csv')   \ndf_a = pd.DataFrame(data_a)\n\n\ndef create_table():\n    conn = None\n    try:\n        # read database configuration\n        params = config()\n        # connect to the PostgreSQL database\n        conn = psycopg2.connect(**params)\n        # create a new cursor\n        cursor = conn.cursor()\n        # create the table\n        cursor.execute('''\n        CREATE TABLE penguins_a (\n            uid CHAR(25) primary key,\n            species VARCHAR(10),\n            island VARCHAR(10),\n            sex VARCHAR(10)\n            )\n               ''')\n        conn.commit()\n        # Close communication with the PostgreSQL database\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def add_data():\n    conn = None\n    try:\n        # read database configuration\n        params = config()\n        # connect to the PostgreSQL database\n        conn = psycopg2.connect(**params)\n        # create a new cursor\n        cursor = conn.cursor()\n        # insert data\n        for row in df_a.itertuples():\n            cursor.execute('INSERT INTO penguins_a (uid, species, island, culmen_length_mm, culmen_depth_mm, flipper_length_mm, body_mass_g, sex) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)', (row.uid, row.species, row.island, row.culmen_length_mm, row.culmen_depth_mm, row.flipper_length_mm, row.body_mass_g, row.sex))\n        # Commit the changes to the database\n        conn.commit()\n        # Close communication with the PostgreSQL database\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n")),(0,r.kt)("h4",{id:"select-where-subquery"},"SELECT WHERE Subquery"),(0,r.kt)("p",null,"We can now query against table A after fulfilling a filter condition from table B:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'def get_penguins_subquery(unit, condition):\n    """ query data from the penguins table """\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = "SELECT uid, island, species FROM penguins_a WHERE uid IN (SELECT uid FROM penguins_b WHERE {0} {1})".format(unit, condition)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == \'__main__\':\n    # return specimen that weight more than 6kg\n    results = get_penguins_subquery(unit=\'body_mass_g\', condition=\'>6000\')\n    print(results)\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"UID"),(0,r.kt)("th",{parentName:"tr",align:null},"Island"),(0,r.kt)("th",{parentName:"tr",align:null},"Species"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"649bc5d39b21a1b93e098690"),(0,r.kt)("td",{parentName:"tr",align:null},"Biscoe"),(0,r.kt)("td",{parentName:"tr",align:null},"Gentoo")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"649bc5d39b21a1b93e0986a0"),(0,r.kt)("td",{parentName:"tr",align:null},"Biscoe"),(0,r.kt)("td",{parentName:"tr",align:null},"Gentoo")))),(0,r.kt)("h3",{id:"joins"},"Joins"),(0,r.kt)("h4",{id:"inner-join"},"INNER JOIN"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def get_penguins_inner_join(column1, column2, column3):\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = \"SELECT {0}, {1}, {2} FROM penguins_a INNER JOIN penguins_b ON penguins_a.uid = penguins_b.uid)\".format(column1, column2, column3)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    # return species and island from table A and body mass from table B\n    results = get_penguins_inner_join(column1='species', column2='island', column3='body_mass_g')\n    print(results)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Species"),(0,r.kt)("th",{parentName:"tr",align:null},"Island"),(0,r.kt)("th",{parentName:"tr",align:null},"Body Mass"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3750")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3800")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3250")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3450")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3650")))),(0,r.kt)("p",null,"..."),(0,r.kt)("h4",{id:"join-aliases"},"JOIN Aliases"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def get_penguins_alias_join(column1, column2, column3):\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = \"SELECT {0}, {1}, {2} FROM penguins_a AS a, penguins_b AS b WHERE a.uid = b.uid\".format(column1, column2, column3)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    # return species and island from table A and body mass from table B\n    results = get_penguins_alias_join(column1='species', column2='island', column3='body_mass_g')\n    print(results)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Species"),(0,r.kt)("th",{parentName:"tr",align:null},"Island"),(0,r.kt)("th",{parentName:"tr",align:null},"Body Mass"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3750")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3800")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3250")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3450")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3650")))),(0,r.kt)("p",null,"..."),(0,r.kt)("h4",{id:"multi-inner-join"},"Multi INNER JOIN"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def get_penguins_multi_inner_join(column1, column2, column3):\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = \"SELECT {0}, {1}, {2} FROM ((penguins_a pa INNER JOIN penguins_b pb ON pa.uid = pb.uid) INNER JOIN penguins p ON  pa.uid = p.uid)\".format(column1, column2, column3)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    # return species from table A, island from the original table and body mass from table B\n    results = get_penguins_multi_inner_join(column1='pa.species', column2='p.island', column3='pb.body_mass_g')\n    print(results)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Species"),(0,r.kt)("th",{parentName:"tr",align:null},"Island"),(0,r.kt)("th",{parentName:"tr",align:null},"Body Mass"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3750")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3800")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3250")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3450")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3650")))),(0,r.kt)("p",null,"..."),(0,r.kt)("h4",{id:"self-join"},"Self JOIN"),(0,r.kt)("p",null,"AND statement for a second column to join on... but my tables only have one index in common... ordered by body mass:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def get_penguins_self_join(column1, column2, column3):\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = \"SELECT {0} AS Species, {1} AS Island, {2} AS Mass FROM penguins_a a, penguins_b b WHERE a.uid = b.uid AND a.uid = b.uid ORDER BY b.body_mass_g\".format(column1, column2, column3)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    # return species and island from table A and body mass from table B\n    results = get_penguins_self_join(column1='a.species', column2='a.island', column3='b.body_mass_g')\n    df = pd.DataFrame(results, columns=['Species', 'Island', 'Body Mass'])\n    df.head()\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Species"),(0,r.kt)("th",{parentName:"tr",align:null},"Island"),(0,r.kt)("th",{parentName:"tr",align:null},"Body Mass"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"Chinstrap"),(0,r.kt)("td",{parentName:"tr",align:null},"Dream"),(0,r.kt)("td",{parentName:"tr",align:null},"2700")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Biscoe"),(0,r.kt)("td",{parentName:"tr",align:null},"2850")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Biscoe"),(0,r.kt)("td",{parentName:"tr",align:null},"2850")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"2900")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Biscoe"),(0,r.kt)("td",{parentName:"tr",align:null},"2900")))),(0,r.kt)("p",null,"..."),(0,r.kt)("h4",{id:"left-join"},"LEFT JOIN"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def get_penguins_left_join(column1, column2, column3):\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = \"SELECT {0}, {1}, {2} FROM penguins_a a LEFT JOIN penguins_b b ON a.uid = b.uid\".format(column1, column2, column3)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    # return species and island from table A and body mass from table B\n    results = get_penguins_left_join(column1='a.species', column2='a.island', column3='b.body_mass_g')\n    df = pd.DataFrame(results, columns=['Species', 'Island', 'Body Mass'])\n    df.head()\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Species"),(0,r.kt)("th",{parentName:"tr",align:null},"Island"),(0,r.kt)("th",{parentName:"tr",align:null},"Body Mass"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3750")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3800")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3250")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3450")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3650")))),(0,r.kt)("p",null,"..."),(0,r.kt)("p",null,"There is no difference between right and left joins - they all return the same as a full outer join as both tables contain the same ",(0,r.kt)("inlineCode",{parentName:"p"},"uid")," rows. There will be a difference once one row is missing in the other table - then it will either be dropped or all values from that table be listed as NULL depending on you approaching it from the left or the right."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"SQL Joins",src:e(96282).Z,width:"1850",height:"1080"})),(0,r.kt)("h4",{id:"full-outer-join"},"FULL OUTER JOIN"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def get_penguins_full_join(column1, column2, column3):\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = \"SELECT {0}, {1}, {2} FROM penguins_a a FULL OUTER JOIN penguins_b b ON a.uid = b.uid\".format(column1, column2, column3)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    # return species and island from table A and body mass from table B\n    results = get_penguins_full_join(column1='a.species', column2='a.island', column3='b.body_mass_g')\n    df = pd.DataFrame(results, columns=['Species', 'Island', 'Body Mass'])\n    df.head()\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Species"),(0,r.kt)("th",{parentName:"tr",align:null},"Island"),(0,r.kt)("th",{parentName:"tr",align:null},"Body Mass"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3750")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3800")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3250")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3450")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"3650")))),(0,r.kt)("p",null,"..."),(0,r.kt)("h4",{id:"union"},"UNION"),(0,r.kt)("p",null,"UNION does not really work here. It could be used if another survey comes in and you want all the ID that are associated to specimens of a group - species, island, sex... Select ",(0,r.kt)("inlineCode",{parentName:"p"},"uid")," in both tables and filter for the group you are looking for - this returns all the IDs from both tables:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'def get_penguins_union():\n    """ query data from the penguins table """\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = "SELECT uid FROM penguins_a1 WHERE island=\'Dream\' UNION SELECT uid FROM penguins_a2 WHERE island=\'Dream\'"\n        print(query)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n')),(0,r.kt)("h3",{id:"formating"},"Formating"),(0,r.kt)("h4",{id:"text-strings---concatenations"},"Text Strings - Concatenations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def get_penguins_concat_strings(column1, column2, filter):\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = \"SELECT {0}, {1}, {0} || ' (' || {1} || ')' FROM penguins_a WHERE sex = '{2}'\".format(column1, column2, filter)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    results = get_penguins_concat_strings(column1='species', column2='island', filter='MALE')\n    df = pd.DataFrame(results, columns=['Species', 'Island', 'Concat'])\n    df.head()\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Species"),(0,r.kt)("th",{parentName:"tr",align:null},"Island"),(0,r.kt)("th",{parentName:"tr",align:null},"Concat"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie (Torgersen)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie (Torgersen)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie (Torgersen)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie (Torgersen)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie (Torgersen)")))),(0,r.kt)("h4",{id:"text-strings---trim"},"Text Strings - Trim"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"TRIM"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"RTRIM"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"LTRIM")," to remove leading or trailing spaces from a string.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"SELECT TRIM('#! ' FROM '    #SQL Tutorial!    ') AS TrimmedString;\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"TrimmedString"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SQL Tutorial")))),(0,r.kt)("h4",{id:"text-strings---substr-lower-upper"},"Text Strings - SUBSTR, LOWER, UPPER"),(0,r.kt)("p",null,"Generate IDs from Substrings - e.g. Island Codes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def get_penguins_sub_strings(column1, column2, filter):\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = \"SELECT {0}, {1}, UPPER(SUBSTR({1},1,3)) FROM penguins_a\".format(column1, column2, filter)\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    results = get_penguins_sub_strings(column1='species', column2='island')\n    df = pd.DataFrame(results, columns=['Species', 'Island', 'Location Code'])\n    df.head()\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Species"),(0,r.kt)("th",{parentName:"tr",align:null},"Island"),(0,r.kt)("th",{parentName:"tr",align:null},"Location Code"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"TOR")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"TOR")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"TOR")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"TOR")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"TOR")))),(0,r.kt)("h4",{id:"text-strings---strftime"},"Text Strings - STRFTIME"),(0,r.kt)("p",null,"The penguins dataset does not contain timestamps ~ let's import another one that does:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"tweet_data = pd.read_csv ('datasets_tweets.csv')   \ndf = pd.DataFrame(tweet_data)\ndf = df.drop(['negativereason', 'negativereason_confidence', 'text', 'tweet_location', 'tweet_coord', 'negativereason_gold', 'airline_sentiment_gold'], axis=1)\ndf = df.drop_duplicates(subset=['tweet_id'], keep='first')\n\n                                                        \ndef create_table():\n    conn = None\n    try:\n        # read database configuration\n        params = config()\n        # connect to the PostgreSQL database\n        conn = psycopg2.connect(**params)\n        # create a new cursor\n        cursor = conn.cursor()\n        # create the table\n        cursor.execute('''\n        CREATE TABLE tweets (\n            tweet_id INT primary key,\n            airline_sentiment VARCHAR,\n            airline_sentiment_confidence FLOAT,\n            airline VARCHAR,\n            name VARCHAR,\n            retweet_count INT,\n            tweet_created TIMESTAMP,\n            user_timezone VARCHAR\n            )\n               ''')\n        conn.commit()\n        # Close communication with the PostgreSQL database\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def add_data():\n    conn = None\n    try:\n        # read database configuration\n        params = config()\n        # connect to the PostgreSQL database\n        conn = psycopg2.connect(**params)\n        # create a new cursor\n        cursor = conn.cursor()\n        # insert data\n        for row in df.itertuples():\n            cursor.execute('INSERT INTO tweets (tweet_id, airline_sentiment, airline_sentiment_confidence, airline, name, retweet_count, tweet_created, user_timezone) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)', (row.tweet_id, row.airline_sentiment, row.airline_sentiment_confidence, row.airline, row.name ,row.retweet_count, row.tweet_created, row.user_timezone))\n        # Commit the changes to the database\n        conn.commit()\n        # Close communication with the PostgreSQL database\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"tweet_id"),(0,r.kt)("th",{parentName:"tr",align:null},"airline_sentiment"),(0,r.kt)("th",{parentName:"tr",align:null},"airline_sentiment_confidence"),(0,r.kt)("th",{parentName:"tr",align:null},"airline"),(0,r.kt)("th",{parentName:"tr",align:null},"name"),(0,r.kt)("th",{parentName:"tr",align:null},"retweet_count"),(0,r.kt)("th",{parentName:"tr",align:null},"tweet_created"),(0,r.kt)("th",{parentName:"tr",align:null},"user_timezone"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"570306133677760513"),(0,r.kt)("td",{parentName:"tr",align:null},"neutral"),(0,r.kt)("td",{parentName:"tr",align:null},"1.0000"),(0,r.kt)("td",{parentName:"tr",align:null},"Virgin America"),(0,r.kt)("td",{parentName:"tr",align:null},"cairdin"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"2015-02-24 11:35:52 -0800"),(0,r.kt)("td",{parentName:"tr",align:null},"Eastern Time (US & Canada)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"570301130888122368"),(0,r.kt)("td",{parentName:"tr",align:null},"positive"),(0,r.kt)("td",{parentName:"tr",align:null},"0.3486"),(0,r.kt)("td",{parentName:"tr",align:null},"Virgin America"),(0,r.kt)("td",{parentName:"tr",align:null},"jnardino"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"2015-02-24 11:15:59 -0800"),(0,r.kt)("td",{parentName:"tr",align:null},"Pacific Time (US & Canada)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"570301083672813571"),(0,r.kt)("td",{parentName:"tr",align:null},"neutral"),(0,r.kt)("td",{parentName:"tr",align:null},"0.6837"),(0,r.kt)("td",{parentName:"tr",align:null},"Virgin America"),(0,r.kt)("td",{parentName:"tr",align:null},"yvonnalynn"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"2015-02-24 11:15:48 -0800"),(0,r.kt)("td",{parentName:"tr",align:null},"Central Time (US & Canada)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"570301031407624196"),(0,r.kt)("td",{parentName:"tr",align:null},"negative"),(0,r.kt)("td",{parentName:"tr",align:null},"1.0000"),(0,r.kt)("td",{parentName:"tr",align:null},"Virgin America"),(0,r.kt)("td",{parentName:"tr",align:null},"jnardino"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"2015-02-24 11:15:36 -0800"),(0,r.kt)("td",{parentName:"tr",align:null},"Pacific Time (US & Canada)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"570300817074462722"),(0,r.kt)("td",{parentName:"tr",align:null},"negative"),(0,r.kt)("td",{parentName:"tr",align:null},"1.0000"),(0,r.kt)("td",{parentName:"tr",align:null},"Virgin America"),(0,r.kt)("td",{parentName:"tr",align:null},"jnardino"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"2015-02-24 11:14:45 -0800"),(0,r.kt)("td",{parentName:"tr",align:null},"Pacific Time (US & Canada)")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def get_tweets_datetime_strings():\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = \"SELECT tweet_created, EXTRACT(ISOYEAR FROM tweet_created), EXTRACT(MONTH FROM tweet_created), EXTRACT(Day FROM tweet_created),  EXTRACT(DOW FROM tweet_created), CURRENT_DATE - tweet_created FROM tweets;\"\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    results = get_tweets_datetime_strings()\n    df = pd.DataFrame(results, columns=['Timestamp', 'Year', 'Month', 'Day', 'Day of the Week', 'Days Since'])\n    df.head()\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Timestamp"),(0,r.kt)("th",{parentName:"tr",align:null},"Year"),(0,r.kt)("th",{parentName:"tr",align:null},"Month"),(0,r.kt)("th",{parentName:"tr",align:null},"Day"),(0,r.kt)("th",{parentName:"tr",align:null},"Day of the Week"),(0,r.kt)("th",{parentName:"tr",align:null},"Days Since"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"2015-02-24 11:35:52"),(0,r.kt)("td",{parentName:"tr",align:null},"2015"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"24"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"3048 days 12:24:08")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"2015-02-24 11:15:59"),(0,r.kt)("td",{parentName:"tr",align:null},"2015"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"24"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"3048 days 12:44:01")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"2015-02-24 11:15:48"),(0,r.kt)("td",{parentName:"tr",align:null},"2015"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"24"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"3048 days 12:44:12")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"2015-02-24 11:15:36"),(0,r.kt)("td",{parentName:"tr",align:null},"2015"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"24"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"3048 days 12:44:24")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"2015-02-24 11:14:45"),(0,r.kt)("td",{parentName:"tr",align:null},"2015"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"24"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"3048 days 12:45:15")))),(0,r.kt)("h3",{id:"case-statements"},"Case Statements"),(0,r.kt)("h4",{id:"case-when-then-else---one-hot-encoding"},"CASE WHEN THEN ELSE - One-Hot Encoding"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def get_penguins_binary_classification():\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = \"SELECT airline, airline_sentiment, CASE airline_sentiment WHEN 'negative' THEN 0 ELSE 1 END negative FROM tweets\"\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    results = get_penguins_binary_classification()\n    df = pd.DataFrame(results, columns=['Airline', 'Sentiment', 'Binary Sentiment'])\n    df.head()\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Airline"),(0,r.kt)("th",{parentName:"tr",align:null},"Sentiment"),(0,r.kt)("th",{parentName:"tr",align:null},"Binary Sentiment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"Virgin America"),(0,r.kt)("td",{parentName:"tr",align:null},"neutral"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Virgin America"),(0,r.kt)("td",{parentName:"tr",align:null},"positive"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Virgin America"),(0,r.kt)("td",{parentName:"tr",align:null},"neutral"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"Virgin America"),(0,r.kt)("td",{parentName:"tr",align:null},"negative"),(0,r.kt)("td",{parentName:"tr",align:null},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"Virgin America"),(0,r.kt)("td",{parentName:"tr",align:null},"negative"),(0,r.kt)("td",{parentName:"tr",align:null},"0")))),(0,r.kt)("h4",{id:"case-when-and-then-else---multi-classification"},"CASE WHEN AND THEN ELSE - Multi-Classification"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def get_penguins_multi_classification():\n    \"\"\" query data from the penguins table \"\"\"\n    results = []\n    conn = None\n    try:\n        params = config()\n        conn = psycopg2.connect(**params)\n        cursor = conn.cursor()\n        query = \"SELECT species, island, sex, CASE WHEN body_mass_g < 3000 THEN 'A' WHEN body_mass_g >= 3001 AND body_mass_g <=6000 THEN 'B' WHEN body_mass_g >= 6000 THEN 'C' ELSE 'something went wrong' END mass_class FROM penguins\"\n        cursor.execute(query)\n        penguins = cursor.fetchall()\n        \n        for penguin in penguins:\n            results.append(penguin)\n\n        cursor.close()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        if conn is not None:\n            return(results)\n            conn.close()\n\n\nif __name__ == '__main__':\n    results = get_penguins_multi_classification()\n    df = pd.DataFrame(results, columns=['Species', 'Island', 'Sex', 'Mass Class'])\n    df.head()\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Species"),(0,r.kt)("th",{parentName:"tr",align:null},"Island"),(0,r.kt)("th",{parentName:"tr",align:null},"Sex"),(0,r.kt)("th",{parentName:"tr",align:null},"Mass Class"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"MALE"),(0,r.kt)("td",{parentName:"tr",align:null},"B")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"FEMALE"),(0,r.kt)("td",{parentName:"tr",align:null},"B")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"FEMALE"),(0,r.kt)("td",{parentName:"tr",align:null},"B")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"FEMALE"),(0,r.kt)("td",{parentName:"tr",align:null},"B")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"Adelie"),(0,r.kt)("td",{parentName:"tr",align:null},"Torgersen"),(0,r.kt)("td",{parentName:"tr",align:null},"MALE"),(0,r.kt)("td",{parentName:"tr",align:null},"B")))))}m.isMDXComponent=!0},96282:(t,n,e)=>{e.d(n,{Z:()=>a});const a=e.p+"assets/images/SQL_Joins-5c1aba0ef39cd0c7c60aa840192c9663.png"},32103:(t,n,e)=>{e.d(n,{Z:()=>a});const a=e.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-5a33ed1aeac871d5b7a7594cc7d702c8.jpg"}}]);