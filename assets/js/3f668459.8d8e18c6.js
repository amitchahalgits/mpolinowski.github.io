"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[37880],{673440:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=r(785893),s=r(603905);const a={sidebar_position:9030,slug:"2020-06-21",title:"Salt Beacons Module",authors:"mpolinowski",tags:["LINUX","Salt"]},i=void 0,l={id:"DevOps/Salt/2020-06-21--salt-events-and-thirdparty-apps/index",title:"Salt Beacons Module",description:"Mon Kok, Hong Kong",source:"@site/docs/DevOps/Salt/2020-06-21--salt-events-and-thirdparty-apps/index.md",sourceDirName:"DevOps/Salt/2020-06-21--salt-events-and-thirdparty-apps",slug:"/DevOps/Salt/2020-06-21--salt-events-and-thirdparty-apps/2020-06-21",permalink:"/docs/DevOps/Salt/2020-06-21--salt-events-and-thirdparty-apps/2020-06-21",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Salt/2020-06-21--salt-events-and-thirdparty-apps/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Salt",permalink:"/docs/tags/salt"}],version:"current",sidebarPosition:9030,frontMatter:{sidebar_position:9030,slug:"2020-06-21",title:"Salt Beacons Module",authors:"mpolinowski",tags:["LINUX","Salt"]},sidebar:"tutorialSidebar",previous:{title:"NGINX Salt State",permalink:"/docs/DevOps/Salt/2020-06-22--salt-nginx-state/2020-06-22"},next:{title:"Salt Reactor and System Events",permalink:"/docs/DevOps/Salt/2020-06-20--salt-reactor-events/2020-06-20"}},o={},c=[{value:"inotify",id:"inotify",level:2},{value:"Create Watched File",id:"create-watched-file",level:3},{value:"Add Beacon Configs to Minions",id:"add-beacon-configs-to-minions",level:3},{value:"Add Beacon Configs to Pillars",id:"add-beacon-configs-to-pillars",level:3},{value:"Notify Reactor",id:"notify-reactor",level:3},{value:"Debugging Pyinotify",id:"debugging-pyinotify",level:2},{value:"Debugging the Reactor",id:"debugging-the-reactor",level:2}];function d(n){const e={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.ah)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{alt:"Mon Kok, Hong Kong",src:r(681447).Z+"",width:"1500",height:"736"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"#inotify",children:"inotify"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#create-watched-file",children:"Create Watched File"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#add-beacon-configs-to-minions",children:"Add Beacon Configs to Minions"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#add-beacon-configs-to-pillars",children:"Add Beacon Configs to Pillars"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#notify-reactor",children:"Notify Reactor"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#debugging-pyinotify",children:"Debugging Pyinotify"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#debugging-the-reactor",children:"Debugging the Reactor"})}),"\n"]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"Salt beacons are an event generation mechanism. Beacons leverage the Salt reactor system to make changes when beacon events occur."}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:"https://docs.saltstack.com/en/master/topics/beacons/index.html",children:"Beacons"})," let you use the Salt event system to monitor non-Salt processes. The beacon system allows the minion to hook into a variety of system processes and continually monitor these processes. When monitored activity occurs in a system process, an event is sent on the Salt event bus that can be used to trigger a reactor."]}),"\n",(0,t.jsx)(e.p,{children:"Salt beacons can currently monitor and send Salt events for many system activities, including:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"file system changes"}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"system load"}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"service status"}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"shell activity, such as user login"}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"network and disk usage"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["See ",(0,t.jsx)(e.a,{href:"https://docs.saltstack.com/en/master/ref/beacons/all/index.html#all-salt-beacons",children:"beacon modules"})," for a current list."]}),"\n",(0,t.jsxs)(e.p,{children:["Beacons are typically enabled by placing a beacons: top level block in ",(0,t.jsx)(e.code,{children:"/etc/salt/minion"})," or any file in ",(0,t.jsx)(e.code,{children:"/etc/salt/minion.d/"})," such as ",(0,t.jsx)(e.code,{children:"/etc/salt/minion.d/beacons.conf"})," or add it to pillars for that minion: They can be used with:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"beacons.list"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"beacons.enable"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"beacons.disable"})}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"inotify",children:"inotify"}),"\n",(0,t.jsx)(e.h3,{id:"create-watched-file",children:"Create Watched File"}),"\n",(0,t.jsx)(e.p,{children:"We have created an SLS file that creates an Apache welcome page for us. We can now use a Beacon to keep an eye on that file and trigger our Reactor in case the file was changed:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"/srv/salt/apache/welcome.sls"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yml",children:"# Adding a blank front page\r\n{% set name = salt.pillar.get('name') %}\r\n\r\ncheck_pillar_values:\r\n  test.check_pillar:\r\n    - present:\r\n      - name\r\n    - failhard: True\r\n\r\nwelcome_page:\r\n  file.managed:\r\n    - name: /var/www/html/index.html\r\n    - contents: |\r\n        <!doctype html>\r\n        <body>\r\n            <h1>{{ name }}.</h1>\r\n        </body>\n"})}),"\n",(0,t.jsx)(e.h3,{id:"add-beacon-configs-to-minions",children:"Add Beacon Configs to Minions"}),"\n",(0,t.jsxs)(e.p,{children:["On the Salt minion, add the following configuration to ",(0,t.jsx)(e.code,{children:"/etc/salt/minion.d/beacons.conf"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yml",children:"beacons:\r\n  inotify:\r\n    - files:\r\n        /var/www/html/index.html:\r\n          mask:\r\n            - modify     \r\n    - disable_during_state_run: True\n"})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["Make sure that iNotify is installed on your minions: ",(0,t.jsx)(e.code,{children:"salt debianMinions pkg.install python-pyinotify"})," / ",(0,t.jsx)(e.code,{children:"salt redhatMinions pkg.install python-inotify"}),"! You can debug Pillars on your Minion with ",(0,t.jsx)(e.code,{children:"salt-call -l debug saltutil.pillar_refresh"})," and ",(0,t.jsx)(e.code,{children:"salt-call -l debug pillar.items"})]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsxs)(e.strong,{children:["This did not work for me - see how to install ",(0,t.jsx)(e.code,{children:"pyinotify"})," on Ubuntu 20.04 and debug ",(0,t.jsx)(e.a,{href:"#debugging-pyinotify",children:"it below"})]})}),"\n",(0,t.jsx)(e.p,{children:"Save the configuration file and restart the minion service. The beacon is now set up to notify salt upon modifications made to the file."}),"\n",(0,t.jsx)(e.p,{children:"The Beacon can now be enabled by:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yml",children:"salt ubuntuAsus beacons.enable\r\n\r\nubuntuAsus:\r\n    ----------\r\n    comment:\r\n        Enabled beacons on minion.\r\n    result:\r\n        True\r\n\r\n\r\nsalt ubuntuAsus beacons.list\r\n\r\nubuntuAsus:\r\n    beacons:\r\n      enabled: true\r\n      inotify:\r\n      - files:\r\n          /var/www/html/index.html:\r\n            mask:\r\n            - modify\r\n      - disable_during_state_run: true\n"})}),"\n",(0,t.jsxs)(e.p,{children:["You can test the beacon by running ",(0,t.jsx)(e.code,{children:"nano /var/www/html/index.html"})," on your Minion and changing the file while having ",(0,t.jsx)(e.code,{children:"salt-run state.event pretty=true"})," open on your master:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'salt/beacon/ubuntuAsus/inotify//var/www/html/index.html {\r\n    "_stamp": "2020-08-08T18:00:42.793635",\r\n    "change": "IN_MODIFY",\r\n    "id": "ubuntuAsus",\r\n    "path": "/var/www/html/index.html"\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"add-beacon-configs-to-pillars",children:"Add Beacon Configs to Pillars"}),"\n",(0,t.jsxs)(e.p,{children:["Alternatively, you can add the monitor task to ",(0,t.jsx)(e.code,{children:"nano /srv/pillar/monitor_welcome.sls"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yml",children:"beacons:\r\n  inotify:\r\n    - files:\r\n        /var/www/html/index.html:\r\n          mask:\r\n            - modify     \r\n    - disable_during_state_run: True\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Now share the Pillar function with affected Minions with the Top file ",(0,t.jsx)(e.code,{children:"nano /srv/pillar/top.sls"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yml",children:"base:\r\n  '*':\r\n    - name\r\n    - mine\r\n  ubuntuAsus:\r\n    - monitor_welcome\n"})}),"\n",(0,t.jsx)(e.p,{children:"And push the update to your Minions with:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yml",children:"salt ubuntuAsus saltutil.refresh_pillar\r\n\r\nsalt ubuntuAsus pillar.get beacons\r\n\r\nubuntuAsus:\r\n    ----------\r\n    inotify:\r\n        ----------\r\n        /var/www/html/index.html:\r\n            ----------\r\n            mask:\r\n                - close_write\r\n        disable_during_state_run:\r\n            True\n"})}),"\n",(0,t.jsx)(e.p,{children:"The Beacon can now be enabled by:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yml",children:"salt ubuntuAsus beacons.enable\r\n\r\nsalt ubuntuAsus beacons.list\n"})}),"\n",(0,t.jsxs)(e.p,{children:["You can test the beacon by running ",(0,t.jsx)(e.code,{children:"nano /var/www/html/index.html"})," on your Minion and changing the file while having ",(0,t.jsx)(e.code,{children:"salt-run state.event pretty=true"})," open on your master:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'salt/beacon/ubuntuAsus/inotify//var/www/html/index.html {\r\n    "_stamp": "2020-08-08T18:00:42.793635",\r\n    "change": "IN_MODIFY",\r\n    "id": "ubuntuAsus",\r\n    "path": "/var/www/html/index.html"\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"notify-reactor",children:"Notify Reactor"}),"\n",(0,t.jsx)(e.p,{children:"Now we need to react to the change notification by changing the file back to the default state:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"nano /etc/salt/master.d/local.conf\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Add the ",(0,t.jsx)(e.code,{children:"salt/beacon/*/inotify//var/www/html/index.html"})," event to Reactor and have it start a script that fixes the issue:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yml",children:"reactor:\r\n  - 'instar/custom/*':\r\n    - /srv/reactor/highstate.sls\r\n  - 'instar/deploy/testapp':\r\n    - /srv/reactor/deploy_testapp.sls\r\n  - 'salt/beacon/*/inotify//var/www/html/index.html':\r\n    - /srv/reactor/fix_welcome.sls\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Restart the master ",(0,t.jsx)(e.code,{children:"systemctl restart salt-master"})," and create the ",(0,t.jsx)(e.code,{children:"nano /srv/reactor/fix_welcome.sls"})," script:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yml",children:"fix_welcome:\r\n  cmd.state.sls:\r\n    - tgt: {{ data.id }}\r\n    - arg:\r\n      - apache.welcome\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Now go and change the ",(0,t.jsx)(e.code,{children:"/var/www/html/index.html"})," file again. Reactor should automatically fire and change it back to the default state:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'salt-run state.event pretty=true                                                                                \r\nsalt/auth       {\r\n    "_stamp": "2020-08-08T18:23:40.820210",\r\n    "act": "accept",\r\n    "id": "ubuntuAsus",\r\n    "pub": "-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w=AQAB\\n-----END PUBLIC KEY-----",\r\n    "result": true\r\n}\r\nsalt/beacon/ubuntuAsus/inotify//var/www/html/index.html {\r\n    "_stamp": "2020-08-08T18:23:40.832944",\r\n    "change": "IN_MODIFY",\r\n    "id": "ubuntuAsus",\r\n    "path": "/var/www/html/index.html"\r\n}\r\n20200808182343071200    {\r\n    "_stamp": "2020-08-08T18:23:43.072071",\r\n    "minions": [\r\n        "ubuntuAsus"\r\n    ]\r\n}\r\nsalt/job/20200808182343071200/new       {\r\n    "_stamp": "2020-08-08T18:23:43.072389",\r\n    "arg": [\r\n        "apache.welcome"\r\n    ],\r\n    "fun": "state.sls",\r\n    "jid": "20200808182343071200",\r\n    "minions": [\r\n        "ubuntuAsus"\r\n    ],\r\n    "missing": [],\r\n    "tgt": "ubuntuAsus",\r\n    "tgt_type": "glob",\r\n    "user": "root"\r\n}\r\nsalt/auth       {\r\n    "_stamp": "2020-08-08T18:23:43.090909",\r\n    "act": "accept",\r\n    "id": "ubuntuMaster",\r\n    "pub": "-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w=AQAB\\n-----END PUBLIC KEY-----",\r\n    "result": true\r\n}\r\nsalt/auth       {\r\n    "_stamp": "2020-08-08T18:23:43.095612",\r\n    "act": "accept",\r\n    "id": "ubuntuAsus",\r\n    "pub": "-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w=AQAB\\n-----END PUBLIC KEY-----",\r\n    "result": true\r\n}\r\nminion/refresh/ubuntuAsus       {\r\n    "Minion data cache refresh": "ubuntuAsus",\r\n    "_stamp": "2020-08-08T18:23:43.217756"\r\n}\r\nsalt/job/20200808182343071200/ret/ubuntuAsus    {\r\n    "_stamp": "2020-08-08T18:23:43.466837",\r\n    "cmd": "_return",\r\n    "fun": "state.sls",\r\n    "fun_args": [\r\n        "apache.welcome"\r\n    ],\r\n    "id": "ubuntuAsus",\r\n    "jid": "20200808182343071200",\r\n    "out": "highstate",\r\n    "retcode": 0,\r\n    "return": {\r\n        "file_|-welcome_page_|-/var/www/html/index.html_|-managed": {\r\n            "__id__": "welcome_page",\r\n            "__run_num__": 1,\r\n            "__sls__": "apache.welcome",\r\n            "changes": {\r\n                "diff": "--- \\n+++ \\n@@ -1,4 +1,4 @@\\n <!doctype html>\\n <body>\\n-    <h1>Centos Rocks!</h1>\\n+    <h1>Ubuntu Rocks.</h1>\\n </body>\\n"\r\n            },\r\n            "comment": "File /var/www/html/index.html updated",\r\n            "duration": 15.031,\r\n            "name": "/var/www/html/index.html",\r\n            "result": true,\r\n            "start_time": "18:23:43.433832"\r\n        },\r\n        "test_|-check_pillar_values_|-check_pillar_values_|-check_pillar": {\r\n            "__id__": "check_pillar_values",\r\n            "__run_num__": 0,\r\n            "__sls__": "apache.welcome",\r\n            "changes": {},\r\n            "comment": "",\r\n            "duration": 1.504,\r\n            "name": "check_pillar_values",\r\n            "result": true,\r\n            "start_time": "18:23:43.429323"\r\n        }\r\n    },\r\n    "success": true\r\n}\r\nsalt/beacon/ubuntuAsus/inotify//var/www/html/index.html {\r\n    "_stamp": "2020-08-08T18:23:43.797938",\r\n    "change": "IN_IGNORED",\r\n    "id": "ubuntuAsus",\r\n    "path": "/var/www/html/index.html"\r\n}\r\n20200808182343808522    {\r\n    "_stamp": "2020-08-08T18:23:43.808797",\r\n    "minions": [\r\n        "ubuntuAsus"\r\n    ]\r\n}\r\nsalt/job/20200808182343808522/new       {\r\n    "_stamp": "2020-08-08T18:23:43.809341",\r\n    "arg": [\r\n        "apache.welcome"\r\n    ],\r\n    "fun": "state.sls",\r\n    "jid": "20200808182343808522",\r\n    "minions": [\r\n        "ubuntuAsus"\r\n    ],\r\n    "missing": [],\r\n    "tgt": "ubuntuAsus",\r\n    "tgt_type": "glob",\r\n    "user": "root"\r\n}\r\nminion/refresh/ubuntuAsus       {\r\n    "Minion data cache refresh": "ubuntuAsus",\r\n    "_stamp": "2020-08-08T18:23:43.933767"\r\n}\r\nsalt/job/20200808182343808522/ret/ubuntuAsus    {\r\n    "_stamp": "2020-08-08T18:23:44.107148",\r\n    "cmd": "_return",\r\n    "fun": "state.sls",\r\n    "fun_args": [\r\n        "apache.welcome"\r\n    ],\r\n    "id": "ubuntuAsus",\r\n    "jid": "20200808182343808522",\r\n    "out": "highstate",\r\n    "retcode": 0,\r\n    "return": {\r\n        "file_|-welcome_page_|-/var/www/html/index.html_|-managed": {\r\n            "__id__": "welcome_page",\r\n            "__run_num__": 1,\r\n            "__sls__": "apache.welcome",\r\n            "changes": {},\r\n            "comment": "File /var/www/html/index.html is in the correct state",\r\n            "duration": 12.866,\r\n            "name": "/var/www/html/index.html",\r\n            "result": true,\r\n            "start_time": "18:23:44.081579"\r\n        },\r\n        "test_|-check_pillar_values_|-check_pillar_values_|-check_pillar": {\r\n            "__id__": "check_pillar_values",\r\n            "__run_num__": 0,\r\n            "__sls__": "apache.welcome",\r\n            "changes": {},\r\n            "comment": "",\r\n            "duration": 1.119,\r\n            "name": "check_pillar_values",\r\n            "result": true,\r\n            "start_time": "18:23:44.078418"\r\n        }\r\n    },\r\n    "success": true\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"debugging-pyinotify",children:"Debugging Pyinotify"}),"\n",(0,t.jsx)(e.p,{children:"File system monitoring through inotify can be interfaced through Python using pyinotify. This guide will demonstrate how to use a Python script to monitor a directory then explore practical uses by incorporating async modules or running additional threads."}),"\n",(0,t.jsxs)(e.p,{children:["Start by installing ",(0,t.jsx)(e.code,{children:"pip3"})," and use it to install ",(0,t.jsx)(e.code,{children:"pyinotify"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"sudo apt-get install python3-pip\r\n\r\npip3 install pyinotify\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Take ",(0,t.jsx)(e.a,{href:"https://www.linode.com/docs/development/monitor-filesystem-events-with-pyinotify/",children:"this script"})," and copy it to your home directory:"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"notify_me.py"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-py",children:'import os\r\nimport pyinotify\r\n\r\n\r\nclass EventProcessor(pyinotify.ProcessEvent):\r\n    _methods = ["IN_CREATE",\r\n                "IN_OPEN",\r\n                "IN_ACCESS",\r\n                "IN_ATTRIB",\r\n                "IN_CLOSE_NOWRITE",\r\n                "IN_CLOSE_WRITE",\r\n                "IN_DELETE",\r\n                "IN_DELETE_SELF",\r\n                "IN_IGNORED",\r\n                "IN_MODIFY",\r\n                "IN_MOVE_SELF",\r\n                "IN_MOVED_FROM",\r\n                "IN_MOVED_TO",\r\n                "IN_Q_OVERFLOW",\r\n                "IN_UNMOUNT",\r\n                "default"]\r\n\r\ndef process_generator(cls, method):\r\n    def _method_name(self, event):\r\n        print("Method name: process_{}()\\n"\r\n               "Path name: {}\\n"\r\n               "Event Name: {}\\n".format(method, event.pathname, event.maskname))\r\n    _method_name.__name__ = "process_{}".format(method)\r\n    setattr(cls, _method_name.__name__, _method_name)\r\n\r\nfor method in EventProcessor._methods:\r\n    process_generator(EventProcessor, method)\r\n\r\nwatch_manager = pyinotify.WatchManager()\r\nevent_notifier = pyinotify.Notifier(watch_manager, EventProcessor())\r\n\r\nwatch_this = os.path.abspath("notification_dir")\r\nwatch_manager.add_watch(watch_this, pyinotify.ALL_EVENTS)\r\nevent_notifier.loop()\n'})}),"\n",(0,t.jsxs)(e.p,{children:["Now Create a folder ",(0,t.jsx)(e.code,{children:"notification_dir"})," inside your home directory and run the Python script:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"python3 notify_me.py\n"})}),"\n",(0,t.jsx)(e.p,{children:"Open another Terminal and create a file inside the folder:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"touch ~/notification_dir/test\n"})}),"\n",(0,t.jsx)(e.p,{children:"Switch back to your watch task and see if it recognized the change:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"Method name: process_IN_CREATE()\r\nPath name: /root/notification_dir/test\r\nEvent Name: IN_CREATE\r\n\r\nMethod name: process_IN_OPEN()\r\nPath name: /root/notification_dir/test\r\nEvent Name: IN_OPEN\r\n\r\nMethod name: process_IN_ATTRIB()\r\nPath name: /root/notification_dir/test\r\nEvent Name: IN_ATTRIB\r\n\r\nMethod name: process_IN_CLOSE_WRITE()\r\nPath name: /root/notification_dir/test\r\nEvent Name: IN_CLOSE_WRITE\n"})}),"\n",(0,t.jsx)(e.p,{children:"This worked! Pyinotify is now ready to go!"}),"\n",(0,t.jsx)(e.h2,{id:"debugging-the-reactor",children:"Debugging the Reactor"}),"\n",(0,t.jsx)(e.p,{children:"Run the Master in Debug mode and re-run everything to see what is happening:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"systemctl stop salt-master\r\nsalt-master -l debug\n"})})]})}function h(n={}){const{wrapper:e}={...(0,s.ah)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},603905:(n,e,r)=>{r.d(e,{ah:()=>c});var t=r(667294);function s(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function a(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function i(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){s(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function l(n,e){if(null==n)return{};var r,t,s=function(n,e){if(null==n)return{};var r,t,s={},a=Object.keys(n);for(t=0;t<a.length;t++)r=a[t],e.indexOf(r)>=0||(s[r]=n[r]);return s}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(t=0;t<a.length;t++)r=a[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(s[r]=n[r])}return s}var o=t.createContext({}),c=function(n){var e=t.useContext(o),r=e;return n&&(r="function"==typeof n?n(e):i(i({},e),n)),r},d={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},h=t.forwardRef((function(n,e){var r=n.components,s=n.mdxType,a=n.originalType,o=n.parentName,h=l(n,["components","mdxType","originalType","parentName"]),u=c(r),m=s,p=u["".concat(o,".").concat(m)]||u[m]||d[m]||a;return r?t.createElement(p,i(i({ref:e},h),{},{components:r})):t.createElement(p,i({ref:e},h))}));h.displayName="MDXCreateElement"},681447:(n,e,r)=>{r.d(e,{Z:()=>t});const t=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-b4cf9c34388c6602b955c33cae6b6b66.jpg"}}]);