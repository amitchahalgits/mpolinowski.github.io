"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[37776],{620168:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var o=r(785893),t=r(603905);const i={sidebar_position:8030,slug:"2021-08-07",title:"Nomad Job Configuration",authors:"mpolinowski",tags:["Nomad","Linux"]},a=void 0,s={id:"DevOps/Hashicorp/2021-08-07--hashicorp-nomad-job-configuration/index",title:"Nomad Job Configuration",description:"Central, Hongkong",source:"@site/docs/DevOps/Hashicorp/2021-08-07--hashicorp-nomad-job-configuration/index.md",sourceDirName:"DevOps/Hashicorp/2021-08-07--hashicorp-nomad-job-configuration",slug:"/DevOps/Hashicorp/2021-08-07--hashicorp-nomad-job-configuration/2021-08-07",permalink:"/docs/DevOps/Hashicorp/2021-08-07--hashicorp-nomad-job-configuration/2021-08-07",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2021-08-07--hashicorp-nomad-job-configuration/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Linux",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:8030,frontMatter:{sidebar_position:8030,slug:"2021-08-07",title:"Nomad Job Configuration",authors:"mpolinowski",tags:["Nomad","Linux"]},sidebar:"tutorialSidebar",previous:{title:"Nomad Access Control Lists",permalink:"/docs/DevOps/Hashicorp/2021-08-08--hashicorp-nomad-access-control-lists/2021-08-08"},next:{title:"Hashicorp Consul Refresher - Loadbalancing with Traefik",permalink:"/docs/DevOps/Hashicorp/2021-08-06--hashicorp-consul-traefik-loadbalancing/2021-08-06"}},c={},l=[{value:"How to add Configuration to your Application",id:"how-to-add-configuration-to-your-application",level:2},{value:"Job Arguments",id:"job-arguments",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Configuration Artifacts",id:"configuration-artifacts",level:3},{value:"Templates",id:"templates",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.ah)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Central, Hongkong",src:r(814054).Z+"",width:"1500",height:"515"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#how-to-add-configuration-to-your-application",children:"How to add Configuration to your Application"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#job-arguments",children:"Job Arguments"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#environment-variables",children:"Environment Variables"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#configuration-artifacts",children:"Configuration Artifacts"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#templates",children:"Templates"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"how-to-add-configuration-to-your-application",children:"How to add Configuration to your Application"}),"\n",(0,o.jsx)(n.p,{children:"To configure a task you can:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Add ",(0,o.jsx)(n.strong,{children:"Commandline Arguments"})," that are passed to your application when you run it."]}),"\n",(0,o.jsxs)(n.li,{children:["Add ",(0,o.jsx)(n.strong,{children:"Environment Variables"})," that are accessible to Nomad to be passed on."]}),"\n",(0,o.jsxs)(n.li,{children:["Use ",(0,o.jsx)(n.strong,{children:"Artifacts"})," to download and unzip required files"]}),"\n",(0,o.jsxs)(n.li,{children:["Use ",(0,o.jsx)(n.strong,{children:"Templates"})," to generate variables"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"job-arguments",children:"Job Arguments"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"http-echo"})," application from is started - this time without Docker - using the ",(0,o.jsx)(n.strong,{children:"Exec Driver"})," with the ",(0,o.jsx)(n.code,{children:"/bin/http-echo"})," command. The application is then configured using ",(0,o.jsx)(n.strong,{children:"Arguments"})," to run on port ",(0,o.jsx)(n.code,{children:"5678"})," and return a ",(0,o.jsx)(n.code,{children:"Hello World"})," when receiving an HTTP GET request:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'group "example" {\r\n  task "server" {\r\n    driver = "exec"\r\n\r\n    config {\r\n      command = "/bin/http-echo"\r\n\r\n      args = [\r\n        "-listen",\r\n        ":5678",\r\n        "-text",\r\n        "Hello World",\r\n      ]\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://www.nomadproject.io/docs/job-specification/env",children:"Environment Variables"})," can be passed on to our application inside the task block of our Nomad job file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'job "frontend" {\r\n  group "example" {\r\n    task "server" {\r\n      env {\r\n        DB_HOST = "my-db-host.com"\r\n        DB_USER = "db_user"\r\n        DB_PASS = "dbpassword"\r\n      }\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"configuration-artifacts",children:"Configuration Artifacts"}),"\n",(0,o.jsxs)(n.p,{children:["Download a configuration file from a ",(0,o.jsx)(n.strong,{children:"Git Repository"})," using the ",(0,o.jsx)(n.a,{href:"https://www.nomadproject.io/docs/job-specification/artifact",children:"Artifacts Stanza"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'artifact {\r\n  # The git:: prefix forces go-getter\'s protocol detection to use the git ssh\r\n  # protocol. It can also automatically detect the protocol from the domain of\r\n  # some git hosting providers (such as GitHub) without the prefix.\r\n  source      = "git::git@bitbucket.org:example/nomad-examples"\r\n  destination = "local/repo"\r\n  options {\r\n    # Make sure that the Nomad user\'s known hosts file is populated:\r\n    # ssh-keyscan github.com | sudo tee -a /root/.ssh/known_hosts\r\n    # https://github.com/hashicorp/go-getter/issues/55\r\n    sshkey = "${base64encode(file(pathexpand("~/.ssh/id_rsa")))}"\r\n  }\r\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["To download from a private repo, sshkey needs to be set. The key must be base64-encoded string. On Linux, you can run ",(0,o.jsx)(n.code,{children:"base64 -w0 <file>"})," to encode the file."]}),"\n",(0,o.jsx)(n.h3,{id:"templates",children:"Templates"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"https://www.nomadproject.io/docs/job-specification/template",children:"template block"})," instantiates an instance of a template renderer. This creates a convenient way to ship configuration files that are populated from environment variables, Consul data, Vault secrets, or just general configurations within a Nomad task:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'job "docs" {\r\n  group "example" {\r\n    task "server" {\r\n      artifact {\r\n        source      = "https://example.com/redis.conf.tpl"\r\n        destination = "local/redis.conf.tpl"\r\n      }\r\n      template {\r\n        source        = "local/redis.conf.tpl"\r\n        destination   = "local/redis.conf"\r\n        change_mode   = "signal"\r\n        change_signal = "SIGINT"\r\n      }\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"You can also utilize inline templates and turn them into environment variables like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'template {\r\n  data = <<EOH\r\n  ---\r\n    bind_port:   {{ env "NOMAD_PORT_db" }}\r\n    scratch_dir: {{ env "NOMAD_TASK_DIR" }}\r\n    node_id:     {{ env "node.unique.id" }}\r\n    service_key: {{ key "service/my-key" }}\r\n  EOH\r\n\r\n  destination = "local/file.env"\r\n  env = true\r\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.ah)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>l});var o=r(667294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,o,t=function(e,n){if(null==e)return{};var r,o,t={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var c=o.createContext({}),l=function(e){var n=o.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var r=e.components,t=e.mdxType,i=e.originalType,c=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),p=l(r),u=t,m=p["".concat(c,".").concat(u)]||p[u]||d[u]||i;return r?o.createElement(m,a(a({ref:n},h),{},{components:r})):o.createElement(m,a({ref:n},h))}));h.displayName="MDXCreateElement"},814054:(e,n,r)=>{r.d(n,{Z:()=>o});const o=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-dd238a3002757e76cd23d4a48373f52a.jpg"}}]);