"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[65773],{519739:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var n=a(474848),t=a(28453);const i={sidebar_position:9010,slug:"2021-11-07",title:"OpenCV Crash Course Part II",authors:"mpolinowski",tags:["Machine Learning","Python","OpenCV"]},c=void 0,s={id:"IoT-and-Machine-Learning/ML/2021-11-07--opencv-crash-course-part-ii/index",title:"OpenCV Crash Course Part II",description:"Shenzhen, China",source:"@site/docs/IoT-and-Machine-Learning/ML/2021-11-07--opencv-crash-course-part-ii/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2021-11-07--opencv-crash-course-part-ii",slug:"/IoT-and-Machine-Learning/ML/2021-11-07--opencv-crash-course-part-ii/2021-11-07",permalink:"/docs/IoT-and-Machine-Learning/ML/2021-11-07--opencv-crash-course-part-ii/2021-11-07",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2021-11-07--opencv-crash-course-part-ii/index.md",tags:[{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Python",permalink:"/docs/tags/python"},{label:"OpenCV",permalink:"/docs/tags/open-cv"}],version:"current",sidebarPosition:9010,frontMatter:{sidebar_position:9010,slug:"2021-11-07",title:"OpenCV Crash Course Part II",authors:"mpolinowski",tags:["Machine Learning","Python","OpenCV"]},sidebar:"tutorialSidebar",previous:{title:"activate_webcam",permalink:"/docs/IoT-and-Machine-Learning/ML/2021-11-08--tensorflow-crash-course-part-i/activate_webcam"},next:{title:"OpenCV Crash Course Part I",permalink:"/docs/IoT-and-Machine-Learning/ML/2021-11-06--opencv-crash-course-part-i/2021-11-06"}},o={},d=[{value:"Perspective Transformation",id:"perspective-transformation",level:2},{value:"Color Detection",id:"color-detection",level:2},{value:"Contours and Shape Detection",id:"contours-and-shape-detection",level:2},{value:"Face Detection",id:"face-detection",level:2},{value:"License Plate Detection",id:"license-plate-detection",level:2}];function l(e){const r={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{alt:"Shenzhen, China",src:a(385465).A+"",width:"1500",height:"667"})}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.a,{href:"https://www.computervision.zone",children:"Murtaza's Workshop - Robotics and AI"}),": We are going learn everything required to get started with OpenCV in Python. We will be using Python since it is one of the most popular programming languages. And it  has opened numerous job opportunities in various sectors. We will start from the  installation process right up to creating exciting projects such as detecting colors , shapes humans and even vehicle number plates. So If you are a beginner  don't worry this course is for you. We will skip all the boring theory stuff and focus on the practical implementation. So you can get the computer vision skill set you have always wanted in your CV. By the end of the course you will become familiar with the core principle of opencv and apply different techniques to solve real world problems using computer vision."]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"/docs/IoT-and-Machine-Learning/ML/2021-11-06--opencv-crash-course-part-i/2021-11-06",children:"OpenCV Crash Course Part I"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"/docs/IoT-and-Machine-Learning/ML/2021-11-07--opencv-crash-course-part-ii/2021-11-07",children:"OpenCV Crash Course Part II"})}),"\n"]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"#perspective-transformation",children:"Perspective Transformation"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"#color-detection",children:"Color Detection"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"#contours-and-shape-detection",children:"Contours and Shape Detection"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"#face-detection",children:"Face Detection"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"#license-plate-detection",children:"License Plate Detection"})}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"perspective-transformation",children:"Perspective Transformation"}),"\n",(0,n.jsx)(r.p,{children:"Get the corner points of the object you need to de-warp by hovering over them in MS Paint or Gimp:"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{alt:"OpenCV Python",src:a(613557).A+"",width:"1331",height:"829"})}),"\n",(0,n.jsx)(r.p,{children:"Write down the coordinates for the upper-left, upper-right, lower-left and lower-right point in that order."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"img = cv2.imread('resources/sign.jpg')\r\n\r\nwidth, height = 250, 350\r\n# upper-left, upper-right, lower-left and lower-right point\r\npts1 = np.float32([[920, 227], [1216, 244], [873, 780], [1182, 809]])\r\npts2 = np.float32([[0, 0], [width, 0], [0, height], [width, height]])\r\n\r\nmatrix = cv2.getPerspectiveTransform(pts1, pts2)\r\n\r\nimgOutput = cv2.warpPerspective(img, matrix, (width,height))\r\n\r\n\r\ncv2.imshow('Image', imgOutput)\r\ncv2.waitKey(10000)\n"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{alt:"OpenCV Python",src:a(527806).A+"",width:"369",height:"424"})}),"\n",(0,n.jsx)(r.h2,{id:"color-detection",children:"Color Detection"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"from time import time, sleep\r\npath = 'resources/songhua-river.jpg'\r\n# Create a hue slider that helps us\r\n# find the correct colour to select\r\ndef empty(a):\r\n    pass\r\ncv2.namedWindow('TrackBars') # Create the Window\r\ncv2.resizeWindow('TrackBars', 640, 240) # Give it a size\r\ncv2.createTrackbar('Hue Min', 'TrackBars', 0, 179, empty) # Add a slider for min Hue 0-179\r\ncv2.createTrackbar('Hue Max', 'TrackBars', 179, 179, empty) # Add a slider for max Hue 179\r\ncv2.createTrackbar('Sat Min', 'TrackBars', 0, 255, empty) # Add a slider for min Saturation 0-255\r\ncv2.createTrackbar('Sat Max', 'TrackBars', 255, 255, empty) # Add a slider for max Saturation 255\r\ncv2.createTrackbar('Val Min', 'TrackBars', 0, 255, empty) # Add a slider for min Value 0-255\r\ncv2.createTrackbar('Val Max', 'TrackBars', 255, 255, empty) # Add a slider for max Value 255\r\n\r\nwhile True: # Run loop to continuously update from trackbars\r\n    img = cv2.imread(path)\r\n    imgHSV = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\r\n    h_min = cv2.getTrackbarPos('Hue Min', 'TrackBars')\r\n    h_max = cv2.getTrackbarPos('Hue Max', 'TrackBars')\r\n    s_min = cv2.getTrackbarPos('Sat Min', 'TrackBars')\r\n    s_max = cv2.getTrackbarPos('Sat Max', 'TrackBars')\r\n    v_min = cv2.getTrackbarPos('Val Min', 'TrackBars')\r\n    v_max = cv2.getTrackbarPos('Val Max', 'TrackBars')\r\n\r\n    print(h_min, h_max, s_min, s_max, v_min, v_max)\r\n\r\n    lower = np.array([h_min, s_min, v_min])\r\n    upper = np.array([h_max, s_max, v_max])\r\n    mask = cv2.inRange(imgHSV, lower, upper)\r\n\r\n    cv2.imshow('Original', img)\r\n    cv2.imshow('HSV', imgHSV)\r\n    cv2.imshow('Mask', mask)\r\n    cv2.waitKey(1000)\n"})}),"\n",(0,n.jsx)(r.p,{children:"Adjust the sliders until only the colour you wanted is selected (white) and the rest of the image is masked:"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{alt:"OpenCV Python",src:a(399143).A+"",width:"744",height:"876"})}),"\n",(0,n.jsxs)(r.p,{children:["Here the optimal settings are ",(0,n.jsx)(r.code,{children:"0 179 107 255 180 255"})," which we can use as default values for out TrackBars. Now all we have to do is to apply the layer mask to our image:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"from time import time, sleep\r\npath = 'resources/songhua-river.jpg'\r\n# Create a hue slider that helps us\r\n# find the correct colour to select\r\ndef empty(a):\r\n    pass\r\ncv2.namedWindow('TrackBars') # Create the Window\r\ncv2.resizeWindow('TrackBars', 640, 240) # Give it a size\r\ncv2.createTrackbar('Hue Min', 'TrackBars', 0, 179, empty) # Add a slider for min Hue 0-179\r\ncv2.createTrackbar('Hue Max', 'TrackBars', 179, 179, empty) # Add a slider for max Hue 179\r\ncv2.createTrackbar('Sat Min', 'TrackBars', 107, 255, empty) # Add a slider for min Saturation 0-255\r\ncv2.createTrackbar('Sat Max', 'TrackBars', 255, 255, empty) # Add a slider for max Saturation 255\r\ncv2.createTrackbar('Val Min', 'TrackBars', 180, 255, empty) # Add a slider for min Value 0-255\r\ncv2.createTrackbar('Val Max', 'TrackBars', 255, 255, empty) # Add a slider for max Value 255\r\n\r\nwhile True: # Run loop to continuously update from trackbars\r\n    img = cv2.imread(path)\r\n    imgHSV = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\r\n    h_min = cv2.getTrackbarPos('Hue Min', 'TrackBars')\r\n    h_max = cv2.getTrackbarPos('Hue Max', 'TrackBars')\r\n    s_min = cv2.getTrackbarPos('Sat Min', 'TrackBars')\r\n    s_max = cv2.getTrackbarPos('Sat Max', 'TrackBars')\r\n    v_min = cv2.getTrackbarPos('Val Min', 'TrackBars')\r\n    v_max = cv2.getTrackbarPos('Val Max', 'TrackBars')\r\n\r\n    print(h_min, h_max, s_min, s_max, v_min, v_max)\r\n\r\n    lower = np.array([h_min, s_min, v_min])\r\n    upper = np.array([h_max, s_max, v_max])\r\n    mask = cv2.inRange(imgHSV, lower, upper) # Create a selection mask based on thresholds\r\n    imgSelection = cv2.bitwise_and(img, img, mask=mask) # Apply layer mask to image\r\n\r\n    imgHor = np.hstack((img, imgSelection))\r\n\r\n    cv2.imshow('Original & Selection', imgHor)\r\n    cv2.imshow('Mask', mask)\r\n    cv2.waitKey(1000)\n"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{alt:"OpenCV Python",src:a(123976).A+"",width:"1499",height:"579"})}),"\n",(0,n.jsx)(r.h2,{id:"contours-and-shape-detection",children:"Contours and Shape Detection"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'def getContours(img): # Retrieve contours from detected shapes\r\n    contours, hierachy = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)\r\n    for cnt in contours:\r\n        area = cv2.contourArea(cnt) # Get areas for all contours\r\n        # print(area) # Print calculated areas\r\n        if area > 400: # Set threshold to exclude noise\r\n            cv2.drawContours(imgBlack, cnt, -1, (255, 0, 0), 1)  # Draw those areas onto the image\r\n            peri = cv2.arcLength(cnt, True) # Get contour perimeter\r\n            approx = cv2.approxPolyDP(cnt, 0.02*peri, True) # Approximate polygonal curve\r\n            # print(len(approx)) # Print the number corner points of each contour\r\n            objCorners = len(approx)\r\n            x, y, w, h = cv2.boundingRect(approx) # Get coordinates from curve\r\n\r\n            if objCorners == 3:\r\n                objectType = "Triangle" # Define object based on corner count\r\n\r\n            elif objCorners == 4:\r\n                aspectRatio = w/float(h) # Check if w/h=1 => square\r\n                if 0.95 < aspectRatio < 1.05: objectType = "Square"\r\n                else: objectType = "Rectangle"\r\n\r\n            elif objCorners == 5:\r\n                objectType = "Pentagon"\r\n\r\n            elif objCorners == 6:\r\n                objectType = "Hexagon"\r\n\r\n            elif objCorners == 7:\r\n                objectType = "Heptagon"\r\n\r\n            elif objCorners > 7:\r\n                objectType = "Circle?"\r\n\r\n            else: objectType = "Unknown"\r\n\r\n            cv2.rectangle(imgBlack, (x, y), (x+w, y+h), (0, 0, 255, 1)) # Print bounding box\r\n            cv2.putText(imgBlack, objectType,\r\n                        (x+(w//2)-10, y+(h//2)-10), # Put objectType in Center\r\n                        cv2.QT_FONT_NORMAL, 0.5, (255, 255, 0), 1)\r\n\r\n# Contours and Shape detection\r\npath = \'resources/objects_dark.png\'\r\n# path = \'resources/objects_light.png\'\r\nimg = cv2.imread(path)\r\nimgBlack = np.zeros_like(img)\r\n# imgWhite = np.ones_like(img)\r\n\r\nimgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\r\nimgBlur = cv2.GaussianBlur(imgGray, (7, 7), 1)\r\nimgEdge = cv2.Canny(imgBlur, 50, 50)\r\n\r\ngetContours(imgEdge)\r\n\r\ncv2.imshow("Shape", imgBlack)\r\ncv2.imshow("Original", img)\r\ncv2.waitKey(15000)\n'})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{alt:"OpenCV Python",src:a(363921).A+"",width:"736",height:"395"})}),"\n",(0,n.jsx)(r.h2,{id:"face-detection",children:"Face Detection"}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.a,{href:"https://docs.opencv.org/3.4/db/d28/tutorial_cascade_classifier.html",children:"Object Detection using Haar feature-based cascade classifiers"}),' is an effective object detection method proposed by Paul Viola and Michael Jones in their paper, "Rapid Object Detection using a Boosted Cascade of Simple Features" in 2001. It is a machine learning based approach where a cascade function is trained from a lot of positive and negative images. It is then used to detect objects in other images.']}),"\n",(0,n.jsx)(r.p,{children:"Here we will work with face detection. Initially, the algorithm needs a lot of positive images (images of faces) and negative images (images without faces) to train the classifier."}),"\n",(0,n.jsxs)(r.p,{children:["OpenCV provides a training method (see ",(0,n.jsx)(r.a,{href:"https://docs.opencv.org/3.4/dc/d88/tutorial_traincascade.html",children:"Cascade Classifier Training"}),") or pretrained models, that can be read using the ",(0,n.jsx)(r.a,{href:"https://docs.opencv.org/3.4/d1/de5/classcv_1_1CascadeClassifier.html#a1a5884c8cc749422f9eb77c2471958bc",children:"cv::CascadeClassifier::load"})," method. The pretrained models are located in the data folder in the OpenCV installation or can be found ",(0,n.jsx)(r.a,{href:"https://github.com/opencv/opencv/tree/3.4/data",children:"here"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["The following code example will use pretrained Haar cascade models to detect faces and eyes in an image. First, a ",(0,n.jsx)(r.a,{href:"https://docs.opencv.org/3.4/d1/de5/classcv_1_1CascadeClassifier.html",children:"cv::CascadeClassifier"})," is created and the necessary XML file is loaded using the cv::CascadeClassifier::load method. Afterwards, the detection is done using the ",(0,n.jsx)(r.a,{href:"https://docs.opencv.org/3.4/d1/de5/classcv_1_1CascadeClassifier.html#aaf8181cb63968136476ec4204ffca498",children:"cv::CascadeClassifier::detectMultiScale"})," method, which returns boundary rectangles for the detected faces or eyes."]}),"\n",(0,n.jsxs)(r.p,{children:["Download the pre-trained you want to use from ",(0,n.jsx)(r.a,{href:"https://github.com/opencv/opencv/tree/3.4/data",children:"Github"}),":"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"cd resources\r\nwget https://raw.githubusercontent.com/opencv/opencv/3.4/data/haarcascades/haarcascade_frontalface_default.xml\n"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"import cv2\r\nimport numpy as np\r\n\r\n# Face Detection\r\nfaceCascade = cv2.CascadeClassifier('resources/haarcascade_frontalface_default.xml')\r\nimagePath = 'resources/hongkong-metro.png'\r\nimg = cv2.imread(imagePath)\r\nimgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # Create grayscale image\r\n\r\nfaces = faceCascade.detectMultiScale(imgGray, 1.1, 4) # Detect all faces in image\r\n\r\nfor (x, y, w, h) in faces:\r\n    cv2.rectangle(img, (x, y), (x+w, y+h), (0, 0, 255), 2)\r\n\r\ncv2.imshow(\"Face Detection\", img)\r\ncv2.waitKey(5000)\n"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{alt:"OpenCV Python",src:a(239258).A+"",width:"991",height:"527"})}),"\n",(0,n.jsx)(r.h2,{id:"license-plate-detection",children:"License Plate Detection"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"cd resources\r\nwget https://raw.githubusercontent.com/opencv/opencv/3.4/data/haarcascades/haarcascade_russian_plate_number.xml\n"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"import cv2\r\n\r\n# License Plate Detection\r\nlpCascade = cv2.CascadeClassifier('resources/haarcascade_russian_plate_number.xml')\r\nimagePath = 'resources/HK_Taxi.jpg'\r\nimg = cv2.imread(imagePath)\r\nimgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # Create grayscale image\r\n\r\nplates = lpCascade.detectMultiScale(imgGray, 1.1, 4) # Detect all faces in image\r\n\r\nfor (x, y, w, h) in plates:\r\n    cv2.rectangle(img, (x, y), (x+w, y+h), (0, 0, 255), 2)\r\n\r\ncv2.imshow(\"License Plate Detection\", img)\r\ncv2.waitKey(5000)\n"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{alt:"OpenCV Python",src:a(460835).A+"",width:"1000",height:"666"})})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},613557:(e,r,a)=>{a.d(r,{A:()=>n});const n=a.p+"assets/images/opencv-python_01-c8c5f3c629057ea5197eeef501b2040b.png"},527806:(e,r,a)=>{a.d(r,{A:()=>n});const n=a.p+"assets/images/opencv-python_02-9eacde498ad8552ba90db9877979b644.png"},399143:(e,r,a)=>{a.d(r,{A:()=>n});const n=a.p+"assets/images/opencv-python_03-0362fdcc25e013735c0643de7b8b268a.png"},123976:(e,r,a)=>{a.d(r,{A:()=>n});const n=a.p+"assets/images/opencv-python_04-5e646de474129d8004ead40d76442ff5.png"},363921:(e,r,a)=>{a.d(r,{A:()=>n});const n=a.p+"assets/images/opencv-python_05-99ca3318bc199cfe95f58e3239a6bc57.png"},239258:(e,r,a)=>{a.d(r,{A:()=>n});const n=a.p+"assets/images/opencv-python_06-147cdc1af2dea431423cad24c7a8c32c.png"},460835:(e,r,a)=>{a.d(r,{A:()=>n});const n=a.p+"assets/images/opencv-python_07-67ad2728a8c231f9fa8af559c27ccddb.png"},385465:(e,r,a)=>{a.d(r,{A:()=>n});const n=a.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-cbaf0ac1e969d7e110b992b34d57b91c.jpg"},28453:(e,r,a)=>{a.d(r,{R:()=>c,x:()=>s});var n=a(296540);const t={},i=n.createContext(t);function c(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);