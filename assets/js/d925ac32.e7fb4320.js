"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[17312],{951727:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var t=s(785893),r=s(603905);const l={sidebar_position:9090,slug:"2020-06-15",title:"Salty DevOps",authors:"mpolinowski",tags:["LINUX","Salt"]},a=void 0,i={id:"DevOps/Salt/2020-06-15--salty-devops/index",title:"Salty DevOps",description:"Shenzhen, China",source:"@site/docs/DevOps/Salt/2020-06-15--salty-devops/index.mdx",sourceDirName:"DevOps/Salt/2020-06-15--salty-devops",slug:"/DevOps/Salt/2020-06-15--salty-devops/2020-06-15",permalink:"/docs/DevOps/Salt/2020-06-15--salty-devops/2020-06-15",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Salt/2020-06-15--salty-devops/index.mdx",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Salt",permalink:"/docs/tags/salt"}],version:"current",sidebarPosition:9090,frontMatter:{sidebar_position:9090,slug:"2020-06-15",title:"Salty DevOps",authors:"mpolinowski",tags:["LINUX","Salt"]},sidebar:"tutorialSidebar",previous:{title:"Salt State",permalink:"/docs/DevOps/Salt/2020-06-16--salt-state/2020-06-16"},next:{title:"Install Salt on Ubuntu Server 20.04",permalink:"/docs/DevOps/Salt/2020-06-14--install-salt-on-ubuntu-20-04/2020-06-14"}},o={},u=[{value:"Execution Modules",id:"execution-modules",level:2},{value:"The TEST Module",id:"the-test-module",level:3},{value:"The PKG Module",id:"the-pkg-module",level:3},{value:"The USER Module",id:"the-user-module",level:3},{value:"The SERVICE Module",id:"the-service-module",level:3},{value:"The STATUS Module",id:"the-status-module",level:3},{value:"The CMD Module",id:"the-cmd-module",level:3},{value:"The GRAINS Module",id:"the-grains-module",level:3},{value:"Internal Execution Modules",id:"internal-execution-modules",level:2},{value:"The CP Module",id:"the-cp-module",level:3},{value:"The MATCH Module",id:"the-match-module",level:3},{value:"Minion Invocation",id:"minion-invocation",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.ah)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Shenzhen, China",src:s(22244).Z+"",width:"1500",height:"491"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#execution-modules",children:"Execution Modules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#the-test-module",children:"The TEST Module"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#the-pkg-module",children:"The PKG Module"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#the-user-module",children:"The USER Module"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#the-service-module",children:"The SERVICE Module"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#the-status-module",children:"The STATUS Module"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#the-cmd-module",children:"The CMD Module"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#the-grains-module",children:"The GRAINS Module"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#internal-execution-modules",children:"Internal Execution Modules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#the-cp-module",children:"The CP Module"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#the-match-module",children:"The MATCH Module"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#minion-invocation",children:"Minion Invocation"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"execution-modules",children:"Execution Modules"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://docs.saltstack.com/en/latest/salt-modindex.html",children:"Salt Module Index"})," lists ",(0,t.jsx)(n.a,{href:"https://docs.saltstack.com/en/latest/ref/modules/all/index.html",children:"all available execution modules"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"To check all loaded modules or functions on a Minion:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus sys.list_modules | less\r\nsudo salt ubuntuAsus sys.list_functions | less\n"})}),"\n",(0,t.jsx)(n.h3,{id:"the-test-module",children:"The TEST Module"}),"\n",(0,t.jsxs)(n.p,{children:["One module that we already used to see if our Minions were up was the ",(0,t.jsx)(n.a,{href:"https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.test.html#salt.modules.test.ping",children:"Test Module"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Salt abstracts the OS layer for you. For example the ",(0,t.jsx)(n.strong,{children:"PKG"})," command will automatically choose the correct way to install a software on your minions based on the operating system they are using."]}),"\n",(0,t.jsxs)(n.p,{children:["Another way to see the module documentation is using the ",(0,t.jsx)(n.code,{children:"sys.doc"})," command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus sys.doc test.ping\r\n\r\ntest.ping:\r\n\r\n    Used to make sure the minion is up and responding. Not an ICMP ping.\r\n\r\n    Returns ``True``.\r\n\r\n    CLI Example:\r\n\r\n        salt '*' test.ping\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you need an overview over all available test functions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus sys.doc test | less\n"})}),"\n",(0,t.jsx)(n.p,{children:"Check installed version of Salt and dependencies:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus test.version\r\n\r\nsudo salt ubuntuAsus test.versions_report\n"})}),"\n",(0,t.jsx)(n.h3,{id:"the-pkg-module",children:"The PKG Module"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus sys.doc pkg.list_pkgs\r\n\r\n\r\npkg.list_pkgs:\r\n\r\n    List the packages currently installed in a dict::\r\n\r\n        {'<package_name>': '<version>'}\r\n\r\n    removed\r\n        If ``True``, then only packages which have been removed (but not\r\n        purged) will be returned.\r\n\r\n    purge_desired\r\n        If ``True``, then only packages which have been marked to be purged,\r\n        but can't be purged due to their status as dependencies for other\r\n        installed packages, will be returned. Note that these packages will\r\n        appear in installed\r\n\r\n        Changed in version 2014.1.1\r\n\r\n            Packages in this state now correctly show up in the output of this\r\n            function.\r\n\r\n\r\n    CLI Example:\r\n\r\n        salt '*' pkg.list_pkgs\r\n        salt '*' pkg.list_pkgs versions_as_list=True\n"})}),"\n",(0,t.jsx)(n.p,{children:"List all installed packages on a minion:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus pkg.list_pkgs | less\r\n\r\nsudo salt -L ubuntuAsus,ubuntuBrix pkg.list_pkgs | grep docker\n"})}),"\n",(0,t.jsx)(n.p,{children:"Verify a dependency is installed on all minions and install it where still missing:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt '*' pkg.list_pkgs --out=txt | grep wget | cut -c -10\r\n\r\nsudo salt ubuntuAsus pkg.install wget\n"})}),"\n",(0,t.jsx)(n.h3,{id:"the-user-module",children:"The USER Module"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus sys.doc user | less\n"})}),"\n",(0,t.jsx)(n.p,{children:"List all users on a Minion:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus user.list_users\n"})}),"\n",(0,t.jsx)(n.p,{children:"Get Info for a spefic user:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus user.info ubuntu\r\n\r\nubuntuAsus:\r\n    ----------\r\n    fullname:\r\n        ubuntu\r\n    gid:\r\n        1000\r\n    groups:\r\n        - adm\r\n        - cdrom\r\n        - dip\r\n        - lxd\r\n        - plugdev\r\n        - sudo\r\n        - ubuntu\r\n    home:\r\n        /home/ubuntu\r\n    homephone:\r\n    name:\r\n        ubuntu\r\n    other:\r\n    passwd:\r\n        x\r\n    roomnumber:\r\n    shell:\r\n        /usr/bin/zsh\r\n    uid:\r\n        1000\r\n    workphone:\n"})}),"\n",(0,t.jsx)(n.h3,{id:"the-service-module",children:"The SERVICE Module"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus sys.doc service | less\n"})}),"\n",(0,t.jsx)(n.p,{children:"Get all running services on Minion:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus service.get_running\n"})}),"\n",(0,t.jsx)(n.p,{children:"Restart a service:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus service.restart salt-minion  // takes a while to restart\r\n\r\nsudo salt ubuntuAsus service.status salt-minion\n"})}),"\n",(0,t.jsx)(n.h3,{id:"the-status-module",children:"The STATUS Module"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus sys.doc status | less\n"})}),"\n",(0,t.jsx)(n.p,{children:"Check logged in users and disk usage:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus status.w\r\nsudo salt ubuntuAsus status.diskusage\n"})}),"\n",(0,t.jsx)(n.h3,{id:"the-cmd-module",children:"The CMD Module"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus sys.doc cmd | less\n"})}),"\n",(0,t.jsx)(n.p,{children:"List content of directory and read files on Minions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus cmd.run 'ls -lh /home/ubuntu'\r\nsudo salt ubuntuAsus cmd.run 'cat /etc/salt/minion.d/local.conf'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"the-grains-module",children:"The GRAINS Module"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus sys.doc grains | less\n"})}),"\n",(0,t.jsx)(n.p,{children:"Get or set value of a Grain"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus grains.get os\r\nsudo salt ubuntuAsus grains.get systemd:version\r\nsudo salt ubuntuAsus grains.set 'apps:port' 8888\r\nsudo salt ubuntuAsus grains.get apps\r\nsudo salt ubuntuAsus grains.setval apps '{'port':'7777'}'\r\nsudo salt ubuntuAsus grains.get apps\r\n\r\nsalt '*' grains.filter_by '{Debian: Debheads rule, RedHat: I love my hat}'\n"})}),"\n",(0,t.jsx)(n.h2,{id:"internal-execution-modules",children:"Internal Execution Modules"}),"\n",(0,t.jsx)(n.h3,{id:"the-cp-module",children:"The CP Module"}),"\n",(0,t.jsx)(n.p,{children:"Copying files between Master and Minion:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus sys.doc cp | less\n"})}),"\n",(0,t.jsx)(n.h3,{id:"the-match-module",children:"The MATCH Module"}),"\n",(0,t.jsx)(n.p,{children:"Copying files between Master and Minion:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus sys.doc match | less\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Return True if the minion matches the given ",(0,t.jsx)(n.code,{children:"grain_pcre"})," target."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt ubuntuAsus match.grain_pcre 'os:Ubuntu.*'\n"})}),"\n",(0,t.jsx)(n.h2,{id:"minion-invocation",children:"Minion Invocation"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"salt-call"})," function can be used to trigger the Salt API from the Minion server:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt-call test.ping\r\nlocal:\r\n    True\n"})}),"\n",(0,t.jsx)(n.p,{children:"This can be used to debug a Salt module directly on your Minion:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo salt-call network.netstat -l debug\r\n\r\n[DEBUG   ] Reading configuration from /etc/salt/minion\r\n[DEBUG   ] Including configuration from '/etc/salt/minion.d/_schedule.conf'\r\n[DEBUG   ] Reading configuration from /etc/salt/minion.d/_schedule.conf\r\n[DEBUG   ] Including configuration from '/etc/salt/minion.d/local.conf'\r\n[DEBUG   ] Reading configuration from /etc/salt/minion.d/local.conf\r\n[DEBUG   ] Configuration file path: /etc/salt/minion\r\n[WARNING ] Insecure logging configuration detected! Sensitive data may be logged.\r\n[DEBUG   ] Grains refresh requested. Refreshing grains.\r\n[DEBUG   ] Reading configuration from /etc/salt/minion\r\n[DEBUG   ] Including configuration from '/etc/salt/minion.d/_schedule.conf'\r\n[DEBUG   ] Reading configuration from /etc/salt/minion.d/_schedule.conf\r\n[DEBUG   ] Including configuration from '/etc/salt/minion.d/local.conf'\r\n[DEBUG   ] Reading configuration from /etc/salt/minion.d/local.conf\r\n[DEBUG   ] Elapsed time getting FQDNs: 0.017540931701660156 seconds\r\n[DEBUG   ] Loading static grains from /etc/salt/grains\r\n[DEBUG   ] LazyLoaded zfs.is_supported\r\n[DEBUG   ] Connecting to master. Attempt 1 of 1\r\n[DEBUG   ] Master URI: tcp://192.168.2.110:4506\r\n[DEBUG   ] Initializing new AsyncAuth for ('/etc/salt/pki/minion', 'ubuntuAsus', 'tcp://192.168.2.110:4506')\r\n[DEBUG   ] Generated random reconnect delay between '1000ms' and '11000ms' (10666)\r\n[DEBUG   ] Setting zmq_reconnect_ivl to '10666ms'\r\n[DEBUG   ] Setting zmq_reconnect_ivl_max to '11000ms'\r\n[DEBUG   ] Initializing new AsyncZeroMQReqChannel for ('/etc/salt/pki/minion', 'ubuntuAsus', 'tcp://192.168.2.110:4506', 'clear')\r\n[DEBUG   ] Connecting the Minion to the Master URI (for the return server): tcp://192.168.2.110:4506\r\n[DEBUG   ] Trying to connect to: tcp://192.168.2.110:4506\r\n[DEBUG   ] salt.crypt.get_rsa_pub_key: Loading public key\r\n[DEBUG   ] Decrypting the current master AES key\r\n[DEBUG   ] salt.crypt.get_rsa_key: Loading private key\r\n[DEBUG   ] salt.crypt._get_key_with_evict: Loading private key\r\n[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem\r\n[DEBUG   ] salt.crypt.get_rsa_pub_key: Loading public key\r\n[DEBUG   ] Closing AsyncZeroMQReqChannel instance\r\n[DEBUG   ] Connecting the Minion to the Master publish port, using the URI: tcp://192.168.2.110:4505\r\n[DEBUG   ] salt.crypt.get_rsa_key: Loading private key\r\n[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem\r\n[DEBUG   ] Determining pillar cache\r\n[DEBUG   ] Initializing new AsyncZeroMQReqChannel for ('/etc/salt/pki/minion', 'ubuntuAsus', 'tcp://192.168.2.110:4506', 'aes')\r\n[DEBUG   ] Initializing new AsyncAuth for ('/etc/salt/pki/minion', 'ubuntuAsus', 'tcp://192.168.2.110:4506')\r\n[DEBUG   ] Connecting the Minion to the Master URI (for the return server): tcp://192.168.2.110:4506\r\n[DEBUG   ] Trying to connect to: tcp://192.168.2.110:4506\r\n[DEBUG   ] salt.crypt.get_rsa_key: Loading private key\r\n[DEBUG   ] Loaded minion key: /etc/salt/pki/minion/minion.pem\r\n[DEBUG   ] Closing AsyncZeroMQReqChannel instance\r\n[DEBUG   ] LazyLoaded jinja.render\r\n[DEBUG   ] LazyLoaded yaml.render\r\n[DEBUG   ] LazyLoaded platform.is_windows\r\n[DEBUG   ] LazyLoaded network.netstat\r\n[DEBUG   ] LazyLoaded direct_call.execute\r\n[DEBUG   ] LazyLoaded path.which\r\n[DEBUG   ] LazyLoaded cmd.run\r\n[INFO    ] Executing command 'netstat -tulpnea' in directory '/root'\r\n[DEBUG   ] stdout: Active Internet connections (servers and established)\r\nProto Recv-Q Send-Q Local Address           Foreign Address         State       User       Inode      PID/Program name    \r\ntcp        0      0 127.0.0.1:1338          0.0.0.0:*               LISTEN      0          39195      780/containerd      \r\ntcp        0      0 127.0.0.1:10248         0.0.0.0:*               LISTEN      0          41215      790/kubelet         \r\ntcp        0      0 0.0.0.0:25000           0.0.0.0:*               LISTEN      0          39187      1668/python3        \r\ntcp        0      0 127.0.0.1:10249         0.0.0.0:*               LISTEN      0          40430      791/kube-proxy      \r\ntcp        0      0 127.0.0.1:10251         0.0.0.0:*               LISTEN      0          39190      800/kube-scheduler  \r\ntcp        0      0 127.0.0.1:10252         0.0.0.0:*               LISTEN      0          37783      787/kube-controller \r\ntcp        0      0 127.0.0.1:2380          0.0.0.0:*               LISTEN      0          37379      788/etcd            \r\ntcp        0      0 127.0.0.1:10256         0.0.0.0:*               LISTEN      0          40428      791/kube-proxy  \r\n[DEBUG   ] Initializing new AsyncZeroMQReqChannel for ('/etc/salt/pki/minion', 'ubuntuAsus', 'tcp://192.168.2.110:4506', 'aes')\r\n[DEBUG   ] Initializing new AsyncAuth for ('/etc/salt/pki/minion', 'ubuntuAsus', 'tcp://192.168.2.110:4506')\r\n[DEBUG   ] Connecting the Minion to the Master URI (for the return server): tcp://192.168.2.110:4506\r\n[DEBUG   ] Trying to connect to: tcp://192.168.2.110:4506\r\n[DEBUG   ] Closing AsyncZeroMQReqChannel instance\r\n[DEBUG   ] LazyLoaded nested.output\n"})})]})}function c(e={}){const{wrapper:n}={...(0,r.ah)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},603905:(e,n,s)=>{s.d(n,{ah:()=>u});var t=s(667294);function r(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}function l(e,n){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),s.push.apply(s,t)}return s}function a(e){for(var n=1;n<arguments.length;n++){var s=null!=arguments[n]?arguments[n]:{};n%2?l(Object(s),!0).forEach((function(n){r(e,n,s[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):l(Object(s)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(s,n))}))}return e}function i(e,n){if(null==e)return{};var s,t,r=function(e,n){if(null==e)return{};var s,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)s=l[t],n.indexOf(s)>=0||(r[s]=e[s]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)s=l[t],n.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(r[s]=e[s])}return r}var o=t.createContext({}),u=function(e){var n=t.useContext(o),s=n;return e&&(s="function"==typeof e?e(n):a(a({},n),e)),s},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var s=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),h=u(s),p=r,g=h["".concat(o,".").concat(p)]||h[p]||d[p]||l;return s?t.createElement(g,a(a({ref:n},c),{},{components:s})):t.createElement(g,a({ref:n},c))}));c.displayName="MDXCreateElement"},22244:(e,n,s)=>{s.d(n,{Z:()=>t});const t=s.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-153442ba8fddbf9d54490e9d1ac9f245.jpg"}}]);