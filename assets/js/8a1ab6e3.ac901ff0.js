"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[14617],{75963:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>h});var r=t(785893),i=t(603905);const a={sidebar_position:6040,slug:"2021-12-09",title:"OpenCV CAMshift Algorithm for Object Tracking",authors:"mpolinowski",tags:["Machine Learning","Python","OpenCV"]},o=void 0,s={id:"IoT-and-Machine-Learning/ML/2021-12-09--opencv-camshift-tracking/index",title:"OpenCV CAMshift Algorithm for Object Tracking",description:"Shenzhen, China",source:"@site/docs/IoT-and-Machine-Learning/ML/2021-12-09--opencv-camshift-tracking/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2021-12-09--opencv-camshift-tracking",slug:"/IoT-and-Machine-Learning/ML/2021-12-09--opencv-camshift-tracking/2021-12-09",permalink:"/docs/IoT-and-Machine-Learning/ML/2021-12-09--opencv-camshift-tracking/2021-12-09",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2021-12-09--opencv-camshift-tracking/index.md",tags:[{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Python",permalink:"/docs/tags/python"},{label:"OpenCV",permalink:"/docs/tags/open-cv"}],version:"current",sidebarPosition:6040,frontMatter:{sidebar_position:6040,slug:"2021-12-09",title:"OpenCV CAMshift Algorithm for Object Tracking",authors:"mpolinowski",tags:["Machine Learning","Python","OpenCV"]},sidebar:"tutorialSidebar",previous:{title:"OpenCV Optical Flow Algorithm for Object Tracking",permalink:"/docs/IoT-and-Machine-Learning/ML/2021-12-10--opencv-optical-flow-tracking/2021-12-10"},next:{title:"OpenCV Meanshift Algorithm for Object Tracking",permalink:"/docs/IoT-and-Machine-Learning/ML/2021-12-08--opencv-meanshift-tracking/2021-12-08"}},c={},h=[{value:"CAMshift",id:"camshift",level:2},{value:"Get your Videostream",id:"get-your-videostream",level:2},{value:"Histogram Calculation in OpenCV",id:"histogram-calculation-in-opencv",level:2},{value:"Apply the CAMshift Algorithm",id:"apply-the-camshift-algorithm",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Shenzhen, China",src:t(181664).Z+"",width:"2385",height:"919"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#camshift",children:"CAMshift"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#get-your-videostream",children:"Get your Videostream"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#histogram-calculation-in-opencv",children:"Histogram Calculation in OpenCV"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#apply-the-camshift-algorithm",children:"Apply the CAMshift Algorithm"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/mpolinowski/opencv2-tracking-algorithm",children:"Github Repo"})}),"\n",(0,r.jsx)(n.h2,{id:"camshift",children:"CAMshift"}),"\n",(0,r.jsxs)(n.p,{children:["One of the problems with the ",(0,r.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2021-12-08--opencv-meanshift-tracking/2021-12-08",children:"Meanshift Algorithm"})," was that the region of interest always stayed at the same size when the object came closer to the camera or moved farther away. The region needs to adapt it's size with size and rotation of the target. The solution is called ",(0,r.jsx)(n.strong,{children:"CAMshift"})," (",(0,r.jsx)(n.em,{children:"Continuously Adaptive Meanshift"}),") published by Gary Bradsky in his paper \u201cComputer Vision Face Tracking for Use in a Perceptual User Interface\u201d in 1988."]}),"\n",(0,r.jsx)(n.p,{children:"It applies meanshift first. Once meanshift converges, it updates the size of the window. It also calculates the orientation of best fitting ellipse to it. Again it applies the meanshift with new scaled search window and previous window location. The process is continued until required accuracy is met."}),"\n",(0,r.jsx)(n.h2,{id:"get-your-videostream",children:"Get your Videostream"}),"\n",(0,r.jsx)(n.p,{children:"Get your RTSP video stream input and define a region of interest for the Meanshift algorithm:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# get video stream from IP camera\r\nprint("[INFO] starting video stream")\r\nvs = VideoStream(args["url"]).start()\r\n\r\n# first frame from stream\r\nframe = vs.read()\r\n# select region of interest\r\nbbox = cv2.selectROI(frame)\r\nx, y, w, h = bbox\r\ntrack_window = (x, y, w, h)\r\n# define area of bounding box as area of interest\r\nroi = frame[y:y+h, x:x+w]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"histogram-calculation-in-opencv",children:"Histogram Calculation in OpenCV"}),"\n",(0,r.jsx)(n.p,{children:"The Meanshift algorithm is going to use the histogram of your region of interest to track the object you selected above. But we have to convert the frame to to the HSV colour space and normalize it first:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"hsv_roi = cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)\r\n# get histogram for [0] blue, [1] green, [2] red channel\r\nroi_hist = cv2.calcHist([hsv_roi], [0], None, [180], [0, 180])\r\n# convert hist values 0-180 to a range between 0-1\r\nroi_hist = cv2.normalize(roi_hist, roi_hist, 0, 255, cv2.NORM_MINMAX)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["So now we use ",(0,r.jsx)(n.a,{href:"https://docs.opencv.org/4.x/d1/db7/tutorial_py_histogram_begins.html",children:"cv.calcHist()"})," function to find the histogram. Let's familiarize with the function and its parameters :"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"cv.calcHist(images, channels, mask, histSize, ranges[, hist[, accumulate]])"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"images"})," : it is the source image of type uint8 or float32. it should be given in square brackets, ie, ",(0,r.jsx)(n.code,{children:"[img]"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"channels"})," : it is also given in square brackets. It is the index of channel for which we calculate histogram. For example, if input is grayscale image, its value is ",(0,r.jsx)(n.code,{children:"[0]"}),". For color image, you can pass ",(0,r.jsx)(n.code,{children:"[0]"}),", ",(0,r.jsx)(n.code,{children:"[1]"})," or ",(0,r.jsx)(n.code,{children:"[2]"})," to calculate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"histogram"})," of blue, green or red channel respectively."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"mask"}),' : mask image. To find histogram of full image, it is given as "None". But if you want to find histogram of particular region of image, you have to create a mask image for that and give it as mask. (I will show an example later.)']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"histSize"})," : this represents our BIN count. Need to be given in square brackets. For full scale, we pass ",(0,r.jsx)(n.code,{children:"[256]"})," for ",(0,r.jsx)(n.strong,{children:"RGB"})," and ",(0,r.jsx)(n.code,{children:"[180]"})," for ",(0,r.jsx)(n.strong,{children:"HSV"}),".\r\nranges : this is our RANGE. Normally, it is ",(0,r.jsx)(n.code,{children:"[0,256]"})," for ",(0,r.jsx)(n.strong,{children:"RGB"})," and ",(0,r.jsx)(n.code,{children:"[0, 180]"})," for ",(0,r.jsx)(n.strong,{children:"HSV"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"apply-the-camshift-algorithm",children:"Apply the CAMshift Algorithm"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"while True:\r\n    # get next frame\r\n    frame = vs.read()\r\n    if True:\r\n        # convert to hsv\r\n        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\r\n        # compare blue channel of current with roi histogram\r\n        # https://docs.opencv.org/3.4.15/da/d7f/tutorial_back_projection.html\r\n        dst = cv2.calcBackProject([hsv], [0], roi_hist, [0, 180], 1)\r\n        # call meanshift() to find match of histogram in current frame\r\n        # and get the new coordinates\r\n        ok, track_window = cv2.meanShift(dst, (x, y, w, h), parameter)\r\n        if not ok:\r\n            print('[WARNING] track lost')\r\n        # now update the roi coordinates to new values\r\n        x, y, w, h = track_window\r\n        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 255), 2)\r\n        # display track\r\n        cv2.imshow(\"Meanshift Track\", frame)\r\n        if cv2.waitKey(1) & 0xFF == ord('q'):\r\n            break\r\n    else:\r\n        break\n"})}),"\n",(0,r.jsx)(n.p,{children:"The generated coordinates can be used to draw polylines around the calculated new position of our selected object:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"OpenCV Meanshift Algorithm for Object Tracking",src:t(930317).Z+"",width:"639",height:"215"})})]})}function d(e={}){const{wrapper:n}={...(0,i.ah)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},603905:(e,n,t)=>{t.d(n,{ah:()=>h});var r=t(667294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),h=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),g=h(t),p=i,m=g["".concat(c,".").concat(p)]||g[p]||l[p]||a;return t?r.createElement(m,o(o({ref:n},d),{},{components:t})):r.createElement(m,o({ref:n},d))}));d.displayName="MDXCreateElement"},930317:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/OpenCV_CAMshift_Tracking_01-6df19bf659a15719cbcbca3093728cf7.gif"},181664:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-5a0b68587d9242bbb46a1f1aaab44216.jpg"}}]);