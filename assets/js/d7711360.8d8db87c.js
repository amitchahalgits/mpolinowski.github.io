"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[10386],{374958:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=t(474848),r=t(28453);const s={sidebar_position:5889,slug:"2023-12-20",title:"Tanstack React Query AsyncState Management",authors:"mpolinowski",tags:["Javascript","React"],description:"Leveraging Tanstack React Query v5 to manage frontend state from REST JSON APIs"},i=void 0,a={id:"Development/Javascript/2023-12-20-react-query-typescript/index",title:"Tanstack React Query AsyncState Management",description:"Leveraging Tanstack React Query v5 to manage frontend state from REST JSON APIs",source:"@site/docs/Development/Javascript/2023-12-20-react-query-typescript/index.md",sourceDirName:"Development/Javascript/2023-12-20-react-query-typescript",slug:"/Development/Javascript/2023-12-20-react-query-typescript/2023-12-20",permalink:"/docs/Development/Javascript/2023-12-20-react-query-typescript/2023-12-20",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Javascript/2023-12-20-react-query-typescript/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"},{label:"React",permalink:"/docs/tags/react"}],version:"current",sidebarPosition:5889,frontMatter:{sidebar_position:5889,slug:"2023-12-20",title:"Tanstack React Query AsyncState Management",authors:"mpolinowski",tags:["Javascript","React"],description:"Leveraging Tanstack React Query v5 to manage frontend state from REST JSON APIs"},sidebar:"tutorialSidebar",previous:{title:"Building a Native Elasticsearch Client in React",permalink:"/docs/Development/Javascript/2023-12-21-react-query-tauri-elasticsearch/2023-12-21"},next:{title:"React Query AsyncState Management",permalink:"/docs/Development/Javascript/2023-12-19-react-query-typescript/2023-12-19"}},d={},c=[{value:"Scaffolding",id:"scaffolding",level:2},{value:"Adding React Query",id:"adding-react-query",level:2},{value:"Wrapping the App inside the Query Provider",id:"wrapping-the-app-inside-the-query-provider",level:3},{value:"Build the Todo View",id:"build-the-todo-view",level:3},{value:"Building a Mock-API",id:"building-a-mock-api",level:3},{value:"Fetch Query",id:"fetch-query",level:2},{value:"Add the Todo Template Component",id:"add-the-todo-template-component",level:3},{value:"Mutations",id:"mutations",level:2},{value:"Update the Server State",id:"update-the-server-state",level:3},{value:"Filter Todos",id:"filter-todos",level:3},{value:"Query Debounce",id:"query-debounce",level:3}];function l(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"TST, Hongkong",src:t(433148).A+"",width:"2359",height:"864"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#scaffolding",children:"Scaffolding"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#adding-react-query",children:"Adding React Query"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#wrapping-the-app-inside-the-query-provider",children:"Wrapping the App inside the Query Provider"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#build-the-todo-view",children:"Build the Todo View"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#building-a-mock-api",children:"Building a Mock-API"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#fetch-query",children:"Fetch Query"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#add-the-todo-template-component",children:"Add the Todo Template Component"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#mutations",children:"Mutations"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#update-the-server-state",children:"Update the Server State"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#filter-todos",children:"Filter Todos"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#query-debounce",children:"Query Debounce"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"scaffolding",children:"Scaffolding"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm create vite@latest react-query\n\u2714 Select a framework: \u203a React\n\u2714 Select a variant: \u203a TypeScript + SWC\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd react-query\nnpm install\nnpm install @tanstack/react-query uuid vite-tsconfig-paths\nnpm install --save-dev @types/uuid\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"baseURL"})," to be able to work with absolute imports relative to the defined base:"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"./tsconfig.json"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "baseUrl": "./src",\n    ...\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"./vite.config.js"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { defineConfig } from 'vite'\nimport tsconfigPaths from 'vite-tsconfig-paths'\nimport react from '@vitejs/plugin-react-swc'\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    tsconfigPaths()\n  ],\n})\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"./src/views/App.tsx"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import HelloWorld from 'components/HelloWorld'\n\nimport 'styles/App.css'\n\nexport default function App() {\n  \n  return (\n    <>\n          <HelloWorld greeting='Hello from React Typescript' />\n    </>\n  )\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"./src/components/HelloWorld.tsx"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import React from 'react'\n\nimport { iHelloWorld } from 'types/interfaces'\n\nexport default function HelloWorld({ greeting }: iHelloWorld): React.JSX.Element {\n    return (\n        <h1>\n            { greeting }\n        </h1>\n    )\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"./src/types/interfaces.ts"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export interface iHelloWorld {\n    greeting: string\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,o.jsx)(n.h2,{id:"adding-react-query",children:"Adding React Query"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://tanstack.com/query/latest/docs/framework/react/overview",children:"TanStack Query (FKA React Query)"})}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"wrapping-the-app-inside-the-query-provider",children:"Wrapping the App inside the Query Provider"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"./src/main.tsx"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\nimport App from 'views/App.tsx'\nimport 'styles/index.css'\n\nconst queryClient = new QueryClient()\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <QueryClientProvider client={ queryClient }>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"build-the-todo-view",children:"Build the Todo View"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"./src/views/App.tsx"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useQuery } from '@tanstack/react-query'\nimport { fetchTodos } from 'api'\n\nimport Greeting from 'components/HelloWorld'\nimport TodoCard from 'components/TodoCard'\nimport 'styles/App.css'\n\nexport default function App() {\n  const { data: todos, isLoading } = useQuery({\n    queryFn: () => fetchTodos(),\n    queryKey: [\"todos\"]\n  })\n\n  if (isLoading) {\n    return <div>Loading ...</div>\n  }\n\n  return (\n    <>\n      <Greeting greeting='Hello from React Typescript' />\n\n      {todos?.map((todo) => {\n        return <TodoCard key={todo.id} todo={todo} />\n      })}\n\n    </>\n  )\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"building-a-mock-api",children:"Building a Mock-API"}),"\n",(0,o.jsx)(n.p,{children:"Adding a API component that allows us to fetch and add Todos that are then consumed by the view:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"./src/api/index.ts"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import {v4 as uuid} from \'uuid\'\n\nimport { iTodo } from "types/interfaces"\n\nconst todos: iTodo[] = [\n    {\n        "id": "9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d",\n        "title": "Do something",\n        "completed": false\n    }\n]\n\nexport const fetchTodos = async (query=\'\'): Promise<iTodo[]> => {\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n\n    console.log("INFO :: Todos were fetched")\n\n    const filteredTodos = todos.filter((todo) => \n        todo.title.toLowerCase().includes(query.toLocaleLowerCase())\n    )\n\n    return [... filteredTodos]\n}\n\n\nexport const addTodo = async (todo: Pick<iTodo, \'title\'>): Promise<iTodo> => {\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n\n    const newTodo = {\n        id: uuid(),\n        title: todo.title,\n        completed: false\n    }\n\n    todos.push(newTodo)\n\n    return newTodo\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"fetch-query",children:"Fetch Query"}),"\n",(0,o.jsx)(n.h3,{id:"add-the-todo-template-component",children:"Add the Todo Template Component"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"./src/components/TodoCard.tsx"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import React, {useState} from 'react'\n\nimport { iTodo } from 'types/interfaces'\n\ninterface TodoProps {\n    todo: iTodo;\n  }\n\nexport default function TodoCard({ todo }: TodoProps): React.JSX.Element {\n    const [checked, setChecked] = useState(todo.completed);\n  \n    return (\n      <div>\n        {todo.title}\n        <input\n          type=\"checkbox\"\n          checked={checked}\n          onChange={(e) => setChecked(e.target.checked)}\n        />\n      </div>\n    );\n  }\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"./src/styles/interfaces.ts"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export interface iTodo {\n    id: string\n    title: string\n    completed: boolean\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Tanstack ReactQuery",src:t(314958).A+"",width:"1076",height:"266"})}),"\n",(0,o.jsx)(n.h2,{id:"mutations",children:"Mutations"}),"\n",(0,o.jsx)(n.h3,{id:"update-the-server-state",children:"Update the Server State"}),"\n",(0,o.jsx)(n.p,{children:"Our Mock API already provides a function to add more todos. We can now use the ReactQuery state mutation to add a todo and also refresh the client side state updating the displayed list:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"./src/views/App.tsx"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useState } from 'react'\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'\n\nimport Greeting from 'components/HelloWorld'\nimport TodoCard from 'components/TodoCard'\nimport { addTodo, fetchTodos } from 'api'\n\nimport 'styles/App.css'\n\nexport default function App() {\n  const queryClient = useQueryClient()\n  const [title, setTitle] = useState('')\n\n  const { data: todos, isLoading } = useQuery({\n    queryFn: () => fetchTodos(),\n    queryKey: [\"todos\"]\n  })\n\n  const { mutateAsync: addTodoMutation } = useMutation({\n    mutationFn: addTodo,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['todos'] })\n    }\n  })\n\n  if (isLoading) {\n    return <div>Loading ...</div>\n  }\n\n  return (\n    <>\n      <Greeting greeting='Hello from React Typescript' />\n\n      { todos?.map((todo) => {\n        return <TodoCard key={todo.id} todo={todo} />\n        })\n      }\n\n      <input\n        type='text'\n        onChange={(e) => setTitle(e.target.value)}\n        value={title}\n      />\n\n      <button onClick={ async () => {\n        try {\n          await addTodoMutation({ title })\n          setTitle('')\n        } catch (e) {\n          console.log(e)\n        }\n      }}>\n        Add Todo\n      </button>\n\n    </>\n  )\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Tanstack ReactQuery",src:t(517381).A+"",width:"1005",height:"242"})}),"\n",(0,o.jsx)(n.h3,{id:"filter-todos",children:"Filter Todos"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"./src/views/App.tsx"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useState } from 'react'\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'\n\nimport Greeting from 'components/HelloWorld'\nimport TodoCard from 'components/TodoCard'\nimport { addTodo, fetchTodos } from 'api'\n\nimport 'styles/App.css'\n\nexport default function App() {\n  const queryClient = useQueryClient()\n\n  const [search, setSearch] = useState('')\n  const [title, setTitle] = useState('')\n\n  const { data: todos, isLoading } = useQuery({\n    queryFn: () => fetchTodos(search),\n    queryKey: [\"todos\", {search}]\n  })\n\n  const { mutateAsync: addTodoMutation } = useMutation({\n    mutationFn: addTodo,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['todos'] })\n    }\n  })\n\n  if (isLoading) {\n    return <div>Loading ...</div>\n  }\n\n  return (\n    <>\n      <Greeting greeting='Hello from React Typescript' />\n\n      { todos?.map((todo) => {\n        return <TodoCard key={todo.id} todo={todo} />\n        })\n      }\n\n      <input\n        type='text'\n        onChange={(e) => setTitle(e.target.value)}\n        value={title}\n      />\n\n      <button onClick={ async () => {\n        try {\n          await addTodoMutation({ title })\n          setTitle('')\n        } catch (e) {\n          console.log(e)\n        }\n      }}>\n        Add Todo\n      </button>\n\n      <input\n        type='text'\n        onChange={e => (setSearch(e.target.value))}\n        value={search}\n      />\n\n    </>\n  )\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Tanstack ReactQuery",src:t(199868).A+"",width:"1116",height:"212"})}),"\n",(0,o.jsx)(n.h3,{id:"query-debounce",children:"Query Debounce"}),"\n",(0,o.jsx)(n.p,{children:"This works - but is very painful to use due to the simulated delay from the API response. Adding a custom hook to debounce the search input:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"./src/utils/hooks.ts"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'import { useEffect, useState } from "react"\n\nexport const useDebounce = <T>(value: T, delay: 500) => {\n    const [debounce, setDebounce] = useState<T> (value)\n\n    useEffect( () => {\n        const timeout = setTimeout(() => {\n            setDebounce(value)\n        }, delay)\n\n        return () => clearTimeout(timeout)\n    }, [value, delay])\n\n    return debounce\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"./src/views/App.tsx"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useState } from 'react'\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'\n\nimport Greeting from 'components/HelloWorld'\nimport TodoCard from 'components/TodoCard'\nimport { useDebounce } from 'utils/hooks'\nimport { addTodo, fetchTodos } from 'api'\n\nimport 'styles/App.css'\n\nexport default function App() {\n  const queryClient = useQueryClient()\n\n  const [title, setTitle] = useState('')\n  const [search, setSearch] = useState('')\n  const debounceSearch = useDebounce(search, 500)\n\n  const { data: todos, isLoading } = useQuery({\n    queryFn: () => fetchTodos(debounceSearch),\n    queryKey: [\"todos\", {debounceSearch}]\n  })\n\n  const { mutateAsync: addTodoMutation } = useMutation({\n    mutationFn: addTodo,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['todos'] })\n    }\n  })\n\n  if (isLoading) {\n    return <div>Loading ...</div>\n  }\n\n  return (\n    <>\n      <Greeting greeting='Hello from React Typescript' />\n\n      { todos?.map((todo) => {\n        return <TodoCard key={todo.id} todo={todo} />\n        })\n      }\n\n      <input\n        type='text'\n        onChange={(e) => setTitle(e.target.value)}\n        value={title}\n        placeholder='Todo'\n      />\n\n      <button onClick={ async () => {\n        try {\n          await addTodoMutation({ title })\n          setTitle('')\n        } catch (e) {\n          console.log(e)\n        }\n      }}>\n        Add Todo\n      </button>\n\n      <input\n        type='text'\n        onChange={e => (setSearch(e.target.value))}\n        value={search}\n        placeholder='Search'\n      />\n\n    </>\n  )\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},433148:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-c3aedc7eed015cc5372c21f9c394693d.jpg"},314958:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/tanstack_react_query_01-6897cf79de0d26a67a1b139d892c5f4e.png"},517381:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/tanstack_react_query_02-09a18cac10ed381272d4136f6cef4ef3.png"},199868:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/tanstack_react_query_03-15dfa4c66d26d0d6039a7655089cac0d.png"},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(296540);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);