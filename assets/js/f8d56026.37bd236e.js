"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[40633],{534672:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var t=i(785893),r=i(603905);const a={sidebar_position:9050,slug:"2022-10-05",title:"Python - Text Processing with",authors:"mpolinowski",tags:["Python"],description:"Processing text using Python"},o=void 0,l={id:"Development/Python/2022-10-05-python-text-processing/index",title:"Python - Text Processing with",description:"Processing text using Python",source:"@site/docs/Development/Python/2022-10-05-python-text-processing/index.md",sourceDirName:"Development/Python/2022-10-05-python-text-processing",slug:"/Development/Python/2022-10-05-python-text-processing/2022-10-05",permalink:"/docs/Development/Python/2022-10-05-python-text-processing/2022-10-05",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Python/2022-10-05-python-text-processing/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"}],version:"current",sidebarPosition:9050,frontMatter:{sidebar_position:9050,slug:"2022-10-05",title:"Python - Text Processing with",authors:"mpolinowski",tags:["Python"],description:"Processing text using Python"},sidebar:"tutorialSidebar",previous:{title:"Python - Minify Text for Elasticsearch",permalink:"/docs/Development/Python/2022-10-06-python-minify-text/2022-10-06"},next:{title:"Python - Video Processing with OpenCV",permalink:"/docs/Development/Python/2022-09-17-python-video-processing/2022-09-17"}},s={},d=[{value:"Write Text Files",id:"write-text-files",level:2},{value:"Read Text Files",id:"read-text-files",level:2},{value:"Edit Text Files",id:"edit-text-files",level:2},{value:"Remove Trailing",id:"remove-trailing",level:3},{value:"Edit &amp; Merge multiple",id:"edit--merge-multiple",level:3},{value:"Replace Strings",id:"replace-strings",level:3},{value:"Remove Header before Merging",id:"remove-header-before-merging",level:3},{value:"Replace Header after Merging",id:"replace-header-after-merging",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.ah)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Sham Sui Po, Hong Kong",src:i(176094).Z+"",width:"1500",height:"548"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#write-text-files",children:"Write Text Files"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#read-text-files",children:"Read Text Files"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#edit-text-files",children:"Edit Text Files"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#remove-trailing",children:"Remove Trailing"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#edit--merge-multiple",children:"Edit & Merge multiple"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#replace-strings",children:"Replace Strings"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#remove-header-before-merging",children:"Remove Header before Merging"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#replace-header-after-merging",children:"Replace Header after Merging"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"write-text-files",children:"Write Text Files"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"content = \"\"\"\nSpicy jalapeno bacon ipsum dolor amet pancetta labore ribeye sirloin buffalo adipisicing pig short ribs ipsum aliquip pork excepteur ullamco minim. Ipsum officia beef ribs chuck pork chop picanha salami bacon. Hamburger shoulder biltong irure. Laborum nulla ut chuck ball tip rump chislic burgdoggen jerky pork belly irure short loin tri-tip leberkas. Chicken commodo salami swine in laborum corned beef picanha rump in labore.\n\n> Labore fugiat pork ea ball tip. In laboris venison nulla turducken, short loin short ribs ullamco beef culpa incididunt minim proident. Kielbasa dolore eu aliquip sausage kevin picanha magna id lorem. Adipisicing pastrami chuck salami minim meatloaf, ribeye duis turducken shoulder et ham hock. Alcatra tempor enim burgdoggen pastrami adipisicing dolore swine chuck id cupidatat tenderloin meatloaf cow eu.\n\"\"\"\n\n\nwith open('write2file.md', 'w') as file:\n    file.write('# Bacon Ipsum\\n')\n    file.write(content)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"read-text-files",children:"Read Text Files"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"with open('write2file.md', 'r') as file:\n    content = file.read()\n\nprint(content)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"edit-text-files",children:"Edit Text Files"}),"\n",(0,t.jsx)(n.h3,{id:"remove-trailing",children:"Remove Trailing"}),"\n",(0,t.jsx)(n.p,{children:"Remove content from a text file:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"with open('editfile.csv', 'r') as file:\n    content = file.read()\n\n# print(content)\n# slice off trailing ;END\nprint(content[:-4])\n\ncleaned_content = content[:-4]\n\nwith open('editfile_cleaned.csv', 'w') as file:\n    file.write(cleaned_content)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"edit--merge-multiple",children:"Edit & Merge multiple"}),"\n",(0,t.jsx)(n.p,{children:"Remove content from multiple text files and merge into a single file:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"from pathlib import Path\n\nsource = Path('editfiles/raw')\ndestination = 'editfiles/edited/editfile_merged.csv'\nheader = 'Login email;Identifier;One-time password;Recovery code;First name;Last name;Department;Location'\n\n# create merge file and add header\nwith open(destination, 'w') as file:\n    file.write(header + \"\\n\")\n\n# get file path of raw files\nfor filepath in source.iterdir():\n    with open(filepath, 'r') as file:\n        # read files in source one by one\n        content = file.read()\n        # remove ;END\n        cleaned_content = content[:-4]\n        print(cleaned_content)\n    with open(destination, 'a') as file:\n        # append read content to destination file\n        file.write(cleaned_content + \"\\n\")\n"})}),"\n",(0,t.jsx)(n.h3,{id:"replace-strings",children:"Replace Strings"}),"\n",(0,t.jsx)(n.p,{children:"Replacing all instances of a word within multiple files and merge them:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"from pathlib import Path\n\nsource = Path('editfiles/raw')\ndestination = 'editfiles/edited/editfile_replace.csv'\nheader = 'Login email;Identifier;One-time password;Recovery code;First name;Last name;Department;Location'\n\n# create merge file and add header\nwith open(destination, 'w') as file:\n    file.write(header + \"\\n\")\n\n# get file path of raw files\nfor filepath in source.iterdir():\n    with open(filepath, 'r') as file:\n        # read files in source one by one\n        content = file.read()\n        # remove ;END\n        cleaned_content = content[:-4]\n        # replace a string\n        replaced_content = content.replace('mary@example.com', 'maryj@example.br')\n    with open(destination, 'a') as file:\n        # append read content to destination file\n        file.write(replaced_content + \"\\n\")\n"})}),"\n",(0,t.jsx)(n.h3,{id:"remove-header-before-merging",children:"Remove Header before Merging"}),"\n",(0,t.jsxs)(n.p,{children:["When merging multiple CSV files we need to remove the from all but the first file. The ",(0,t.jsx)(n.code,{children:"readline()"})," function breaks up text with line breaks and appends every line into a list in which the item at position zero is our header:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"from pathlib import Path\n\nsource = Path('editfiles/raw_header')\ndestination = 'editfiles/edited/editfile_merged_wHeader.csv'\nmerged = ''\n\n# loop over file path of raw files\nfor index, filepath in enumerate(source.iterdir()):\n    with open(filepath, 'r') as file:\n        # read lines and write to list\n        content = file.readlines()\n        # remove line containing header\n        content_woHeader = content[1:]\n        # but keep the first header\n        if index == 0:\n            # use join to turn list into string\n            merged = merged + ''.join(content) + '\\n'\n        else:\n            merged = merged + ''.join(content_woHeader) + '\\n'\n\n    with open(destination, 'w') as file:\n        # write read content to destination file\n        file.write(merged)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"replace-header-after-merging",children:"Replace Header after Merging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"source = 'editfiles/edited/editfile_merged_wHeader.csv'\ndestination = 'editfiles/edited/editfile_merged_modified_Header.csv'\n\n# read lines into list\nwith open(source, 'r') as file:\n    content = file.readlines()\n\n# take first list item and replace\ncontent[0] = 'Email;ID;Password;Recovery;Name;Family;Department;Location' + '\\n'\n\n# write to file\nwith open(destination, 'w') as file:\n    file.writelines(content)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.ah)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},603905:(e,n,i)=>{i.d(n,{ah:()=>d});var t=i(667294);function r(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function a(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function o(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?a(Object(i),!0).forEach((function(n){r(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function l(e,n){if(null==e)return{};var i,t,r=function(e,n){if(null==e)return{};var i,t,r={},a=Object.keys(e);for(t=0;t<a.length;t++)i=a[t],n.indexOf(i)>=0||(r[i]=e[i]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)i=a[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var s=t.createContext({}),d=function(e){var n=t.useContext(s),i=n;return e&&(i="function"==typeof e?e(n):o(o({},n),e)),i},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var i=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=d(i),f=r,m=h["".concat(s,".").concat(f)]||h[f]||c[f]||a;return i?t.createElement(m,o(o({ref:n},p),{},{components:i})):t.createElement(m,o({ref:n},p))}));p.displayName="MDXCreateElement"},176094:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-5f44d483789c3ce79f05418f930f5cd2.jpg"}}]);