"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[66187],{491284:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var t=r(474848),o=r(28453);const s={sidebar_position:4080,slug:"2022-09-22",title:"Secure Timeserver - Deploying a NTS Server using Hashicorp Nomad",authors:"mpolinowski",tags:["LINUX","Security","Nomad","Consul","NTS"],description:"In the previous step I deployed Chrony using Docker Compose. This time I try to migrate the deployment to Nomad & Consul."},i=void 0,a={id:"DevOps/Hashicorp/2022-09-22--nomad-nts-timeserver/index",title:"Secure Timeserver - Deploying a NTS Server using Hashicorp Nomad",description:"In the previous step I deployed Chrony using Docker Compose. This time I try to migrate the deployment to Nomad & Consul.",source:"@site/docs/DevOps/Hashicorp/2022-09-22--nomad-nts-timeserver/index.md",sourceDirName:"DevOps/Hashicorp/2022-09-22--nomad-nts-timeserver",slug:"/DevOps/Hashicorp/2022-09-22--nomad-nts-timeserver/2022-09-22",permalink:"/docs/DevOps/Hashicorp/2022-09-22--nomad-nts-timeserver/2022-09-22",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-09-22--nomad-nts-timeserver/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Security",permalink:"/docs/tags/security"},{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Consul",permalink:"/docs/tags/consul"},{label:"NTS",permalink:"/docs/tags/nts"}],version:"current",sidebarPosition:4080,frontMatter:{sidebar_position:4080,slug:"2022-09-22",title:"Secure Timeserver - Deploying a NTS Server using Hashicorp Nomad",authors:"mpolinowski",tags:["LINUX","Security","Nomad","Consul","NTS"],description:"In the previous step I deployed Chrony using Docker Compose. This time I try to migrate the deployment to Nomad & Consul."},sidebar:"tutorialSidebar",previous:{title:"NGINX Ingress with Nomad",permalink:"/docs/DevOps/Hashicorp/2022-09-24--nomad-nginx-ingress/2022-09-24"},next:{title:"Hashicorp Waypoint with Nomad",permalink:"/docs/DevOps/Hashicorp/2022-06-08-hashicorp-waypoint-nomad/2022-06-09"}},c={},l=[{value:"From Compose to Nomad",id:"from-compose-to-nomad",level:2},{value:"Installation",id:"installation",level:3},{value:"Hashicorp Nomad",id:"hashicorp-nomad",level:4},{value:"Hashicorp Consul",id:"hashicorp-consul",level:4},{value:"Creating the Nomad Job File",id:"creating-the-nomad-job-file",level:2},{value:"Testing",id:"testing",level:3},{value:"Debugging",id:"debugging",level:4},{value:"Solution",id:"solution",level:4},{value:"Final Nomad Job File",id:"final-nomad-job-file",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"TST, Hong Kong",src:r(948210).A+"",width:"1500",height:"517"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#from-compose-to-nomad",children:"From Compose to Nomad"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#installation",children:"Installation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#hashicorp-nomad",children:"Hashicorp Nomad"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#hashicorp-consul",children:"Hashicorp Consul"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#creating-the-nomad-job-file",children:"Creating the Nomad Job File"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#testing",children:"Testing"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#debugging",children:"Debugging"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#solution",children:"Solution"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#final-nomad-job-file",children:"Final Nomad Job File"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"from-compose-to-nomad",children:"From Compose to Nomad"}),"\n",(0,t.jsxs)(n.p,{children:["I now have a ",(0,t.jsx)(n.a,{href:"https://mpolinowski.github.io/docs/DevOps/Linux/2022-09-15--ntp-over-nts-timeserver/2022-09-21",children:"timeserver with NTS support"})," that I can deploy using Docker-Compose:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"version: '3.9'\r\n\r\nservices:\r\n  chrony:\r\n    build: .\r\n    image: cturra/ntp:latest\r\n    container_name: chrony\r\n    restart: unless-stopped\r\n    volumes:\r\n      - type: bind\r\n        source: /opt/docker-ntp/assets/startup.sh\r\n        target: /opt/startup.sh\r\n      - type: bind\r\n        source: /etc/letsencrypt/live/my.server.domain/fullchain.pem\r\n        target: /opt/fullchain.pem\r\n      - type: bind\r\n        source: /etc/letsencrypt/live/my.server.domain/privkey.pem\r\n        target: /opt/privkey.pem\r\n    ports:\r\n      - 123:123/udp\r\n      - 4460:4460/tcp\r\n    environment:\r\n      - NTP_SERVERS=0.de.pool.ntp.org,time.cloudflare.com,time1.google.com\r\n      - LOG_LEVEL=0\n"})}),"\n",(0,t.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,t.jsxs)(n.p,{children:["First I need to add the new Timeserver to my Nomad & Consul Cluster. So let's install the ",(0,t.jsx)(n.a,{href:"https://www.nomadproject.io/docs/install",children:"Nomad"})," and ",(0,t.jsx)(n.a,{href:"https://learn.hashicorp.com/tutorials/consul/get-started-install",children:"Consul"})," Clients using the Debian package manager:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\r\nsudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"\r\nsudo apt update && sudo apt install nomad consul\n'})}),"\n",(0,t.jsx)(n.h4,{id:"hashicorp-nomad",children:"Hashicorp Nomad"}),"\n",(0,t.jsxs)(n.p,{children:["Add ",(0,t.jsx)(n.strong,{children:"Client Configuration"})," in ",(0,t.jsx)(n.code,{children:"/etc/nomad.d/client.hcl"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'## https://www.nomadproject.io/docs/agent/configuration\r\nname = "nts"\r\ndatacenter = "chronyNTS"\r\ndata_dir = "/opt/nomad/data"\r\nbind_addr = "0.0.0.0"\r\n\r\nadvertise {\r\n  http = "127.0.0.1"\r\n  rpc  = "my.client-server.ip"\r\n  serf = "my.client-server.ip"\r\n}\r\n\r\nports {\r\n  http = http.port.as.configured.in.your.cluster\r\n  rpc  = rpc.port.as.configured.in.your.cluster\r\n  serf = serf.port.as.configured.in.your.cluster \r\n}\r\n\r\nclient {\r\n  enabled = true\r\n  servers = ["my.nomad.master:port"]\r\n\r\n  host_volume "letsencrypt" {\r\n    path = "/etc/letsencrypt"\r\n    read_only = false\r\n  }\r\n}\r\n\r\nserver {\r\n  enabled = false\r\n}\r\n\r\nacl {\r\n  enabled = true\r\n}\r\n\r\n\r\n# Require TLS\r\ntls {\r\n  http = true\r\n  rpc  = true\r\n\r\n  ca_file   = "/etc/nomad.d/tls/nomad-ca.pem"\r\n  cert_file = "/etc/nomad.d/tls/client.pem"\r\n  key_file  = "/etc/nomad.d/tls/client-key.pem"\r\n\r\n  verify_server_hostname = true\r\n  verify_https_client    = true\r\n}\r\n\r\n# Docker Configuration\r\nplugin "docker" {\r\n\r\n  volumes {\r\n    enabled      = true\r\n    selinuxlabel = "z"\r\n  }\r\n\r\n  allow_privileged = false\r\n  allow_caps       = ["chown", "net_raw"]\r\n\r\n}\r\n\r\n## https://www.nomadproject.io/docs/agent/configuration/index.html#log_level\r\n## [WARN|INFO|DEBUG]\r\nlog_level = "WARN"\r\nlog_rotate_duration = "30d"\r\nlog_rotate_max_files = 12\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Make sure to copy your TLS configuration (ca-cert, client-cert and client-key) to ",(0,t.jsx)(n.code,{children:"/etc/nomad.d/tls"})," and that the data directory ",(0,t.jsx)(n.code,{children:"/opt/nomad/data"})," is available. It is very important to add the ",(0,t.jsx)(n.strong,{children:"Docker Plugin"})," configuration and enable volumes here. This way we can now point a ",(0,t.jsx)(n.code,{children:"host_volume"})," to the Let's Encrypt certificates we need to mount into our container."]}),"\n",(0,t.jsx)(n.h4,{id:"hashicorp-consul",children:"Hashicorp Consul"}),"\n",(0,t.jsxs)(n.p,{children:["Add ",(0,t.jsx)(n.strong,{children:"Client Configuration"})," in ",(0,t.jsx)(n.code,{children:"/etc/consul.d/consul.hcl"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Full configuration options can be found at https://www.consul.io/docs/agent/config\r\ndatacenter = "consul"\r\ndata_dir = "/opt/consul"\r\nclient_addr = "127.0.0.1"\r\nserver = false\r\nbind_addr = "my.client-server.ip"\r\nencrypt = "mysecretencryptionkey"\r\nretry_join = ["my.nomad.master"]\r\n\r\n# TLS configuration\r\ntls {\r\n  defaults {\r\n    ca_file = "/etc/consul.d/tls/consul-agent-ca.pem"\r\n  }\r\n  internal_rpc {\r\n    verify_server_hostname = true\r\n  }\r\n}\r\n\r\nauto_encrypt {\r\n    tls = true\r\n }\r\n\r\n# ACL configuration\r\nacl {\r\n  enabled = true\r\n  default_policy = "deny"\r\n  enable_token_persistence = true\r\n}\r\n\r\n# Performance\r\nperformance {\r\n  raft_multiplier = 1\r\n}\r\n\r\nports {\r\n  grpc  = port.as.configured.in.your.cluster\r\n  dns = port.as.configured.in.your.cluster\r\n  http = port.as.configured.in.your.cluster\r\n  https = port.as.configured.in.your.cluster\r\n  serf_lan = port.as.configured.in.your.cluster\r\n  serf_wan = port.as.configured.in.your.cluster\r\n  server = port.as.configured.in.your.cluster\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Make sure to copy your TLS configuration (ca_file) to ",(0,t.jsx)(n.code,{children:"/etc/consul.d/tls"})," and that the data directory ",(0,t.jsx)(n.code,{children:"/opt/consul"})," is available."]}),"\n",(0,t.jsx)(n.h2,{id:"creating-the-nomad-job-file",children:"Creating the Nomad Job File"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"chrony_nts.nomad"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ERROR"}),': This file is still has an issue - the container is run with "network_mode=host" which causes an issue with the mounted TLS certificate. And there was another issue with the ',(0,t.jsx)(n.code,{children:"mount"})," configuration itself. You can find corrected job file at the end of this article!"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'job "chrony_nts" {\r\n    datacenters = ["chronyNTS"]\r\n    type = "service"\r\n\r\n    group "docker" {\r\n        # Only start 1 instance\r\n        count = 1\r\n        # Set static ports\r\n        network {\r\n            mode = "host"\r\n            port "ntp" {\r\n                static = "123"\r\n            }\r\n            port "nts" {\r\n                static = "4460"\r\n            }\r\n        }\r\n        # Do canary updates\r\n        update {\r\n            max_parallel = 1\r\n            min_healthy_time = "10s"\r\n            healthy_deadline = "2m"\r\n            progress_deadline = "5m"\r\n            auto_revert = true\r\n            auto_promote = true\r\n            canary = 1\r\n        }\r\n        # Register the service with Consul\r\n        service {\r\n            name = "NTS"\r\n            port = "nts"\r\n\r\n            check {\r\n                name = "NTS Service"\r\n                type = "tcp"\r\n                interval = "10s"\r\n                timeout = "1s"\r\n            }\r\n        }\r\n        # Add the let\'s encrypt volume\r\n        # volume "letsencrypt" {\r\n        #     type      = "host"\r\n        #     read_only = false\r\n        #     source    = "letsencrypt"\r\n        # }\r\n\r\n        task "chrony_container" {\r\n            driver = "docker"\r\n            # Docker environment variables\r\n            env {\r\n                NTP_SERVERS = "0.de.pool.ntp.org,time.cloudflare.com,time1.google.com"\r\n                LOG_LEVEL = "1"\r\n            }\r\n            # Mount the let\'s encrypt certificates\r\n            # volume_mount {\r\n            #     volume      = "letsencrypt"\r\n            #     destination = "/opt/letsencrypt"\r\n            #     read_only   = false\r\n            # }\r\n\r\n            config {\r\n                image = "my.gitlab.com:12345/chrony-nts:latest"\r\n                ports = ["ntp", "nts"]\r\n                network_mode = "host"\r\n                force_pull = true\r\n                \r\n                mount {\r\n                  type = "bind"\r\n                  target = "/opt/letsencrypt"\r\n                  source = "/etc/letsencrypt/live"\r\n                  readonly = false\r\n                  bind_options {\r\n                    propagation = "rshared"\r\n                }\r\n\r\n                auth {\r\n                    username = "mygitlabuser"\r\n                    password = "password"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note"})," that the volume is now mounted to ",(0,t.jsx)(n.code,{children:"/opt/letsencrypt"})," inside the container. So we have to update the ",(0,t.jsx)(n.code,{children:"startup.sh"})," ",(0,t.jsx)(n.a,{href:"https://mpolinowski.github.io/docs/DevOps/Linux/2022-09-15--ntp-over-nts-timeserver/2022-09-21#enable-nts-on-the-server",children:"script for Chrony"})," and rebuild the container:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'# final bits for the config file\r\n{\r\n  echo\r\n  echo "driftfile /var/lib/chrony/chrony.drift"\r\n  echo "makestep 0.1 3"\r\n  echo "rtcsync"\r\n  echo\r\n  echo "ntsserverkey /opt/letsencrypt/live/my.server.com/privkey.pem"\r\n  echo "ntsservercert /opt/letsencrypt/live/my.server.com/fullchain.pem"\r\n  echo "ntsprocesses 3"\r\n  echo "maxntsconnections 512"\r\n  echo "ntsdumpdir /var/lib/chrony"\r\n  echo\r\n  echo "allow all"\r\n} >> ${CHRONY_CONF_FILE}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"testing",children:"Testing"}),"\n",(0,t.jsxs)(n.p,{children:["Great so let's ",(0,t.jsx)(n.code,{children:"nomad plan chrony_nts.nomad"})," and run the job. It starts up but my old friend is back:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Secure Timeserver - Deploying a NTS Server using Hashicorp Nomad",src:r(825296).A+"",width:"1122",height:"363"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"2022-09-22T13:18:50Z Could not set credentials : Error while reading file.\r\n2022-09-22T13:18:50Z Could not set credentials : Error while reading file.\r\n2022-09-22T13:18:50Z Could not set credentials : Error while reading file.\n"})}),"\n",(0,t.jsx)(n.p,{children:"The Let's Encrypt certificates cannot be read by Chrony and the NTS connection fails with a bad handshake (but NTP works fine):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"chronyd -Q -t 3 'server my.server.com iburst nts maxsamples 1'\r\n\r\n2022-09-23T06:33:34Z chronyd version 4.2 starting (+CMDMON +NTP +REFCLOCK +RTC +PRIVDROP -SCFILTER +SIGND +ASYNCDNS +NTS +SECHASH +IPV6 -DEBUG)\r\n2022-09-23T06:33:34Z Disabled control of system clock\r\n2022-09-23T06:33:34Z TLS handshake with my.server.ip:4460 (my.server.domain) failed : The TLS connection was non-properly terminated.\n"})}),"\n",(0,t.jsx)(n.h4,{id:"debugging",children:"Debugging"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"run"})," command returns an allocation ID that I can use to further investigate the issue:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'nomad job run /etc/nomad.d/jobs/chrony_nts.nomad\r\n\r\n==> 2022-09-23T09:40:52+02:00: Monitoring evaluation "a7738da8"\r\n    2022-09-23T09:40:52+02:00: Evaluation triggered by job "chrony_nts"\r\n    2022-09-23T09:40:52+02:00: Evaluation within deployment: "da9c6ebc"\r\n    2022-09-23T09:40:52+02:00: Allocation "68db9b76" created: node "a68296fa", group "docker"\r\n    2022-09-23T09:40:52+02:00: Evaluation status changed: "pending" -> "complete"\r\n==> 2022-09-23T09:40:52+02:00: Evaluation "a7738da8" finished with status "complete"\r\n==> 2022-09-23T09:40:52+02:00: Monitoring deployment "da9c6ebc"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Here the allocation ID is ",(0,t.jsx)(n.code,{children:"68db9b76"})," that I can now use with the ",(0,t.jsx)(n.code,{children:"alloc"})," command - and at the end of the return I find the issue for the failing deployment:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'nomad alloc status 68db9b76\r\n\r\n...\r\n\r\nRecent Events:\r\nTime                       Type             Description\r\n2022-09-23T09:40:56+02:00  Alloc Unhealthy  Unhealthy because of failed task\r\n2022-09-23T09:40:52+02:00  Not Restarting   Error was unrecoverable\r\n2022-09-23T09:40:52+02:00  Driver Failure   Failed to create container configuration for image "my.gitlab.com/chrony-nts:latest": volumes are not enabled; cannot mount volume: "letsencrypt"\r\n2022-09-23T09:40:52+02:00  Driver           Downloading image\r\n2022-09-23T09:40:52+02:00  Task Setup       Building Task Directory\r\n2022-09-23T09:40:52+02:00  Received         Task received by client\n'})}),"\n",(0,t.jsx)(n.h4,{id:"solution",children:"Solution"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Define ",(0,t.jsx)(n.code,{children:"volume_mount"})," in the ",(0,t.jsx)(n.code,{children:"task"}),", but outside the ",(0,t.jsx)(n.code,{children:"config"})," directory."]}),"\n",(0,t.jsxs)(n.li,{children:["Do not run container in ",(0,t.jsx)(n.code,{children:"network_mode=host"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Now the volume is mounted correctly, the certificate can be read and NTS is working:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker exec -ti chrony_container-74e8b0ba-f7b3-b0ef-d1a7-90efe309535c /bin/ash\r\n\r\nchronyd -Q -t 3 'server my.server.com iburst nts maxsamples 1'\r\n2022-09-23T08:54:27Z chronyd version 4.2 starting (+CMDMON +NTP +REFCLOCK +RTC +PRIVDROP -SCFILTER +SIGND +ASYNCDNS +NTS +SECHASH +IPV6 -DEBUG)\r\n2022-09-23T08:54:27Z Disabled control of system clock\r\n2022-09-23T08:54:29Z System clock wrong by -0.000708 seconds (ignored)\r\n2022-09-23T08:54:29Z chronyd exiting\n"})}),"\n",(0,t.jsx)(n.p,{children:"I can see an accepted NTS-KE connection and an authenticated NTP packet send:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"chronyc serverstats\r\nNTP packets received       : 1\r\nNTP packets dropped        : 0\r\nCommand packets received   : 12\r\nCommand packets dropped    : 0\r\nClient log records dropped : 0\r\nNTS-KE connections accepted: 36\r\nNTS-KE connections dropped : 0\r\nAuthenticated NTP packets  : 1\r\nInterleaved NTP packets    : 0\r\nNTP timestamps held        : 0\r\nNTP timestamp span         : 0\n"})}),"\n",(0,t.jsx)(n.h2,{id:"final-nomad-job-file",children:"Final Nomad Job File"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'job "chrony_nts" {\r\n    datacenters = ["chronyNTS"]\r\n    type = "service"\r\n\r\n    group "docker" {\r\n        count = 1\r\n\r\n        network {\r\n            port "ntp" {\r\n                static = "123"\r\n            }\r\n            port "nts" {\r\n                static = "4460"\r\n            }\r\n        }\r\n\r\n        update {\r\n            max_parallel = 1\r\n            min_healthy_time = "10s"\r\n            healthy_deadline = "2m"\r\n            progress_deadline = "5m"\r\n            auto_revert = true\r\n            auto_promote = true\r\n            canary = 1\r\n        }\r\n\r\n        service {\r\n            name = "NTS"\r\n            port = "nts"\r\n\r\n            check {\r\n                name = "NTS Service"\r\n                type = "tcp"\r\n                interval = "10s"\r\n                timeout = "1s"\r\n            }\r\n        }\r\n\r\n        volume "letsencrypt" {\r\n            type      = "host"\r\n            read_only = false\r\n            source    = "letsencrypt"\r\n        }\r\n\r\n        task "chrony_container" {\r\n            driver = "docker"\r\n            volume_mount {\r\n                volume      = "letsencrypt"\r\n                destination = "/opt/letsencrypt"\r\n                read_only   = false\r\n           }\r\n\r\n            env {\r\n                NTP_SERVERS = "0.de.pool.ntp.org,time.cloudflare.com,time1.google.com"\r\n                LOG_LEVEL = "1"\r\n            }\r\n\r\n            config {\r\n                image = "my.gitlab.com:12345/chrony-nts:latest"\r\n                ports = ["ntp", "nts"]\r\n                network_mode = "default"\r\n                force_pull = true\r\n\r\n                auth {\r\n                    username = "mygitlabuser"\r\n                    password = "password"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},825296:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/nomad-nts-timeserver_01-b7185fb9e55a34fedb8473a87e291441.png"},948210:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-ec671595d585b88a85b017a7908fb619.jpg"},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(296540);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);