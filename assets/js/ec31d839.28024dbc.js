"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[7337],{968746:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});var o=r(785893),s=r(603905);const a={sidebar_position:8080,slug:"2021-08-03",title:"Hashicorp Nomad Refresher - Jobs",authors:"mpolinowski",tags:["Nomad","Linux"]},i=void 0,t={id:"DevOps/Hashicorp/2021-08-03--hashicorp-nomad-jobs/index",title:"Hashicorp Nomad Refresher - Jobs",description:"Shenzhen, China",source:"@site/docs/DevOps/Hashicorp/2021-08-03--hashicorp-nomad-jobs/index.md",sourceDirName:"DevOps/Hashicorp/2021-08-03--hashicorp-nomad-jobs",slug:"/DevOps/Hashicorp/2021-08-03--hashicorp-nomad-jobs/2021-08-03",permalink:"/docs/DevOps/Hashicorp/2021-08-03--hashicorp-nomad-jobs/2021-08-03",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2021-08-03--hashicorp-nomad-jobs/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Linux",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:8080,frontMatter:{sidebar_position:8080,slug:"2021-08-03",title:"Hashicorp Nomad Refresher - Jobs",authors:"mpolinowski",tags:["Nomad","Linux"]},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Nomad Refresher - Job Specifications",permalink:"/docs/DevOps/Hashicorp/2021-08-04--hashicorp-nomad-job-specifications/2021-08-04"},next:{title:"Hashicorp Nomad Refresher - Security",permalink:"/docs/DevOps/Hashicorp/2021-08-02--hashicorp-nomad-security/2021-08-02"}},c={},l=[{value:"Jobs Specifications",id:"jobs-specifications",level:2},{value:"Running a Job",id:"running-a-job",level:3},{value:"Example: Wordpress",id:"example-wordpress",level:4},{value:"Verify Job Status",id:"verify-job-status",level:3},{value:"Application Logs",id:"application-logs",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.ah)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Shenzhen, China",src:r(512537).Z+"",width:"1500",height:"543"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#jobs-specifications",children:"Jobs Specifications"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#running-a-job",children:"Running a Job"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#example-wordpress",children:"Example: Wordpress"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#verify-job-status",children:"Verify Job Status"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#application-logs",children:"Application Logs"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"jobs-specifications",children:"Jobs Specifications"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"https://www.nomadproject.io/docs/job-specification",children:"Nomad job specification"})," defines the schema for Nomad jobs. Nomad jobs are specified in ",(0,o.jsx)(n.a,{href:"https://www.nomadproject.io/docs/job-specification/hcl2",children:"HCL"}),". The general hierarchy for a job is:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"job\r\n  \\_ group\r\n        \\_ task\n"})}),"\n",(0,o.jsx)(n.p,{children:"Each job file has only a single job, however a job may have multiple groups, and each group may have multiple tasks. Groups contain a set of tasks that are co-located on a machine."}),"\n",(0,o.jsxs)(n.p,{children:["Use the job init command to generate a sample job file (leave out the ",(0,o.jsx)(n.code,{children:"-short"})," flag to have a commented version):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"nomad job init -short redis.nomad\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The file ",(0,o.jsx)(n.code,{children:"redis.nomad"})," will be generated for you:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'job "redis" {\r\n  datacenters = ["instaryun"]\r\n\r\n  group "cache" {\r\n    network {\r\n      port "db" {\r\n        to = 6379\r\n      }\r\n    }\r\n\r\n    task "redis" {\r\n      driver = "docker"\r\n\r\n      config {\r\n        image = "redis:3.2"\r\n\r\n        ports = ["db"]\r\n      }\r\n\r\n      resources {\r\n        cpu    = 500\r\n        memory = 256\r\n      }\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"running-a-job",children:"Running a Job"}),"\n",(0,o.jsx)(n.p,{children:"You can dry-run the job with:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:' nomad job plan redis.nomad\r\n \r\n+ Job: "redis"\r\n+ Task Group: "cache" (1 create)\r\n  + Task: "redis" (forces create)\r\n\r\nScheduler dry-run:\r\n- All tasks successfully allocated.\r\n\r\nJob Modify Index: 0\n'})}),"\n",(0,o.jsx)(n.p,{children:"To submit the job with version verification run:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'nomad job run -check-index 0 redis.nomad\r\n\r\n==> 2021-08-24T11:45:00+08:00: Monitoring evaluation "edead921"\r\n    2021-08-24T11:45:00+08:00: Evaluation triggered by job "redis"\r\n    2021-08-24T11:45:00+08:00: Allocation "204deabc" created: node "3d32b138", group "cache"\r\n==> 2021-08-24T11:45:01+08:00: Monitoring evaluation "edead921"\r\n    2021-08-24T11:45:01+08:00: Evaluation within deployment: "60b35c44"\r\n    2021-08-24T11:45:01+08:00: Evaluation status changed: "pending" -> "complete"\r\n==> 2021-08-24T11:45:01+08:00: Evaluation "edead921" finished with status "complete"\r\n==> 2021-08-24T11:45:01+08:00: Monitoring deployment "60b35c44"\r\n  \u2713 Deployment "60b35c44" successful\r\n\r\n    2021-08-24T11:45:23+08:00\r\n    ID          = 60b35c44\r\n    Job ID      = redis\r\n    Job Version = 0\r\n    Status      = successful\r\n    Description = Deployment completed successfully\r\n\r\n    Deployed\r\n    Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\r\n    cache       1        1       1        0          2021-08-24T11:55:22+08:00\n'})}),"\n",(0,o.jsx)(n.p,{children:"The job preps run successfully. Check your the selected minion:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'docker ps\r\n\r\nCONTAINER ID   IMAGE       COMMAND                  PORTS\r\n7095dc48d9e9   redis:3.2   "docker-entrypoint.s\u2026"   192.168.2.111:29853->6379/tcp, 192.168.2.111:29853->6379/udp\n'})}),"\n",(0,o.jsx)(n.h4,{id:"example-wordpress",children:"Example: Wordpress"}),"\n",(0,o.jsxs)(n.p,{children:["I want to use Nomad to setup Wordpress in Docker on my minion server. I will have to download the ",(0,o.jsx)(n.a,{href:"https://wordpress.org/download/releases/",children:"latest release of Wordpress"})," (with ",(0,o.jsx)(n.a,{href:"https://wordpress.org/wordpress-5.8.tar.gz.md5",children:"MD5 Checksum"})," verification) and wrap this code into an Apache2 Webserver image. And prepare the database connection with a few environment variables:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"nano get_wordpress.nomad\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'job "get-wordpress" {\r\n  datacenters = ["instaryun"]\r\n\r\n\r\n  type = "service"\r\n\r\n  group "webs" {\r\n    count = 1\r\n\r\n    task "frontend" {\r\n      driver = "docker"\r\n\r\n      artifact {\r\n        source = "https://wordpress.org/wordpress-5.8.tar.gz"\r\n        destination = "local/wordpress"\r\n        options {\r\n          checksum = "md5:b46d3968bcf55fb2b6982fc3ef767a01"\r\n        }\r\n      }\r\n\r\n      config {\r\n        image = "httpd"\r\n      }\r\n\r\n      service {\r\n        port = "http"\r\n      }\r\n\r\n      env {\r\n        DB_HOST = "nomad-minion"\r\n        DB_USER = "web"\r\n        DB_PASS = "loremipsum"\r\n      }\r\n    }\r\n\r\n    network {\r\n      port "http" {\r\n        static = 80\r\n      }\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"A dry-run shows me that everything is OK:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'nomad job plan get_wordpress.nomad\r\n\r\n+ Job: "get-wordpress"\r\n+ Task Group: "webs" (1 create)\r\n  + Task: "frontend" (forces create)\r\n\r\nScheduler dry-run:\r\n- All tasks successfully allocated.\r\n\r\nJob Modify Index: 0\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'nomad job run -check-index 0 get_wordpress.nomad\r\n\r\n==> 2021-08-24T13:04:05+08:00: Monitoring evaluation "70277f6e"\r\n    2021-08-24T13:04:05+08:00: Evaluation triggered by job "get-wordpress"\r\n==> 2021-08-24T13:04:06+08:00: Monitoring evaluation "70277f6e"\r\n    2021-08-24T13:04:06+08:00: Evaluation within deployment: "6da0fd11"\r\n    2021-08-24T13:04:06+08:00: Allocation "b470283f" created: node "3d32b138", group "webs"\r\n    2021-08-24T13:04:06+08:00: Evaluation status changed: "pending" -> "complete"\r\n==> 2021-08-24T13:04:06+08:00: Evaluation "70277f6e" finished with status "complete"\r\n==> 2021-08-24T13:04:06+08:00: Monitoring deployment "6da0fd11"\r\n  \u2713 Deployment "6da0fd11" successful\r\n\r\n    2021-08-24T13:05:06+08:00\r\n    ID          = 6da0fd11\r\n    Job ID      = get-wordpress\r\n    Job Version = 0\r\n    Status      = successful\r\n    Description = Deployment completed successfully\r\n\r\n    Deployed\r\n    Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline\r\n    webs        1        1       1        0          2021-08-24T13:15:04+08:00\n'})}),"\n",(0,o.jsx)(n.h3,{id:"verify-job-status",children:"Verify Job Status"}),"\n",(0,o.jsx)(n.p,{children:"Check the Nomad UI - both jobs are running on our minion:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Hashicorp Nomad UI",src:r(349959).Z+"",width:"1145",height:"507"})}),"\n",(0,o.jsx)(n.p,{children:"To get the same information from the Nomad CLI:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"nomad job status\r\nnomad job status get-wordpress\n"})}),"\n",(0,o.jsx)(n.p,{children:"The latter gives you the allocation ID of your job that allows you to exec into the corresponding container from your master server:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"Allocations\r\nID        Node ID   Task Group  Version  Desired  Status   Created     Modified\r\nb470283f  3d32b138  webs        0        run      running  21m37s ago  20m38s ago\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can use it to get into the container and e.g. check if the environment variables we set as part of the Nomad job were actually used in setting up the container:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"nomad alloc exec b470283f /bin/bash\r\n\r\nroot@39b3eb6e2809:/usr/local/apache2# set | grep DB\r\nDB_HOST=nomad-minion\r\nDB_PASS=loremipsum\r\nDB_USER=web\n"})}),"\n",(0,o.jsx)(n.h3,{id:"application-logs",children:"Application Logs"}),"\n",(0,o.jsxs)(n.p,{children:["You can get the ",(0,o.jsx)(n.a,{href:"https://www.nomadproject.io/docs/job-specification/logs",children:"application logs"})," with the following command - in case of the ",(0,o.jsx)(n.code,{children:"http-echo"})," container it will return the webserver logs for us:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'nomad alloc logs b470283f\r\n\r\n2021/08/29 09:48:29 192.168.2.111:8080 192.168.2.112:65011 "GET / HTTP/1.1" 200 55 "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/93.0" 26.3\xb5s\r\n2021/08/29 09:48:29 192.168.2.111:8080 192.168.2.112:65011 "GET /favicon.ico HTTP/1.1" 200 55 "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/93.0" 12.87\xb5s\r\n2021/08/29 09:49:56 192.168.2.111:8080 192.168.2.110:34042 "GET / HTTP/1.1" 200 55 "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36" 27.916\xb5s\r\n2021/08/29 09:49:56 192.168.2.111:8080 192.168.2.110:34042 "GET /favicon.ico HTTP/1.1" 200 55 "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36" 48.44\xb5s\n'})}),"\n",(0,o.jsx)(n.p,{children:"You can also keep the process running to keep an eye on the log while you are working:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"nomad alloc logs -f 389b253b\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Or just check the last ",(0,o.jsx)(n.code,{children:"n"})," lines if you are working with a huge log file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"nomad alloc logs -tail -n 10 389b253b\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.ah)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},603905:(e,n,r)=>{r.d(n,{ah:()=>l});var o=r(667294);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function t(e,n){if(null==e)return{};var r,o,s=function(e,n){if(null==e)return{};var r,o,s={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=o.createContext({}),l=function(e){var n=o.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var r=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,h=t(e,["components","mdxType","originalType","parentName"]),p=l(r),u=s,m=p["".concat(c,".").concat(u)]||p[u]||d[u]||a;return r?o.createElement(m,i(i({ref:n},h),{},{components:r})):o.createElement(m,i({ref:n},h))}));h.displayName="MDXCreateElement"},349959:(e,n,r)=>{r.d(n,{Z:()=>o});const o=r.p+"assets/images/Hashicorp_Nomad_Jobs_01-181c97892b71ddaaf1d12ec97a28a56b.png"},512537:(e,n,r)=>{r.d(n,{Z:()=>o});const o=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-244f739ea94e5828fa053135831db7af.jpg"}}]);