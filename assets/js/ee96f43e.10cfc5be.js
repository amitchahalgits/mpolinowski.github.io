"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[90275],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(a),d=r,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return a?n.createElement(f,i(i({ref:t},p),{},{components:a})):n.createElement(f,i({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},63725:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const o={sidebar_position:4740,slug:"2023-01-26",title:"Python Ray Remote Actors",authors:"mpolinowski",tags:["Python","Machine Learning","Ray"],description:"Use Ray Actors to maintain a state between invocations."},i=void 0,l={unversionedId:"IoT-and-Machine-Learning/AIOps/2023-01-26-python-ray-remote-actors/index",id:"IoT-and-Machine-Learning/AIOps/2023-01-26-python-ray-remote-actors/index",title:"Python Ray Remote Actors",description:"Use Ray Actors to maintain a state between invocations.",source:"@site/docs/IoT-and-Machine-Learning/AIOps/2023-01-26-python-ray-remote-actors/index.md",sourceDirName:"IoT-and-Machine-Learning/AIOps/2023-01-26-python-ray-remote-actors",slug:"/IoT-and-Machine-Learning/AIOps/2023-01-26-python-ray-remote-actors/2023-01-26",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-01-26-python-ray-remote-actors/2023-01-26",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/AIOps/2023-01-26-python-ray-remote-actors/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Ray",permalink:"/docs/tags/ray"}],version:"current",sidebarPosition:4740,frontMatter:{sidebar_position:4740,slug:"2023-01-26",title:"Python Ray Remote Actors",authors:"mpolinowski",tags:["Python","Machine Learning","Ray"],description:"Use Ray Actors to maintain a state between invocations."},sidebar:"tutorialSidebar",previous:{title:"Python Ray Deployments",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-01-29-python-ray-deployments/2023-01-29"},next:{title:"Python Ray Remote Functions",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-01-23-python-ray-remote-functions/2023-01-23"}},c={},s=[{value:"Basic Ray Remote Actor",id:"basic-ray-remote-actor",level:2},{value:"Detached Actors",id:"detached-actors",level:3},{value:"Retry on Failure",id:"retry-on-failure",level:3},{value:"Persistence",id:"persistence",level:2},{value:"Horizontal Scaling",id:"horizontal-scaling",level:2},{value:"Vertical Scaling",id:"vertical-scaling",level:2}],p={toc:s};function m(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Guangzhou, China",src:a(48176).Z,width:"1500",height:"662"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#basic-ray-remote-actor"},"Basic Ray Remote Actor"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#detached-actors"},"Detached Actors")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#retry-on-failure"},"Retry on Failure")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#persistence"},"Persistence")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#horizontal-scaling"},"Horizontal Scaling")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#vertical-scaling"},"Vertical Scaling"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Source: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/scalingpythonml/scaling-python-with-ray"},"Scaling Python with Ray"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/mpolinowski/ray-remote-actors"},"Github Repository"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Remote Actors")," allow to make parallel remote procedure calls just like ",(0,r.kt)("a",{parentName:"p",href:"/docs/IoT-and-Machine-Learning/AIOps/2023-01-23-python-ray-remote-functions/2023-01-23"},"Remote Functions"),". But unlike the latter they enable you to maintain a state between invocations. To ensure state consistency, actors process one request at a time. An actor can:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Store data"),(0,r.kt)("li",{parentName:"ul"},"Receive messages from other actors"),(0,r.kt)("li",{parentName:"ul"},"Pass messages to other actors"),(0,r.kt)("li",{parentName:"ul"},"Create additional child actors")),(0,r.kt)("h2",{id:"basic-ray-remote-actor"},"Basic Ray Remote Actor"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'import ray\n\n# start ray\nray.init()\n\n@ray.remote\nclass Account:\n    def __init__(self, balance: float, minimal_balance: float):\n        # initialize account and balance\n        self.minimal = minimal_balance\n        if balance < minimal_balance:\n            raise Exception("ERROR :: Starting balance is less than minimal balance")\n        self.balance = balance\n\n    def balance(self) -> float:\n        # get current balance (private state)\n        return self.balance\n\n    def deposit(self, amount: float) -> float:\n        # take deposit and update balance state\n        if amount < 0:\n            raise Exception("ERROR :: Cannot deposit negative amount")\n        self.balance = self.balance + amount\n        return self.balance\n\n    def withdraw(self, amount: float) -> float:\n        # release withdraw and update balance state\n        if amount < 0:\n            raise Exception("ERROR :: Cannot withdraw negative amount")\n        balance = self.balance - amount\n        if balance < self.minimal:\n            raise Exception("ERROR :: Withdrawal is not supported by current balance")\n        self.balance = balance\n        return balance\n\n# invoke remote actor instance\naccount_actor = Account(name=\'Account\').remote(balance = 99.,minimal_balance=11.)\n\n# do procedure calls to interact with instance\nprint(f"INFO :: Current Balance: {ray.get(account_actor.balance.remote())}")\nprint(f"INFO :: Balance after Withdraw: {ray.get(account_actor.withdraw.remote(66.))}")\nprint(f"INFO :: Balance after Deposit: {ray.get(account_actor.deposit.remote(33.))}")\nprint(f"INFO :: Balance after Deposit: {ray.get_actor(\'Account\').deposit.remote(33.)}")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python 01_ray-basic-remote-actor.py\n2023-01-26 15:55:13,252 INFO worker.py:1529 -- Started a local Ray instance.\nView the dashboard at 127.0.0.1:8265 \nINFO :: Current Balance: 99.0\nINFO :: Balance after Withdraw: 33.0\nINFO :: Balance after Deposit: 66.0\n")),(0,r.kt)("h3",{id:"detached-actors"},"Detached Actors"),(0,r.kt)("p",null,"You can also run actors in detached mode and kill them manually:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"account_actor = Account.options(name='Account', lifetime='detached')\\\n    .remote(balance = 100.,minimal_balance=20.)\n\nprint(ray.get_actor('Account'))\n\nray.kill(account_actor)\n\nprint(ray.get_actor('Account'))\n")),(0,r.kt)("p",null,"A detached actor can also exited from inside using ",(0,r.kt)("inlineCode",{parentName:"p"},"ray.actor.exit_actor"),"."),(0,r.kt)("h3",{id:"retry-on-failure"},"Retry on Failure"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@ray.remote")," annotation allows you to ",(0,r.kt)("a",{parentName:"p",href:"https://docs.ray.io/en/releases-0.8.7/package-ref.html#ray-remote"},"specify parameters")," that specify what Ray should do when a remote host/process goes down:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max_restarts"),": Specify the maximum number of times that the actor should be restarted when it dies unexpectedly. (default ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),", unlimited ",(0,r.kt)("inlineCode",{parentName:"li"},"-1"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max_task_retries"),": Specifies the number of times to retry an actor\u2019s task if the task fails\nbecause of a system error.  (default ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),", until ",(0,r.kt)("inlineCode",{parentName:"li"},"max_restarts")," is reched ",(0,r.kt)("inlineCode",{parentName:"li"},"-1"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max_retries"),": The same as ",(0,r.kt)("inlineCode",{parentName:"li"},"max_restarts")," but for ",(0,r.kt)("strong",{parentName:"li"},"Remote Functions"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"@ray.remote(max_restarts=5, max_task_retries=-1)\nclass Account:\n    ...\n")),(0,r.kt)("h2",{id:"persistence"},"Persistence"),(0,r.kt)("p",null,"We can implement this with the previous 'Account' actor using the local file system to make sure that our actors state is not lost. Changes that we need to make:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We need to identify the account to be able to retrieve the information if the state was lost."),(0,r.kt)("li",{parentName:"ul"},"We need to define a directory where the state should be saved."),(0,r.kt)("li",{parentName:"ul"},"And an additional function that is called with every state change and writes it to file."),(0,r.kt)("li",{parentName:"ul"},"And another function that can restore the state from file")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"import ray\nfrom os.path import exists\n\nray.init()\n\n@ray.remote\nclass Account:\n    def __init__(self, balance: float, minimal_balance: float, account_key: str, basedir: str = '.'):\n        # locate the file storage location\n        self.basedir = basedir\n        # set an account identification\n        self.key = account_key\n        # if state was not restored create new from props\n        if not self.restorestate():\n            if balance < minimal_balance:\n                raise Exception(\"ERROR :: Starting balance is less then minimal balance\")\n            self.balance = balance\n            self.minimal = minimal_balance\n            # write generated state to file\n            self.storestate()\n\n    def balance(self) -> float:\n        # get current balance (private state)\n        return self.balance\n\n    def deposit(self, amount: float) -> float:\n        # take deposit and update balance state\n        if amount < 0:\n            raise Exception(\"ERROR :: Cannot deposit negative amount\")\n        self.balance = self.balance + amount\n        self.storestate()\n        return self.balance\n\n    def withdraw(self, amount: float) -> float:\n        # release withdraw and update balance state\n        if amount < 0:\n            raise Exception(\"ERROR :: Can not withdraw negative amount\")\n        balance = self.balance - amount\n        if balance < self.minimal:\n            raise Exception(\"ERROR :: Withdraw is not supported by current balance\")\n        self.balance = balance\n        self.storestate()\n        return balance\n\n    def restorestate(self) -> bool:\n        # if stored state for account id exist load it\n        if exists(self.basedir + '/' + self.key):\n            with open(self.basedir + '/' + self.key, \"rb\") as f:\n                bytes = f.read()\n            state = ray.cloudpickle.loads(bytes)\n            self.balance = state['balance']\n            self.minimal = state['minimal']\n            return True\n        else:\n            return False\n\n    def storestate(self):\n        # store state to file\n        bytes = ray.cloudpickle.dumps({'balance' : self.balance, 'minimal' : self.minimal})\n        with open(self.basedir + '/' + self.key, \"wb\") as f:\n            f.write(bytes)\n")),(0,r.kt)("p",null,"We can now invoke an instance of the actor, make changes to it's state, kill the instance and invoke a new one - which should have been able to restore the state generated before:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# invoke an instance of the account worker\naccount_actor = Account.options(name='Account')\\\n    .remote(balance=99.,minimal_balance=11., account_key='secretaccountkey')\n\n# make changes to it's default state\nprint(f\"INFO :: Current balance: {ray.get(account_actor.balance.remote())}\")\nprint(f\"INFO :: Balance after Withdraw: {ray.get(account_actor.withdraw.remote(66.))}\")\nprint(f\"INFO :: Balance after Deposit: {ray.get(account_actor.deposit.remote(33.))}\")\n\n# get actor id\nprint(ray.get_actor('Account'))\n\n# kill the first instance\nray.kill(account_actor)\n\n# and create a new one\naccount_actor = Account.options(name='Account') \\\n    .remote(balance=99.,minimal_balance=11., account_key='secretaccountkey')\n\n# it should have restored the state from before\nprint(f\"INFO :: Current balance {ray.get(account_actor.balance.remote())}\")\n\n# verify that this is a new actor\nprint(ray.get_actor('Account'))\n\n# kill the first instance\nray.kill(account_actor)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python 02_ray-basic-remote-actor_persistence.py\n2023-01-26 19:36:40,104 INFO worker.py:1529 -- Started a local Ray instance.\nView the dashboard at 127.0.0.1:8265 \nINFO :: Current balance: 99.0\nINFO :: Balance after Withdraw: 33.0\nINFO :: Balance after Deposit: 66.0\nActor(Account, f90108cf73fc420607aed2ca01000000)\nINFO :: Current balance 66.0\nActor(Account, 1fcc75b5d96c0c9a9f9b0a1e01000000)\n")),(0,r.kt)("h2",{id:"horizontal-scaling"},"Horizontal Scaling"),(0,r.kt)("p",null,"You can add more processes for horizontal scaling with Ray\u2019s actor pool, provided by the ",(0,r.kt)("inlineCode",{parentName:"p"},"ray.util")," module. The actor pool effectively uses a fixed set of actors as a single entity and manages which actor in the pool gets the next request. But the state of this pool of actors is not merged - pooling only works if the state is created by the constructor and not changed over the lifecycle of each actor."),(0,r.kt)("p",null,"Pooling can be imported from ",(0,r.kt)("inlineCode",{parentName:"p"},"from ray.util import ActorPool")," and be added to our code above by creating the ",(0,r.kt)("inlineCode",{parentName:"p"},"ActorPool")," of 3 identical ",(0,r.kt)("inlineCode",{parentName:"p"},"FilePersistence()")," actors (",(0,r.kt)("strong",{parentName:"p"},"Note")," that the persistence class now alos needs to be a remote actor so that it can be spread out over several processes / hosts):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"pool = ActorPool([FilePersistence.remote(), FilePersistence.remote(), FilePersistence.remote()])\n")),(0,r.kt)("p",null,"The persistence is now handled by our pool and replaces the direct call of ",(0,r.kt)("inlineCode",{parentName:"p"},"FilePersistence()")," inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"Account")," class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"@ray.remote\nclass Account:\n    def __init__(self, balance: float, minimal_balance: float, account_key: str, persistence: ActorPool):\n")),(0,r.kt)("p",null,"And the actor handle has to be pointed to the pool as well:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# invoke an instance of the account worker\naccount_actor = Account.options(name='Account').remote(balance=99.,minimal_balance=11.,\n                                    account_key='secretaccountkey', persistence=pool)\n")),(0,r.kt)("h2",{id:"vertical-scaling"},"Vertical Scaling"),(0,r.kt)("p",null,"By default, Ray assumes that all functions and actors have the same resource requirements. For actors or functions with different resource requirements, you can specify the resources as parameter for the ",(0,r.kt)("inlineCode",{parentName:"p"},"@ray.remote")," decorator. The defaults are one CPU and zero GPUs. The following decorator will request 1 CPU, 4 GPUs and 500 MiB of memory for the remote actor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"@ray.remote(num_cpus=1, num_gpus=4, (memory=500 * 1024 * 1024)\n")))}m.isMDXComponent=!0},48176:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-296769d73822f07b0ac5dc952f56bfa1.jpg"}}]);