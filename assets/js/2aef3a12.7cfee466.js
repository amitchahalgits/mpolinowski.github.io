"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[70041],{242097:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var a=t(785893),s=t(603905);const i={sidebar_position:4800,slug:"2023-01-10",title:"YOLOv7 Training with Custom Data",authors:"mpolinowski",tags:["Python","Machine Learning","YOLO","Torch"],description:"Use your Custom Dataset to train YOLOv7"},o=void 0,r={id:"IoT-and-Machine-Learning/ML/2023-01-10-yolov7_custom_data/index",title:"YOLOv7 Training with Custom Data",description:"Use your Custom Dataset to train YOLOv7",source:"@site/docs/IoT-and-Machine-Learning/ML/2023-01-10-yolov7_custom_data/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2023-01-10-yolov7_custom_data",slug:"/IoT-and-Machine-Learning/ML/2023-01-10-yolov7_custom_data/2023-01-10",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-01-10-yolov7_custom_data/2023-01-10",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2023-01-10-yolov7_custom_data/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"YOLO",permalink:"/docs/tags/yolo"},{label:"Torch",permalink:"/docs/tags/torch"}],version:"current",sidebarPosition:4800,frontMatter:{sidebar_position:4800,slug:"2023-01-10",title:"YOLOv7 Training with Custom Data",authors:"mpolinowski",tags:["Python","Machine Learning","YOLO","Torch"],description:"Use your Custom Dataset to train YOLOv7"},sidebar:"tutorialSidebar",previous:{title:"YOLOv7 Label Conversion",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-01-13-yolov7_data_conversion/2023-01-13"},next:{title:"MiDaS Depth Vision",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-01-08-depth-vision-midas/2023-01-08"}},l={},c=[{value:"Preparation",id:"preparation",level:2},{value:"Downloading the Dataset",id:"downloading-the-dataset",level:3},{value:"Annotations",id:"annotations",level:3},{value:"Training",id:"training",level:2},{value:"Testing",id:"testing",level:2},{value:"Predictions",id:"predictions",level:2},{value:"Images",id:"images",level:3},{value:"Videos",id:"videos",level:3},{value:"YOLOv7 Multi-Resolution Training",id:"yolov7-multi-resolution-training",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.ah)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Guangzhou, China",src:t(499192).Z+"",width:"1500",height:"652"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#preparation",children:"Preparation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#downloading-the-dataset",children:"Downloading the Dataset"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#annotations",children:"Annotations"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#training",children:"Training"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#testing",children:"Testing"})}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#predictions",children:"Predictions"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#images",children:"Images"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#videos",children:"Videos"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#yolov7-multi-resolution-training",children:"YOLOv7 Multi-Resolution Training"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["see also ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-01-05-yolov7/2023-01-05",children:"Getting started with object detection in YOLOv7"})]})}),"\n",(0,a.jsx)(n.h2,{id:"preparation",children:"Preparation"}),"\n",(0,a.jsxs)(n.p,{children:["In the ",(0,a.jsx)(n.a,{href:"/docs/IoT-and-Machine-Learning/ML/2023-01-05-yolov7/2023-01-05",children:"previous step"})," we cloned the YOLOv7 repository and run predictions using testing weights. To train the model we need the ",(0,a.jsx)(n.a,{href:"https://github.com/mpolinowski/yolov7#transfer-learning",children:"training weights"})," that are also available through the repository:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"wget https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7_training.pt\ntar -xf dataset.tar.gz\nrm dataset.tar.gz\n"})}),"\n",(0,a.jsx)(n.h3,{id:"downloading-the-dataset",children:"Downloading the Dataset"}),"\n",(0,a.jsxs)(n.p,{children:["To be able to train YOLOv7 we first need a dataset to train it on. A wide collection of image datasets are available from ",(0,a.jsx)(n.a,{href:"https://storage.googleapis.com/openimages/web/index.html",children:"Open Images Dataset"}),". YOLOv7 takes label data in the text(.txt) file and has the following format:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"<object-class-id> <x> <y> <width> <height>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"annotations",children:"Annotations"}),"\n",(0,a.jsx)(n.p,{children:"I was searching for a dataset that I can use as a template - ready to go with YOLOv7 Annotations and found:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.kaggle.com/datasets/deepakat002/indian-vehicle-number-plate-yolo-annotation",children:"Indian vehicle number plate yolo annotation"})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The set only has one class defined ",(0,a.jsx)(n.code,{children:"number_plate"})," and every image is annotated the YOLO way - defining the class of the object together with a bounding box location, e.g.:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"0 0.338281 0.676389 0.032813 0.028704\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If you are using your own dataset you can use the tool ",(0,a.jsx)(n.strong,{children:"LabelImg"})," to generate those annotations:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install labelImg\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can start the application with ",(0,a.jsx)(n.code,{children:"labelImg"})," and open your image folder. Make sure to toggle the app to generate YOLO annotations, create the class you want to annotate for and draw the bounding box around the object you want YOLO to search for (don't forget to save afterwards):"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"YOLOv7 Training with Custom Data",src:t(518444).Z+"",width:"1224",height:"523"})}),"\n",(0,a.jsxs)(n.p,{children:["Move the image files with their annotations to ",(0,a.jsx)(n.code,{children:"yolov7/custom_data/indian_number_plate/train"})," and split them up into sub-dirs ",(0,a.jsx)(n.code,{children:"images"})," and ",(0,a.jsx)(n.code,{children:"labels"})," and move around 20% of them into ",(0,a.jsx)(n.code,{children:"yolov7/custom_data/indian_number_plate/validation"}),". Exclude a random selection for interference ",(0,a.jsx)(n.code,{children:"yolov7/custom_data/indian_number_plate/test"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Now we need to tell YOLO where to find the data. Create the following file ",(0,a.jsx)(n.code,{children:"coco.yaml"})," inside the ",(0,a.jsx)(n.code,{children:"custom_data/indian_number_plates"})," folder:"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"custom.yaml"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yml",children:"# Custom Dataset\n# train and val data as 1) directory: path/images/, 2) file: path/images.txt, or 3) list: [path1/images/, path2/images/]\ntrain: path/custom_data/train/\nval: path/custom_data/validation/\ntest: path/custom_data/test/\n# number of classes\nnc: 1\n# class names\nnames: [ 'number_plate' ]\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"./yolov7/custom_data/indian_number_plate/\n\u251c\u2500\u2500 coco.yaml\n\u251c\u2500\u2500 test\n\u2502\xa0\xa0 \u251c\u2500\u2500 classes.txt\n\u2502\xa0\xa0 \u251c\u2500\u2500 images\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 frame-1130.jpg\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 frame-2.jpg\n\u2502\xa0\xa0 \u2502\xa0\xa0 ...\n\u2502\xa0\xa0 \u2514\u2500\u2500 labels\n\u2502\xa0\xa0     \u251c\u2500\u2500 frame-1130.txt\n\u2502\xa0\xa0     \u251c\u2500\u2500 frame-2.txt\n\u2502\xa0\xa0     ...\n\u251c\u2500\u2500 train\n\u2502\xa0\xa0 \u251c\u2500\u2500 classes.txt\n\u2502\xa0\xa0 \u251c\u2500\u2500 images\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 frame-680.jpg\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 frame-945.jpg\n\u2502\xa0\xa0 \u2502\xa0\xa0 ...\n\u2502\xa0\xa0 \u2514\u2500\u2500 labels\n\u2502\xa0\xa0     \u251c\u2500\u2500 frame-680.txt\n\u2502\xa0\xa0     \u251c\u2500\u2500 frame-945.txt\n\u2502\xa0\xa0     ...\n\u2514\u2500\u2500 validation\n    \u251c\u2500\u2500 classes.txt\n    \u251c\u2500\u2500 images\n    \u2502\xa0\xa0 \u251c\u2500\u2500 frame-305.jpg\n    \u2502\xa0\xa0 \u251c\u2500\u2500 frame-630.jpg\n    \u2502\xa0\xa0 ...\n    \u2514\u2500\u2500 labels\n        \u251c\u2500\u2500 frame-305.txt\n        \u251c\u2500\u2500 frame-630.txt\n        ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now create a training configuration file by creating a copy of ",(0,a.jsx)(n.code,{children:"yolov7/cfg/training/yolov7.yaml"}),". All we need to change there is the number of classes YOLO should expect - which is only 1:"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"yolov7_custom.yaml"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yml",children:"# parameters\nnc: 1  # number of classes\n"})}),"\n",(0,a.jsx)(n.h2,{id:"training",children:"Training"}),"\n",(0,a.jsxs)(n.p,{children:["We now have to use the ",(0,a.jsx)(n.code,{children:"train.py"})," script and point it to our data with ",(0,a.jsx)(n.code,{children:"custom_data/custom.yaml"})," and downloaded training weights ",(0,a.jsx)(n.code,{children:"yolov7_training.pt"}),". The YOLOv7 repository already provides a file with hyperparameters for custom datasets that we can use ",(0,a.jsx)(n.code,{children:"data/hyp.scratch.custom.yaml"}),". Other parameters are:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--device"}),": Only for GPU support"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--workers"}),": How many parallel processes can your system handle"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--batch-size"}),": How many images should be used per batch (dependent on VRAM)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--img"}),": Image size to train on"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"python train.py --workers 1 --device 0 --batch-size 1 --epochs 100 --img 640 640 --hyp data/hyp.scratch.custom.yaml --data custom_data/indian_number_plate/coco.yaml --name yolov7-custom --weights yolov7_training.pt\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"ERROR"}),": ",(0,a.jsx)(n.code,{children:"torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 200.00 MiB (GPU 0; 5.93 GiB total capacity; 4.25 GiB already allocated; 60.31 MiB free; 4.45 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF"})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["I guess I need a new GPU after all... I had to reduce the batch size to ",(0,a.jsx)(n.code,{children:"--batch-size 1"})," to be able to run the training - now it is working. But the GPU memory only fills up to 2.5Gig. I will try a batch size of 2 next:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Epoch   gpu_mem       box       obj       cls     total    labels  img_size\n99/99     2.54G   0.01324  0.001894         0   0.01513         2       640\n\nClass      Images      Labels           P           R\n  all          31          54        0.95       0.703\n100 epochs completed in 1.213 hours.\n\nOptimizer stripped from runs/train/yolov7-custom6/weights/last.pt, 74.8MB\nOptimizer stripped from runs/train/yolov7-custom6/weights/best.pt, 74.8MB\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"YOLOv7 Training with Custom Data",src:t(935563).Z+"",width:"2400",height:"1200"})}),"\n",(0,a.jsx)(n.p,{children:"The first results look promising - but there is still a lot of room for improvements - time for a larger dataset and more epochs:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"YOLOv7 Training with Custom Data",src:t(881718).Z+"",width:"3000",height:"2250"})}),"\n",(0,a.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,a.jsx)(n.p,{children:"Now we can take an image from the testing dataset and run a prediction based on the best weights that were just generated:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"python test.py --weights runs/train/yolov7-custom6/weights/best.pt \\\n    --task test \\\n    --data custom_data/indian_number_plate/coco.yaml\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Class      Images      Labels           P           R\n  all           3           7       0.999       0.429\nSpeed: 36.0/1.0/37.0 ms inference/NMS/total per 640x640 image at batch-size 32\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"YOLOv7 Training with Custom Data",src:t(278505).Z+"",width:"1997",height:"675"})}),"\n",(0,a.jsx)(n.h2,{id:"predictions",children:"Predictions"}),"\n",(0,a.jsx)(n.h3,{id:"images",children:"Images"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"python detect.py --weights runs/train/yolov7-custom6/weights/best.pt \\\n    --conf 0.5 \\\n    --img-size 640 \\\n    --source custom_data/indian_number_plate/test/images/frame-2.jpg\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Done. (45.7ms) Inference, (0.7ms) NMS\nThe image with the result is saved in: runs/detect/exp3/frame-2.jpg\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"YOLOv7 Training with Custom Data",src:t(357866).Z+"",width:"2557",height:"670"})}),"\n",(0,a.jsx)(n.h3,{id:"videos",children:"Videos"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["Video source Youtube ",(0,a.jsx)(n.a,{href:"https://youtu.be/rLCL-dyyDn0",children:"Making no sense at all #2 | Indian Roads"})]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"python detect.py --weights runs/train/yolov7-custom6/weights/best.pt \\\n    --conf 0.5 \\\n    --img-size 640 \\\n    --source indian_roads.mp4 --no-trace\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"YOLOv7 Training with Custom Data",src:t(708001).Z+"",width:"850",height:"475"})}),"\n",(0,a.jsx)(n.h2,{id:"yolov7-multi-resolution-training",children:"YOLOv7 Multi-Resolution Training"}),"\n",(0,a.jsxs)(n.p,{children:["To get a more robust prediction model we can train YOLOv7 model with multi-resolution images. For this case, we just need to add the ",(0,a.jsx)(n.code,{children:"\u2013multi-scale"})," flag and change the project name."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"python train.py --epochs 100 --workers 4 --device 0 --batch-size 1 \\\n--img 640 640 --data custom_data/indian_number_plate/coco.yaml --weights yolov7_training.pt \\\n--name yolov7_indian_number_plates --hyp data/hyp.scratch.custom.yaml \\\n--multi-scale\n"})}),"\n",(0,a.jsx)(n.p,{children:"This time I tried a batch size of 2 but immediately ran into VRAM issues again. But increasing the amount of workers from 1 to 4 seems to work fine - let's see if this speeds things up:"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"ERROR"}),": ",(0,a.jsx)(n.code,{children:"torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 2.97 GiB (GPU 0; 5.93 GiB total capacity; 1.00 GiB already allocated; 2.97 GiB free; 1.33 GiB reserved in total by PyTorch)"})]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"It uses less VRAM compared to before. But adding more workers did not speed it up (or using multi-res input is much slower - needs testing). Also the accuracy looks a lot worse:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Epoch   gpu_mem       box       obj       cls     total    labels  img_size\n99/99     2.28G    0.0192  0.003187         0   0.02239         5       768\nClass      Images      Labels           P           R\n  all          31          54       0.411       0.259\n100 epochs completed in 1.344 hours.\n\nOptimizer stripped from runs/train/yolov7_indian_number_plates3/weights/last.pt, 74.8MB\nOptimizer stripped from runs/train/yolov7_indian_number_plates3/weights/best.pt, 74.8MB\n"})}),"\n",(0,a.jsx)(n.p,{children:"We can, again, test the model with:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"python test.py --weights runs/train/yolov7_indian_number_plates3/weights/best.pt \\\n    --task test \\\n    --data custom_data/indian_number_plate/coco.yaml\n"})}),"\n",(0,a.jsx)(n.p,{children:"As expected the results are unusable - hmmm:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"YOLOv7 Training with Custom Data",src:t(202695).Z+"",width:"2076",height:"665"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Class      Images      Labels           P           R\n                 all           3           7       0.996\nSpeed: 35.1/1.1/36.2 ms inference/NMS/total per 640x640 image at batch-size 32\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.ah)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},603905:(e,n,t)=>{t.d(n,{ah:()=>c});var a=t(667294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,h=r(e,["components","mdxType","originalType","parentName"]),m=c(t),p=s,g=m["".concat(l,".").concat(p)]||m[p]||d[p]||i;return t?a.createElement(g,o(o({ref:n},h),{},{components:t})):a.createElement(g,o({ref:n},h))}));h.displayName="MDXCreateElement"},518444:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/YOLOv7_Custom_DataSets_01-2d05382814ec06add68c1f6e3ad4676f.png"},357866:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/YOLOv7_Custom_DataSets_02-f2fcead845d8d83f3898da5975733dc1.png"},935563:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/YOLOv7_Custom_DataSets_03-f63e68835fe09a333b8b516f7b9c16a1.png"},881718:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/YOLOv7_Custom_DataSets_04-3f237a921721875ee8b8a2495128a48e.png"},708001:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/YOLOv7_Custom_DataSets_05-b971ecff568a9d68417142ca582a4f54.gif"},278505:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/YOLOv7_Custom_DataSets_06-320d35c90d8b46766993071844fb3c66.png"},202695:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/YOLOv7_Custom_DataSets_07-04bd22cf56815f5c74a8d6ce21f69822.png"},499192:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-ba3b23aa3d5392c02b451d1b2b911721.jpg"}}]);