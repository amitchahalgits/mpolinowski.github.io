"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[77971],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=p(a),c=r,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||o;return a?n.createElement(k,l(l({ref:t},d),{},{components:a})):n.createElement(k,l({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},87403:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const o={sidebar_position:4710,slug:"2023-02-17",title:"Keras for Tensorflow - Convolutional Neural Networks",authors:"mpolinowski",tags:["Python","Machine Learning","Keras"],description:"Convolutional Neural Networks are ideal for Computer Vision tasks."},l=void 0,i={unversionedId:"IoT-and-Machine-Learning/ML/2023-02-17-keras-introduction-cnn/index",id:"IoT-and-Machine-Learning/ML/2023-02-17-keras-introduction-cnn/index",title:"Keras for Tensorflow - Convolutional Neural Networks",description:"Convolutional Neural Networks are ideal for Computer Vision tasks.",source:"@site/docs/IoT-and-Machine-Learning/ML/2023-02-17-keras-introduction-cnn/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2023-02-17-keras-introduction-cnn",slug:"/IoT-and-Machine-Learning/ML/2023-02-17-keras-introduction-cnn/2023-02-17",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-02-17-keras-introduction-cnn/2023-02-17",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2023-02-17-keras-introduction-cnn/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Keras",permalink:"/docs/tags/keras"}],version:"current",sidebarPosition:4710,frontMatter:{sidebar_position:4710,slug:"2023-02-17",title:"Keras for Tensorflow - Convolutional Neural Networks",authors:"mpolinowski",tags:["Python","Machine Learning","Keras"],description:"Convolutional Neural Networks are ideal for Computer Vision tasks."},sidebar:"tutorialSidebar",previous:{title:"Keras for Tensorflow - VGG16 Network Architecture",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-02-18-keras-introduction-vgg16/2023-02-18"},next:{title:"Keras for Tensorflow - Artificial Neural Networks",permalink:"/docs/IoT-and-Machine-Learning/ML/2023-02-16-keras-introduction-ann/2023-02-16"}},s={},p=[{value:"Convolution",id:"convolution",level:2},{value:"Convolutional Layers",id:"convolutional-layers",level:3},{value:"Pooling Layers",id:"pooling-layers",level:3},{value:"CNN Image Classifier",id:"cnn-image-classifier",level:2},{value:"Loading the Dataset",id:"loading-the-dataset",level:3},{value:"Preprocessing the Data",id:"preprocessing-the-data",level:3},{value:"Building the Model",id:"building-the-model",level:3},{value:"Model Training",id:"model-training",level:3},{value:"Validate Training",id:"validate-training",level:3}],d={toc:p};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Guangzhou, China",src:a(23741).Z,width:"2830",height:"1272"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#convolution"},"Convolution"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#convolutional-layers"},"Convolutional Layers")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#pooling-layers"},"Pooling Layers")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#cnn-image-classifier"},"CNN Image Classifier"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#loading-the-dataset"},"Loading the Dataset")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#preprocessing-the-data"},"Preprocessing the Data")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#building-the-model"},"Building the Model")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#model-training"},"Model Training")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#validate-training"},"Validate Training"))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/tf-keras-2023"},"Github Repository")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://keras.io/getting_started/"},"Keras")," is built on top of TensorFlow 2 and provides an API designed for human beings. Keras follows best practices for reducing cognitive load: it offers consistent & simple APIs, it minimizes the number of user actions required for common use cases, and it provides clear & actionable error messages."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"See also:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-02-14-keras-introduction/2023-02-14"},"Keras for Tensorflow - An (Re)Introduction 2023")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-02-16-keras-introduction-ann/2023-02-16"},"Keras for Tensorflow - Artificial Neural Networks")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-02-17-keras-introduction-cnn/2023-02-17"},"Keras for Tensorflow - Convolutional Neural Networks")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-02-18-keras-introduction-vgg16/2023-02-18"},"Keras for Tensorflow - VGG16 Network Architecture")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2023-02-18-keras-introduction-rnn/2023-02-18"},"Keras for Tensorflow - Recurrent Neural Networks"))),(0,r.kt)("h2",{id:"convolution"},"Convolution"),(0,r.kt)("p",null,"Convolutional Neural Networks are ideal for Computer Vision tasks. During the convolution step the image is processed by a filter that can be defined by to parameters ",(0,r.kt)("inlineCode",{parentName:"p"},"pooling")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"stride"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Convolution:")," A function derived from two given functions by integration that expresses the shape of one modified by the other.")),(0,r.kt)("p",null,"Let's take a 4x4 feature matrix and apply a convolutional transformation with ",(0,r.kt)("strong",{parentName:"p"},"max. Pooling")," filter with a ",(0,r.kt)("inlineCode",{parentName:"p"},"2x2")," kernel and a ",(0,r.kt)("strong",{parentName:"p"},"Stride")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"5")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"6")),(0,r.kt)("td",{parentName:"tr",align:null},"7"),(0,r.kt)("td",{parentName:"tr",align:null},"8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"3")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"4"))))),(0,r.kt)("p",null,"The filter will extract ",(0,r.kt)("inlineCode",{parentName:"p"},"2x2")," blocks and pools the features by discarding everything but the maximum. Afterwards the stride of ",(0,r.kt)("inlineCode",{parentName:"p"},"2")," moves the filter over a new section of our feature matrix and the process starts anew. We end up with a ",(0,r.kt)("inlineCode",{parentName:"p"},"2x2")," matrix where only the max values have been extracted from the original image input =>"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"6")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"8"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"3")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"4"))))),(0,r.kt)("p",null,"If we want to keep the input size we can set ",(0,r.kt)("inlineCode",{parentName:"p"},"padding='valid'")," - with this parameter the output matrix would still be of size ",(0,r.kt)("inlineCode",{parentName:"p"},"4x4"),"."),(0,r.kt)("h3",{id:"convolutional-layers"},"Convolutional Layers"),(0,r.kt)("p",null,"Keras offers ",(0,r.kt)("a",{parentName:"p",href:"https://keras.io/api/layers/convolution_layers/"},"Convolutinal Layers")," that we can use to turn our Artificial Neural Network (",(0,r.kt)("strong",{parentName:"p"},"ANN"),") into a Convolutional Neural Network (",(0,r.kt)("strong",{parentName:"p"},"CNN"),"). A ",(0,r.kt)("a",{parentName:"p",href:"https://keras.io/api/layers/convolution_layers/convolution2d/"},"2D convolution layer")," can be used for the spatial convolution over images. This layer creates a convolution kernel that is convolved with the layer input to produce a tensor of outputs."),(0,r.kt)("h3",{id:"pooling-layers"},"Pooling Layers"),(0,r.kt)("p",null,"Keras offer ",(0,r.kt)("a",{parentName:"p",href:"https://keras.io/api/layers/pooling_layers/"},"Pooling Layers"),", e.g. the ",(0,r.kt)("a",{parentName:"p",href:"https://keras.io/api/layers/pooling_layers/max_pooling2d/"},"MaxPooling2D layer")," downsamples the input along its spatial dimensions (height and width) by taking the maximum value over an input window (of size defined by pool_size) for each channel of the input. The window is shifted by strides along each dimension."),(0,r.kt)("p",null,"The pooling layer serves to progressively reduce the spatial size of the representation, to reduce the number of parameters and amount of computation in the network, and hence to also control overfitting."),(0,r.kt)("p",null,"The intuition is that the exact location of a feature is less important than its rough location relative to other features."),(0,r.kt)("p",null,"An example convolutional neural network is the ",(0,r.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1409.1556"},"VGG16 Architecture"),". The number 16 in the name VGG refers to the fact that it is 16 layers deep neural network (",(0,r.kt)("a",{parentName:"p",href:"/docs/IoT-and-Machine-Learning/ML/2023-02-18-keras-introduction-vgg16/2023-02-18"},"VGGnet"),"). Pooling layers keep reducing the x and y dimension of the input image while adding depth to it by the use of filters (",(0,r.kt)("a",{parentName:"p",href:"http://dx.doi.org/10.29322/IJSRP.9.10.2019.p9420"},"Image Source"),"):"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Keras for Tensorflow - Convolutional Neural Networks",src:a(90478).Z,width:"280",height:"798"})),(0,r.kt)("h2",{id:"cnn-image-classifier"},"CNN Image Classifier"),(0,r.kt)("h3",{id:"loading-the-dataset"},"Loading the Dataset"),(0,r.kt)("p",null,"Convolutional Neural Networks are of particular use when working with images. As an example we can use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/zalandoresearch/fashion-mnist"},"MNIST Fashion dataset"),". The dataset can be downloaded with Keras:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"from keras.datasets import fashion_mnist\n\n# using the fashion mnist dataset\n(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()\nprint(x_train.shape)\nprint(x_test.shape)\n")),(0,r.kt)("p",null,"The training set contains 60k and the validation set 10k images with a size of 28x28 pixels:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(60000, 28, 28)\n(10000, 28, 28)\n")),(0,r.kt)("p",null,"Taking a look at an example images shows us a shoe with the label ",(0,r.kt)("inlineCode",{parentName:"p"},"7")," - which corresponds to ",(0,r.kt)("inlineCode",{parentName:"p"},"sneaker"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"print(y_train[666])\nplt.imshow(x_train[666])\nplt.show()\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Keras for Tensorflow - Convolutional Neural Networks",src:a(40472).Z,width:"1087",height:"522"})),(0,r.kt)("h3",{id:"preprocessing-the-data"},"Preprocessing the Data"),(0,r.kt)("p",null,"Start by normalizing the data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# data pre-processing\n## reshape training images\nx_train = x_train.reshape(60000, 28, 28, 1)\nx_test = x_test.reshape(10000, 28, 28, 1)\n\n## normalize training images\nx_train = x_train.astype('float32')/255\nx_test = x_test.astype('float32')/255\n")),(0,r.kt)("p",null,"Then categorize the labels - the MNIST Fashion Datasets, as seen above, comes with 10 labels:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Label"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"T-shirt/top")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Trouser")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Pullover")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"Dress")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"Coat")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},"Sandal")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"6"),(0,r.kt)("td",{parentName:"tr",align:null},"Shirt")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"7"),(0,r.kt)("td",{parentName:"tr",align:null},"Sneaker")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"8"),(0,r.kt)("td",{parentName:"tr",align:null},"Bag")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"9"),(0,r.kt)("td",{parentName:"tr",align:null},"Ankle boot")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# vectorize labels for the 10 categories from 0-9\ny_train = to_categorical(y_train, 10)\ny_test = to_categorical(y_test, 10)\nprint(y_train.shape)\n")),(0,r.kt)("p",null,"Now we have 60k labels of 10 classes: ",(0,r.kt)("inlineCode",{parentName:"p"},"(60000, 10)"),"."),(0,r.kt)("h3",{id:"building-the-model"},"Building the Model"),(0,r.kt)("p",null,"This time the model contains a convolutional and maxpooling layer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# building the model\nmodel = Sequential()\n## convolutional layer + pooling\nmodel.add(Conv2D(32, kernel_size=(3, 3), padding='same', activation='relu', input_shape=(28, 28, 1)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n## randomly drop 25% of neurons to prevent overfitting\nmodel.add(Dropout(0.25))\n## flatten before dense layer\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.25))\n# output layer assigns probability of 10 classes\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'Model: "sequential"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n conv2d (Conv2D)              (None, 28, 28, 32)        320       \n                                                                 \n max_pooling2d (MaxPooling2D) (None, 14, 14, 32)        0         \n                                                                  \n dropout (Dropout)            (None, 14, 14, 32)        0         \n                                                                 \n flatten (Flatten)            (None, 6272)              0         \n                                                                 \n dense (Dense)                (None, 128)               802944    \n                                                                 \n dropout_1 (Dropout)          (None, 128)               0         \n                                                                 \n dense_1 (Dense)              (None, 10)                1290      \n                                                                 \n=================================================================\nTotal params: 804,554\nTrainable params: 804,554\nNon-trainable params: 0\n')),(0,r.kt)("h3",{id:"model-training"},"Model Training"),(0,r.kt)("p",null,"To store the training progress we can use the ",(0,r.kt)("a",{parentName:"p",href:"https://keras.io/api/callbacks/model_checkpoint/"},"ModelCheckpoint")," function that will hold on to the weights of our best training epoch:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"from keras.callbacks import ModelCheckpoint\ncheckpoint_filepath = '/checkpoint/model.weights.best.hdf5'\nmodel_checkpoint_callback = ModelCheckpoint(\n      filepath=checkpoint_filepath,\n      save_weights_only=True,\n      monitor='val_accuracy',\n      mode='max',\n      save_best_only=True)\n")),(0,r.kt)("p",null,"And now we can run the training:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"model.fit(x_train, y_train, batch_size=128, epochs=10, callbacks=[model_checkpoint_callback])\n")),(0,r.kt)("p",null,"And after 10 epochs I end up with an accuracy of 93%:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Epoch 10/10\n469/469 [==============================] - 2s 5ms/step - loss: 0.1826 - accuracy: 0.9312\n")),(0,r.kt)("h3",{id:"validate-training"},"Validate Training"),(0,r.kt)("p",null,"Use the test dataset to validate your fitted models performance"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# validation run\nval_loss, val_score = model.evaluate(x_test, y_test)\nprint(val_loss, val_score)\n")),(0,r.kt)("p",null,"I am getting an accuracy of 91.6%:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"0.2373863011598587 0.9168000221252441\n")),(0,r.kt)("p",null,"And to check out a prediction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# run prediction\npred = model.predict(x_test)\n## show prediction probabilities\npred_max = np.argmax(pred, axis=1)\nprint(pred[666])\nprint(pred_max[666])\n\n## show corresponding image\n## reshaping data 28x28\n## to be able to show the image\nx = x_test[666].reshape(28, 28)\nplt.imshow(x)\nplt.show()\n")),(0,r.kt)("p",null,"The highest probability is for the class with label ",(0,r.kt)("inlineCode",{parentName:"p"},"3")," -> which is a dress:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[1.61573451e-04 6.19598268e-06 1.45051545e-05 9.99719679e-01\n 1.96860651e-06 8.07112066e-09 9.30368915e-05 6.60802641e-07\n 8.06152855e-07 1.40201507e-06]\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Keras for Tensorflow - Convolutional Neural Networks",src:a(54781).Z,width:"1666",height:"463"})))}u.isMDXComponent=!0},90478:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Keras_Introduction_CNN_Model_Training_02-1faa188f8f47c3c83ad138324af21200.png"},40472:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Keras_Introduction_CNN_Model_Training_03-e47855b12bd46c6eeeb1226f406c0094.png"},54781:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Keras_Introduction_CNN_Model_Training_04-cc758b91ffff1709fd43b04f77f543c4.png"},23741:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-f80e63ee872dae25129198058ac93b4e.jpg"}}]);