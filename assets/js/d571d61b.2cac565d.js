"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[12687],{495002:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var s=t(785893),o=t(603905);const r={sidebar_position:9997,slug:"2023-11-26",title:"ROS2 Webots Robot Simulation",authors:"mpolinowski",tags:["Robotics","Simulation","ROS","Webots"],description:"Configure the Webots simulator with ROS2"},i=void 0,a={id:"Automation_and_Robotics/Robotics_Simulation/2023-11-26--ros2-webots/index",title:"ROS2 Webots Robot Simulation",description:"Configure the Webots simulator with ROS2",source:"@site/docs/Automation_and_Robotics/Robotics_Simulation/2023-11-26--ros2-webots/index.md",sourceDirName:"Automation_and_Robotics/Robotics_Simulation/2023-11-26--ros2-webots",slug:"/Automation_and_Robotics/Robotics_Simulation/2023-11-26--ros2-webots/2023-11-26",permalink:"/docs/Automation_and_Robotics/Robotics_Simulation/2023-11-26--ros2-webots/2023-11-26",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Automation_and_Robotics/Robotics_Simulation/2023-11-26--ros2-webots/index.md",tags:[{label:"Robotics",permalink:"/docs/tags/robotics"},{label:"Simulation",permalink:"/docs/tags/simulation"},{label:"ROS",permalink:"/docs/tags/ros"},{label:"Webots",permalink:"/docs/tags/webots"}],version:"current",sidebarPosition:9997,frontMatter:{sidebar_position:9997,slug:"2023-11-26",title:"ROS2 Webots Robot Simulation",authors:"mpolinowski",tags:["Robotics","Simulation","ROS","Webots"],description:"Configure the Webots simulator with ROS2"},sidebar:"tutorialSidebar",previous:{title:"Tello Drone - Getting Started",permalink:"/docs/Automation_and_Robotics/Robotics_Simulation/2023-12-16--tellopy-drone-api/2023-12-16"},next:{title:"ROS2 Gazebo Robot Simulation",permalink:"/docs/Automation_and_Robotics/Robotics_Simulation/2023-11-26--ros2-gazebo-simulation/2023-11-26"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Robot Simulation and Control",id:"robot-simulation-and-control",level:2},{value:"Create the Package Structure",id:"create-the-package-structure",level:3},{value:"Edit the Driver Plugin",id:"edit-the-driver-plugin",level:3},{value:"Declare the Plugin",id:"declare-the-plugin",level:3},{value:"Create the Launch File",id:"create-the-launch-file",level:3},{value:"Add added Files to Plugin Setup",id:"add-added-files-to-plugin-setup",level:3},{value:"Test Run",id:"test-run",level:3},{value:"Integrating Sensors",id:"integrating-sensors",level:2},{value:"Updating the Plugin Declaration",id:"updating-the-plugin-declaration",level:3},{value:"Creating a ROS Sensor Node",id:"creating-a-ros-sensor-node",level:3},{value:"Add the new Node to Plugin Setup",id:"add-the-new-node-to-plugin-setup",level:3},{value:"Test Run",id:"test-run-1",level:3},{value:"Adding Reset Handler",id:"adding-reset-handler",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.ah)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"TST, Hongkong",src:t(965654).Z+"",width:"1500",height:"620"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Excerpt from ",(0,s.jsx)(n.a,{href:"https://docs.ros.org/en/iron/index.html",children:"ROS 2 Documentation (IRON)"}),": The Robot Operating System (ROS) is a set of software libraries and tools for building robot applications. From drivers and state-of-the-art algorithms to powerful developer tools, ROS has the open source tools you need for your next robotics project."]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#installation",children:"Installation"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#robot-simulation-and-control",children:"Robot Simulation and Control"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#create-the-package-structure",children:"Create the Package Structure"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#edit-the-driver-plugin",children:"Edit the Driver Plugin"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#declare-the-plugin",children:"Declare the Plugin"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#create-the-launch-file",children:"Create the Launch File"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#add-added-files-to-plugin-setup",children:"Add added Files to Plugin Setup"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#test-run",children:"Test Run"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#integrating-sensors",children:"Integrating Sensors"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#updating-the-plugin-declaration",children:"Updating the Plugin Declaration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#creating-a-ros-sensor-node",children:"Creating a ROS Sensor Node"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#add-the-new-node-to-plugin-setup",children:"Add the new Node to Plugin Setup"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#test-run-1",children:"Test Run"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#adding-reset-handler",children:"Adding Reset Handler"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(n.p,{children:["Install the ",(0,s.jsx)(n.code,{children:"webots"}),", ",(0,s.jsx)(n.code,{children:"webots_ros2"})," package and run simulation examples on Ubuntu."]}),"\n",(0,s.jsx)(n.p,{children:"Start by importing the `Cyberbotics.asc`` signature file using these commands:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo mkdir -p /etc/apt/keyrings\ncd /etc/apt/keyrings\nsudo wget -q https://cyberbotics.com/Cyberbotics.asc\n"})}),"\n",(0,s.jsx)(n.p,{children:"Adding the Cyberbotics repository:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/Cyberbotics.asc] https://cyberbotics.com/debian binary-amd64/" | sudo tee /etc/apt/sources.list.d/Cyberbotics.list\nsudo apt update\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then proceed to the installation of Webots using:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt install webots\n"})}),"\n",(0,s.jsx)(n.p,{children:"Add the installed version:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'echo "export WEBOTS_HOME=/usr/local/webots" >> ~/.bashrc\nsource ~/.bashrc\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Install ",(0,s.jsx)(n.code,{children:"webots_ros2"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt install ros-iron-webots-ros2\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Use the ROS2 launch command to start demo packages (e.g. ",(0,s.jsx)(n.code,{children:"webots_ros2_universal_robot"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ros2 launch webots_ros2_universal_robot multirobot_launch.py\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"ROS2 Webots Robot Simulation",src:t(923094).Z+"",width:"1840",height:"984"})}),"\n",(0,s.jsx)(n.h2,{id:"robot-simulation-and-control",children:"Robot Simulation and Control"}),"\n",(0,s.jsxs)(n.p,{children:["This tutorial is compatible with version ",(0,s.jsx)(n.code,{children:"2023.1.0"})," of ",(0,s.jsx)(n.code,{children:"webots_ros2"})," and ",(0,s.jsx)(n.code,{children:"Webots"})," ",(0,s.jsx)(n.code,{children:"R2023b"}),", as well as upcoming versions."]}),"\n",(0,s.jsx)(n.h3,{id:"create-the-package-structure",children:"Create the Package Structure"}),"\n",(0,s.jsxs)(n.p,{children:["Create a new package named ",(0,s.jsx)(n.code,{children:"hello_webots"})," from the ",(0,s.jsx)(n.code,{children:"src"})," folder of your ROS2 workspace. Change the current directory of your terminal to ",(0,s.jsx)(n.code,{children:"ros2_ws/src"})," and run:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ~/ros2_ws/src\nros2 pkg create --build-type ament_python --license Apache-2.0 --node-name my_webot_driver hello_webots --dependencies rclpy geometry_msgs webots_ros2_driver\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"--dependencies rclpy geometry_msgs webots_ros2_driver"})," option specifies the packages needed by the ",(0,s.jsx)(n.code,{children:"my_webot_driver.py"})," plugin in the ",(0,s.jsx)(n.code,{children:"package.xml"})," file."]}),"\n",(0,s.jsxs)(n.p,{children:["Let\u2019s add a ",(0,s.jsx)(n.code,{children:"launch"})," and a ",(0,s.jsx)(n.code,{children:"worlds"})," folder inside the ",(0,s.jsx)(n.code,{children:"hello_webots"}),' folder and add a "world":']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir hello_webots/{launch,worlds}\nwget https://docs.ros.org/en/iron/_downloads/5ad123fc6a8f1ea79553d5039728084a/my_world.wbt -P hello_webots/worlds\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"hello_webots/\n\u251c\u2500\u2500 hello_webots\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 my_webot_driver.py\n\u251c\u2500\u2500 launch\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 resource\n\u2502   \u2514\u2500\u2500 hello_webots\n\u251c\u2500\u2500 setup.cfg\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 test\n\u2502   \u251c\u2500\u2500 test_copyright.py\n\u2502   \u251c\u2500\u2500 test_flake8.py\n\u2502   \u2514\u2500\u2500 test_pep257.py\n\u2514\u2500\u2500 worlds\n\u2502   \u2514\u2500\u2500 my_world.wbt\n"})}),"\n",(0,s.jsx)(n.h3,{id:"edit-the-driver-plugin",children:"Edit the Driver Plugin"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"webots_ros2_driver"})," sub-package automatically creates a ROS2 interface for most sensors. We can create custom plugin as a ROS node to access the Webots robot API and create custom topics and services to control your robot."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"The purpose of this tutorial is to show a basic example with a minimum number of dependencies. However, you could avoid the use of this plugin by using another webots_ros2 sub-package named webots_ros2_control, introducing a new dependency. This other sub-package creates an interface with the ros2_control package that facilitates the control of a differential wheeled robot."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Open ",(0,s.jsx)(n.code,{children:"hello_webots/hello_webots/my_webot_driver.py"})," and replace its contents with the following:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"import rclpy\nfrom geometry_msgs.msg import Twist\n\nHALF_DISTANCE_BETWEEN_WHEELS = 0.045\nWHEEL_RADIUS = 0.025\n\nclass MyRobotDriver:\n    def init(self, webots_node, properties):\n        self.__robot = webots_node.robot\n\n        self.__left_motor = self.__robot.getDevice('left wheel motor')\n        self.__right_motor = self.__robot.getDevice('right wheel motor')\n\n        self.__left_motor.setPosition(float('inf'))\n        self.__left_motor.setVelocity(0)\n\n        self.__right_motor.setPosition(float('inf'))\n        self.__right_motor.setVelocity(0)\n\n        self.__target_twist = Twist()\n\n        rclpy.init(args=None)\n        self.__node = rclpy.create_node('my_webot_driver')\n        self.__node.create_subscription(Twist, 'cmd_vel', self.__cmd_vel_callback, 1)\n\n    def __cmd_vel_callback(self, twist):\n        self.__target_twist = twist\n\n    def step(self):\n        rclpy.spin_once(self.__node, timeout_sec=0)\n\n        forward_speed = self.__target_twist.linear.x\n        angular_speed = self.__target_twist.angular.z\n\n        command_motor_left = (forward_speed - angular_speed * HALF_DISTANCE_BETWEEN_WHEELS) / WHEEL_RADIUS\n        command_motor_right = (forward_speed + angular_speed * HALF_DISTANCE_BETWEEN_WHEELS) / WHEEL_RADIUS\n\n        self.__left_motor.setVelocity(command_motor_left)\n        self.__right_motor.setVelocity(command_motor_right)\n"})}),"\n",(0,s.jsx)(n.p,{children:"As you can see, the MyRobotDriver class implements three methods."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The first method, named ",(0,s.jsx)(n.code,{children:"init(self, ...)"}),", is actually the ROS node counterpart of the Python ",(0,s.jsx)(n.code,{children:"__init__(self, ...)"})," constructor."]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The init method always takes two arguments:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The webots_node argument contains a reference on the Webots instance."}),"\n",(0,s.jsxs)(n.li,{children:["The properties argument is a dictionary created from the XML tags given in the URDF files (",(0,s.jsx)(n.code,{children:"my_robot.urdf"})," file see below) and allows you to pass parameters to the controller."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The robot instance from the simulation ",(0,s.jsx)(n.code,{children:"self.__robot"})," can be used to access the Webots robot API. Then, it gets the two motor instances and initializes them with a target position and a target velocity. Finally a ROS node is created and a callback method is registered for a ROS topic named ",(0,s.jsx)(n.code,{children:"/cmd_vel"})," that will handle Twist messages."]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["The second is an implementation of the ",(0,s.jsx)(n.code,{children:"__cmd_vel_callback(self, twist)"})," callback private method that will be called for each Twist message received on the ",(0,s.jsx)(n.code,{children:"/cmd_vel"})," topic and will save it in the ",(0,s.jsx)(n.code,{children:"self.__target_twist"})," member variable."]}),"\n",(0,s.jsxs)(n.li,{children:["Finally, the ",(0,s.jsx)(n.code,{children:"step(self)"})," method is called at every time step of the simulation. The call to ",(0,s.jsx)(n.code,{children:"rclpy.spin_once()"})," is needed to keep the ROS node running smoothly. At each time step, the method will retrieve the desired ",(0,s.jsx)(n.code,{children:"forward_speed"})," and ",(0,s.jsx)(n.code,{children:"angular_speed"})," from ",(0,s.jsx)(n.code,{children:"self.__target_twist"}),". As the motors are controlled with angular velocities, the method will then convert the forward_speed and angular_speed into individual commands for each wheel. This conversion depends on the structure of the robot, more specifically on the radius of the wheel and the distance between them."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"declare-the-plugin",children:"Declare the Plugin"}),"\n",(0,s.jsxs)(n.p,{children:["You now have to create a ",(0,s.jsx)(n.strong,{children:"URDF"})," file to declare the ",(0,s.jsx)(n.code,{children:"MyRobotDriver"})," plugin. This will allow the ",(0,s.jsx)(n.code,{children:"webots_ros2_driver"})," ROS node to launch the plugin and connect it to the target robot."]}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"hello_webots/resource"})," folder create a text file named ",(0,s.jsx)(n.code,{children:"my_robot.urdf"})," with this content:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano hello_webots/resource/my_robot.urdf\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" ?>\n<robot name="My robot">\n    <webots>\n        <plugin type="hello_webots.my_webot_driver.MyRobotDriver" />\n    </webots>\n</robot>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The type attribute specifies the path to the class given by the hierarchical structure of files. ",(0,s.jsx)(n.code,{children:"webots_ros2_driver"})," is responsible for loading the class based on the specified package and modules."]}),"\n",(0,s.jsx)(n.h3,{id:"create-the-launch-file",children:"Create the Launch File"}),"\n",(0,s.jsx)(n.p,{children:"Let\u2019s create the launch file to easily launch the simulation and the ROS controller with a single command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano hello_webots/launch/robot_launch.py\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"import os\nimport launch\nfrom launch import LaunchDescription\nfrom ament_index_python.packages import get_package_share_directory\nfrom webots_ros2_driver.webots_launcher import WebotsLauncher\nfrom webots_ros2_driver.webots_controller import WebotsController\n\n\ndef generate_launch_description():\n    package_dir = get_package_share_directory('hello_webots')\n    robot_description_path = os.path.join(package_dir, 'resource', 'my_robot.urdf')\n\n    webots = WebotsLauncher(\n        world=os.path.join(package_dir, 'worlds', 'my_world.wbt')\n    )\n\n    my_webot_driver = WebotsController(\n        robot_name='my_robot',\n        parameters=[\n            {'robot_description': robot_description_path},\n        ]\n    )\n\n    return LaunchDescription([\n        webots,\n        my_webot_driver,\n        launch.actions.RegisterEventHandler(\n            # shutdown when webots terminates\n            event_handler=launch.event_handlers.OnProcessExit(\n                target_action=webots,\n                on_exit=[launch.actions.EmitEvent(event=launch.events.Shutdown())],\n            )\n        )\n    ])\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"WebotsLauncher"})," object is a custom action that allows you to start a Webots simulation instance. You have to specify in the constructor which world file the simulator will open."]}),"\n",(0,s.jsxs)(n.p,{children:["The robot_name parameter is used to define the name of the robot the driver should connect to. The ",(0,s.jsx)(n.code,{children:"robot_description"})," parameter holds the path to the ",(0,s.jsx)(n.strong,{children:"URDF"})," file which refers to the ",(0,s.jsx)(n.code,{children:"MyRobotDriver"})," plugin. You can see the ",(0,s.jsx)(n.code,{children:"WebotsController"})," node as the interface that connects your controller plugin to the target robot."]}),"\n",(0,s.jsx)(n.h3,{id:"add-added-files-to-plugin-setup",children:"Add added Files to Plugin Setup"}),"\n",(0,s.jsx)(n.p,{children:"Before you can start the launch file, you have to modify the setup.py file to include the extra files you added:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano hello_webots/setup.py\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"from setuptools import find_packages, setup\n\npackage_name = 'hello_webots'\ndata_files = []\ndata_files.append(('share/ament_index/resource_index/packages', ['resource/' + package_name]))\ndata_files.append(('share/' + package_name + '/launch', ['launch/robot_launch.py']))\ndata_files.append(('share/' + package_name + '/worlds', ['worlds/my_world.wbt']))\ndata_files.append(('share/' + package_name + '/resource', ['resource/my_robot.urdf']))\ndata_files.append(('share/' + package_name, ['package.xml']))\n\nsetup(\n    name=package_name,\n    version='0.0.0',\n    packages=find_packages(exclude=['test']),\n    data_files=data_files,\n    install_requires=['setuptools'],\n    zip_safe=True,\n    maintainer='user',\n    maintainer_email='user.name@mail.com',\n    description='TODO: Package description',\n    license='TODO: License declaration',\n    tests_require=['pytest'],\n    entry_points={\n        'console_scripts': [\n            'my_robot_driver = hello_webots.my_robot_driver:main',\n        ],\n    },\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This sets-up the package and adds in the data_files variable the newly added files: ",(0,s.jsx)(n.code,{children:"my_world.wbt"}),", ",(0,s.jsx)(n.code,{children:"my_robot.urdf"})," and ",(0,s.jsx)(n.code,{children:"robot_launch.py"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"test-run",children:"Test Run"}),"\n",(0,s.jsx)(n.p,{children:"From a terminal in your ROS2 workspace run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ~/ros2_ws\ncolcon build\nsource install/local_setup.bash\nros2 launch hello_webots robot_launch.py\n"})}),"\n",(0,s.jsx)(n.p,{children:"This will launch the simulation:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"ROS2 Webots Robot Simulation",src:t(808098).Z+"",width:"1569",height:"854"})}),"\n",(0,s.jsx)(n.p,{children:"Open a second terminal and send a command with:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'ros2 topic pub /cmd_vel geometry_msgs/Twist  "linear: { x: 0.1 }"\n'})}),"\n",(0,s.jsx)(n.p,{children:"At this point, the robot is able to blindly follow your motor commands. But it will eventually bump into the wall as you order it to move forwards."}),"\n",(0,s.jsx)(n.h2,{id:"integrating-sensors",children:"Integrating Sensors"}),"\n",(0,s.jsxs)(n.p,{children:["Implementing a ROS 2 node that avoids obstacles using the robot\u2019s distance sensors with the ",(0,s.jsx)(n.code,{children:"webots_ros2_driver"})," interface."]}),"\n",(0,s.jsx)(n.h3,{id:"updating-the-plugin-declaration",children:"Updating the Plugin Declaration"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"webots_ros2_driver"})," contains plugins to interface most of Webots devices with ROS2 directly. These plugins can be loaded using the ",(0,s.jsx)(n.code,{children:"<device>"})," tag in the URDF file of the robot. The list of all existing interfaces and the corresponding parameters can be found on the ",(0,s.jsx)(n.a,{href:"https://github.com/cyberbotics/webots_ros2/wiki/References-Devices",children:"devices reference page"})," - e.g. currently available sensors devices:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/cyberbotics/webots_ros2/wiki/References-Devices#camera-device",children:"Camera"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/cyberbotics/webots_ros2/wiki/References-Devices#compass-device",children:"Compass"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/cyberbotics/webots_ros2/wiki/References-Devices#distance-sensor-device",children:"DistanceSensor"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/cyberbotics/webots_ros2/wiki/References-Devices#gps-device",children:"GPS"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/cyberbotics/webots_ros2/wiki/References-Devices#lidar-device",children:"Lidar"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/cyberbotics/webots_ros2/wiki/References-Devices#light-sensor-device",children:"LightSensor"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/cyberbotics/webots_ros2/wiki/References-Devices#range-finder-device",children:"RangeFinder"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/cyberbotics/webots_ros2/wiki/References-Devices#receiver-device",children:"Receiver"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/cyberbotics/webots_ros2/wiki/References-Devices#imu-device",children:"IMU"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"my_robot.urdf"})," replace the whole contents with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano hello_webots/resources/my_robot.urdf\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" ?>\n<robot name="My robot">\n    <webots>\n        <device reference="ds0" type="DistanceSensor">\n            <ros>\n                <topicName>/left_sensor</topicName>\n                <alwaysOn>true</alwaysOn>\n            </ros>\n        </device>\n        <device reference="ds1" type="DistanceSensor">\n            <ros>\n                <topicName>/right_sensor</topicName>\n                <alwaysOn>true</alwaysOn>\n            </ros>\n        </device>\n        <plugin type="hello_webots.my_webot_driver.MyRobotDriver" />\n    </webots>\n</robot>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In addition to your custom plugin, the webots_ros2_driver will parse the ",(0,s.jsx)(n.code,{children:"<device>"})," tags referring to the DistanceSensor nodes and use the standard parameters in the ",(0,s.jsx)(n.code,{children:"<ros>"})," tags to enable the sensors and name their topics."]}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-ros-sensor-node",children:"Creating a ROS Sensor Node"}),"\n",(0,s.jsxs)(n.p,{children:["The robot will use a standard ROS node to detect the wall and send motor commands to avoid it. In the ",(0,s.jsx)(n.code,{children:"hello_webots/hello_webots/"})," folder, create a file named `obstacle_avoider.py`` with this code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano hello_webots/hello_webots/obstacle_avoider.py\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"import rclpy\nfrom rclpy.node import Node\nfrom sensor_msgs.msg import Range\nfrom geometry_msgs.msg import Twist\n\n\nMAX_RANGE = 0.15\n\n\nclass ObstacleAvoider(Node):\n    def __init__(self):\n        super().__init__('obstacle_avoider')\n\n        self.__publisher = self.create_publisher(Twist, 'cmd_vel', 1)\n\n        self.create_subscription(Range, 'left_sensor', self.__left_sensor_callback, 1)\n        self.create_subscription(Range, 'right_sensor', self.__right_sensor_callback, 1)\n\n    def __left_sensor_callback(self, message):\n        self.__left_sensor_value = message.range\n\n    def __right_sensor_callback(self, message):\n        self.__right_sensor_value = message.range\n\n        command_message = Twist()\n\n        command_message.linear.x = 0.1\n\n        if self.__left_sensor_value < 0.9 * MAX_RANGE or self.__right_sensor_value < 0.9 * MAX_RANGE:\n            command_message.angular.z = -2.0\n\n        self.__publisher.publish(command_message)\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    avoider = ObstacleAvoider()\n    rclpy.spin(avoider)\n    # Destroy the node explicitly\n    # (optional - otherwise it will be done automatically\n    # when the garbage collector destroys the node object)\n    avoider.destroy_node()\n    rclpy.shutdown()\n\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,s.jsx)(n.p,{children:"This node will create a publisher for the command and subscribe to the sensors topics here:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"self.__publisher = self.create_publisher(Twist, 'cmd_vel', 1)\n\nself.create_subscription(Range, 'left_sensor', self.__left_sensor_callback, 1)\nself.create_subscription(Range, 'right_sensor', self.__right_sensor_callback, 1)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The node sends a message to the ",(0,s.jsx)(n.code,{children:"/cmd_vel"})," topic when a measurement from the right sensor is received. The ",(0,s.jsx)(n.code,{children:"command_message"})," will register at least a forward speed in ",(0,s.jsx)(n.code,{children:"linear.x"})," in order to make the robot move when no obstacle is detected. If any of the two sensors detect an obstacle, ",(0,s.jsx)(n.code,{children:"command_message"})," will also register a rotational speed in ",(0,s.jsx)(n.code,{children:"angular.z"})," in order to make the robot turn right:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"def __right_sensor_callback(self, message):\n    self.__right_sensor_value = message.range\n\n    command_message = Twist()\n\n    command_message.linear.x = 0.1\n\n    if self.__left_sensor_value < 0.9 * MAX_RANGE or self.__right_sensor_value < 0.9 * MAX_RANGE:\n        command_message.angular.z = -2.0\n\n    self.__publisher.publish(command_message)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"add-the-new-node-to-plugin-setup",children:"Add the new Node to Plugin Setup"}),"\n",(0,s.jsxs)(n.p,{children:["Edit ",(0,s.jsx)(n.code,{children:"setup.py"})," and add the new entry point to ",(0,s.jsx)(n.code,{children:"console_scripts"})," with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano hello_webots/setup.py\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"'console_scripts': [\n    'my_robot_driver = hello_webots.my_robot_driver:main',\n    'obstacle_avoider = hello_webots.obstacle_avoider:main'\n],\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This will add an entry point for the ",(0,s.jsx)(n.code,{children:"obstacle_avoider"})," node."]}),"\n",(0,s.jsxs)(n.p,{children:["Go to the file ",(0,s.jsx)(n.code,{children:"robot_launch.py"})," and add the obstacle avoider to ",(0,s.jsx)(n.code,{children:"generate_launch_description()"})," with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano hello_webots/launch/robot_launch.py\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"from rclpy.node import Node\n\n...\n\ndef generate_launch_description():\n    \n    ...\n\n    obstacle_avoider = Node(\n        package='hello_webots',\n        executable='obstacle_avoider',\n    )\n\n    return LaunchDescription([\n        webots,\n        my_robot_driver,\n        obstacle_avoider,\n        launch.actions.RegisterEventHandler(\n            event_handler=launch.event_handlers.OnProcessExit(\n                target_action=webots,\n                on_exit=[launch.actions.EmitEvent(event=launch.events.Shutdown())],\n            )\n        )\n    ])\n"})}),"\n",(0,s.jsx)(n.h3,{id:"test-run-1",children:"Test Run"}),"\n",(0,s.jsx)(n.p,{children:"From a terminal in your ROS2 workspace run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ~/ros2_ws\ncolcon build\nsource install/local_setup.bash\nros2 launch hello_webots robot_launch.py\n"})}),"\n",(0,s.jsx)(n.p,{children:"This will launch the simulation:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"ROS2 Webots Robot Simulation",src:t(233248).Z+"",width:"1569",height:"854"})}),"\n",(0,s.jsx)(n.p,{children:"Your robot should go forward and before hitting the wall it should turn clockwise. You can press Ctrl+F10 in Webots or go to the View menu, Optional Rendering and Show DistanceSensor Rays to display the range of the distance sensors of the robot."}),"\n",(0,s.jsx)(n.h2,{id:"adding-reset-handler",children:"Adding Reset Handler"}),"\n",(0,s.jsx)(n.p,{children:"Extend a robot simulation with a reset handler to restart nodes when the reset button of Webots is pressed."}),"\n",(0,s.jsx)(n.p,{children:"The Webots reset button reverts the world to the initial state and restarts controllers. It is convenient as it quickly resets the simulation, but in the context of ROS 2, robot controllers are not started again making the simulation stop. The reset handler allows you to restart specific nodes or perform additional actions when the reset button in Webots is pressed."}),"\n",(0,s.jsx)(n.p,{children:"On reset, Webots kills all driver nodes. Therefore, to start them again after reset, you should set the `respawn`` property of the driver node in the launch file to True. It will ensure driver nodes are up and running after the reset:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano ~/ros2_ws/src/hello_webots/launch/robot_launch.py\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"def generate_launch_description():\n    robot_driver = WebotsController(\n        robot_name='my_robot',\n        parameters=[\n            {'robot_description': robot_description_path}\n        ],\n\n        # Every time one resets the simulation the controller is automatically respawned\n        respawn=True\n    )\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.ah)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},603905:(e,n,t)=>{t.d(n,{ah:()=>c});var s=t(667294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,s,o=function(e,n){if(null==e)return{};var t,s,o={},r=Object.keys(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=s.createContext({}),c=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},h=s.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,h=a(e,["components","mdxType","originalType","parentName"]),u=c(t),p=o,_=u["".concat(l,".").concat(p)]||u[p]||d[p]||r;return t?s.createElement(_,i(i({ref:n},h),{},{components:t})):s.createElement(_,i({ref:n},h))}));h.displayName="MDXCreateElement"},923094:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/ROS2_Webots_01-f73ff01f788c47cf0979b3848ff6cfa7.webp"},808098:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/ROS2_Webots_02-b4739c707364368438aa36ef8db9de87.webp"},233248:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/ROS2_Webots_03-6445656e56b908117193e77ba7298b26.webp"},965654:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-252551beac0b36b4ba53ccd380897f8e.jpg"}}]);