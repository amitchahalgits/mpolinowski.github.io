"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[81889],{790329:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=n(474848),t=n(28453);const r={sidebar_position:5950,slug:"2023-03-12",title:"Music Player Daemon",authors:"mpolinowski",tags:["LINUX"],description:"Installing the Music Player Daemon on Arch Linux"},a=void 0,o={id:"DevOps/Linux/2023-03-12--installing-music-player-daemon/index",title:"Music Player Daemon",description:"Installing the Music Player Daemon on Arch Linux",source:"@site/docs/DevOps/Linux/2023-03-12--installing-music-player-daemon/index.md",sourceDirName:"DevOps/Linux/2023-03-12--installing-music-player-daemon",slug:"/DevOps/Linux/2023-03-12--installing-music-player-daemon/2023-03-12",permalink:"/docs/DevOps/Linux/2023-03-12--installing-music-player-daemon/2023-03-12",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Linux/2023-03-12--installing-music-player-daemon/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:5950,frontMatter:{sidebar_position:5950,slug:"2023-03-12",title:"Music Player Daemon",authors:"mpolinowski",tags:["LINUX"],description:"Installing the Music Player Daemon on Arch Linux"},sidebar:"tutorialSidebar",previous:{title:"Elgato Streamdeck on Arch Linux",permalink:"/docs/DevOps/Linux/2023-03-29--installing-the-elgato-streamdeck/2023-03-29"},next:{title:"ARM Docker",permalink:"/docs/DevOps/Linux/2023-02-03--installing-docker-raspberry-pi/2023-02-03"}},l={},c=[{value:"Installing the Music Player Daemon",id:"installing-the-music-player-daemon",level:2},{value:"Error messages",id:"error-messages",level:2}];function d(e){const s={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Guangzhou, China",src:n(617935).A+"",width:"1500",height:"622"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#installing-the-music-player-daemon",children:"Installing the Music Player Daemon"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#error-messages",children:"Error messages"})}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"installing-the-music-player-daemon",children:"Installing the Music Player Daemon"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://wiki.archlinux.org/title/Music_Player_Daemon",children:"MPD (music player daemon)"})," is an audio player that has a server-client architecture. It plays audio files, organizes playlists and maintains a music database, all while using very few resources. In order to interface with it, a separate client is needed."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo pacman -S mpd mpc ncmpcpp\n"})}),"\n",(0,i.jsxs)(s.p,{children:["MPD is configured in the file ",(0,i.jsx)(s.a,{href:"https://gist.github.com/mpolinowski/c1b92135523903f4493767d23e8043bf",children:"mpd.conf"}),". These are some of the most commonly used configuration options:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"pid_file"})," - The file where MPD stores its process ID"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"db_file"})," - The music database"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"state_file"})," - MPD's current state is noted here"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"playlist_directory"})," - The directory where playlists are saved into"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"music_directory"})," - The directory that MPD scans for music"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"sticker_file"})," - The sticker database"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"mkdir -p ~/.mpd/playlists\r\ntouch ~/.mpd/{mpd.conf,mpd.db,mpd.log,mpd.pid}\r\ncp /usr/share/doc/mpd/mpdconf.example ~/.mpd/mpd.conf\r\nlvim ~/.mpd/mpd.conf\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Make sure to point the daemon to a music directory the daemon will have access rights to - e.g. ",(0,i.jsx)(s.code,{children:"~/Music"})," if you start the daemon with your local user. I needed to use ",(0,i.jsx)(s.code,{children:"pulse"})," as my audio output - yours might be different:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:'music_directory\t\t"~/Music"\r\n#\r\n# This setting sets the MPD internal playlist directory. The purpose of this\r\n# directory is storage for playlists created by MPD. The server will use\r\n# playlist files not created by the server but only if they are in the MPD\r\n# format. This setting defaults to playlist saving being disabled.\r\n#\r\nplaylist_directory\t\t"~/.mpd/playlists"\r\n#\r\n# This setting sets the location of the MPD database. This file is used to\r\n# load the database at server start up and store the database while the\r\n# server is not up. This setting defaults to disabled which will allow\r\n# MPD to accept files over ipc socket (using file:// protocol) or streaming\r\n# files over an accepted protocol.\r\n#\r\ndb_file\t\t\t"~/.mpd/database"\r\n\r\n# These settings are the locations for the daemon log files for the daemon.\r\n#\r\n# The special value "syslog" makes MPD use the local syslog daemon. This\r\n# setting defaults to logging to syslog.\r\n#\r\n# If you use systemd, do not configure a log_file.  With systemd, MPD\r\n# defaults to the systemd journal, which is fine.\r\n#\r\nlog_file\t\t\t"~/.mpd/mpd.log"\r\n\r\n# This setting sets the location of the file which stores the process ID\r\n# for use of mpd --kill and some init scripts. This setting is disabled by\r\n# default and the pid file will not be stored.\r\n#\r\n# If you use systemd, do not configure a pid_file.\r\n#\r\npid_file\t\t\t"~/.mpd/mpd.pid"\r\n\r\n# This setting sets the location of the file which contains information about\r\n# most variables to get MPD back into the same general shape it was in before\r\n# it was brought down. This setting is disabled by default and the server\r\n# state will be reset on server start up.\r\n#\r\nstate_file\t\t\t"~/.mpd/state"\r\n#\r\n# The location of the sticker database.  This is a database which\r\n# manages dynamic information attached to songs.\r\n#\r\nsticker_file\t\t\t"~/.mpd/sticker.sql"\r\n\r\nuser\t\t\t\t"mylinuxuser"\r\ngroup\t\t\t\t"mylinuxusergroup"\r\nbind_to_address     "127.0.0.1"\r\nport                "6600"\r\ninput {\r\n        plugin "curl"\r\n#       proxy "proxy.isp.com:8080"\r\n#       proxy_user "user"\r\n#       proxy_password "password"\r\n}\r\n\r\naudio_output {\r\n    type                    "fifo"\r\n    name                    "my_fifo"\r\n    path                    "/tmp/mpd.fifo"\r\n    format                  "44100:16:1"\r\n}\r\naudio_output {\r\n    type                    "pulse"\r\n    name                    "ALSA/PulseAudio"\r\n    mixer_type              "software"\r\n}\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Configure the ",(0,i.jsx)(s.code,{children:"ncmpcpp"})," console UI tool for ",(0,i.jsx)(s.code,{children:"mpd"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"mkdir ~/.ncmpcpp\r\ncp /usr/share/doc/ncmpcpp/config ~/.ncmpcpp/\r\nlvim ~/.ncmpcpp/config\n"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"ncmpcpp_directory = ~/.config/ncmpcpp\r\nmpd_host = localhost\r\nmpd_port = 6600\r\nmpd_music_dir = ~/Music\r\nmpd_crossfade_time = 5\r\nvisualizer_data_source = /tmp/mpd.fifo\r\nvisualizer_output_name = Visualizer feed\r\nvisualizer_in_stereo = yes\r\nvisualizer_type = wave_filled\n"})}),"\n",(0,i.jsx)(s.h2,{id:"error-messages",children:"Error messages"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"server_socket: bind to '0.0.0.0:6600' failed (continuing anyway, because binding to '[::]:6600'>\n"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo systemctl disable mpd.service\r\nsudo systemctl status mpd.service\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Run ",(0,i.jsx)(s.code,{children:"mpd"})," as your user:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"systemctl --user enable mpd\r\nsystemctl --user start mpd\r\nsystemctl --user status mpd\r\n# after making changes to your config if needed\r\nsystemctl --user restart mpd\n"})}),"\n",(0,i.jsx)(s.p,{children:"Once you got rid of all the error messages start the console UI:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"ncmpcpp\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Installing the Music Player Daemon on Arch Linux",src:n(599386).A+"",width:"2560",height:"1440"})})]})}function p(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},599386:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/ncmpcpp-e2274c31540bc7e9449366be057fb8a7.png"},617935:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-a6ea9c37592199bec87ef0a289a7fd91.jpg"},28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var i=n(296540);const t={},r=i.createContext(t);function a(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);