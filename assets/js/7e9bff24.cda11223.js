"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[50932],{222354:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>d});var i=s(474848),l=s(28453);const a={sidebar_position:4660,slug:"2023-03-27",title:"Deploying Prediction APIs",authors:"mpolinowski",tags:["Python","Machine Learning","Flask"],description:"Using Flask to deploy your ML Model as a Web Application"},r="Deploying Prediction APIs",t={id:"IoT-and-Machine-Learning/AIOps/2023-03-27-deploying-prediction-apis-with-flask/index",title:"Deploying Prediction APIs",description:"Using Flask to deploy your ML Model as a Web Application",source:"@site/docs/IoT-and-Machine-Learning/AIOps/2023-03-27-deploying-prediction-apis-with-flask/index.md",sourceDirName:"IoT-and-Machine-Learning/AIOps/2023-03-27-deploying-prediction-apis-with-flask",slug:"/IoT-and-Machine-Learning/AIOps/2023-03-27-deploying-prediction-apis-with-flask/2023-03-27",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-03-27-deploying-prediction-apis-with-flask/2023-03-27",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/AIOps/2023-03-27-deploying-prediction-apis-with-flask/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Flask",permalink:"/docs/tags/flask"}],version:"current",sidebarPosition:4660,frontMatter:{sidebar_position:4660,slug:"2023-03-27",title:"Deploying Prediction APIs",authors:"mpolinowski",tags:["Python","Machine Learning","Flask"],description:"Using Flask to deploy your ML Model as a Web Application"},sidebar:"tutorialSidebar",previous:{title:"Serving your SciKit Learn Model as a Prediction API",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-06-17-scikit-learn-model-deployment/2023-06-17"},next:{title:"MLflow 2.1 Introduction",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-02-09-mlflow-introduction/2023-02-09"}},o={},d=[{value:"Building an ML Model for Deployment",id:"building-an-ml-model-for-deployment",level:2},{value:"IRIS Dataset",id:"iris-dataset",level:3},{value:"Building the Model",id:"building-the-model",level:3},{value:"Fitting the Model",id:"fitting-the-model",level:3},{value:"Fit all Data",id:"fit-all-data",level:3},{value:"Save the Trained Model",id:"save-the-trained-model",level:3},{value:"Run Predictions",id:"run-predictions",level:3},{value:"Prediction API",id:"prediction-api",level:2},{value:"Model Serving",id:"model-serving",level:3},{value:"Prediction Frontend",id:"prediction-frontend",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"TST, HongKong",src:s(555424).A+"",width:"1500",height:"512"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#deploying-prediction-apis",children:"Deploying Prediction APIs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#building-an-ml-model-for-deployment",children:"Building an ML Model for Deployment"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#iris-dataset",children:"IRIS Dataset"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#building-the-model",children:"Building the Model"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#fitting-the-model",children:"Fitting the Model"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#fit-all-data",children:"Fit all Data"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#save-the-trained-model",children:"Save the Trained Model"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#run-predictions",children:"Run Predictions"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#prediction-api",children:"Prediction API"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#model-serving",children:"Model Serving"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#prediction-frontend",children:"Prediction Frontend"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/mpolinowski/ml-flask-web-app",children:"Github Repository"})}),"\n",(0,i.jsx)(n.h1,{id:"deploying-prediction-apis",children:"Deploying Prediction APIs"}),"\n",(0,i.jsx)(n.p,{children:"Using Flask to deploy your ML Model as a Web Application."}),"\n",(0,i.jsx)(n.h2,{id:"building-an-ml-model-for-deployment",children:"Building an ML Model for Deployment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import joblib\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelBinarizer, MinMaxScaler\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential, load_model\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'SEED = 42\nEPOCHS = 888\nMODEL_PATH="./model/full_iris_model.h5"\nSCALER_PATH="./model/iris_data_norm.pkl"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"iris-dataset",children:"IRIS Dataset"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"wget https://gist.githubusercontent.com/Thanatoz-1/9e7fdfb8189f0cdf5d73a494e4a6392a/raw/aaecbd14aeaa468cd749528f291aa8a30c2ea09e/iris_dataset.csv"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'iris_dataset = pd.read_csv("./data/iris_dataset.csv")\niris_dataset.head()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# separate features from labels\nX = iris_dataset.drop('target', axis=1)\nX.head()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"y = iris_dataset['target']\ny.unique()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# 1-hot encoding labels\nencoder = LabelBinarizer()\ny = encoder.fit_transform(y)\ny[0]\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# create training / testing datasets\nX_train, X_test, y_train, y_test = train_test_split(\n                                        X, y,\n                                        test_size=0.2,\n                                        random_state=SEED)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# normalize training data\nscaler = MinMaxScaler()\nscaler.fit(X_train)\nX_train_norm = scaler.transform(X_train)\nX_test_norm = scaler.transform(X_test)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"building-the-model",children:"Building the Model"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"iris_model = Sequential([\n    Dense(units=4, activation='relu', input_shape=[4,]),\n    Dense(units=3, activation='softmax')\n])\n\niris_model.compile(optimizer='adam',\n                  loss='categorical_crossentropy',\n                  metrics=['accuracy'])\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# fitting the model\nearly_stop = EarlyStopping(\n    monitor='val_loss',\n    min_delta=0.0001,\n    patience=10,\n    verbose=0,\n    mode='auto',\n    baseline=None,\n    restore_best_weights=True,\n    start_from_epoch=0)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"fitting-the-model",children:"Fitting the Model"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"history_iris_model = iris_model.fit(x=X_train_norm,\n         y=y_train,\n         epochs=EPOCHS,\n         validation_data=(X_test_norm, y_test),\n         callbacks=[early_stop])\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# evaluate the model\niris_model.evaluate(X_test_norm, y_test, verbose=0)\n# [0.334958016872406, 0.8999999761581421]\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# plot the validation accuracy\ndef plot_accuracy_curves(history, title):\n    accuracy = history.history['accuracy']\n    val_accuracy = history.history['val_accuracy']\n    epochs = range(len(history.history['accuracy']))\n\n    # Plot accuracy\n    plt.figure(figsize=(12, 6))\n    plt.plot(epochs, accuracy, label='training_accuracy')\n    plt.plot(epochs, val_accuracy, label='val_accuracy')\n    plt.title(title)\n    plt.xlabel('Epochs')\n    plt.legend();\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'plot_accuracy_curves(history_iris_model, "IRIS Dataset :: Accuracy Curve")\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Deploying Prediction APIs",src:s(65250).A+"",width:"981",height:"547"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# plot the training loss\ndef plot_loss_curves(history, title):\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n    epochs = range(len(history.history['loss']))\n\n    # Plot accuracy\n    plt.figure(figsize=(12, 6))\n    plt.plot(epochs, loss, label='training_loss')\n    plt.plot(epochs, val_loss, label='val_loss')\n    plt.title(title)\n    plt.xlabel('Epochs')\n    plt.legend();\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'plot_loss_curves(history_iris_model, "IRIS Dataset :: Loss Curve")\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Deploying Prediction APIs",src:s(921337).A+"",width:"981",height:"547"})}),"\n",(0,i.jsx)(n.h3,{id:"fit-all-data",children:"Fit all Data"}),"\n",(0,i.jsx)(n.p,{children:"After reaching a approx. 90% accuracy we can now add the testing data to our model training to increase the dataset variety the model was trained on."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"X_norm =scaler.fit_transform(X)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"iris_model_full = Sequential([\n    Dense(units=4, activation='relu', input_shape=[4,]),\n    Dense(units=3, activation='softmax')\n])\n\niris_model_full.compile(optimizer='adam',\n                  loss='categorical_crossentropy',\n                  metrics=['accuracy'])\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"history_iris_model_full = iris_model_full.fit(X_norm, y, epochs=EPOCHS)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# evaluate the model\niris_model_full.evaluate(X_norm, y, verbose=0)\n# [0.1931973546743393, 0.9733333587646484]\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# plot the validation and training loss\ndef plot_training_curves(history, title):\n    accuracy = history.history['accuracy']\n    loss = history.history['loss']\n    epochs = range(len(history.history['loss']))\n\n    # Plot accuracy\n    plt.figure(figsize=(12, 6))\n    plt.plot(epochs, accuracy, label='training_accuracy')\n    plt.plot(epochs, loss, label='training_loss')\n    plt.title(title)\n    plt.xlabel('Epochs')\n    plt.legend();\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# plot accuracy and loss curves\nplt.figure(figsize=(12, 6))\nplot_training_curves(history_iris_model_full, "IRIS Dataset :: Training Curves")\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Deploying Prediction APIs",src:s(915088).A+"",width:"981",height:"547"})}),"\n",(0,i.jsx)(n.h3,{id:"save-the-trained-model",children:"Save the Trained Model"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# save the full model with training weights\niris_model_full.save(MODEL_PATH)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# save data preprocessing\njoblib.dump(scaler, SCALER_PATH)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"run-predictions",children:"Run Predictions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# load the saved model\nloaded_iris_model = load_model(MODEL_PATH)\nloaded_scaler = joblib.load(SCALER_PATH)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# verify predictions are the same\nloaded_iris_model.evaluate(X_norm, y, verbose=0)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"prediction-api",children:"Prediction API"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# simulate JSON API call\nflower_example = {"sepal length (cm)": 5.1,\n                  "sepal width (cm)": 3.5,\n                  "petal length (cm)":1.4,\n                  "petal width (cm)": 0.2}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# API function (return class index with highest probability)\ndef return_prediction(model, scaler, json_request):\n    s_len = json_request["sepal length (cm)"]\n    s_wi = json_request["sepal width (cm)"]\n    p_len = json_request["petal length (cm)"]\n    p_w = json_request["petal width (cm)"]\n    \n    measures =[[s_len, s_wi, p_len, p_w]]\n    measures_norm = scaler.transform(measures)\n    \n    flower_class_probabilities = model.predict(measures_norm)\n    flower_class_index=np.argmax(flower_class_probabilities,axis=1)\n                           \n    return flower_class_index\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"return_prediction(loaded_iris_model, loaded_scaler, flower_example)\n# probabilities array([[9.987895e-01, 7.723020e-04, 4.383073e-04]], dtype=float32)\n# index array([0])\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# API function (return class name)\ndef return_prediction(model, scaler, json_request):\n    s_len = json_request["sepal length (cm)"]\n    s_wi = json_request["sepal width (cm)"]\n    p_len = json_request["petal length (cm)"]\n    p_w = json_request["petal width (cm)"]\n    \n    classes = np.array([\'Iris-setosa\', \'Iris-versicolor\', \'Iris-virginica\'])\n    measures =[[s_len, s_wi, p_len, p_w]]\n    measures_norm = scaler.transform(measures)\n    \n    flower_class_probabilities = model.predict(measures_norm)\n    flower_class_index=np.argmax(flower_class_probabilities,axis=1)\n                       \n    return classes[flower_class_index]\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"return_prediction(loaded_iris_model, loaded_scaler, flower_example)\n# array(['Iris-setosa'], dtype='<U15')\n"})}),"\n",(0,i.jsx)(n.p,{children:"We can combine this into a small Python script that we can deploy together with the exported trained model and scaler:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Run_Predictions.py"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'import joblib\nimport numpy as np\nfrom tensorflow.keras.models import load_model\n\nMODEL_PATH="./model/full_iris_model.h5"\nSCALER_PATH="./model/iris_data_norm.pkl"\n\n# load the saved model\nloaded_iris_model = load_model(MODEL_PATH)\nloaded_scaler = joblib.load(SCALER_PATH)\n\n# API function (return class name)\ndef return_prediction(model, scaler, json_request):\n    s_len = json_request["sepal length (cm)"]\n    s_wi = json_request["sepal width (cm)"]\n    p_len = json_request["petal length (cm)"]\n    p_w = json_request["petal width (cm)"]\n    \n    classes = np.array([\'Iris-setosa\', \'Iris-versicolor\', \'Iris-virginica\'])\n    measures =[[s_len, s_wi, p_len, p_w]]\n    measures_norm = scaler.transform(measures)\n    \n    flower_class_probabilities = model.predict(measures_norm)\n    flower_class_index=np.argmax(flower_class_probabilities,axis=1)\n                       \n    return classes[flower_class_index]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"model-serving",children:"Model Serving"}),"\n",(0,i.jsx)(n.p,{children:"To serve the model we can use Flask as our application web server. For this we need to split up the prediction code slightly:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Flask_Server.py"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"import joblib\nfrom flask import Flask, request, jsonify\nfrom tensorflow.keras.models import load_model\n\nfrom Run_Predictions import return_prediction\nfrom Config import MODEL_PATH, SCALER_PATH\n\n# load the saved model\nloaded_iris_model = load_model(MODEL_PATH)\nloaded_scaler = joblib.load(SCALER_PATH)\n\napp = Flask(__name__)\n\n# optional home route\n@app.route('/')\n\ndef index():\n    return '<h1>IRIS Classifier</h1>'\n\n# expect JSON POST to forward to prediction model\n@app.route('/api/iris', methods=['POST'])\n\ndef iris_class_prediction():\n    content = request.json\n    results = return_prediction(loaded_iris_model, loaded_scaler, content)\n    return jsonify(results[0])\n\nif __name__ == '__main__':\n    app.run()\n"})}),"\n",(0,i.jsx)(n.p,{children:"This file imports the API calling function from:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Run_Predictions.py"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'import numpy as np\n\n# API function (return class name)\ndef return_prediction(model, scaler, json_request):\n    s_len = json_request["sepal length (cm)"]\n    s_wi = json_request["sepal width (cm)"]\n    p_len = json_request["petal length (cm)"]\n    p_w = json_request["petal width (cm)"]\n    \n    classes = np.array([\'Iris-setosa\', \'Iris-versicolor\', \'Iris-virginica\'])\n    measures =[[s_len, s_wi, p_len, p_w]]\n    measures_norm = scaler.transform(measures)\n    \n    flower_class_probabilities = model.predict(measures_norm)\n    flower_class_index=np.argmax(flower_class_probabilities,axis=1)\n                       \n    return classes[flower_class_index]\n'})}),"\n",(0,i.jsx)(n.p,{children:"Use a tool like Postman to test the API:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Deploying Prediction APIs",src:s(510959).A+"",width:"992",height:"580"})}),"\n",(0,i.jsx)(n.p,{children:"Or run a Python script to simulate a request:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"sample_request.py"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'import requests\n\nsample_request = {\n  "sepal length (cm)": 5.1,\n  "sepal width (cm)": 3.5,\n  "petal length (cm)": 1.4,\n  "petal width (cm)": 0.2\n} \n\nresult = requests.post(\'http://127.0.0.1:5000/api/iris\', json=sample_request)\n\nprint(result.status_code, result.text)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Executing this script should return the same result:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'python sample_request.py\n200 "Iris-setosa"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"prediction-frontend",children:"Prediction Frontend"}),"\n",(0,i.jsxs)(n.p,{children:["Start the Flask server from the ",(0,i.jsx)(n.a,{href:"https://github.com/mpolinowski/ml-flask-web-app",children:"Github repository"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python Flask_Server.py\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Deploying Prediction APIs",src:s(988294).A+"",width:"1041",height:"516"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Deploying Prediction APIs",src:s(769501).A+"",width:"1025",height:"254"})})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},65250:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/IRIS_Dataset_Model_Deployment_01-0d8c1af31bf979ecdcfcfcb0a1c18cf3.png"},921337:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/IRIS_Dataset_Model_Deployment_02-0e192f56914e862fa23adf7e0dc6f48d.png"},915088:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/IRIS_Dataset_Model_Deployment_03-8a4159cb4604616740f33ca1efdb5e5b.png"},510959:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/IRIS_Dataset_Model_Deployment_04-240004d5af94497c08ed7c4ad127377e.png"},988294:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/IRIS_Dataset_Model_Deployment_05-959085ab052bc924774a100a40030470.png"},769501:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/IRIS_Dataset_Model_Deployment_06-3383e0264ab81b977f08ea9353f7909e.png"},555424:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-c77de99ac2aaaf4bfc10d6424f4476da.jpg"},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>t});var i=s(296540);const l={},a=i.createContext(l);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);