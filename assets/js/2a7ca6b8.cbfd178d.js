"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[53636],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,f=u["".concat(o,".").concat(m)]||u[m]||c[m]||s;return n?a.createElement(f,i(i({ref:t},l),{},{components:n})):a.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=u;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var d=2;d<s;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},22697:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const s={sidebar_position:8800,slug:"2023-05-18",title:"Python Asserts in Data Science Cheat Sheet",authors:"mpolinowski",tags:["Python","Pandas","Cheating"],description:"Using Assert Statements to ensure Dataset Cleanliness"},i=void 0,p={unversionedId:"Development/Python/2023-05-18-python-asserts/index",id:"Development/Python/2023-05-18-python-asserts/index",title:"Python Asserts in Data Science Cheat Sheet",description:"Using Assert Statements to ensure Dataset Cleanliness",source:"@site/docs/Development/Python/2023-05-18-python-asserts/index.md",sourceDirName:"Development/Python/2023-05-18-python-asserts",slug:"/Development/Python/2023-05-18-python-asserts/2023-05-18",permalink:"/docs/Development/Python/2023-05-18-python-asserts/2023-05-18",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Python/2023-05-18-python-asserts/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Pandas",permalink:"/docs/tags/pandas"},{label:"Cheating",permalink:"/docs/tags/cheating"}],version:"current",sidebarPosition:8800,frontMatter:{sidebar_position:8800,slug:"2023-05-18",title:"Python Asserts in Data Science Cheat Sheet",authors:"mpolinowski",tags:["Python","Pandas","Cheating"],description:"Using Assert Statements to ensure Dataset Cleanliness"},sidebar:"tutorialSidebar",previous:{title:"SciKit-Learn Cheat Sheet",permalink:"/docs/Development/Python/2023-05-20-python-sklearn-cheat-sheet/2023-05-20"},next:{title:"FiveThirtyEight Fandango Dataset",permalink:"/docs/Development/Python/2023-05-17-fandango-ratings-controversy/2023-05-17"}},o={},d=[{value:"Datasets",id:"datasets",level:2},{value:"Introduction to Asserts",id:"introduction-to-asserts",level:2},{value:"Asserts in Python",id:"asserts-in-python",level:3},{value:"Asserts in Pandas",id:"asserts-in-pandas",level:3},{value:"Indices",id:"indices",level:4},{value:"Series",id:"series",level:4},{value:"DataFrames",id:"dataframes",level:4},{value:"Asserts in Numpy",id:"asserts-in-numpy",level:3},{value:"Assert-based Testing",id:"assert-based-testing",level:2},{value:"Quantitative Tests",id:"quantitative-tests",level:3},{value:"Logical Tests",id:"logical-tests",level:3}],l={toc:d};function c(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Sham Sui Po, Hong Kong",src:n(49902).Z,width:"1500",height:"548"})),(0,r.kt)("h1",{id:"python-asserts-cheat-sheet"},"Python Asserts Cheat Sheet"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/python-asserts-cheatsheet"},"Github Repository")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#python-asserts-cheat-sheet"},"Python Asserts Cheat Sheet"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#datasets"},"Datasets")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#introduction-to-asserts"},"Introduction to Asserts"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#asserts-in-python"},"Asserts in Python")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#asserts-in-pandas"},"Asserts in Pandas"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#indices"},"Indices")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#series"},"Series")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#dataframes"},"DataFrames")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#asserts-in-numpy"},"Asserts in Numpy")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#assert-based-testing"},"Assert-based Testing"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#quantitative-tests"},"Quantitative Tests")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#logical-tests"},"Logical Tests"))))))),(0,r.kt)("h2",{id:"datasets"},"Datasets"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Validating and Verifying Data")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page"},"TLC Trip Record Data"))),(0,r.kt)("p",null,"Yellow and green taxi trip records include fields capturing pick-up and drop-off dates/times, pick-up and drop-off locations, trip distances, itemized fares, rate types, payment types, and driver-reported passenger counts. The data used in the attached datasets were collected and provided to the NYC Taxi and Limousine Commission (TLC) by technology providers authorized under the Taxicab & Livery Passenger Enhancement Programs (TPEP/LPEP). The trip data was not created by the TLC, and TLC makes no representations as to the accuracy of these data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"!wget https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2023-01.parquet -P dataset\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import csv\nimport math\nimport numpy as np\nimport numpy.testing as npt\nimport pandas as pd\nimport pandas.testing as pdt\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"yellow_tripdata_df = pd.read_parquet(\n    'dataset/yellow_tripdata_2023-01.parquet'\n)\n\nyellow_tripdata_df.to_csv('dataset/yellow_tripdata_2023-01.csv')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"yellow_tripdata_df = pd.read_csv(\n    'dataset/yellow_tripdata_2023-01.csv',\n    parse_dates=['tpep_pickup_datetime','tpep_dropoff_datetime'],\n    nrows=1000\n)\nyellow_tripdata_df.head(5)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# https://www.kaggle.com/datasets/neomatrix369/nyc-taxi-trip-duration-extended\ntrip_ext_df = pd.read_csv('dataset/nyc_trip_duration_extended.csv')\ntrip_ext_df.head(5)\n")),(0,r.kt)("h2",{id:"introduction-to-asserts"},"Introduction to Asserts"),(0,r.kt)("h3",{id:"asserts-in-python"},"Asserts in Python"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# simple assert\nx = 'five'\nassert x == 5\n# AssertionError\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list = [6,2,3,4,5]\nassert all(list[i] <= list[i+1] for i in range(len(list)-1))\n# AssertionError\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add(a,b):\n    return a + b\n\nassert add(2,3) < 5\nAssertionError\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"trip_ext_df.columns\n\n# Index(['name', 'district', 'neighbourhood', 'latitude', 'longitude',\n#        'geonumber'],\n#       dtype='object')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"with open('dataset/nyc_trip_duration_extended.csv') as f:\n    reader = csv.DictReader(f)\n    \n    expected_columns = ['name', 'district', 'neighbourhood', 'latitude', 'longitude',\n       'geonumber', 'missing_column']\n    \n    assert reader.fieldnames == expected_columns, f\"Expected columns: {expected_columns}, but got {reader.fieldnames}\"\n    \n# AssertionError:\n# Expected columns: ['name', 'district', 'neighbourhood', 'latitude', 'longitude', 'geonumber', 'missing_column'],\n# but got ['name', 'district', 'neighbourhood', 'latitude', 'longitude', 'geonumber']\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"with open('dataset/yellow_tripdata_2023-01.csv') as f:\n    reader = csv.DictReader(f)\n    \n    for row in reader:\n        # check passenger count is positive int\n        assert float(row['passenger_count']) > 0., f\"ERROR :: Invalid Passenger Count: {row['passenger_count']}\"\n        \n# AssertionError: ERROR :: Invalid Passenger Count: 0.0\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# how many trips were without passengers\ntrips_without_passengers = 0\n\nwith open('dataset/yellow_tripdata_2023-01.csv') as f:\n    next(f) # # skip header\n    \n    for line in f:\n        values = line.strip().split(',')\n        trip_id = values[0]\n        passenger_count = values[4]\n        if passenger_count == '0.0':\n            trips_without_passengers += 1\n            \nprint(f'Trips without passengers: {trips_without_passengers}')\n# Trips without passengers: 51164\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"perct_zero_trips = len(zero_trips) * 100 / len(yellow_tripdata_df)\nprint(\"%.2f\" % perct_zero_trips + ' %')\n# 1.67 %\n")),(0,r.kt)("h3",{id:"asserts-in-pandas"},"Asserts in Pandas"),(0,r.kt)("h4",{id:"indices"},"Indices"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"index1 = pd.Index([1,2,3])\nindex2 = pd.Index([1,2,'three'])\n\npdt.assert_index_equal(index1, index2)\n\n# Index classes are different\n# [left]:  Int64Index([1, 2, 3], dtype='int64')\n# [right]: Index([1, 2, 'three'], dtype='object')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"index1 = pd.Index([1,2,3])\nindex2 = pd.Index([3,2,1])\n\npdt.assert_index_equal(index1, index2, check_order=True)\n# Index values are different (66.66667 %)\n# [left]:  Int64Index([1, 2, 3], dtype='int64')\n# [right]: Int64Index([3, 2, 1], dtype='int64')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"index1 = pd.Index([1.0,2.0,3.0])\nindex2 = pd.Index([1.0,2.0,3.1])\n\npdt.assert_index_equal(index1, index2, check_exact=False, atol=0.1)\n\n# Index values are different (33.33333 %)\n# [left]:  Float64Index([1.0, 2.0, 3.0], dtype='float64')\n# [right]: Float64Index([1.0, 2.0, 3.1], dtype='float64')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"index1 = pd.Index(yellow_tripdata_df['tpep_pickup_datetime'].dt.date)\nindex1[:3]\n# Index([2023-01-01, 2023-01-01, 2023-01-01], dtype='object', name='tpep_pickup_datetime')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"index2 = pd.Index(yellow_tripdata_df['tpep_dropoff_datetime'].dt.date)\nindex2[:3]\n# Index([2023-01-01, 2023-01-01, 2023-01-01], dtype='object', name='tpep_dropoff_datetime')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"pdt.assert_index_equal(index1, index2, check_exact=True, check_names=False)\n\n# Index values are different (0.3 %)\n# [left]:  Index([2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01,\n#        2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01,\n#        ...\n#        2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01,\n#        2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01],\n#       dtype='object', name='tpep_pickup_datetime', length=1000)\n# [right]: Index([2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01,\n#        2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01,\n#        ...\n#        2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01,\n#        2023-01-01, 2023-01-01, 2023-01-01, 2023-01-01],\n#       dtype='object', name='tpep_dropoff_datetime', length=1000)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# show difference\nindex_diff = yellow_tripdata_df[\n    index1 != index2\n][\n    ['tpep_pickup_datetime','tpep_dropoff_datetime']\n]\n\nindex_diff.head()\n\n#     tpep_pickup_datetime tpep_dropoff_datetime\n# 383  2023-01-01 00:36:07   2023-01-02 00:17:13\n# 567  2022-12-31 23:59:37   2023-01-01 00:07:28\n# 761  2022-12-31 23:58:27   2023-01-01 00:02:21\n")),(0,r.kt)("h4",{id:"series"},"Series"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"s1 = pd.Series([1,2,3], name='series1')\ns2 = pd.Series([1,2,3], name='series2')\n\npdt.assert_series_equal(s1,s2,check_names=True)\n\n# Attribute \"name\" are different\n# [left]:  series1\n# [right]: series2\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"s1 = pd.Series([1,2,3], name='series1')\ns2 = pd.Series(['1','2','3'], name='series2')\n\npdt.assert_series_equal(s1,s2,check_names=False, check_dtype=False)\n\n# Series values are different (100.0 %)\n# [index]: [0, 1, 2]\n# [left]:  [1, 2, 3]\n# [right]: [1, 2, 3]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"pickup_series = yellow_tripdata_df['tpep_pickup_datetime'].dt.date\npickup_series.head(2)\n\n# 0    2023-01-01\n# 1    2023-01-01\n# Name: tpep_pickup_datetime, dtype: object\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"dropoff_series = yellow_tripdata_df['tpep_dropoff_datetime'].dt.date\npickup_series.head(2)\n\n# 0    2023-01-01\n# 1    2023-01-01\n# Name: tpep_pickup_datetime, dtype: object\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"pdt.assert_series_equal(pickup_series, dropoff_series, check_exact=True, check_names=False)\n\n# AssertionError: Series are different\n# Series values are different (0.3 %)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# drop values that don't fit\nindex_diff = pickup_series.index[pickup_series != dropoff_series]\nyellow_tripdata_df_drop = yellow_tripdata_df.drop(index_diff).reset_index(drop=True)\n# rebuild series\npickup_series = yellow_tripdata_df_drop['tpep_pickup_datetime'].dt.date\ndropoff_series = yellow_tripdata_df_drop['tpep_dropoff_datetime'].dt.date\n# re-check - this times it works\npdt.assert_series_equal(pickup_series, dropoff_series, check_exact=True, check_names=False)\n")),(0,r.kt)("h4",{id:"dataframes"},"DataFrames"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df1 = pd.DataFrame({'A': [1,2,3], 'B': [3,2,1]})\ndf2 = pd.DataFrame({'B': [3,2,1], 'A': [1,2,3]})\n\npdt.assert_frame_equal(df1,df2,check_like=False)\n\n# DataFrame.columns values are different (100.0 %)\n# [left]:  Index(['A', 'B'], dtype='object')\n# [right]: Index(['B', 'A'], dtype='object')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"pickup_df = yellow_tripdata_df.copy()\ndropoff_df = yellow_tripdata_df.copy()\n\npickup_df['date'] = yellow_tripdata_df['tpep_pickup_datetime'].dt.date\ndropoff_df['date'] = yellow_tripdata_df['tpep_dropoff_datetime'].dt.date\n\npdt.assert_frame_equal(\n    pickup_df[['date']],\n    dropoff_df[['date']],\n    check_exact=True,\n    check_names=False\n)\n\n# AssertionError: DataFrame.iloc[:, 0] (column name=\"date\") are different\n# DataFrame.iloc[:, 0] (column name=\"date\") values are different (0.3 %)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# get index of mismatched rows\nindex_diff = pickup_df.index[\n    pickup_df['date'].ne(dropoff_df['date'])\n]\n\nindex_diff\n# Int64Index([383, 567, 761], dtype='int64')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# drop rows at those indices\npickup_df_drop = pickup_df.drop(index_diff)\ndropoff_df_drop = dropoff_df.drop(index_diff)\n\n# verify that assert now works\npdt.assert_frame_equal(\n    pickup_df_drop[['date']],\n    dropoff_df_drop[['date']],\n    check_exact=True,\n    check_names=False\n)\n")),(0,r.kt)("h3",{id:"asserts-in-numpy"},"Asserts in Numpy"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"a = np.array([1,2,3])\nb = np.array([3,2,1])\n\nnpt.assert_array_equal(a,b)\n\n# AssertionError: Arrays are not equal\n# Mismatched elements: 2 / 3 (66.7%)\n# Max absolute difference: 2\n# Max relative difference: 2.\n#  x: array([1, 2, 3])\n#  y: array([3, 2, 1])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"string1 = 'string'\nstring2 = 'STRING'\n\nnpt.assert_string_equal(string1,string2)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"a = np.array([1,2,3])\nb = np.array([0.98,2.02,2.98])\n\nnpt.assert_allclose(a,b,atol=0.01)\n\n# AssertionError: Not equal to tolerance rtol=1e-07, atol=0.01\n# Mismatched elements: 3 / 3 (100%)\n# Max absolute difference: 0.02\n# Max relative difference: 0.02040816\n# x: array([1, 2, 3])\n# y: array([0.98, 2.02, 2.98])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"a = np.array([1,2,3])\nb = np.array([2,3,4])\n\nnpt.assert_array_less(a,b)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"npt.assert_array_less(b,a)\n\n# AssertionError: Arrays are not less-ordered\n# Mismatched elements: 3 / 3 (100%)\n# Max absolute difference: 1\n# Max relative difference: 1.\n#  x: array([2, 3, 4])\n#  y: array([1, 2, 3])\n")),(0,r.kt)("h2",{id:"assert-based-testing"},"Assert-based Testing"),(0,r.kt)("h3",{id:"quantitative-tests"},"Quantitative Tests"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def test_for_missing_data(df):\n    # count all missing values and assert number to be zero\n    assert df.isnull().sum().sum() == 0, 'ERROR :: DataFrame contains missing data!'\n    return True\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"assert test_for_missing_data(trip_ext_df)\n# True\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def test_non_numerical_data_types(df, columns):\n    for col in columns:\n        assert df[col].dtype == 'int64' or df[col].dtype =='float64', f'ERROR :: {col} has a non-numerical dType'\n    return True\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"test_columns = ['neighbourhood','latitude','longitude','geonumber']\nassert test_non_numerical_data_types(trip_ext_df, trip_ext_df[test_columns])\n# AssertionError: ERROR :: neighbourhood has a non-numerical dType\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def test_for_out_of_range(df, columns):\n    for col in columns:\n        assert df[col].dtype == 'int64' or df[col].dtype == 'float64', f'ERROR :: {col} has a non-numerical dType'\n        assert df[col].max() <= math.inf, f'ERROR :: {col} contains infinite values'\n        assert df[col].min() >= -math.inf, f'ERROR :: {col} contains infinite values'\n        assert not np.isnan(df[col]).any(), f'ERROR :: {col} contains NaN values'\n        assert not np.isinf(df[col]).any(), f'ERROR :: {col} contains infinite values'\n    return True\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"test_columns = ['latitude','longitude','geonumber']\nassert test_non_numerical_data_types(trip_ext_df, trip_ext_df[test_columns])\n# True\n")),(0,r.kt)("h3",{id:"logical-tests"},"Logical Tests"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def test_for_logical_errors(df):\n    # all dropoffs AFTER pickups\n    assert all(df['tpep_dropoff_datetime'] > df['tpep_pickup_datetime']), 'ERROR :: Drop-off time before pickup'\n    # no negative trip distances\n    assert (df['trip_distance'] >= 0).all(), 'ERROR :: Negative trip distances'\n    # no negative passenger count\n    assert (df['passenger_count'] >= 0).all(), 'ERROR :: Negative passenger count'\n    \n    return True\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"assert test_for_logical_errors(yellow_tripdata_df)\n# True\n")))}c.isMDXComponent=!0},49902:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-5f44d483789c3ce79f05418f930f5cd2.jpg"}}]);