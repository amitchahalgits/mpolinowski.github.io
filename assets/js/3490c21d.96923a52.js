"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[84466],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},35747:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:4980,slug:"2023-02-13",title:"Gatsby Blog with a MeiLi Search Backend",authors:"mpolinowski",tags:["LINUX","Docker"],description:"Serve your Gatsby.js Blog in a goFiber container and connect a Search Engine."},o=void 0,l={unversionedId:"DevOps/Provisioning/2023-02-13--meili-search-gatsby/index",id:"DevOps/Provisioning/2023-02-13--meili-search-gatsby/index",title:"Gatsby Blog with a MeiLi Search Backend",description:"Serve your Gatsby.js Blog in a goFiber container and connect a Search Engine.",source:"@site/docs/DevOps/Provisioning/2023-02-13--meili-search-gatsby/index.md",sourceDirName:"DevOps/Provisioning/2023-02-13--meili-search-gatsby",slug:"/DevOps/Provisioning/2023-02-13--meili-search-gatsby/2023-02-13",permalink:"/docs/DevOps/Provisioning/2023-02-13--meili-search-gatsby/2023-02-13",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Provisioning/2023-02-13--meili-search-gatsby/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Docker",permalink:"/docs/tags/docker"}],version:"current",sidebarPosition:4980,frontMatter:{sidebar_position:4980,slug:"2023-02-13",title:"Gatsby Blog with a MeiLi Search Backend",authors:"mpolinowski",tags:["LINUX","Docker"],description:"Serve your Gatsby.js Blog in a goFiber container and connect a Search Engine."},sidebar:"tutorialSidebar",previous:{title:"Server Provisioning",permalink:"/docs/category/server-provisioning"},next:{title:"Deploy Mautic with Docker",permalink:"/docs/DevOps/Provisioning/2022-11-16--mautic-docker/2022-11-16"}},s={},p=[{value:"Prepare the goFiber Webserver",id:"prepare-the-gofiber-webserver",level:2},{value:"Building the Go App",id:"building-the-go-app",level:3},{value:"CI Pipeline",id:"ci-pipeline",level:2},{value:"Docker Compose",id:"docker-compose",level:2}],c={toc:p};function d(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Shenzhen, China",src:n(20520).Z,width:"1500",height:"567"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/mpolinowski/meili-hello"},"Github Repository"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#prepare-the-gofiber-webserver"},"Prepare the goFiber Webserver"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#building-the-go-app"},"Building the Go App")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ci-pipeline"},"CI Pipeline")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#docker-compose"},"Docker Compose"))),(0,r.kt)("p",null,"I already looked into how to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/DevOps/Elasticsearch/2023-02-10--meili-rusty-elastic-docker/2023-02-10"},"Deploy a MeiLi Search Engine with Docker")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Development/Javascript/2023-02-12-react-meili-search-starter/2023-02-12"},"Build a Search Interface with React.js")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Development/Javascript/2023-02-13-gatsby-meili-search-starter/2023-02-13"},"Use Gatsby.js to pre-render the React.js Interface"))),(0,r.kt)("p",null,"The next step is to wrap the pre-rendered build inside a Docker container that uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gofiber/fiber"},"goFiber")," to serve the generated static HTML/CSS/JS/JSON code."),(0,r.kt)("h2",{id:"prepare-the-gofiber-webserver"},"Prepare the goFiber Webserver"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/meili-hello/blob/master/03_gastby_frontend/docker/container/app.go"},"code for the webserver")," is fairly simple - very similar to Express.js:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "flag"\n    "log"\n\n    "github.com/gofiber/fiber/v2"\n    "github.com/gofiber/fiber/v2/middleware/logger"\n    "github.com/gofiber/fiber/v2/middleware/recover"\n)\n\nvar (\n    port = flag.String("port", ":8888", "Port to listen on")\n    prod = flag.Bool("prod", false, "Enable prefork in Production")\n)\n\nfunc main() {\n\n    // Create fiber app\n\n    // Development\n    // app := fiber.New(fiber.Config{\n    //  Prefork: *prod, // go run app.go -prod\n    // })\n\n    // Production\n    app := fiber.New(fiber.Config{\n        Prefork: true,\n    })\n\n    // Middleware\n    app.Use(recover.New())\n    app.Use(logger.New())\n\n    // Setup static files\n    app.Static("/", "./data/public")\n\n    // Listen on port 8888\n    log.Fatal(app.Listen(*port)) // go run app.go -port=:8888\n}\n')),(0,r.kt)("p",null,"The webserver expects our static code - generated from our React.js MeiLi search interface and pre-rendered by Gatsby.js - in the ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," folder. It will then serve it on ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," with port ",(0,r.kt)("inlineCode",{parentName:"p"},"8888"),"."),(0,r.kt)("h3",{id:"building-the-go-app"},"Building the Go App"),(0,r.kt)("p",null,"We can now use Docker to build the webserver inside a ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/golang"},"Golang Container")," and then transfer our website code and the build binary into a tiny ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/alpine"},"Alpine Container"),":  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'# Building the binary of the App\nFROM golang:alpine AS build\n\n# Project labels\nLABEL maintainer="m.polinowski@gmail.com"\n\n# `build` can be replaced with your project name\nWORKDIR /go/src/build\n\n# Copy all the Code and stuff to compile everything\nCOPY ./container/* ./\n\n# Downloads all the dependencies in advance (could be left out, but it\'s more clear this way)\nRUN go mod download\n\n# Builds the application as a staticly linked one, to allow it to run on alpine\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o app .\n\n# Moving the binary to the \'final Image\' to make it smaller\nFROM alpine:latest\n\nWORKDIR /app\n\n# Create the `public` dir and copy all the assets into it\nRUN mkdir ./data\nCOPY ./container/data ./data\n\n# `build` can be replaced here as well\nCOPY --from=build /go/src/build/app .\n\n# Exposes port 8888 because our program listens on that port\nEXPOSE 8888\n\n# CMD ["./app"]\nRUN chmod +x ./data/run.sh\nCMD ["ash", "./data/run.sh"]\n')),(0,r.kt)("h2",{id:"ci-pipeline"},"CI Pipeline"),(0,r.kt)("p",null,"Now I would use a Gitlab CI pipeline to do my Gatsby.js build as well as the build described above. But this also works locally with a ",(0,r.kt)("strong",{parentName:"p"},"npm script")," that we can add to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/meili-hello/blob/master/03_gastby_frontend/package.json"},"package.json")," file of our Gatsby.js app:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'"scripts": {\n    "build": "node --max-old-space-size=8192 node_modules/gatsby/dist/bin/gatsby build",\n    "develop": "node --max-old-space-size=8192 node_modules/gatsby/dist/bin/gatsby develop",\n    "start": "npm run develop",\n    "serve": "gatsby serve",\n    "clean": "gatsby clean",\n    "docker": "mv public/* docker/container/data/public && docker build -t my_blog docker/. && mv docker/container/data/public/* public"\n  }\n')),(0,r.kt)("p",null,"So now we can enter the root dir of our Gatsby.js app and execute:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run build\nnpm run docker\n")),(0,r.kt)("p",null,"Now we have both container images ready to be served:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"REPOSITORY             TAG      SIZE\nmy_blog                latest   23.4MB\ngetmeili/meilisearch   latest   258MB\n")),(0,r.kt)("h2",{id:"docker-compose"},"Docker Compose"),(0,r.kt)("p",null,"Now we can write a ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," that brings it all together for us - ",(0,r.kt)("strong",{parentName:"p"},"Note")," that I ran into an issue here. I am building the Gatsby.js page while starting the MeiLi Search container manually (without Compose). I am connecting to the service on ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost"),". If I now use a virtual network for those container I will have to change the connection URL from ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost:7700")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"meilisearch:7700"),". But to keep this simple I just run the container on the ",(0,r.kt)("inlineCode",{parentName:"p"},"host")," network stack here - so nothing needs to be changed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: \'3\'\n\nservices:\n  meilisearch:\n    container_name: meilisearch\n    image: getmeili/meilisearch:latest\n    environment:\n      - MEILI_MASTER_KEY=RhTX1pLPSKSn7KW9yf9u_MNKC0v1YKkmx2Sc6qSwbLQ\n      - MEILI_NO_ANALYTICS=true\n      # - MEILI_ENV=development\n      - MEILI_ENV=production\n    network_mode: "host"\n    # ports:\n    #   - ${MEILI_PORT:-7700}:7700\n    # networks:\n    #   - meilisearch\n    volumes:\n      - /opt/meili_data:/meili_data\n    restart: unless-stopped\n\n  gatsby_frontend:\n    container_name: my_blog\n    image: my_blog:latest\n    network_mode: "host"    \n    # ports:\n    #   - 8888:8888\n    # networks:\n    #   - meilisearch\n    restart: unless-stopped\n\n# networks:\n#   meilisearch:\n#     driver: bridge\n')),(0,r.kt)("p",null,"You can now bring the application up with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up\n")),(0,r.kt)("p",null,"and visit ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8888")," and should see the Gatsby.js frontend being served by your goFiber webserver connecting to your MeiLi Search backend:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Gatsby Blog with a MeiLi Search Backend",src:n(70360).Z,width:"1671",height:"673"})),(0,r.kt)("p",null,"\ud83d\udc4d"))}d.isMDXComponent=!0},70360:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/MeiLi_Search_Gastby_Serve_01-75bce4e67148b813b68f423f0d8e3dd7.png"},20520:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-983e9af3d84f5fb9ebad02646e63767d.jpg"}}]);